scala-js-dom API
================

This is generated automatically on compile via custom Scalafix rule 'GenerateApiReport'.

Flags:
  [J-] = JavaScript type
  [S-] = Scala type
  [-C] = Class
  [-T] = Trait
  [-O] = Object


AbortController[JC] def abort(): Unit
AbortController[JC] val signal: AbortSignal
AbortSignal[JT] def aborted: Boolean
AbortSignal[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AbortSignal[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AbortSignal[JT] def dispatchEvent(evt: Event): Boolean
AbortSignal[JT] var onabort: js.Function0[Any]
AbortSignal[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AbortSignal[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AbstractRange[JC] def collapsed: Boolean
AbstractRange[JC] def endContainer: Node
AbstractRange[JC] def endOffset: Int
AbstractRange[JC] def startContainer: Node
AbstractRange[JC] def startOffset: Int
AbstractWorker[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AbstractWorker[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AbstractWorker[JT] def dispatchEvent(evt: Event): Boolean
AbstractWorker[JT] var onerror: js.Function1[ErrorEvent, _]
AbstractWorker[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AbstractWorker[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AesCbcParams[JT] val iv: BufferSource
AesCbcParams[JT] val name: String
AesCbcParams[SO] def apply(name: String, iv: BufferSource): AesCbcParams  (@deprecated in 2.0.0)
AesCbcParams[SO] val iv = iv0
AesCbcParams[SO] val name = name0
AesCfbParams[JT] val iv: BufferSource
AesCfbParams[JT] val name: String
AesCfbParams[SO] def apply(name: String, iv: BufferSource): AesCfbParams  (@deprecated in 2.0.0)
AesCfbParams[SO] val iv = iv0
AesCfbParams[SO] val name = name0
AesCmacParams[JT] val length: Int
AesCmacParams[JT] val name: String
AesCmacParams[SO] def apply(name: String, length: Int): AesCmacParams  (@deprecated in 2.0.0)
AesCmacParams[SO] val length = length0
AesCmacParams[SO] val name = name0
AesCtrParams[JT] val counter: BufferSource
AesCtrParams[JT] val length: Int
AesCtrParams[JT] val name: String
AesCtrParams[SO] def apply(name: String, counter: BufferSource, length: Short): AesCtrParams  (@deprecated in 2.0.0)
AesCtrParams[SO] val counter = counter0
AesCtrParams[SO] val length = length0.toInt
AesCtrParams[SO] val name = name0
AesDerivedKeyParams[JT] val length: Int
AesDerivedKeyParams[JT] val name: String
AesDerivedKeyParams[SO] def apply(name: String, length: Short): AesDerivedKeyParams  (@deprecated in 2.0.0)
AesDerivedKeyParams[SO] val length = length0.toInt
AesDerivedKeyParams[SO] val name = name0
AesGcmParams[JT] val additionalData: BufferSource
AesGcmParams[JT] val iv: BufferSource
AesGcmParams[JT] val name: String
AesGcmParams[JT] val tagLength: Int
AesGcmParams[SO] val additionalData = additionalData0
AesGcmParams[SO] def apply(name: String, iv: BufferSource, additionalData: BufferSource, tagLength: Short): AesGcmParams  (@deprecated in 2.0.0)
AesGcmParams[SO] val iv = iv0
AesGcmParams[SO] val name = name0
AesGcmParams[SO] val tagLength = tagLength0.toInt
AesKeyAlgorithm[JT] val length: Int
AesKeyAlgorithm[JT] val name: String
AesKeyAlgorithm[SO] def apply(name: String, length: Short): AesKeyAlgorithm  (@deprecated in 2.0.0)
AesKeyAlgorithm[SO] val length = length0.toInt
AesKeyAlgorithm[SO] val name = name0
AesKeyGenParams[JT] val length: Int
AesKeyGenParams[JT] val name: String
AesKeyGenParams[SO] def apply(name: String, length: Short): AesKeyGenParams  (@deprecated in 2.0.0)
AesKeyGenParams[SO] val length = length0.toInt
AesKeyGenParams[SO] val name = name0
Algorithm[JT] val name: String
AnalyserNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AnalyserNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AnalyserNode[JT] var channelCount: Int
AnalyserNode[JT] var channelCountMode: AudioNodeChannelCountMode
AnalyserNode[JT] var channelInterpretation: AudioNodeChannelInterpretation
AnalyserNode[JT] def connect(audioNode: AudioNode): Unit
AnalyserNode[JT] def connect(audioParam: AudioParam): Unit
AnalyserNode[JT] val context: AudioContext
AnalyserNode[JT] def disconnect(output: AudioNode?): Unit
AnalyserNode[JT] def dispatchEvent(evt: Event): Boolean
AnalyserNode[JT] var fftSize: Int
AnalyserNode[JT] val frequencyBinCount: Int
AnalyserNode[JT] def getByteFrequencyData(array: js.typedarray.Uint8Array): Unit
AnalyserNode[JT] def getByteTimeDomainData(array: js.typedarray.Uint8Array): Unit
AnalyserNode[JT] def getFloatFrequencyData(array: js.typedarray.Float32Array): Unit
AnalyserNode[JT] def getFloatTimeDomainData(array: js.typedarray.Float32Array): Unit
AnalyserNode[JT] var maxDecibels: Double
AnalyserNode[JT] var minDecibels: Double
AnalyserNode[JT] val numberOfInputs: Int
AnalyserNode[JT] val numberOfOutputs: Int
AnalyserNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AnalyserNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AnalyserNode[JT] var smoothingTimeConstant: Double
AnimationEvent[JT] def animationName: String
AnimationEvent[JT] def bubbles: Boolean
AnimationEvent[JT] def cancelBubble: Boolean
AnimationEvent[JT] def cancelable: Boolean
AnimationEvent[JT] def composed: Boolean
AnimationEvent[JT] def currentTarget: EventTarget
AnimationEvent[JT] def defaultPrevented: Boolean
AnimationEvent[JT] def elapsedTime: Double
AnimationEvent[JT] def eventPhase: Int
AnimationEvent[JT] def isTrusted: Boolean
AnimationEvent[JT] def preventDefault(): Unit
AnimationEvent[JT] def stopImmediatePropagation(): Unit
AnimationEvent[JT] def stopPropagation(): Unit
AnimationEvent[JT] def target: EventTarget
AnimationEvent[JT] def timeStamp: Double
AnimationEvent[JT] def `type`: String
AppendMode[JT]
AppendMode[SO] val segments: AppendMode
AppendMode[SO] val sequence: AppendMode
ApplicationCache[JO] val CHECKING: Int
ApplicationCache[JO] val DOWNLOADING: Int
ApplicationCache[JO] val IDLE: Int
ApplicationCache[JO] val OBSOLETE: Int
ApplicationCache[JO] val UNCACHED: Int
ApplicationCache[JO] val UPDATEREADY: Int
ApplicationCache[JT] def abort(): Unit
ApplicationCache[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ApplicationCache[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ApplicationCache[JT] def dispatchEvent(evt: Event): Boolean
ApplicationCache[JT] var oncached: js.Function1[Event, _]
ApplicationCache[JT] var onchecking: js.Function1[Event, _]
ApplicationCache[JT] var ondownloading: js.Function1[Event, _]
ApplicationCache[JT] var onerror: js.Function1[ErrorEvent, _]
ApplicationCache[JT] var onnoupdate: js.Function1[Event, _]
ApplicationCache[JT] var onobsolete: js.Function1[Event, _]
ApplicationCache[JT] var onprogress: js.Function1[ProgressEvent, _]
ApplicationCache[JT] var onupdateready: js.Function1[Event, _]
ApplicationCache[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ApplicationCache[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ApplicationCache[JT] def status: Int
ApplicationCache[JT] def swapCache(): Unit
ApplicationCache[JT] def update(): Unit
Attr[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Attr[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Attr[JC] def appendChild(newChild: Node): Node
Attr[JC] def baseURI: String
Attr[JC] def childNodes: NodeList[Node]
Attr[JC] def cloneNode(deep: Boolean?): Node
Attr[JC] def compareDocumentPosition(other: Node): Int
Attr[JC] def contains(otherNode: Node): Boolean
Attr[JC] def dispatchEvent(evt: Event): Boolean
Attr[JC] def firstChild: Node
Attr[JC] def hasChildNodes(): Boolean
Attr[JC] var innerText: String
Attr[JC] def insertBefore(newChild: Node, refChild: Node): Node
Attr[JC] def isConnected: Boolean
Attr[JC] def isDefaultNamespace(namespaceURI: String): Boolean
Attr[JC] def isEqualNode(arg: Node): Boolean
Attr[JC] def isSameNode(other: Node): Boolean
Attr[JC] def isSupported(feature: String, version: String): Boolean
Attr[JC] def lastChild: Node
Attr[JC] def localName: String
Attr[JC] def lookupNamespaceURI(prefix: String): String
Attr[JC] def lookupPrefix(namespaceURI: String): String
Attr[JC] def name: String
Attr[JC] def namespaceURI: String
Attr[JC] def nextSibling: Node
Attr[JC] def nodeName: String
Attr[JC] def nodeType: Int
Attr[JC] var nodeValue: String
Attr[JC] def normalize(): Unit
Attr[JC] def ownerDocument: Document
Attr[JC] def ownerElement: Element
Attr[JC] def parentNode: Node
Attr[JC] def prefix: String
Attr[JC] def previousSibling: Node
Attr[JC] def removeChild(oldChild: Node): Node
Attr[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Attr[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Attr[JC] def replaceChild(newChild: Node, oldChild: Node): Node
Attr[JC] def specified: Boolean
Attr[JC] var textContent: String
Attr[JC] var value: String
Audio[JC] var accessKey: String
Audio[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Audio[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Audio[JC] def after(nodes: Node | String*): Unit
Audio[JC] def append(nodes: Node | String*): Unit
Audio[JC] def appendChild(newChild: Node): Node
Audio[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
Audio[JC] def attributes: NamedNodeMap
Audio[JC] def audioTracks: AudioTrackList
Audio[JC] var autoplay: Boolean
Audio[JC] def baseURI: String
Audio[JC] def before(nodes: Node | String*): Unit
Audio[JC] def blur(): Unit
Audio[JC] def buffered: TimeRanges
Audio[JC] def canPlayType(`type`: String): String
Audio[JC] def childElementCount: Int
Audio[JC] def childNodes: NodeList[Node]
Audio[JC] def children: HTMLCollection[Element]
Audio[JC] var classList: DOMTokenList
Audio[JC] var className: String
Audio[JC] def click(): Unit
Audio[JC] def clientHeight: Int
Audio[JC] def clientLeft: Int
Audio[JC] def clientTop: Int
Audio[JC] def clientWidth: Int
Audio[JC] def cloneNode(deep: Boolean?): Node
Audio[JC] def closest(selector: String): Element
Audio[JC] def compareDocumentPosition(other: Node): Int
Audio[JC] def contains(child: HTMLElement): Boolean
Audio[JC] def contains(otherNode: Node): Boolean
Audio[JC] var contentEditable: String
Audio[JC] var controls: Boolean
Audio[JC] def currentSrc: String
Audio[JC] var currentTime: Double
Audio[JC] def dataset: js.Dictionary[String]
Audio[JC] var defaultPlaybackRate: Double
Audio[JC] var dir: String
Audio[JC] def dispatchEvent(evt: Event): Boolean
Audio[JC] var draggable: Boolean
Audio[JC] def duration: Double
Audio[JC] def ended: Boolean
Audio[JC] def error: MediaError
Audio[JC] var filters: Object
Audio[JC] def firstChild: Node
Audio[JC] def firstElementChild: Element
Audio[JC] def focus(): Unit
Audio[JC] def focus(options: FocusOptions): Unit
Audio[JC] def getAttribute(name: String): String
Audio[JC] def getAttributeNS(namespaceURI: String, localName: String): String
Audio[JC] def getAttributeNode(name: String): Attr
Audio[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
Audio[JC] def getBoundingClientRect(): DOMRect
Audio[JC] def getClientRects(): DOMRectList
Audio[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
Audio[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
Audio[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
Audio[JC] var gotpointercapture: js.Function1[PointerEvent, _]
Audio[JC] def hasAttribute(name: String): Boolean
Audio[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
Audio[JC] def hasAttributes(): Boolean
Audio[JC] def hasChildNodes(): Boolean
Audio[JC] def hasPointerCapture(pointerId: Double): Boolean
Audio[JC] var id: String
Audio[JC] def initialTime: Double
Audio[JC] var innerHTML: String
Audio[JC] var innerText: String
Audio[JC] def insertAdjacentElement(position: String, element: Element): Element
Audio[JC] def insertAdjacentHTML(where: String, html: String): Unit
Audio[JC] def insertBefore(newChild: Node, refChild: Node): Node
Audio[JC] def isConnected: Boolean
Audio[JC] def isContentEditable: Boolean
Audio[JC] def isDefaultNamespace(namespaceURI: String): Boolean
Audio[JC] def isEqualNode(arg: Node): Boolean
Audio[JC] def isSameNode(other: Node): Boolean
Audio[JC] def isSupported(feature: String, version: String): Boolean
Audio[JC] var lang: String
Audio[JC] def lastChild: Node
Audio[JC] def lastElementChild: Element
Audio[JC] def load(): Unit
Audio[JC] def localName: String
Audio[JC] def lookupNamespaceURI(prefix: String): String
Audio[JC] def lookupPrefix(namespaceURI: String): String
Audio[JC] var loop: Boolean
Audio[JC] var lostpointercapture: js.Function1[PointerEvent, _]
Audio[JC] def matches(selector: String): Boolean
Audio[JC] var muted: Boolean
Audio[JC] def namespaceURI: String
Audio[JC] def networkState: Int
Audio[JC] def nextElementSibling: Element
Audio[JC] def nextSibling: Node
Audio[JC] def nodeName: String
Audio[JC] def nodeType: Int
Audio[JC] var nodeValue: String
Audio[JC] def normalize(): Unit
Audio[JC] def offsetHeight: Double
Audio[JC] def offsetLeft: Double
Audio[JC] def offsetParent: Element
Audio[JC] def offsetTop: Double
Audio[JC] def offsetWidth: Double
Audio[JC] var onabort: js.Function1[UIEvent, _]
Audio[JC] var onactivate: js.Function1[UIEvent, _]
Audio[JC] var onbeforeactivate: js.Function1[UIEvent, _]
Audio[JC] var onbeforecopy: js.Function1[DragEvent, _]
Audio[JC] var onbeforecut: js.Function1[DragEvent, _]
Audio[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
Audio[JC] var onbeforepaste: js.Function1[DragEvent, _]
Audio[JC] var onblur: js.Function1[FocusEvent, _]
Audio[JC] var oncanplay: js.Function1[Event, _]
Audio[JC] var oncanplaythrough: js.Function1[Event, _]
Audio[JC] var onchange: js.Function1[Event, _]
Audio[JC] var onclick: js.Function1[MouseEvent, _]
Audio[JC] var oncompositionend: js.Function1[CompositionEvent, _]
Audio[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
Audio[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
Audio[JC] var oncontextmenu: js.Function1[MouseEvent, _]
Audio[JC] var oncopy: js.Function1[ClipboardEvent, _]
Audio[JC] var oncuechange: js.Function1[Event, _]
Audio[JC] var oncut: js.Function1[ClipboardEvent, _]
Audio[JC] var ondblclick: js.Function1[MouseEvent, _]
Audio[JC] var ondeactivate: js.Function1[UIEvent, _]
Audio[JC] var ondrag: js.Function1[DragEvent, _]
Audio[JC] var ondragend: js.Function1[DragEvent, _]
Audio[JC] var ondragenter: js.Function1[DragEvent, _]
Audio[JC] var ondragleave: js.Function1[DragEvent, _]
Audio[JC] var ondragover: js.Function1[DragEvent, _]
Audio[JC] var ondragstart: js.Function1[DragEvent, _]
Audio[JC] var ondrop: js.Function1[DragEvent, _]
Audio[JC] var ondurationchange: js.Function1[Event, _]
Audio[JC] var onemptied: js.Function1[Event, _]
Audio[JC] var onended: js.Function1[Event, _]
Audio[JC] var onfocus: js.Function1[FocusEvent, _]
Audio[JC] var onfocusin: js.Function1[FocusEvent, _]
Audio[JC] var onfocusout: js.Function1[FocusEvent, _]
Audio[JC] var onfullscreenchange: js.Function1[Event, _]
Audio[JC] var onfullscreenerror: js.Function1[Event, _]
Audio[JC] var onhelp: js.Function1[Event, _]
Audio[JC] var oninput: js.Function1[Event, _]
Audio[JC] var onkeydown: js.Function1[KeyboardEvent, _]
Audio[JC] var onkeypress: js.Function1[KeyboardEvent, _]
Audio[JC] var onkeyup: js.Function1[KeyboardEvent, _]
Audio[JC] var onloadeddata: js.Function1[Event, _]
Audio[JC] var onloadedmetadata: js.Function1[Event, _]
Audio[JC] var onloadstart: js.Function1[Event, _]
Audio[JC] var onmousedown: js.Function1[MouseEvent, _]
Audio[JC] var onmouseenter: js.Function1[MouseEvent, _]
Audio[JC] var onmouseleave: js.Function1[MouseEvent, _]
Audio[JC] var onmousemove: js.Function1[MouseEvent, _]
Audio[JC] var onmouseout: js.Function1[MouseEvent, _]
Audio[JC] var onmouseover: js.Function1[MouseEvent, _]
Audio[JC] var onmouseup: js.Function1[MouseEvent, _]
Audio[JC] var onmousewheel: js.Function1[WheelEvent, _]
Audio[JC] var onpaste: js.Function1[ClipboardEvent, _]
Audio[JC] var onpause: js.Function1[Event, _]
Audio[JC] var onplay: js.Function1[Event, _]
Audio[JC] var onplaying: js.Function1[Event, _]
Audio[JC] var onpointercancel: js.Function1[PointerEvent, _]
Audio[JC] var onpointerdown: js.Function1[PointerEvent, _]
Audio[JC] var onpointerenter: js.Function1[PointerEvent, _]
Audio[JC] var onpointerleave: js.Function1[PointerEvent, _]
Audio[JC] var onpointermove: js.Function1[PointerEvent, _]
Audio[JC] var onpointerout: js.Function1[PointerEvent, _]
Audio[JC] var onpointerover: js.Function1[PointerEvent, _]
Audio[JC] var onpointerup: js.Function1[PointerEvent, _]
Audio[JC] var onprogress: js.Function1[js.Any, _]
Audio[JC] var onratechange: js.Function1[Event, _]
Audio[JC] var onreadystatechange: js.Function1[Event, _]
Audio[JC] var onreset: js.Function1[Event, _]
Audio[JC] var onscroll: js.Function1[UIEvent, _]
Audio[JC] var onseeked: js.Function1[Event, _]
Audio[JC] var onseeking: js.Function1[Event, _]
Audio[JC] var onselect: js.Function1[UIEvent, _]
Audio[JC] var onselectstart: js.Function1[Event, _]
Audio[JC] var onstalled: js.Function1[Event, _]
Audio[JC] var onsubmit: js.Function1[Event, _]
Audio[JC] var onsuspend: js.Function1[Event, _]
Audio[JC] var ontimeupdate: js.Function1[Event, _]
Audio[JC] var onvolumechange: js.Function1[Event, _]
Audio[JC] var onwaiting: js.Function1[Event, _]
Audio[JC] var onwheel: js.Function1[WheelEvent, _]
Audio[JC] var outerHTML: String
Audio[JC] def ownerDocument: Document
Audio[JC] override def ownerDocument: HTMLDocument
Audio[JC] var parentElement: HTMLElement
Audio[JC] def parentNode: Node
Audio[JC] def pause(): Unit
Audio[JC] def paused: Boolean
Audio[JC] def play(): js.UndefOr[js.Promise[Unit]]
Audio[JC] var playbackRate: Double
Audio[JC] def played: TimeRanges
Audio[JC] def prefix: String
Audio[JC] var preload: String
Audio[JC] def prepend(nodes: Node | String*): Unit
Audio[JC] def previousElementSibling: Element
Audio[JC] def previousSibling: Node
Audio[JC] def querySelector(selectors: String): Element
Audio[JC] def querySelectorAll(selectors: String): NodeList[Element]
Audio[JC] var readyState: js.Any
Audio[JC] var recordNumber: js.Any
Audio[JC] def releasePointerCapture(pointerId: Double): Unit
Audio[JC] def remove(): Unit
Audio[JC] def removeAttribute(name: String): Unit
Audio[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
Audio[JC] def removeAttributeNode(oldAttr: Attr): Attr
Audio[JC] def removeChild(oldChild: Node): Node
Audio[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Audio[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Audio[JC] def replaceChild(newChild: Node, oldChild: Node): Node
Audio[JC] def replaceChildren(nodes: Node | String*): Unit
Audio[JC] def replaceWith(nodes: Node | String*): Unit
Audio[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
Audio[JC] def requestPointerLock(): Unit
Audio[JC] def scrollHeight: Int
Audio[JC] def scrollIntoView(top: Boolean?): Unit
Audio[JC] var scrollLeft: Double
Audio[JC] var scrollTop: Double
Audio[JC] def scrollWidth: Int
Audio[JC] def seekable: TimeRanges
Audio[JC] def seeking: Boolean
Audio[JC] def setAttribute(name: String, value: String): Unit
Audio[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
Audio[JC] def setAttributeNode(newAttr: Attr): Attr
Audio[JC] def setAttributeNodeNS(newAttr: Attr): Attr
Audio[JC] def setPointerCapture(pointerId: Double): Unit
Audio[JC] def shadowRoot: ShadowRoot
Audio[JC] var spellcheck: Boolean
Audio[JC] var src: String
Audio[JC] var srcObject: js.UndefOr[MediaStream | MediaSource | Blob]
Audio[JC] def style: CSSStyleDeclaration
Audio[JC] def style_ = (value: CSSStyleDeclaration): Unit
Audio[JC] def style_ = (value: String): Unit
Audio[JC] var tabIndex: Int
Audio[JC] def tagName: String
Audio[JC] var textContent: String
Audio[JC] def textTracks: TextTrackList
Audio[JC] var title: String
Audio[JC] var volume: Double
AudioBuffer[JT] def copyFromChannel(destination: js.typedarray.Float32Array, channelNumber: Int, startInChannel: Int): Unit
AudioBuffer[JT] def copyToChannel(source: js.typedarray.Float32Array, channelNumber: Int, startInChannel: Int): Unit
AudioBuffer[JT] val duration: Double
AudioBuffer[JT] def getChannelData(channel: Int): js.typedarray.Float32Array
AudioBuffer[JT] val length: Int
AudioBuffer[JT] val numberOfChannels: Int
AudioBuffer[JT] val sampleRate: Double
AudioBufferSourceNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AudioBufferSourceNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AudioBufferSourceNode[JT] var buffer: AudioBuffer
AudioBufferSourceNode[JT] var channelCount: Int
AudioBufferSourceNode[JT] var channelCountMode: AudioNodeChannelCountMode
AudioBufferSourceNode[JT] var channelInterpretation: AudioNodeChannelInterpretation
AudioBufferSourceNode[JT] def connect(audioNode: AudioNode): Unit
AudioBufferSourceNode[JT] def connect(audioParam: AudioParam): Unit
AudioBufferSourceNode[JT] val context: AudioContext
AudioBufferSourceNode[JT] def disconnect(output: AudioNode?): Unit
AudioBufferSourceNode[JT] def dispatchEvent(evt: Event): Boolean
AudioBufferSourceNode[JT] var loop: Boolean
AudioBufferSourceNode[JT] var loopEnd: Double
AudioBufferSourceNode[JT] var loopStart: Double
AudioBufferSourceNode[JT] val numberOfInputs: Int
AudioBufferSourceNode[JT] val numberOfOutputs: Int
AudioBufferSourceNode[JT] var onended: js.Function1[Event, _]
AudioBufferSourceNode[JT] val playbackRate: AudioParam
AudioBufferSourceNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AudioBufferSourceNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AudioBufferSourceNode[JT] def start(): Unit
AudioBufferSourceNode[JT] def start(when: Double): Unit
AudioBufferSourceNode[JT] def start(when: Double, offset: Double): Unit
AudioBufferSourceNode[JT] def start(when: Double, offset: Double, duration: Double): Unit
AudioBufferSourceNode[JT] def stop(): Unit
AudioBufferSourceNode[JT] def stop(when: Double): Unit
AudioBufferSourceNode[SO] def apply(context: BaseAudioContext, options: js.UndefOr[AudioBufferSourceNodeOptions]?): AudioBufferSourceNode
AudioBufferSourceNodeOptions[JT] var buffer: js.UndefOr[AudioBuffer]
AudioBufferSourceNodeOptions[JT] var detune: js.UndefOr[Double]
AudioBufferSourceNodeOptions[JT] var loop: js.UndefOr[Boolean]
AudioBufferSourceNodeOptions[JT] var loopEnd: js.UndefOr[Double]
AudioBufferSourceNodeOptions[JT] var loopStart: js.UndefOr[Double]
AudioBufferSourceNodeOptions[JT] var playbackRate: js.UndefOr[Double]
AudioContext[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AudioContext[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AudioContext[JC] val audioWorklet: AudioWorklet
AudioContext[JC] def baseLatency: Double
AudioContext[JC] def close(): js.Promise[Unit]
AudioContext[JC] def createAnalyser(): AnalyserNode
AudioContext[JC] def createBiquadFilter(): BiquadFilterNode
AudioContext[JC] def createBuffer(numOfChannels: Int, length: Int, sampleRate: Int): AudioBuffer
AudioContext[JC] def createBufferSource(): AudioBufferSourceNode
AudioContext[JC] def createChannelMerger(numberOfInputs: Int?): ChannelMergerNode
AudioContext[JC] def createChannelSplitter(numberOfOutputs: Int?): ChannelSplitterNode
AudioContext[JC] def createConvolver(): ConvolverNode
AudioContext[JC] def createDelay(maxDelayTime: Int): DelayNode
AudioContext[JC] def createDynamicsCompressor(): DynamicsCompressorNode
AudioContext[JC] def createGain(): GainNode
AudioContext[JC] def createMediaElementSource(myMediaElement: HTMLMediaElement): MediaElementAudioSourceNode
AudioContext[JC] def createMediaStreamDestination(): MediaStreamAudioDestinationNode
AudioContext[JC] def createMediaStreamSource(stream: MediaStream): MediaStreamAudioSourceNode
AudioContext[JC] def createOscillator(): OscillatorNode
AudioContext[JC] def createPanner(): PannerNode
AudioContext[JC] def createPeriodicWave(real: js.typedarray.Float32Array, imag: js.typedarray.Float32Array): PeriodicWave
AudioContext[JC] def createStereoPanner(): StereoPannerNode
AudioContext[JC] def createWaveShaper(): WaveShaperNode
AudioContext[JC] def currentTime: Double
AudioContext[JC] def decodeAudioData(audioData: js.typedarray.ArrayBuffer, successCallback: js.Function1[AudioBuffer, _]?, errorCallback: js.Function0[_]?): js.Promise[AudioBuffer]
AudioContext[JC] val destination: AudioDestinationNode
AudioContext[JC] def dispatchEvent(evt: Event): Boolean
AudioContext[JC] def getOutputTimestamp: AudioTimestamp
AudioContext[JC] val listener: AudioListener
AudioContext[JC] def outputLatency: Double
AudioContext[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AudioContext[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AudioContext[JC] def resume(): js.Promise[Unit]
AudioContext[JC] val sampleRate: Double
AudioContext[JC] def state: String
AudioContext[JC] def suspend(): js.Promise[Unit]
AudioDestinationNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AudioDestinationNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AudioDestinationNode[JT] var channelCount: Int
AudioDestinationNode[JT] var channelCountMode: AudioNodeChannelCountMode
AudioDestinationNode[JT] var channelInterpretation: AudioNodeChannelInterpretation
AudioDestinationNode[JT] def connect(audioNode: AudioNode): Unit
AudioDestinationNode[JT] def connect(audioParam: AudioParam): Unit
AudioDestinationNode[JT] val context: AudioContext
AudioDestinationNode[JT] def disconnect(output: AudioNode?): Unit
AudioDestinationNode[JT] def dispatchEvent(evt: Event): Boolean
AudioDestinationNode[JT] var maxChannelCount: Int
AudioDestinationNode[JT] val numberOfInputs: Int
AudioDestinationNode[JT] val numberOfOutputs: Int
AudioDestinationNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AudioDestinationNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AudioListener[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AudioListener[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AudioListener[JT] var channelCount: Int
AudioListener[JT] var channelCountMode: AudioNodeChannelCountMode
AudioListener[JT] var channelInterpretation: AudioNodeChannelInterpretation
AudioListener[JT] def connect(audioNode: AudioNode): Unit
AudioListener[JT] def connect(audioParam: AudioParam): Unit
AudioListener[JT] val context: AudioContext
AudioListener[JT] def disconnect(output: AudioNode?): Unit
AudioListener[JT] def dispatchEvent(evt: Event): Boolean
AudioListener[JT] var dopplerFactor: Double
AudioListener[JT] val numberOfInputs: Int
AudioListener[JT] val numberOfOutputs: Int
AudioListener[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AudioListener[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AudioListener[JT] def setOrientation(x: Double?, y: Double?, z: Double?, xUp: Double?, yUp: Double?, zUp: Double?): Unit
AudioListener[JT] def setPosition(x: Double?, y: Double?, z: Double?): Unit
AudioListener[JT] var speedOfSound: Double
AudioNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AudioNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AudioNode[JT] var channelCount: Int
AudioNode[JT] var channelCountMode: AudioNodeChannelCountMode
AudioNode[JT] var channelInterpretation: AudioNodeChannelInterpretation
AudioNode[JT] def connect(audioNode: AudioNode): Unit
AudioNode[JT] def connect(audioParam: AudioParam): Unit
AudioNode[JT] val context: AudioContext
AudioNode[JT] def disconnect(output: AudioNode?): Unit
AudioNode[JT] def dispatchEvent(evt: Event): Boolean
AudioNode[JT] val numberOfInputs: Int
AudioNode[JT] val numberOfOutputs: Int
AudioNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AudioNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AudioNodeChannelCountMode[JT]
AudioNodeChannelCountMode[SO] val `clamped-max`: AudioNodeChannelCountMode
AudioNodeChannelCountMode[SO] val explicit: AudioNodeChannelCountMode
AudioNodeChannelCountMode[SO] val max: AudioNodeChannelCountMode
AudioNodeChannelInterpretation[JT]
AudioNodeChannelInterpretation[SO] val discrete: AudioNodeChannelInterpretation
AudioNodeChannelInterpretation[SO] val speakers: AudioNodeChannelInterpretation
AudioParam[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AudioParam[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AudioParam[JT] def cancelScheduledValues(startTime: Double): Unit
AudioParam[JT] var channelCount: Int
AudioParam[JT] var channelCountMode: AudioNodeChannelCountMode
AudioParam[JT] var channelInterpretation: AudioNodeChannelInterpretation
AudioParam[JT] def connect(audioNode: AudioNode): Unit
AudioParam[JT] def connect(audioParam: AudioParam): Unit
AudioParam[JT] val context: AudioContext
AudioParam[JT] val defaultValue: Double
AudioParam[JT] def disconnect(output: AudioNode?): Unit
AudioParam[JT] def dispatchEvent(evt: Event): Boolean
AudioParam[JT] def exponentialRampToValueAtTime(value: Double, endTime: Double): Unit
AudioParam[JT] def linearRampToValueAtTime(value: Double, endTime: Double): Unit
AudioParam[JT] val maxValue: Double
AudioParam[JT] val minValue: Double
AudioParam[JT] val numberOfInputs: Int
AudioParam[JT] val numberOfOutputs: Int
AudioParam[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AudioParam[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AudioParam[JT] def setTargetAtTime(target: Double, startTime: Double, timeConstant: Double): Unit
AudioParam[JT] def setValueAtTime(value: Double, startTime: Double): Unit
AudioParam[JT] def setValueCurveAtTime(values: js.typedarray.Float32Array, startTime: Double, duration: Double): Unit
AudioParam[JT] var value: Double
AudioParamAutomationRate[JT]
AudioParamAutomationRate[SO] val `a-rate`: AudioParamAutomationRate
AudioParamAutomationRate[SO] val `k-rate`: AudioParamAutomationRate
AudioParamDescriptor[JT] var automationRate: js.UndefOr[AudioParamAutomationRate]
AudioParamDescriptor[JT] var defaultValue: js.UndefOr[Double]
AudioParamDescriptor[JT] var maxValue: js.UndefOr[Double]
AudioParamDescriptor[JT] var minValue: js.UndefOr[Double]
AudioParamDescriptor[JT] var name: String
AudioParamMap[JC] @JSBracketAccess def apply(index: K): V
AudioParamMap[JC] def entries(): js.Iterator[js.Tuple2[K, V]]
AudioParamMap[JC] def forEach(callbackFn: js.Function2[V, K, Unit]): Unit
AudioParamMap[JC] def has(key: K): Boolean
AudioParamMap[JC] @JSName(js.Symbol.iterator) override def jsIterator(): js.Iterator[js.Tuple2[K, V]]
AudioParamMap[JC] def keys(): js.Iterator[K]
AudioParamMap[JC] def size: Int
AudioParamMap[JC] def values(): js.Iterator[V]
AudioScheduledSourceNode[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AudioScheduledSourceNode[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AudioScheduledSourceNode[JC] var channelCount: Int
AudioScheduledSourceNode[JC] var channelCountMode: AudioNodeChannelCountMode
AudioScheduledSourceNode[JC] var channelInterpretation: AudioNodeChannelInterpretation
AudioScheduledSourceNode[JC] def connect(audioNode: AudioNode): Unit
AudioScheduledSourceNode[JC] def connect(audioParam: AudioParam): Unit
AudioScheduledSourceNode[JC] val context: AudioContext
AudioScheduledSourceNode[JC] def disconnect(output: AudioNode?): Unit
AudioScheduledSourceNode[JC] def dispatchEvent(evt: Event): Boolean
AudioScheduledSourceNode[JC] val numberOfInputs: Int
AudioScheduledSourceNode[JC] val numberOfOutputs: Int
AudioScheduledSourceNode[JC] var onended: js.Function1[Event, _]
AudioScheduledSourceNode[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AudioScheduledSourceNode[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AudioScheduledSourceNode[JC] def start(): Unit
AudioScheduledSourceNode[JC] def start(when: Double): Unit
AudioScheduledSourceNode[JC] def stop(): Unit
AudioScheduledSourceNode[JC] def stop(when: Double): Unit
AudioTimestamp[JT] var contextTime: Double
AudioTimestamp[JT] var performanceTime: Double
AudioTrack[JT] var enabled: Boolean
AudioTrack[JT] val id: String
AudioTrack[JT] val kind: String
AudioTrack[JT] val label: String
AudioTrack[JT] val language: String
AudioTrackList[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AudioTrackList[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AudioTrackList[JT] @JSBracketAccess def apply(index: Int): T
AudioTrackList[JT] def dispatchEvent(evt: Event): Boolean
AudioTrackList[JT] def getTrackById(id: String): AudioTrack
AudioTrackList[JT] def length: Int
AudioTrackList[JT] var onaddtrack: js.Function1[TrackEvent, Any]
AudioTrackList[JT] var onchange: js.Function1[Event, Any]
AudioTrackList[JT] var onremovetrack: js.Function1[TrackEvent, Any]
AudioTrackList[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AudioTrackList[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AudioWorklet[JC] def addModule(moduleURL: String, options: WorkletOptions?): js.Promise[Unit]
AudioWorkletGlobalScope[JC] def currentFrame: Int
AudioWorkletGlobalScope[JC] def currentTime: Double
AudioWorkletGlobalScope[JC] def registerProcessor(name: String, processorCtor: js.Dynamic): Unit
AudioWorkletGlobalScope[JC] def sampleRate: Float
AudioWorkletGlobalScope[JO] def globalThis: AudioWorkletGlobalScope
AudioWorkletNode[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AudioWorkletNode[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AudioWorkletNode[JC] var channelCount: Int
AudioWorkletNode[JC] var channelCountMode: AudioNodeChannelCountMode
AudioWorkletNode[JC] var channelInterpretation: AudioNodeChannelInterpretation
AudioWorkletNode[JC] def connect(audioNode: AudioNode): Unit
AudioWorkletNode[JC] def connect(audioParam: AudioParam): Unit
AudioWorkletNode[JC] val context: AudioContext
AudioWorkletNode[JC] def disconnect(output: AudioNode?): Unit
AudioWorkletNode[JC] def dispatchEvent(evt: Event): Boolean
AudioWorkletNode[JC] val numberOfInputs: Int
AudioWorkletNode[JC] val numberOfOutputs: Int
AudioWorkletNode[JC] var onprocessorerror: js.Function1[Event, _]
AudioWorkletNode[JC] val parameters: AudioParamMap
AudioWorkletNode[JC] val port: MessagePort
AudioWorkletNode[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
AudioWorkletNode[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
AudioWorkletNodeOptions[JT] var numberOfInputs: js.UndefOr[Int]
AudioWorkletNodeOptions[JT] var numberOfOutputs: js.UndefOr[Int]
AudioWorkletNodeOptions[JT] var outputChannelCount: js.UndefOr[js.Array[Int]]
AudioWorkletNodeOptions[JT] var parameterData: js.UndefOr[js.Object]
AudioWorkletNodeOptions[JT] var processorOptions: js.UndefOr[js.Any]
AudioWorkletProcessor[JC] val port: MessagePort
AudioWorkletProcessor[JC] def process(inputs: js.Array[js.Array[js.typedarray.Float32Array]], outputs: js.Array[js.Array[js.typedarray.Float32Array]], parameters: js.Object): Boolean
AudioWorkletProcessorOptions[JT] var numberOfInputs: Int
AudioWorkletProcessorOptions[JT] var numberOfOutputs: Int
AudioWorkletProcessorOptions[JT] var outputChannelCount: js.Array[Int]
AudioWorkletProcessorOptions[JT] var parameterData: js.UndefOr[js.Object]
AudioWorkletProcessorOptions[JT] var processorOptions: js.UndefOr[js.Any]
BaseAudioContext[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
BaseAudioContext[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
BaseAudioContext[JT] val audioWorklet: AudioWorklet
BaseAudioContext[JT] def createAnalyser(): AnalyserNode
BaseAudioContext[JT] def createBiquadFilter(): BiquadFilterNode
BaseAudioContext[JT] def createBuffer(numOfChannels: Int, length: Int, sampleRate: Int): AudioBuffer
BaseAudioContext[JT] def createBufferSource(): AudioBufferSourceNode
BaseAudioContext[JT] def createChannelMerger(numberOfInputs: Int?): ChannelMergerNode
BaseAudioContext[JT] def createChannelSplitter(numberOfOutputs: Int?): ChannelSplitterNode
BaseAudioContext[JT] def createConvolver(): ConvolverNode
BaseAudioContext[JT] def createDelay(maxDelayTime: Int): DelayNode
BaseAudioContext[JT] def createDynamicsCompressor(): DynamicsCompressorNode
BaseAudioContext[JT] def createGain(): GainNode
BaseAudioContext[JT] def createOscillator(): OscillatorNode
BaseAudioContext[JT] def createPanner(): PannerNode
BaseAudioContext[JT] def createPeriodicWave(real: js.typedarray.Float32Array, imag: js.typedarray.Float32Array): PeriodicWave
BaseAudioContext[JT] def createStereoPanner(): StereoPannerNode
BaseAudioContext[JT] def createWaveShaper(): WaveShaperNode
BaseAudioContext[JT] def currentTime: Double
BaseAudioContext[JT] def decodeAudioData(audioData: js.typedarray.ArrayBuffer, successCallback: js.Function1[AudioBuffer, _]?, errorCallback: js.Function0[_]?): js.Promise[AudioBuffer]
BaseAudioContext[JT] val destination: AudioDestinationNode
BaseAudioContext[JT] def dispatchEvent(evt: Event): Boolean
BaseAudioContext[JT] val listener: AudioListener
BaseAudioContext[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
BaseAudioContext[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
BaseAudioContext[JT] val sampleRate: Double
BaseAudioContext[JT] def state: String
BeforeUnloadEvent[JC] def bubbles: Boolean
BeforeUnloadEvent[JC] def cancelBubble: Boolean
BeforeUnloadEvent[JC] def cancelable: Boolean
BeforeUnloadEvent[JC] def composed: Boolean
BeforeUnloadEvent[JC] def currentTarget: EventTarget
BeforeUnloadEvent[JC] def defaultPrevented: Boolean
BeforeUnloadEvent[JC] def eventPhase: Int
BeforeUnloadEvent[JC] def isTrusted: Boolean
BeforeUnloadEvent[JC] def preventDefault(): Unit
BeforeUnloadEvent[JC] var returnValue: String
BeforeUnloadEvent[JC] def stopImmediatePropagation(): Unit
BeforeUnloadEvent[JC] def stopPropagation(): Unit
BeforeUnloadEvent[JC] def target: EventTarget
BeforeUnloadEvent[JC] def timeStamp: Double
BeforeUnloadEvent[JC] def `type`: String
BiquadFilterNode[JT] val Q: AudioParam
BiquadFilterNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
BiquadFilterNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
BiquadFilterNode[JT] var channelCount: Int
BiquadFilterNode[JT] var channelCountMode: AudioNodeChannelCountMode
BiquadFilterNode[JT] var channelInterpretation: AudioNodeChannelInterpretation
BiquadFilterNode[JT] def connect(audioNode: AudioNode): Unit
BiquadFilterNode[JT] def connect(audioParam: AudioParam): Unit
BiquadFilterNode[JT] val context: AudioContext
BiquadFilterNode[JT] val detune: AudioParam
BiquadFilterNode[JT] def disconnect(output: AudioNode?): Unit
BiquadFilterNode[JT] def dispatchEvent(evt: Event): Boolean
BiquadFilterNode[JT] val frequency: AudioParam
BiquadFilterNode[JT] val gain: AudioParam
BiquadFilterNode[JT] def getFrequencyResponse(frequencyHz: js.typedarray.Float32Array, magResponse: js.typedarray.Float32Array, phaseResponse: js.typedarray.Float32Array): Unit
BiquadFilterNode[JT] val numberOfInputs: Int
BiquadFilterNode[JT] val numberOfOutputs: Int
BiquadFilterNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
BiquadFilterNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
BiquadFilterNode[JT] var `type`: String
Blob[JC] def arrayBuffer(): js.Promise[ArrayBuffer]
Blob[JC] def close(): Unit  (@deprecated in 1.2.0)
Blob[JC] def size: Double
Blob[JC] def slice(start: Double?, end: Double?, contentType: String?): Blob
Blob[JC] def stream(): ReadableStream[Uint8Array]
Blob[JC] def text(): js.Promise[String]
Blob[JC] def `type`: String
Blob[JO]
BlobEvent[JC] def bubbles: Boolean
BlobEvent[JC] def cancelBubble: Boolean
BlobEvent[JC] def cancelable: Boolean
BlobEvent[JC] def composed: Boolean
BlobEvent[JC] def currentTarget: EventTarget
BlobEvent[JC] def data: Blob
BlobEvent[JC] def defaultPrevented: Boolean
BlobEvent[JC] def eventPhase: Int
BlobEvent[JC] def isTrusted: Boolean
BlobEvent[JC] def preventDefault(): Unit
BlobEvent[JC] def stopImmediatePropagation(): Unit
BlobEvent[JC] def stopPropagation(): Unit
BlobEvent[JC] def target: EventTarget
BlobEvent[JC] def timeStamp: Double
BlobEvent[JC] def `type`: String
BlobEventInit[JT] var bubbles: js.UndefOr[Boolean]
BlobEventInit[JT] var cancelable: js.UndefOr[Boolean]
BlobEventInit[JT] var composed: js.UndefOr[Boolean]
BlobEventInit[JT] var data: Blob
BlobEventInit[JT] var scoped: js.UndefOr[Boolean]
BlobPropertyBag[JT] var endings: js.UndefOr[EndingType]
BlobPropertyBag[JT] var `type`: js.UndefOr[String]
BlobPropertyBag[SO] def apply(`type`: js.UndefOr[String]?): BlobPropertyBag  (@deprecated in 2.0.0)
Body[JT] def arrayBuffer(): js.Promise[ArrayBuffer]
Body[JT] def blob(): js.Promise[Blob]
Body[JT] def bodyUsed: Boolean
Body[JT] def formData(): js.Promise[FormData]
Body[JT] def json(): js.Promise[js.Any]
Body[JT] def text(): js.Promise[String]
BroadcastChannel[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
BroadcastChannel[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
BroadcastChannel[JC] def close(): Unit
BroadcastChannel[JC] def dispatchEvent(evt: Event): Boolean
BroadcastChannel[JC] def name: String
BroadcastChannel[JC] var onmessage: js.Function1[MessageEvent, _]
BroadcastChannel[JC] var onmessageerror: js.Function1[MessageEvent, _]
BroadcastChannel[JC] def postMessage(message: Any): Unit
BroadcastChannel[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
BroadcastChannel[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
CDATASection[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
CDATASection[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
CDATASection[JC] def appendChild(newChild: Node): Node
CDATASection[JC] def appendData(arg: String): Unit
CDATASection[JC] def baseURI: String
CDATASection[JC] def childNodes: NodeList[Node]
CDATASection[JC] def cloneNode(deep: Boolean?): Node
CDATASection[JC] def compareDocumentPosition(other: Node): Int
CDATASection[JC] def contains(otherNode: Node): Boolean
CDATASection[JC] var data: String
CDATASection[JC] def deleteData(offset: Int, count: Int): Unit
CDATASection[JC] def dispatchEvent(evt: Event): Boolean
CDATASection[JC] def firstChild: Node
CDATASection[JC] def hasChildNodes(): Boolean
CDATASection[JC] var innerText: String
CDATASection[JC] def insertBefore(newChild: Node, refChild: Node): Node
CDATASection[JC] def insertData(offset: Int, arg: String): Unit
CDATASection[JC] def isConnected: Boolean
CDATASection[JC] def isDefaultNamespace(namespaceURI: String): Boolean
CDATASection[JC] def isEqualNode(arg: Node): Boolean
CDATASection[JC] def isSameNode(other: Node): Boolean
CDATASection[JC] def isSupported(feature: String, version: String): Boolean
CDATASection[JC] def lastChild: Node
CDATASection[JC] def length: Int
CDATASection[JC] def localName: String
CDATASection[JC] def lookupNamespaceURI(prefix: String): String
CDATASection[JC] def lookupPrefix(namespaceURI: String): String
CDATASection[JC] def namespaceURI: String
CDATASection[JC] def nextElementSibling: Element
CDATASection[JC] def nextSibling: Node
CDATASection[JC] def nodeName: String
CDATASection[JC] def nodeType: Int
CDATASection[JC] var nodeValue: String
CDATASection[JC] def normalize(): Unit
CDATASection[JC] def ownerDocument: Document
CDATASection[JC] def parentNode: Node
CDATASection[JC] def previousElementSibling: Element
CDATASection[JC] def previousSibling: Node
CDATASection[JC] def removeChild(oldChild: Node): Node
CDATASection[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
CDATASection[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
CDATASection[JC] def replaceChild(newChild: Node, oldChild: Node): Node
CDATASection[JC] def replaceData(offset: Int, count: Int, arg: String): Unit
CDATASection[JC] def splitText(offset: Int): Text
CDATASection[JC] def substringData(offset: Int, count: Int): String
CDATASection[JC] var textContent: String
CDATASection[JC] def wholeText: String
CSS[JO] def supports(propertyName: String, value: String): Boolean
CSS[JO] def supports(supportCondition: String): Boolean
CSSFontFaceRule[JC] var CHARSET_RULE: Int
CSSFontFaceRule[JC] var FONT_FACE_RULE: Int
CSSFontFaceRule[JC] var IMPORT_RULE: Int
CSSFontFaceRule[JC] var KEYFRAMES_RULE: Int
CSSFontFaceRule[JC] var KEYFRAME_RULE: Int
CSSFontFaceRule[JC] var MEDIA_RULE: Int
CSSFontFaceRule[JC] var NAMESPACE_RULE: Int
CSSFontFaceRule[JC] var PAGE_RULE: Int
CSSFontFaceRule[JC] var STYLE_RULE: Int
CSSFontFaceRule[JC] var UNKNOWN_RULE: Int
CSSFontFaceRule[JC] var VIEWPORT_RULE: Int
CSSFontFaceRule[JC] var cssText: String
CSSFontFaceRule[JC] var parentRule: CSSRule
CSSFontFaceRule[JC] var parentStyleSheet: CSSStyleSheet
CSSFontFaceRule[JC] var style: CSSStyleDeclaration
CSSFontFaceRule[JC] var `type`: Int
CSSImportRule[JC] var CHARSET_RULE: Int
CSSImportRule[JC] var FONT_FACE_RULE: Int
CSSImportRule[JC] var IMPORT_RULE: Int
CSSImportRule[JC] var KEYFRAMES_RULE: Int
CSSImportRule[JC] var KEYFRAME_RULE: Int
CSSImportRule[JC] var MEDIA_RULE: Int
CSSImportRule[JC] var NAMESPACE_RULE: Int
CSSImportRule[JC] var PAGE_RULE: Int
CSSImportRule[JC] var STYLE_RULE: Int
CSSImportRule[JC] var UNKNOWN_RULE: Int
CSSImportRule[JC] var VIEWPORT_RULE: Int
CSSImportRule[JC] var cssText: String
CSSImportRule[JC] var href: String
CSSImportRule[JC] var media: MediaList
CSSImportRule[JC] var parentRule: CSSRule
CSSImportRule[JC] var parentStyleSheet: CSSStyleSheet
CSSImportRule[JC] var styleSheet: CSSStyleSheet
CSSImportRule[JC] var `type`: Int
CSSKeyframeRule[JC] var CHARSET_RULE: Int
CSSKeyframeRule[JC] var FONT_FACE_RULE: Int
CSSKeyframeRule[JC] var IMPORT_RULE: Int
CSSKeyframeRule[JC] var KEYFRAMES_RULE: Int
CSSKeyframeRule[JC] var KEYFRAME_RULE: Int
CSSKeyframeRule[JC] var MEDIA_RULE: Int
CSSKeyframeRule[JC] var NAMESPACE_RULE: Int
CSSKeyframeRule[JC] var PAGE_RULE: Int
CSSKeyframeRule[JC] var STYLE_RULE: Int
CSSKeyframeRule[JC] var UNKNOWN_RULE: Int
CSSKeyframeRule[JC] var VIEWPORT_RULE: Int
CSSKeyframeRule[JC] var cssText: String
CSSKeyframeRule[JC] var keyText: String
CSSKeyframeRule[JC] var parentRule: CSSRule
CSSKeyframeRule[JC] var parentStyleSheet: CSSStyleSheet
CSSKeyframeRule[JC] var style: CSSStyleDeclaration
CSSKeyframeRule[JC] var `type`: Int
CSSKeyframesRule[JC] var CHARSET_RULE: Int
CSSKeyframesRule[JC] var FONT_FACE_RULE: Int
CSSKeyframesRule[JC] var IMPORT_RULE: Int
CSSKeyframesRule[JC] var KEYFRAMES_RULE: Int
CSSKeyframesRule[JC] var KEYFRAME_RULE: Int
CSSKeyframesRule[JC] var MEDIA_RULE: Int
CSSKeyframesRule[JC] var NAMESPACE_RULE: Int
CSSKeyframesRule[JC] var PAGE_RULE: Int
CSSKeyframesRule[JC] var STYLE_RULE: Int
CSSKeyframesRule[JC] var UNKNOWN_RULE: Int
CSSKeyframesRule[JC] var VIEWPORT_RULE: Int
CSSKeyframesRule[JC] def appendRule(rule: String): Unit
CSSKeyframesRule[JC] var cssRules: CSSRuleList
CSSKeyframesRule[JC] var cssText: String
CSSKeyframesRule[JC] def deleteRule(rule: String): Unit
CSSKeyframesRule[JC] def findRule(rule: String): CSSKeyframeRule
CSSKeyframesRule[JC] var name: String
CSSKeyframesRule[JC] var parentRule: CSSRule
CSSKeyframesRule[JC] var parentStyleSheet: CSSStyleSheet
CSSKeyframesRule[JC] var `type`: Int
CSSMediaRule[JC] var CHARSET_RULE: Int
CSSMediaRule[JC] var FONT_FACE_RULE: Int
CSSMediaRule[JC] var IMPORT_RULE: Int
CSSMediaRule[JC] var KEYFRAMES_RULE: Int
CSSMediaRule[JC] var KEYFRAME_RULE: Int
CSSMediaRule[JC] var MEDIA_RULE: Int
CSSMediaRule[JC] var NAMESPACE_RULE: Int
CSSMediaRule[JC] var PAGE_RULE: Int
CSSMediaRule[JC] var STYLE_RULE: Int
CSSMediaRule[JC] var UNKNOWN_RULE: Int
CSSMediaRule[JC] var VIEWPORT_RULE: Int
CSSMediaRule[JC] var cssRules: CSSRuleList
CSSMediaRule[JC] var cssText: String
CSSMediaRule[JC] def deleteRule(index: Int?): Unit
CSSMediaRule[JC] def insertRule(rule: String, index: Int?): Int
CSSMediaRule[JC] var media: MediaList
CSSMediaRule[JC] var parentRule: CSSRule
CSSMediaRule[JC] var parentStyleSheet: CSSStyleSheet
CSSMediaRule[JC] var `type`: Int
CSSNamespaceRule[JC] var CHARSET_RULE: Int
CSSNamespaceRule[JC] var FONT_FACE_RULE: Int
CSSNamespaceRule[JC] var IMPORT_RULE: Int
CSSNamespaceRule[JC] var KEYFRAMES_RULE: Int
CSSNamespaceRule[JC] var KEYFRAME_RULE: Int
CSSNamespaceRule[JC] var MEDIA_RULE: Int
CSSNamespaceRule[JC] var NAMESPACE_RULE: Int
CSSNamespaceRule[JC] var PAGE_RULE: Int
CSSNamespaceRule[JC] var STYLE_RULE: Int
CSSNamespaceRule[JC] var UNKNOWN_RULE: Int
CSSNamespaceRule[JC] var VIEWPORT_RULE: Int
CSSNamespaceRule[JC] var cssText: String
CSSNamespaceRule[JC] var namespaceURI: String
CSSNamespaceRule[JC] var parentRule: CSSRule
CSSNamespaceRule[JC] var parentStyleSheet: CSSStyleSheet
CSSNamespaceRule[JC] var prefix: String
CSSNamespaceRule[JC] var `type`: Int
CSSPageRule[JC] var CHARSET_RULE: Int
CSSPageRule[JC] var FONT_FACE_RULE: Int
CSSPageRule[JC] var IMPORT_RULE: Int
CSSPageRule[JC] var KEYFRAMES_RULE: Int
CSSPageRule[JC] var KEYFRAME_RULE: Int
CSSPageRule[JC] var MEDIA_RULE: Int
CSSPageRule[JC] var NAMESPACE_RULE: Int
CSSPageRule[JC] var PAGE_RULE: Int
CSSPageRule[JC] var STYLE_RULE: Int
CSSPageRule[JC] var UNKNOWN_RULE: Int
CSSPageRule[JC] var VIEWPORT_RULE: Int
CSSPageRule[JC] var cssText: String
CSSPageRule[JC] var parentRule: CSSRule
CSSPageRule[JC] var parentStyleSheet: CSSStyleSheet
CSSPageRule[JC] var pseudoClass: String
CSSPageRule[JC] var selector: String
CSSPageRule[JC] var selectorText: String
CSSPageRule[JC] var style: CSSStyleDeclaration
CSSPageRule[JC] var `type`: Int
CSSRule[JC] var CHARSET_RULE: Int
CSSRule[JC] var FONT_FACE_RULE: Int
CSSRule[JC] var IMPORT_RULE: Int
CSSRule[JC] var KEYFRAMES_RULE: Int
CSSRule[JC] var KEYFRAME_RULE: Int
CSSRule[JC] var MEDIA_RULE: Int
CSSRule[JC] var NAMESPACE_RULE: Int
CSSRule[JC] var PAGE_RULE: Int
CSSRule[JC] var STYLE_RULE: Int
CSSRule[JC] var UNKNOWN_RULE: Int
CSSRule[JC] var VIEWPORT_RULE: Int
CSSRule[JC] var cssText: String
CSSRule[JC] var parentRule: CSSRule
CSSRule[JC] var parentStyleSheet: CSSStyleSheet
CSSRule[JC] var `type`: Int
CSSRule[JO] var CHARSET_RULE: Int
CSSRule[JO] var FONT_FACE_RULE: Int
CSSRule[JO] var IMPORT_RULE: Int
CSSRule[JO] var MEDIA_RULE: Int
CSSRule[JO] var NAMESPACE_RULE: Int
CSSRule[JO] var PAGE_RULE: Int
CSSRule[JO] var STYLE_RULE: Int
CSSRule[JO] var UNKNOWN_RULE: Int
CSSRuleList[JC] @JSBracketAccess def apply(index: Int): T
CSSRuleList[JC] def item(index: Int): CSSRule
CSSRuleList[JC] def length: Int
CSSStyleDeclaration[JC] var alignmentBaseline: String
CSSStyleDeclaration[JC] var animation: String
CSSStyleDeclaration[JC] var animationDelay: String
CSSStyleDeclaration[JC] var animationDirection: String
CSSStyleDeclaration[JC] var animationDuration: String
CSSStyleDeclaration[JC] var animationFillMode: String
CSSStyleDeclaration[JC] var animationIterationCount: String
CSSStyleDeclaration[JC] var animationName: String
CSSStyleDeclaration[JC] var animationPlayState: String
CSSStyleDeclaration[JC] var animationTimingFunction: String
CSSStyleDeclaration[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): String
CSSStyleDeclaration[JC] var backfaceVisibility: String
CSSStyleDeclaration[JC] var background: String
CSSStyleDeclaration[JC] var backgroundAttachment: String
CSSStyleDeclaration[JC] var backgroundClip: String
CSSStyleDeclaration[JC] var backgroundColor: String
CSSStyleDeclaration[JC] var backgroundImage: String
CSSStyleDeclaration[JC] var backgroundOrigin: String
CSSStyleDeclaration[JC] var backgroundPosition: String
CSSStyleDeclaration[JC] var backgroundRepeat: String
CSSStyleDeclaration[JC] var backgroundSize: String
CSSStyleDeclaration[JC] var baselineShift: String
CSSStyleDeclaration[JC] var border: String
CSSStyleDeclaration[JC] var borderBottom: String
CSSStyleDeclaration[JC] var borderBottomColor: String
CSSStyleDeclaration[JC] var borderBottomLeftRadius: String
CSSStyleDeclaration[JC] var borderBottomRightRadius: String
CSSStyleDeclaration[JC] var borderBottomStyle: String
CSSStyleDeclaration[JC] var borderBottomWidth: String
CSSStyleDeclaration[JC] var borderCollapse: String
CSSStyleDeclaration[JC] var borderColor: String
CSSStyleDeclaration[JC] var borderLeft: String
CSSStyleDeclaration[JC] var borderLeftColor: String
CSSStyleDeclaration[JC] var borderLeftStyle: String
CSSStyleDeclaration[JC] var borderLeftWidth: String
CSSStyleDeclaration[JC] var borderRadius: String
CSSStyleDeclaration[JC] var borderRight: String
CSSStyleDeclaration[JC] var borderRightColor: String
CSSStyleDeclaration[JC] var borderRightStyle: String
CSSStyleDeclaration[JC] var borderRightWidth: String
CSSStyleDeclaration[JC] var borderSpacing: String
CSSStyleDeclaration[JC] var borderStyle: String
CSSStyleDeclaration[JC] var borderTop: String
CSSStyleDeclaration[JC] var borderTopColor: String
CSSStyleDeclaration[JC] var borderTopLeftRadius: String
CSSStyleDeclaration[JC] var borderTopRightRadius: String
CSSStyleDeclaration[JC] var borderTopStyle: String
CSSStyleDeclaration[JC] var borderTopWidth: String
CSSStyleDeclaration[JC] var borderWidth: String
CSSStyleDeclaration[JC] var bottom: String
CSSStyleDeclaration[JC] var boxShadow: String
CSSStyleDeclaration[JC] var boxSizing: String
CSSStyleDeclaration[JC] var breakAfter: String
CSSStyleDeclaration[JC] var breakBefore: String
CSSStyleDeclaration[JC] var breakInside: String
CSSStyleDeclaration[JC] var captionSide: String
CSSStyleDeclaration[JC] var clear: String
CSSStyleDeclaration[JC] var clip: String
CSSStyleDeclaration[JC] var clipPath: String
CSSStyleDeclaration[JC] var clipRule: String
CSSStyleDeclaration[JC] var color: String
CSSStyleDeclaration[JC] var colorInterpolationFilters: String
CSSStyleDeclaration[JC] var columnCount: js.Any
CSSStyleDeclaration[JC] var columnFill: String
CSSStyleDeclaration[JC] var columnGap: js.Any
CSSStyleDeclaration[JC] var columnRule: String
CSSStyleDeclaration[JC] var columnRuleColor: js.Any
CSSStyleDeclaration[JC] var columnRuleStyle: String
CSSStyleDeclaration[JC] var columnRuleWidth: js.Any
CSSStyleDeclaration[JC] var columnSpan: String
CSSStyleDeclaration[JC] var columnWidth: js.Any
CSSStyleDeclaration[JC] var columns: String
CSSStyleDeclaration[JC] var content: String
CSSStyleDeclaration[JC] var counterIncrement: String
CSSStyleDeclaration[JC] var counterReset: String
CSSStyleDeclaration[JC] var cssFloat: String
CSSStyleDeclaration[JC] var cssText: String
CSSStyleDeclaration[JC] var cursor: String
CSSStyleDeclaration[JC] var direction: String
CSSStyleDeclaration[JC] var display: String
CSSStyleDeclaration[JC] var dominantBaseline: String
CSSStyleDeclaration[JC] var emptyCells: String
CSSStyleDeclaration[JC] var enableBackground: String
CSSStyleDeclaration[JC] var fill: String
CSSStyleDeclaration[JC] var fillOpacity: String
CSSStyleDeclaration[JC] var fillRule: String
CSSStyleDeclaration[JC] var floodColor: String
CSSStyleDeclaration[JC] var floodOpacity: String
CSSStyleDeclaration[JC] var font: String
CSSStyleDeclaration[JC] var fontFamily: String
CSSStyleDeclaration[JC] var fontFeatureSettings: String
CSSStyleDeclaration[JC] var fontSize: String
CSSStyleDeclaration[JC] var fontSizeAdjust: String
CSSStyleDeclaration[JC] var fontStretch: String
CSSStyleDeclaration[JC] var fontStyle: String
CSSStyleDeclaration[JC] var fontVariant: String
CSSStyleDeclaration[JC] var fontWeight: String
CSSStyleDeclaration[JC] def getPropertyPriority(propertyName: String): String
CSSStyleDeclaration[JC] def getPropertyValue(propertyName: String): String
CSSStyleDeclaration[JC] var glyphOrientationHorizontal: String
CSSStyleDeclaration[JC] var glyphOrientationVertical: String
CSSStyleDeclaration[JC] var height: String
CSSStyleDeclaration[JC] def item(index: Int): String
CSSStyleDeclaration[JC] var kerning: String
CSSStyleDeclaration[JC] var left: String
CSSStyleDeclaration[JC] var length: Int
CSSStyleDeclaration[JC] var letterSpacing: String
CSSStyleDeclaration[JC] var lightingColor: String
CSSStyleDeclaration[JC] var lineHeight: String
CSSStyleDeclaration[JC] var listStyle: String
CSSStyleDeclaration[JC] var listStyleImage: String
CSSStyleDeclaration[JC] var listStylePosition: String
CSSStyleDeclaration[JC] var listStyleType: String
CSSStyleDeclaration[JC] var margin: String
CSSStyleDeclaration[JC] var marginBottom: String
CSSStyleDeclaration[JC] var marginLeft: String
CSSStyleDeclaration[JC] var marginRight: String
CSSStyleDeclaration[JC] var marginTop: String
CSSStyleDeclaration[JC] var marker: String
CSSStyleDeclaration[JC] var markerEnd: String
CSSStyleDeclaration[JC] var markerMid: String
CSSStyleDeclaration[JC] var markerStart: String
CSSStyleDeclaration[JC] var mask: String
CSSStyleDeclaration[JC] var maxHeight: String
CSSStyleDeclaration[JC] var maxWidth: String
CSSStyleDeclaration[JC] var minHeight: String
CSSStyleDeclaration[JC] var minWidth: String
CSSStyleDeclaration[JC] var opacity: String
CSSStyleDeclaration[JC] var orphans: String
CSSStyleDeclaration[JC] var outline: String
CSSStyleDeclaration[JC] var outlineColor: String
CSSStyleDeclaration[JC] var outlineStyle: String
CSSStyleDeclaration[JC] var outlineWidth: String
CSSStyleDeclaration[JC] var overflow: String
CSSStyleDeclaration[JC] var overflowX: String
CSSStyleDeclaration[JC] var overflowY: String
CSSStyleDeclaration[JC] var padding: String
CSSStyleDeclaration[JC] var paddingBottom: String
CSSStyleDeclaration[JC] var paddingLeft: String
CSSStyleDeclaration[JC] var paddingRight: String
CSSStyleDeclaration[JC] var paddingTop: String
CSSStyleDeclaration[JC] var pageBreakAfter: String
CSSStyleDeclaration[JC] var pageBreakBefore: String
CSSStyleDeclaration[JC] var pageBreakInside: String
CSSStyleDeclaration[JC] var parentRule: CSSRule
CSSStyleDeclaration[JC] var perspective: String
CSSStyleDeclaration[JC] var perspectiveOrigin: String
CSSStyleDeclaration[JC] var pointerEvents: String
CSSStyleDeclaration[JC] var position: String
CSSStyleDeclaration[JC] var quotes: String
CSSStyleDeclaration[JC] def removeProperty(propertyName: String): String
CSSStyleDeclaration[JC] var right: String
CSSStyleDeclaration[JC] var rubyAlign: String
CSSStyleDeclaration[JC] var rubyOverhang: String
CSSStyleDeclaration[JC] var rubyPosition: String
CSSStyleDeclaration[JC] def setProperty(propertyName: String, value: String, priority: String?): Unit
CSSStyleDeclaration[JC] var stopColor: String
CSSStyleDeclaration[JC] var stopOpacity: String
CSSStyleDeclaration[JC] var stroke: String
CSSStyleDeclaration[JC] var strokeDasharray: String
CSSStyleDeclaration[JC] var strokeDashoffset: String
CSSStyleDeclaration[JC] var strokeLinecap: String
CSSStyleDeclaration[JC] var strokeLinejoin: String
CSSStyleDeclaration[JC] var strokeMiterlimit: String
CSSStyleDeclaration[JC] var strokeOpacity: String
CSSStyleDeclaration[JC] var strokeWidth: String
CSSStyleDeclaration[JC] var tableLayout: String
CSSStyleDeclaration[JC] var textAlign: String
CSSStyleDeclaration[JC] var textAlignLast: String
CSSStyleDeclaration[JC] var textAnchor: String
CSSStyleDeclaration[JC] var textDecoration: String
CSSStyleDeclaration[JC] var textIndent: String
CSSStyleDeclaration[JC] var textJustify: String
CSSStyleDeclaration[JC] var textOverflow: String
CSSStyleDeclaration[JC] var textShadow: String
CSSStyleDeclaration[JC] var textTransform: String
CSSStyleDeclaration[JC] var textUnderlinePosition: String
CSSStyleDeclaration[JC] var top: String
CSSStyleDeclaration[JC] var transform: String
CSSStyleDeclaration[JC] var transformOrigin: String
CSSStyleDeclaration[JC] var transformStyle: String
CSSStyleDeclaration[JC] var transition: String
CSSStyleDeclaration[JC] var transitionDelay: String
CSSStyleDeclaration[JC] var transitionDuration: String
CSSStyleDeclaration[JC] var transitionProperty: String
CSSStyleDeclaration[JC] var transitionTimingFunction: String
CSSStyleDeclaration[JC] var unicodeBidi: String
CSSStyleDeclaration[JC] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: String): Unit
CSSStyleDeclaration[JC] var verticalAlign: String
CSSStyleDeclaration[JC] var visibility: String
CSSStyleDeclaration[JC] var whiteSpace: String
CSSStyleDeclaration[JC] var widows: String
CSSStyleDeclaration[JC] var width: String
CSSStyleDeclaration[JC] var wordBreak: String
CSSStyleDeclaration[JC] var wordSpacing: String
CSSStyleDeclaration[JC] var wordWrap: String
CSSStyleDeclaration[JC] var zIndex: String
CSSStyleRule[JC] var CHARSET_RULE: Int
CSSStyleRule[JC] var FONT_FACE_RULE: Int
CSSStyleRule[JC] var IMPORT_RULE: Int
CSSStyleRule[JC] var KEYFRAMES_RULE: Int
CSSStyleRule[JC] var KEYFRAME_RULE: Int
CSSStyleRule[JC] var MEDIA_RULE: Int
CSSStyleRule[JC] var NAMESPACE_RULE: Int
CSSStyleRule[JC] var PAGE_RULE: Int
CSSStyleRule[JC] var STYLE_RULE: Int
CSSStyleRule[JC] var UNKNOWN_RULE: Int
CSSStyleRule[JC] var VIEWPORT_RULE: Int
CSSStyleRule[JC] var cssText: String
CSSStyleRule[JC] var parentRule: CSSRule
CSSStyleRule[JC] var parentStyleSheet: CSSStyleSheet
CSSStyleRule[JC] var readOnly: Boolean
CSSStyleRule[JC] var selectorText: String
CSSStyleRule[JC] val style: CSSStyleDeclaration
CSSStyleRule[JC] var `type`: Int
CSSStyleSheet[JC] def addImport(bstrURL: String, lIndex: Int?): Int
CSSStyleSheet[JC] def addPageRule(bstrSelector: String, bstrStyle: String, lIndex: Int?): Int
CSSStyleSheet[JC] def addRule(bstrSelector: String, bstrStyle: String?, lIndex: Int?): Int
CSSStyleSheet[JC] var cssRules: CSSRuleList
CSSStyleSheet[JC] var cssText: String
CSSStyleSheet[JC] def deleteRule(index: Int?): Unit
CSSStyleSheet[JC] def disabled: Boolean
CSSStyleSheet[JC] def href: String
CSSStyleSheet[JC] var id: String
CSSStyleSheet[JC] var imports: StyleSheetList
CSSStyleSheet[JC] def insertRule(rule: String, index: Int?): Int
CSSStyleSheet[JC] var isAlternate: Boolean
CSSStyleSheet[JC] var isPrefAlternate: Boolean
CSSStyleSheet[JC] def media: MediaList
CSSStyleSheet[JC] def ownerNode: Node
CSSStyleSheet[JC] var ownerRule: CSSRule
CSSStyleSheet[JC] var owningElement: Element
CSSStyleSheet[JC] def parentStyleSheet: StyleSheet
CSSStyleSheet[JC] var readOnly: Boolean
CSSStyleSheet[JC] def removeImport(lIndex: Int): Unit
CSSStyleSheet[JC] def removeRule(lIndex: Int): Unit
CSSStyleSheet[JC] def title: String
CSSStyleSheet[JC] def `type`: String
Cache[JC] def add(request: RequestInfo): js.Promise[Unit]
Cache[JC] def addAll(requests: js.Array[RequestInfo]): js.Promise[Unit]
Cache[JC] def delete(request: RequestInfo, options: js.UndefOr[CacheQueryOptions]?): js.Promise[Boolean]
Cache[JC] def keys(request: js.UndefOr[RequestInfo]?, options: js.UndefOr[CacheQueryOptions]?): js.Promise[js.Array[Request]]
Cache[JC] def `match`(request: RequestInfo, options: js.UndefOr[CacheQueryOptions]?): js.Promise[js.UndefOr[Response]]
Cache[JC] def matchAll(request: RequestInfo?, options: js.UndefOr[CacheQueryOptions]?): js.Promise[js.Array[Response]]
Cache[JC] def put(request: RequestInfo, response: Response): js.Promise[Unit]
CacheQueryOptions[JT] var cacheName: String
CacheQueryOptions[JT] var ignoreMethod: Boolean
CacheQueryOptions[JT] var ignoreSearch: Boolean
CacheQueryOptions[JT] var ignoreVary: Boolean
CacheStorage[JT] def delete(cacheName: String): js.Promise[Boolean]
CacheStorage[JT] def has(cacheName: String): js.Promise[Boolean]
CacheStorage[JT] def keys(): js.Promise[js.Array[String]]
CacheStorage[JT] def `match`(request: RequestInfo, options: CacheQueryOptions?): js.Promise[js.Any]
CacheStorage[JT] def open(cacheName: String): js.Promise[Cache]
CanvasFillRule[JT]
CanvasFillRule[SO] val evenodd: CanvasFillRule
CanvasFillRule[SO] val nonzero: CanvasFillRule
CanvasGradient[JC] def addColorStop(offset: Double, color: String): Unit
CanvasPattern[JC]
CanvasProxy[JT] def setContext(context: RenderingContext): Unit
CanvasRenderingContext2D[JC] def arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double): Unit
CanvasRenderingContext2D[JC] def arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, counterclockwise: Boolean): Unit
CanvasRenderingContext2D[JC] def arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double): Unit
CanvasRenderingContext2D[JC] def beginPath(): Unit
CanvasRenderingContext2D[JC] def bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double): Unit
CanvasRenderingContext2D[JC] var canvas: HTMLCanvasElement
CanvasRenderingContext2D[JC] def clearRect(x: Double, y: Double, w: Double, h: Double): Unit
CanvasRenderingContext2D[JC] def clip(fillRule: CanvasFillRule?): Unit
CanvasRenderingContext2D[JC] def clip(path: Path2D): Unit
CanvasRenderingContext2D[JC] def clip(path: Path2D, fillRule: CanvasFillRule): Unit
CanvasRenderingContext2D[JC] def closePath(): Unit
CanvasRenderingContext2D[JC] def createImageData(imageDataOrSw: js.Any, sh: Double?): ImageData
CanvasRenderingContext2D[JC] def createLinearGradient(x0: Double, y0: Double, x1: Double, y1: Double): CanvasGradient
CanvasRenderingContext2D[JC] def createPattern(image: HTMLElement, repetition: String): CanvasPattern
CanvasRenderingContext2D[JC] def createRadialGradient(x0: Double, y0: Double, r0: Double, x1: Double, y1: Double, r1: Double): CanvasGradient
CanvasRenderingContext2D[JC] def drawImage(image: HTMLElement, offsetX: Double, offsetY: Double, width: Double?, height: Double?, canvasOffsetX: Double?, canvasOffsetY: Double?, canvasImageWidth: Double?, canvasImageHeight: Double?): Unit
CanvasRenderingContext2D[JC] def ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, counterclockwise: Boolean?): Unit
CanvasRenderingContext2D[JC] def fill(fillRule: CanvasFillRule?): Unit
CanvasRenderingContext2D[JC] def fill(path: Path2D): Unit
CanvasRenderingContext2D[JC] def fill(path: Path2D, fillRule: CanvasFillRule): Unit
CanvasRenderingContext2D[JC] def fillRect(x: Double, y: Double, w: Double, h: Double): Unit
CanvasRenderingContext2D[JC] var fillStyle: js.Any
CanvasRenderingContext2D[JC] def fillText(text: String, x: Double, y: Double, maxWidth: Double?): Unit
CanvasRenderingContext2D[JC] var filter: String
CanvasRenderingContext2D[JC] var font: String
CanvasRenderingContext2D[JC] def getImageData(sx: Double, sy: Double, sw: Double, sh: Double): ImageData
CanvasRenderingContext2D[JC] def getLineDash(): js.Array[Double]
CanvasRenderingContext2D[JC] var globalAlpha: Double
CanvasRenderingContext2D[JC] var globalCompositeOperation: String
CanvasRenderingContext2D[JC] var imageSmoothingEnabled: Boolean
CanvasRenderingContext2D[JC] def isPointInPath(path: Path2D, x: Double, y: Double): Boolean
CanvasRenderingContext2D[JC] def isPointInPath(path: Path2D, x: Double, y: Double, fillRule: CanvasFillRule): Boolean
CanvasRenderingContext2D[JC] def isPointInPath(x: Double, y: Double, fillRule: CanvasFillRule?): Boolean
CanvasRenderingContext2D[JC] var lineCap: String
CanvasRenderingContext2D[JC] var lineDashOffset: Double
CanvasRenderingContext2D[JC] var lineJoin: String
CanvasRenderingContext2D[JC] def lineTo(x: Double, y: Double): Unit
CanvasRenderingContext2D[JC] var lineWidth: Double
CanvasRenderingContext2D[JC] def measureText(text: String): TextMetrics
CanvasRenderingContext2D[JC] var miterLimit: Double
CanvasRenderingContext2D[JC] def moveTo(x: Double, y: Double): Unit
CanvasRenderingContext2D[JC] def putImageData(imagedata: ImageData, dx: Double, dy: Double, dirtyX: Double?, dirtyY: Double?, dirtyWidth: Double?, dirtyHeight: Double?): Unit
CanvasRenderingContext2D[JC] def quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double): Unit
CanvasRenderingContext2D[JC] def rect(x: Double, y: Double, w: Double, h: Double): Unit
CanvasRenderingContext2D[JC] def restore(): Unit
CanvasRenderingContext2D[JC] def rotate(angle: Double): Unit
CanvasRenderingContext2D[JC] def save(): Unit
CanvasRenderingContext2D[JC] def scale(x: Double, y: Double): Unit
CanvasRenderingContext2D[JC] def setLineDash(segments: js.Array[Double]): Unit
CanvasRenderingContext2D[JC] def setTransform(m11: Double, m12: Double, m21: Double, m22: Double, dx: Double, dy: Double): Unit
CanvasRenderingContext2D[JC] var shadowBlur: Double
CanvasRenderingContext2D[JC] var shadowColor: String
CanvasRenderingContext2D[JC] var shadowOffsetX: Double
CanvasRenderingContext2D[JC] var shadowOffsetY: Double
CanvasRenderingContext2D[JC] def stroke(): Unit
CanvasRenderingContext2D[JC] def stroke(path: Path2D): Unit
CanvasRenderingContext2D[JC] def strokeRect(x: Double, y: Double, w: Double, h: Double): Unit
CanvasRenderingContext2D[JC] var strokeStyle: js.Any
CanvasRenderingContext2D[JC] def strokeText(text: String, x: Double, y: Double, maxWidth: Double?): Unit
CanvasRenderingContext2D[JC] var textAlign: String
CanvasRenderingContext2D[JC] var textBaseline: String
CanvasRenderingContext2D[JC] def transform(m11: Double, m12: Double, m21: Double, m22: Double, dx: Double, dy: Double): Unit
CanvasRenderingContext2D[JC] def translate(x: Double, y: Double): Unit
ChannelMergerNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ChannelMergerNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ChannelMergerNode[JT] var channelCount: Int
ChannelMergerNode[JT] var channelCountMode: AudioNodeChannelCountMode
ChannelMergerNode[JT] var channelInterpretation: AudioNodeChannelInterpretation
ChannelMergerNode[JT] def connect(audioNode: AudioNode): Unit
ChannelMergerNode[JT] def connect(audioParam: AudioParam): Unit
ChannelMergerNode[JT] val context: AudioContext
ChannelMergerNode[JT] def disconnect(output: AudioNode?): Unit
ChannelMergerNode[JT] def dispatchEvent(evt: Event): Boolean
ChannelMergerNode[JT] val numberOfInputs: Int
ChannelMergerNode[JT] val numberOfOutputs: Int
ChannelMergerNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ChannelMergerNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ChannelSplitterNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ChannelSplitterNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ChannelSplitterNode[JT] var channelCount: Int
ChannelSplitterNode[JT] var channelCountMode: AudioNodeChannelCountMode
ChannelSplitterNode[JT] var channelInterpretation: AudioNodeChannelInterpretation
ChannelSplitterNode[JT] def connect(audioNode: AudioNode): Unit
ChannelSplitterNode[JT] def connect(audioParam: AudioParam): Unit
ChannelSplitterNode[JT] val context: AudioContext
ChannelSplitterNode[JT] def disconnect(output: AudioNode?): Unit
ChannelSplitterNode[JT] def dispatchEvent(evt: Event): Boolean
ChannelSplitterNode[JT] val numberOfInputs: Int
ChannelSplitterNode[JT] val numberOfOutputs: Int
ChannelSplitterNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ChannelSplitterNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
CharacterData[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
CharacterData[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
CharacterData[JC] def appendChild(newChild: Node): Node
CharacterData[JC] def appendData(arg: String): Unit
CharacterData[JC] def baseURI: String
CharacterData[JC] def childNodes: NodeList[Node]
CharacterData[JC] def cloneNode(deep: Boolean?): Node
CharacterData[JC] def compareDocumentPosition(other: Node): Int
CharacterData[JC] def contains(otherNode: Node): Boolean
CharacterData[JC] var data: String
CharacterData[JC] def deleteData(offset: Int, count: Int): Unit
CharacterData[JC] def dispatchEvent(evt: Event): Boolean
CharacterData[JC] def firstChild: Node
CharacterData[JC] def hasChildNodes(): Boolean
CharacterData[JC] var innerText: String
CharacterData[JC] def insertBefore(newChild: Node, refChild: Node): Node
CharacterData[JC] def insertData(offset: Int, arg: String): Unit
CharacterData[JC] def isConnected: Boolean
CharacterData[JC] def isDefaultNamespace(namespaceURI: String): Boolean
CharacterData[JC] def isEqualNode(arg: Node): Boolean
CharacterData[JC] def isSameNode(other: Node): Boolean
CharacterData[JC] def isSupported(feature: String, version: String): Boolean
CharacterData[JC] def lastChild: Node
CharacterData[JC] def length: Int
CharacterData[JC] def localName: String
CharacterData[JC] def lookupNamespaceURI(prefix: String): String
CharacterData[JC] def lookupPrefix(namespaceURI: String): String
CharacterData[JC] def namespaceURI: String
CharacterData[JC] def nextElementSibling: Element
CharacterData[JC] def nextSibling: Node
CharacterData[JC] def nodeName: String
CharacterData[JC] def nodeType: Int
CharacterData[JC] var nodeValue: String
CharacterData[JC] def normalize(): Unit
CharacterData[JC] def ownerDocument: Document
CharacterData[JC] def parentNode: Node
CharacterData[JC] def previousElementSibling: Element
CharacterData[JC] def previousSibling: Node
CharacterData[JC] def removeChild(oldChild: Node): Node
CharacterData[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
CharacterData[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
CharacterData[JC] def replaceChild(newChild: Node, oldChild: Node): Node
CharacterData[JC] def replaceData(offset: Int, count: Int, arg: String): Unit
CharacterData[JC] def substringData(offset: Int, count: Int): String
CharacterData[JC] var textContent: String
Chunk[JT] def done: Boolean
Chunk[JT] def value: T
Client[JT] def frameType: FrameType
Client[JT] def id: String
Client[JT] def postMessage(message: js.Any, transfer: js.UndefOr[js.Array[Transferable]]?): Unit
Client[JT] def url: String
ClientQueryOptions[JT] var includeUncontrolled: Boolean
ClientQueryOptions[JT] var `type`: ClientType
ClientType[JT]
ClientType[SO] val all: ClientType
ClientType[SO] val sharedworker: ClientType
ClientType[SO] val window: ClientType
ClientType[SO] val worker: ClientType
Clients[JT] def claim(): js.Promise[Unit]
Clients[JT] def get(id: String): js.Promise[js.UndefOr[Client]]
Clients[JT] def matchAll(options: js.UndefOr[ClientQueryOptions]?): js.Promise[js.Array[Client]]
Clients[JT] def openWindow(url: String): js.Promise[WindowClient]
Clipboard[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Clipboard[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Clipboard[JT] def dispatchEvent(evt: Event): Boolean
Clipboard[JT] def read(): js.Promise[js.Array[ClipboardItem]]
Clipboard[JT] def readText(): js.Promise[String]
Clipboard[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Clipboard[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Clipboard[JT] def write(data: js.Array[ClipboardItem]): js.Promise[Unit]
Clipboard[JT] def writeText(newClipText: String): js.Promise[Unit]
ClipboardEvent[JC] def bubbles: Boolean
ClipboardEvent[JC] def cancelBubble: Boolean
ClipboardEvent[JC] def cancelable: Boolean
ClipboardEvent[JC] def clipboardData: DataTransfer
ClipboardEvent[JC] def composed: Boolean
ClipboardEvent[JC] def currentTarget: EventTarget
ClipboardEvent[JC] def defaultPrevented: Boolean
ClipboardEvent[JC] def eventPhase: Int
ClipboardEvent[JC] def isTrusted: Boolean
ClipboardEvent[JC] def preventDefault(): Unit
ClipboardEvent[JC] def stopImmediatePropagation(): Unit
ClipboardEvent[JC] def stopPropagation(): Unit
ClipboardEvent[JC] def target: EventTarget
ClipboardEvent[JC] def timeStamp: Double
ClipboardEvent[JC] def `type`: String
ClipboardEventInit[JT] var bubbles: js.UndefOr[Boolean]
ClipboardEventInit[JT] var cancelable: js.UndefOr[Boolean]
ClipboardEventInit[JT] var composed: js.UndefOr[Boolean]
ClipboardEventInit[JT] var data: js.UndefOr[String]
ClipboardEventInit[JT] var dataType: js.UndefOr[String]
ClipboardEventInit[JT] var scoped: js.UndefOr[Boolean]
ClipboardItem[JC] def getType(`type`: String): js.Promise[Blob]
ClipboardItem[JC] def presentationStyle: PresentationStyle
ClipboardItem[JC] def types: FrozenArray[String]
ClipboardItemOptions[JT] def presentationStyle: js.UndefOr[PresentationStyle]
CloseEvent[JT] def bubbles: Boolean
CloseEvent[JT] def cancelBubble: Boolean
CloseEvent[JT] def cancelable: Boolean
CloseEvent[JT] def code: Int
CloseEvent[JT] def composed: Boolean
CloseEvent[JT] def currentTarget: EventTarget
CloseEvent[JT] def defaultPrevented: Boolean
CloseEvent[JT] def eventPhase: Int
CloseEvent[JT] def isTrusted: Boolean
CloseEvent[JT] def preventDefault(): Unit
CloseEvent[JT] def reason: String
CloseEvent[JT] def stopImmediatePropagation(): Unit
CloseEvent[JT] def stopPropagation(): Unit
CloseEvent[JT] def target: EventTarget
CloseEvent[JT] def timeStamp: Double
CloseEvent[JT] def `type`: String
CloseEvent[JT] def wasClean: Boolean
Comment[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Comment[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Comment[JC] def appendChild(newChild: Node): Node
Comment[JC] def appendData(arg: String): Unit
Comment[JC] def baseURI: String
Comment[JC] def childNodes: NodeList[Node]
Comment[JC] def cloneNode(deep: Boolean?): Node
Comment[JC] def compareDocumentPosition(other: Node): Int
Comment[JC] def contains(otherNode: Node): Boolean
Comment[JC] var data: String
Comment[JC] def deleteData(offset: Int, count: Int): Unit
Comment[JC] def dispatchEvent(evt: Event): Boolean
Comment[JC] def firstChild: Node
Comment[JC] def hasChildNodes(): Boolean
Comment[JC] var innerText: String
Comment[JC] def insertBefore(newChild: Node, refChild: Node): Node
Comment[JC] def insertData(offset: Int, arg: String): Unit
Comment[JC] def isConnected: Boolean
Comment[JC] def isDefaultNamespace(namespaceURI: String): Boolean
Comment[JC] def isEqualNode(arg: Node): Boolean
Comment[JC] def isSameNode(other: Node): Boolean
Comment[JC] def isSupported(feature: String, version: String): Boolean
Comment[JC] def lastChild: Node
Comment[JC] def length: Int
Comment[JC] def localName: String
Comment[JC] def lookupNamespaceURI(prefix: String): String
Comment[JC] def lookupPrefix(namespaceURI: String): String
Comment[JC] def namespaceURI: String
Comment[JC] def nextElementSibling: Element
Comment[JC] def nextSibling: Node
Comment[JC] def nodeName: String
Comment[JC] def nodeType: Int
Comment[JC] var nodeValue: String
Comment[JC] def normalize(): Unit
Comment[JC] def ownerDocument: Document
Comment[JC] def parentNode: Node
Comment[JC] def previousElementSibling: Element
Comment[JC] def previousSibling: Node
Comment[JC] def removeChild(oldChild: Node): Node
Comment[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Comment[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Comment[JC] def replaceChild(newChild: Node, oldChild: Node): Node
Comment[JC] def replaceData(offset: Int, count: Int, arg: String): Unit
Comment[JC] def substringData(offset: Int, count: Int): String
Comment[JC] var text: String
Comment[JC] var textContent: String
CompositionEvent[JC] def bubbles: Boolean
CompositionEvent[JC] def cancelBubble: Boolean
CompositionEvent[JC] def cancelable: Boolean
CompositionEvent[JC] def composed: Boolean
CompositionEvent[JC] def currentTarget: EventTarget
CompositionEvent[JC] def data: String
CompositionEvent[JC] def defaultPrevented: Boolean
CompositionEvent[JC] def detail: Int
CompositionEvent[JC] def eventPhase: Int
CompositionEvent[JC] def isTrusted: Boolean
CompositionEvent[JC] def locale: String
CompositionEvent[JC] def preventDefault(): Unit
CompositionEvent[JC] def stopImmediatePropagation(): Unit
CompositionEvent[JC] def stopPropagation(): Unit
CompositionEvent[JC] def target: EventTarget
CompositionEvent[JC] def timeStamp: Double
CompositionEvent[JC] def `type`: String
CompositionEvent[JC] def view: Window
CompositionEventInit[JT] var bubbles: js.UndefOr[Boolean]
CompositionEventInit[JT] var cancelable: js.UndefOr[Boolean]
CompositionEventInit[JT] var composed: js.UndefOr[Boolean]
CompositionEventInit[JT] var data: js.UndefOr[String]
CompositionEventInit[JT] var detail: js.UndefOr[Int]
CompositionEventInit[JT] var locale: js.UndefOr[String]
CompositionEventInit[JT] var scoped: js.UndefOr[Boolean]
CompositionEventInit[JT] var view: js.UndefOr[Window]
CompressionFormat[JT]
CompressionFormat[SO] val deflate: CompressionFormat
CompressionFormat[SO] val `deflate-raw`: CompressionFormat
CompressionFormat[SO] val gzip: CompressionFormat
CompressionStream[JC] def readable: ReadableStream[Uint8Array]
CompressionStream[JC] def writable: WriteableStream[Uint8Array]
ConcatParams[JT] val algorithmId: BufferSource
ConcatParams[JT] val hash: HashAlgorithmIdentifier
ConcatParams[JT] val name: String
ConcatParams[JT] val partyUInfo: BufferSource
ConcatParams[JT] val partyVInfo: BufferSource
ConcatParams[JT] val privateInfo: BufferSource
ConcatParams[JT] val publicInfo: BufferSource
ConcatParams[SO] val algorithmId = algorithmId0
ConcatParams[SO] def apply(name: String, hash: HashAlgorithmIdentifier, algorithmId: BufferSource, partyUInfo: BufferSource, partyVInfo: BufferSource, publicInfo: BufferSource, privateInfo: BufferSource): ConcatParams  (@deprecated in 2.0.0)
ConcatParams[SO] val hash = hash0
ConcatParams[SO] val name = name0
ConcatParams[SO] val partyUInfo = partyUInfo0
ConcatParams[SO] val partyVInfo = partyVInfo0
ConcatParams[SO] val privateInfo = privateInfo0
ConcatParams[SO] val publicInfo = publicInfo0
Console[JT] def assert(test: Boolean, message: String, optionalParams: Any*): Unit
Console[JT] def clear(): Unit
Console[JT] def count(label: String?): Unit
Console[JT] def countReset(label: String?): Unit
Console[JT] def debug(message: Any, optionalParams: Any*): Unit
Console[JT] def dir(value: Any, optionalParams: Any*): Unit
Console[JT] def dirxml(value: Any): Unit
Console[JT] def error(message: Any, optionalParams: Any*): Unit
Console[JT] def group(label: js.UndefOr[String]?): Unit
Console[JT] def groupCollapsed(label: js.UndefOr[String]?): Unit
Console[JT] def groupEnd(): Unit
Console[JT] def info(message: Any, optionalParams: Any*): Unit
Console[JT] def log(message: Any, optionalParams: Any*): Unit
Console[JT] def profile(reportName: String?): Unit
Console[JT] def profileEnd(): Unit
Console[JT] def table(data: js.Object | js.Array[_], columns: js.UndefOr[Int]?): Unit
Console[JT] def time(label: String): Unit
Console[JT] def timeEnd(label: String): Unit
Console[JT] def trace(): Unit
Console[JT] def warn(message: Any, optionalParams: Any*): Unit
ConstantSourceNode[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ConstantSourceNode[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ConstantSourceNode[JC] var channelCount: Int
ConstantSourceNode[JC] var channelCountMode: AudioNodeChannelCountMode
ConstantSourceNode[JC] var channelInterpretation: AudioNodeChannelInterpretation
ConstantSourceNode[JC] def connect(audioNode: AudioNode): Unit
ConstantSourceNode[JC] def connect(audioParam: AudioParam): Unit
ConstantSourceNode[JC] val context: AudioContext
ConstantSourceNode[JC] def disconnect(output: AudioNode?): Unit
ConstantSourceNode[JC] def dispatchEvent(evt: Event): Boolean
ConstantSourceNode[JC] val numberOfInputs: Int
ConstantSourceNode[JC] val numberOfOutputs: Int
ConstantSourceNode[JC] val offset: AudioParam
ConstantSourceNode[JC] var onended: js.Function1[Event, _]
ConstantSourceNode[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ConstantSourceNode[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ConstantSourceNode[JC] def start(): Unit
ConstantSourceNode[JC] def start(when: Double): Unit
ConstantSourceNode[JC] def stop(): Unit
ConstantSourceNode[JC] def stop(when: Double): Unit
ConstantSourceNodeOptions[JT] var offset: js.UndefOr[Double]
ConvertToBlobOptions[JT] var quality: js.UndefOr[Double]
ConvertToBlobOptions[JT] var `type`: js.UndefOr[String]
ConvolverNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ConvolverNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ConvolverNode[JT] var buffer: AudioBuffer
ConvolverNode[JT] var channelCount: Int
ConvolverNode[JT] var channelCountMode: AudioNodeChannelCountMode
ConvolverNode[JT] var channelInterpretation: AudioNodeChannelInterpretation
ConvolverNode[JT] def connect(audioNode: AudioNode): Unit
ConvolverNode[JT] def connect(audioParam: AudioParam): Unit
ConvolverNode[JT] val context: AudioContext
ConvolverNode[JT] def disconnect(output: AudioNode?): Unit
ConvolverNode[JT] def dispatchEvent(evt: Event): Boolean
ConvolverNode[JT] var normalize: Boolean
ConvolverNode[JT] val numberOfInputs: Int
ConvolverNode[JT] val numberOfOutputs: Int
ConvolverNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ConvolverNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Coordinates[JT] def accuracy: Double
Coordinates[JT] def altitude: Double
Coordinates[JT] def altitudeAccuracy: Double
Coordinates[JT] def heading: Double
Coordinates[JT] def latitude: Double
Coordinates[JT] def longitude: Double
Coordinates[JT] def speed: Double
CreateImageBitmapOptions[JT] var colorSpaceConversion: js.UndefOr[String]
CreateImageBitmapOptions[JT] var imageOrientation: js.UndefOr[String]
CreateImageBitmapOptions[JT] var premultiplyAlpha: js.UndefOr[String]
CreateImageBitmapOptions[JT] var resizeHeight: js.UndefOr[Double]
CreateImageBitmapOptions[JT] var resizeQuality: js.UndefOr[String]
CreateImageBitmapOptions[JT] var resizeWidth: js.UndefOr[Double]
Crypto[JT] def getRandomValues(array: ArrayBufferView): ArrayBufferView
Crypto[JT] val subtle: SubtleCrypto
CryptoKey[JC] val algorithm: KeyAlgorithm
CryptoKey[JC] val extractable: Boolean
CryptoKey[JC] val `type`: String
CryptoKey[JC] val usages: js.Array[KeyUsage]
CryptoKeyPair[JT] val privateKey: CryptoKey
CryptoKeyPair[JT] val publicKey: CryptoKey
CustomElementRegistry[JC] def define(name: String, constructor: js.Dynamic, options: ElementDefinitionOptions?): Unit
CustomEvent[JC] def bubbles: Boolean
CustomEvent[JC] def cancelBubble: Boolean
CustomEvent[JC] def cancelable: Boolean
CustomEvent[JC] def composed: Boolean
CustomEvent[JC] def currentTarget: EventTarget
CustomEvent[JC] def defaultPrevented: Boolean
CustomEvent[JC] def detail: Any
CustomEvent[JC] def eventPhase: Int
CustomEvent[JC] def isTrusted: Boolean
CustomEvent[JC] def preventDefault(): Unit
CustomEvent[JC] def stopImmediatePropagation(): Unit
CustomEvent[JC] def stopPropagation(): Unit
CustomEvent[JC] def target: EventTarget
CustomEvent[JC] def timeStamp: Double
CustomEvent[JC] def `type`: String
CustomEventInit[JT] var bubbles: js.UndefOr[Boolean]
CustomEventInit[JT] var cancelable: js.UndefOr[Boolean]
CustomEventInit[JT] var composed: js.UndefOr[Boolean]
CustomEventInit[JT] var detail: js.UndefOr[Any]
CustomEventInit[JT] var scoped: js.UndefOr[Boolean]
DOMException[JC] def message: String
DOMException[JC] def name: String
DOMException[JO] val ABORT_ERR: Int
DOMException[JO] val DATA_CLONE_ERR: Int
DOMException[JO] val DOMSTRING_SIZE_ERR: Int
DOMException[JO] val HIERARCHY_REQUEST_ERR: Int
DOMException[JO] val INDEX_SIZE_ERR: Int
DOMException[JO] val INUSE_ATTRIBUTE_ERR: Int
DOMException[JO] val INVALID_ACCESS_ERR: Int
DOMException[JO] val INVALID_CHARACTER_ERR: Int
DOMException[JO] val INVALID_MODIFICATION_ERR: Int
DOMException[JO] val INVALID_NODE_TYPE_ERR: Int
DOMException[JO] val INVALID_STATE_ERR: Int
DOMException[JO] val NAMESPACE_ERR: Int
DOMException[JO] val NETWORK_ERR: Int
DOMException[JO] val NOT_FOUND_ERR: Int
DOMException[JO] val NOT_SUPPORTED_ERR: Int
DOMException[JO] val NO_DATA_ALLOWED_ERR: Int
DOMException[JO] val NO_MODIFICATION_ALLOWED_ERR: Int
DOMException[JO] val QUOTA_EXCEEDED_ERR: Int
DOMException[JO] val SECURITY_ERR: Int
DOMException[JO] val SYNTAX_ERR: Int
DOMException[JO] val TIMEOUT_ERR: Int
DOMException[JO] val TYPE_MISMATCH_ERR: Int
DOMException[JO] val URL_MISMATCH_ERR: Int
DOMException[JO] val VALIDATION_ERR: Int
DOMException[JO] val WRONG_DOCUMENT_ERR: Int
DOMImplementation[JC] def createDocument(namespaceURI: String, qualifiedName: String, doctype: DocumentType): Document
DOMImplementation[JC] def createDocumentType(qualifiedName: String, publicId: String, systemId: String): DocumentType
DOMImplementation[JC] def createHTMLDocument(title: String): Document
DOMImplementation[JC] def hasFeature(feature: String): Boolean
DOMImplementation[JC] def hasFeature(feature: String, version: String): Boolean
DOMList[JT] @JSBracketAccess def apply(index: Int): T
DOMList[JT] def length: Int
DOMList[SO] def apply(x: Int): T
DOMList[SO] implicit def domListAsSeq[T](domList: DOMList[T]): scala.collection.Seq[T]
DOMList[SO] def hasNext: Boolean
DOMList[SO] def iterator: Iterator[T]
DOMList[SO] def length: Int
DOMList[SO] def next(): T
DOMParser[JC] def parseFromString(string: String, mimeType: MIMEType): Document
DOMRect[JC] def bottom: Double
DOMRect[JC] def height: Double
DOMRect[JC] def height_ = (height: Double): Unit
DOMRect[JC] def left: Double
DOMRect[JC] def right: Double
DOMRect[JC] def top: Double
DOMRect[JC] def width: Double
DOMRect[JC] def width_ = (width: Double): Unit
DOMRect[JC] def x: Double
DOMRect[JC] def x_ = (x: Double): Unit
DOMRect[JC] def y: Double
DOMRect[JC] def y_ = (y: Double): Unit
DOMRectInit[JT] var height: js.UndefOr[Double]
DOMRectInit[JT] var width: js.UndefOr[Double]
DOMRectInit[JT] var x: js.UndefOr[Double]
DOMRectInit[JT] var y: js.UndefOr[Double]
DOMRectList[JC] @JSBracketAccess def apply(index: Int): T
DOMRectList[JC] def length: Int
DOMRectReadOnly[JT] def bottom: Double
DOMRectReadOnly[JT] def height: Double
DOMRectReadOnly[JT] def left: Double
DOMRectReadOnly[JT] def right: Double
DOMRectReadOnly[JT] def top: Double
DOMRectReadOnly[JT] def width: Double
DOMRectReadOnly[JT] def x: Double
DOMRectReadOnly[JT] def y: Double
DOMSettableTokenList[JT] def add(token: String): Unit
DOMSettableTokenList[JT] @JSBracketAccess def apply(index: Int): T
DOMSettableTokenList[JT] def contains(token: String): Boolean
DOMSettableTokenList[JT] def item(index: Int): String
DOMSettableTokenList[JT] def length: Int
DOMSettableTokenList[JT] def remove(token: String): Unit
DOMSettableTokenList[JT] def toggle(token: String): Boolean
DOMSettableTokenList[JT] def toggle(token: String, force: Boolean): Boolean
DOMSettableTokenList[JT] def value: String
DOMStringList[JC] @JSBracketAccess def apply(index: Int): T
DOMStringList[JC] def contains(str: String): Boolean
DOMStringList[JC] def item(index: Int): String
DOMStringList[JC] def length: Int
DOMTokenList[JC] def add(token: String): Unit
DOMTokenList[JC] @JSBracketAccess def apply(index: Int): T
DOMTokenList[JC] def contains(token: String): Boolean
DOMTokenList[JC] def item(index: Int): String
DOMTokenList[JC] def length: Int
DOMTokenList[JC] def remove(token: String): Unit
DOMTokenList[JC] def toggle(token: String): Boolean
DOMTokenList[JC] def toggle(token: String, force: Boolean): Boolean
DataTransfer[JT] def clearData(format: String?): Unit
DataTransfer[JT] var dropEffect: DataTransferDropEffectKind
DataTransfer[JT] var effectAllowed: DataTransferEffectAllowedKind
DataTransfer[JT] def files: FileList
DataTransfer[JT] def getData(format: String): String
DataTransfer[JT] def items: DataTransferItemList
DataTransfer[JT] def setData(format: String, data: String): Unit
DataTransfer[JT] def setDragImage(image: Element, x: Double, y: Double): Unit
DataTransfer[JT] def types: FrozenArray[String]
DataTransferDropEffectKind[JT]
DataTransferDropEffectKind[SO] val copy: DataTransferDropEffectKind
DataTransferDropEffectKind[SO] val link: DataTransferDropEffectKind
DataTransferDropEffectKind[SO] val move: DataTransferDropEffectKind
DataTransferDropEffectKind[SO] val none: DataTransferDropEffectKind
DataTransferEffectAllowedKind[JT]
DataTransferEffectAllowedKind[SO] val all: DataTransferEffectAllowedKind
DataTransferEffectAllowedKind[SO] val copy: DataTransferEffectAllowedKind
DataTransferEffectAllowedKind[SO] val copyLink: DataTransferEffectAllowedKind
DataTransferEffectAllowedKind[SO] val copyMove: DataTransferEffectAllowedKind
DataTransferEffectAllowedKind[SO] val link: DataTransferEffectAllowedKind
DataTransferEffectAllowedKind[SO] val linkMove: DataTransferEffectAllowedKind
DataTransferEffectAllowedKind[SO] val move: DataTransferEffectAllowedKind
DataTransferEffectAllowedKind[SO] val none: DataTransferEffectAllowedKind
DataTransferEffectAllowedKind[SO] val uninitialized: DataTransferEffectAllowedKind
DataTransferItem[JC] def getAsFile(): File
DataTransferItem[JC] def getAsString(callback: js.Function1[String, Unit]): Unit
DataTransferItem[JC] def kind: DragDataItemKind
DataTransferItem[JC] def `type`: String
DataTransferItemList[JC] def add(data: File): DataTransferItem
DataTransferItemList[JC] def add(data: String, `type`: String): DataTransferItem
DataTransferItemList[JC] @js.annotation.JSBracketAccess def apply(index: Int): DataTransferItem
DataTransferItemList[JC] def clear(): Unit
DataTransferItemList[JC] def length: Int
DataTransferItemList[JC] def remove(index: Int): Unit
DecompressionStream[JC] def readable: ReadableStream[Uint8Array]
DecompressionStream[JC] def writable: WriteableStream[Uint8Array]
DedicatedWorkerGlobalScope[JO] def self: DedicatedWorkerGlobalScope
DedicatedWorkerGlobalScope[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
DedicatedWorkerGlobalScope[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
DedicatedWorkerGlobalScope[JT] def atob(encodedString: String): String
DedicatedWorkerGlobalScope[JT] def btoa(rawString: String): String
DedicatedWorkerGlobalScope[JT] def caches: js.UndefOr[CacheStorage]
DedicatedWorkerGlobalScope[JT] def clearInterval(handle: Int): Unit
DedicatedWorkerGlobalScope[JT] def clearTimeout(handle: Int): Unit
DedicatedWorkerGlobalScope[JT] def close(): Unit
DedicatedWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput): js.Promise[ImageBitmap]
DedicatedWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
DedicatedWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double): js.Promise[ImageBitmap]
DedicatedWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
DedicatedWorkerGlobalScope[JT] def crossOriginIsolated: Boolean
DedicatedWorkerGlobalScope[JT] def dispatchEvent(evt: Event): Boolean
DedicatedWorkerGlobalScope[JT] def fetch(info: RequestInfo, init: RequestInit?): js.Promise[Response]
DedicatedWorkerGlobalScope[JT] def importScripts(urls: js.Array[String]): Unit
DedicatedWorkerGlobalScope[JT] def indexedDB: js.UndefOr[IDBFactory]
DedicatedWorkerGlobalScope[JT] def isSecureContext: Boolean
DedicatedWorkerGlobalScope[JT] def location: WorkerLocation
DedicatedWorkerGlobalScope[JT] def navigator: WorkerNavigator
DedicatedWorkerGlobalScope[JT] var onError: js.Function1[ErrorEvent, _]
DedicatedWorkerGlobalScope[JT] var onlanguagechange: js.Function1[Event, _]
DedicatedWorkerGlobalScope[JT] var onmessage: js.Function1[MessageEvent, _]
DedicatedWorkerGlobalScope[JT] var onoffline: js.Function1[Event, _]
DedicatedWorkerGlobalScope[JT] var ononline: js.Function1[Event, _]
DedicatedWorkerGlobalScope[JT] def origin: String
DedicatedWorkerGlobalScope[JT] def postMessage(message: js.Any, transferList: js.UndefOr[js.Array[Transferable]]?): Unit
DedicatedWorkerGlobalScope[JT] def queueMicrotask(function: js.Function0[Any]): Unit
DedicatedWorkerGlobalScope[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
DedicatedWorkerGlobalScope[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
DedicatedWorkerGlobalScope[JT] def self: this.type
DedicatedWorkerGlobalScope[JT] def setInterval(handler: js.Function0[Any], timeout: Double): Int
DedicatedWorkerGlobalScope[JT] def setTimeout(handler: js.Function0[Any], timeout: Double): Int
DelayNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
DelayNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
DelayNode[JT] var channelCount: Int
DelayNode[JT] var channelCountMode: AudioNodeChannelCountMode
DelayNode[JT] var channelInterpretation: AudioNodeChannelInterpretation
DelayNode[JT] def connect(audioNode: AudioNode): Unit
DelayNode[JT] def connect(audioParam: AudioParam): Unit
DelayNode[JT] val context: AudioContext
DelayNode[JT] val delayTime: AudioParam
DelayNode[JT] def disconnect(output: AudioNode?): Unit
DelayNode[JT] def dispatchEvent(evt: Event): Boolean
DelayNode[JT] val numberOfInputs: Int
DelayNode[JT] val numberOfOutputs: Int
DelayNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
DelayNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
DeprecatedCSSAliases[SO] type FontFaceRule = CSSFontFaceRule  (@deprecated in 2.0.0)
DeprecatedCSSAliases[SO] type ImportRule = CSSImportRule  (@deprecated in 2.0.0)
DeprecatedCSSAliases[SO] type KeyframeRule = CSSKeyframeRule  (@deprecated in 2.0.0)
DeprecatedCSSAliases[SO] type MediaRule = CSSMediaRule  (@deprecated in 2.0.0)
DeprecatedCSSAliases[SO] type NamespaceRule = CSSNamespaceRule  (@deprecated in 2.0.0)
DeprecatedCSSAliases[SO] type PageRule = CSSPageRule  (@deprecated in 2.0.0)
DeprecatedCSSAliases[SO] type Rule = CSSRule  (@deprecated in 2.0.0)
DeprecatedCSSAliases[SO] type RuleList = CSSRuleList  (@deprecated in 2.0.0)
DeprecatedCSSAliases[SO] type StyleDeclaration = CSSStyleDeclaration  (@deprecated in 2.0.0)
DeprecatedCSSAliases[SO] type StyleRule = CSSStyleRule  (@deprecated in 2.0.0)
DeprecatedCSSAliases[SO] type StyleSheet = CSSStyleSheet  (@deprecated in 2.0.0)
DeprecatedCSSAliases[SO] @deprecated("use dom.CSS instead", "2.0.0") def CSS = dom.CSS  (@deprecated in 2.0.0)
DeprecatedCSSAliases[SO] @deprecated("use dom.Rule instead", "2.0.0") def Rule = CSSRule  (@deprecated in 2.0.0)
DeviceAcceleration[JT] val x: Double
DeviceAcceleration[JT] val y: Double
DeviceAcceleration[JT] val z: Double
DeviceMotionEvent[JC] val acceleration: DeviceAcceleration
DeviceMotionEvent[JC] val accelerationIncludingGravity: DeviceAcceleration
DeviceMotionEvent[JC] def bubbles: Boolean
DeviceMotionEvent[JC] def cancelBubble: Boolean
DeviceMotionEvent[JC] def cancelable: Boolean
DeviceMotionEvent[JC] def composed: Boolean
DeviceMotionEvent[JC] def currentTarget: EventTarget
DeviceMotionEvent[JC] def defaultPrevented: Boolean
DeviceMotionEvent[JC] def eventPhase: Int
DeviceMotionEvent[JC] val interval: Double
DeviceMotionEvent[JC] def isTrusted: Boolean
DeviceMotionEvent[JC] def preventDefault(): Unit
DeviceMotionEvent[JC] val rotationRate: DeviceRotationRate
DeviceMotionEvent[JC] def stopImmediatePropagation(): Unit
DeviceMotionEvent[JC] def stopPropagation(): Unit
DeviceMotionEvent[JC] def target: EventTarget
DeviceMotionEvent[JC] def timeStamp: Double
DeviceMotionEvent[JC] def `type`: String
DeviceMotionEventInit[JT] var acceleration: js.UndefOr[DeviceAcceleration]
DeviceMotionEventInit[JT] var accelerationIncludingGravity: js.UndefOr[DeviceAcceleration]
DeviceMotionEventInit[JT] var bubbles: js.UndefOr[Boolean]
DeviceMotionEventInit[JT] var cancelable: js.UndefOr[Boolean]
DeviceMotionEventInit[JT] var composed: js.UndefOr[Boolean]
DeviceMotionEventInit[JT] var interval: js.UndefOr[Double]
DeviceMotionEventInit[JT] var rotationRate: js.UndefOr[DeviceRotationRate]
DeviceMotionEventInit[JT] var scoped: js.UndefOr[Boolean]
DeviceOrientationEvent[JC] val absolute: Boolean
DeviceOrientationEvent[JC] val alpha: Double
DeviceOrientationEvent[JC] val beta: Double
DeviceOrientationEvent[JC] def bubbles: Boolean
DeviceOrientationEvent[JC] def cancelBubble: Boolean
DeviceOrientationEvent[JC] def cancelable: Boolean
DeviceOrientationEvent[JC] def composed: Boolean
DeviceOrientationEvent[JC] def currentTarget: EventTarget
DeviceOrientationEvent[JC] def defaultPrevented: Boolean
DeviceOrientationEvent[JC] def eventPhase: Int
DeviceOrientationEvent[JC] val gamma: Double
DeviceOrientationEvent[JC] def isTrusted: Boolean
DeviceOrientationEvent[JC] def preventDefault(): Unit
DeviceOrientationEvent[JC] def stopImmediatePropagation(): Unit
DeviceOrientationEvent[JC] def stopPropagation(): Unit
DeviceOrientationEvent[JC] def target: EventTarget
DeviceOrientationEvent[JC] def timeStamp: Double
DeviceOrientationEvent[JC] def `type`: String
DeviceOrientationEventInit[JT] var absolute: js.UndefOr[Boolean]
DeviceOrientationEventInit[JT] var alpha: js.UndefOr[Double]
DeviceOrientationEventInit[JT] var beta: js.UndefOr[Double]
DeviceOrientationEventInit[JT] var bubbles: js.UndefOr[Boolean]
DeviceOrientationEventInit[JT] var cancelable: js.UndefOr[Boolean]
DeviceOrientationEventInit[JT] var composed: js.UndefOr[Boolean]
DeviceOrientationEventInit[JT] var gamma: js.UndefOr[Double]
DeviceOrientationEventInit[JT] var scoped: js.UndefOr[Boolean]
DeviceRotationRate[JT] val alpha: Double
DeviceRotationRate[JT] val beta: Double
DeviceRotationRate[JT] val gamma: Double
DhImportKeyParams[JT] val generator: BigInteger
DhImportKeyParams[JT] val name: String
DhImportKeyParams[JT] val prime: BigInteger
DhImportKeyParams[SO] def apply(name: String, prime: BigInteger, generator: BigInteger): DhImportKeyParams  (@deprecated in 2.0.0)
DhImportKeyParams[SO] val generator = generator0
DhImportKeyParams[SO] val name = name0
DhImportKeyParams[SO] val prime = prime0
DhKeyAlgorithm[JT] val generator: BigInteger
DhKeyAlgorithm[JT] val name: String
DhKeyAlgorithm[JT] val prime: BigInteger
DhKeyAlgorithm[SO] def apply(name: String, prime: BigInteger, generator: BigInteger): DhKeyAlgorithm  (@deprecated in 2.0.0)
DhKeyAlgorithm[SO] val generator = generator0
DhKeyAlgorithm[SO] val name = name0
DhKeyAlgorithm[SO] val prime = prime0
DhKeyDeriveParams[JT] val name: String
DhKeyDeriveParams[JT] val public: CryptoKey
DhKeyDeriveParams[SO] def apply(name: String, public: CryptoKey): DhKeyDeriveParams  (@deprecated in 2.0.0)
DhKeyDeriveParams[SO] val name = name0
DhKeyDeriveParams[SO] val public = public0
DhKeyGenParams[JT] val generator: BigInteger
DhKeyGenParams[JT] val name: String
DhKeyGenParams[JT] val prime: BigInteger
DhKeyGenParams[SO] def apply(name: String, prime: BigInteger, generator: BigInteger): DhKeyGenParams  (@deprecated in 2.0.0)
DhKeyGenParams[SO] val generator = generator0
DhKeyGenParams[SO] val name = name0
DhKeyGenParams[SO] val prime = prime0
Document[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Document[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Document[JC] def adoptNode(source: Node): Node
Document[JC] def appendChild(newChild: Node): Node
Document[JC] def baseURI: String
Document[JC] def characterSet: String
Document[JC] def childElementCount: Int
Document[JC] def childNodes: NodeList[Node]
Document[JC] def children: HTMLCollection[Element]
Document[JC] def cloneNode(deep: Boolean?): Node
Document[JC] def compareDocumentPosition(other: Node): Int
Document[JC] def contains(otherNode: Node): Boolean
Document[JC] def createAttribute(name: String): Attr
Document[JC] def createAttributeNS(namespaceURI: String, qualifiedName: String): Attr
Document[JC] def createCDATASection(data: String): CDATASection
Document[JC] def createComment(data: String): Comment
Document[JC] def createDocumentFragment(): DocumentFragment
Document[JC] def createElement(tagName: String): Element
Document[JC] def createElement(tagName: String, options: ElementCreationOptions): Element
Document[JC] def createElement(tagName: String, options: String): Element
Document[JC] def createElementNS(namespaceURI: String, qualifiedName: String): Element
Document[JC] def createElementNS(namespaceURI: String, qualifiedName: String, options: ElementCreationOptions): Element
Document[JC] def createElementNS(namespaceURI: String, qualifiedName: String, options: String): Element
Document[JC] def createEvent(eventInterface: String): Event
Document[JC] def createNSResolver(node: Node): XPathNSResolver
Document[JC] def createNodeIterator(root: Node, whatToShow: Int, filter: NodeFilter, entityReferenceExpansion: Boolean): NodeIterator
Document[JC] def createProcessingInstruction(target: String, data: String): ProcessingInstruction
Document[JC] def createRange(): Range
Document[JC] def createStyleSheet(href: String?, index: Int?): CSSStyleSheet
Document[JC] def createTextNode(data: String): Text
Document[JC] def createTreeWalker(root: Node, whatToShow: Int, filter: NodeFilter, entityReferenceExpansion: Boolean): TreeWalker
Document[JC] def dispatchEvent(evt: Event): Boolean
Document[JC] def doctype: DocumentType
Document[JC] def documentElement: Element
Document[JC] def documentURI: String
Document[JC] def elementFromPoint(x: Double, y: Double): Element
Document[JC] def evaluate(xpathExpression: String, contextNode: Node, namespaceResolver: XPathNSResolver, resultType: Int, result: XPathResult): XPathResult
Document[JC] def evaluate(xpathExpression: String, contextNode: Node, namespaceResolver: js.Function1[String, String], resultType: Int, result: XPathResult): XPathResult
Document[JC] def exitFullscreen(): js.Promise[Unit]
Document[JC] def exitPointerLock(): Unit
Document[JC] def firstChild: Node
Document[JC] def firstElementChild: Element
Document[JC] def fullscreenElement: Element
Document[JC] def fullscreenEnabled: Boolean
Document[JC] def getElementById(elementId: String): Element
Document[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
Document[JC] def getElementsByName(elementName: String): NodeList[Node]
Document[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
Document[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
Document[JC] def hasChildNodes(): Boolean
Document[JC] def hidden: Boolean
Document[JC] def implementation: DOMImplementation
Document[JC] def importNode(importedNode: Node, deep: Boolean): Node
Document[JC] var innerText: String
Document[JC] def insertBefore(newChild: Node, refChild: Node): Node
Document[JC] def isConnected: Boolean
Document[JC] def isDefaultNamespace(namespaceURI: String): Boolean
Document[JC] def isEqualNode(arg: Node): Boolean
Document[JC] def isSameNode(other: Node): Boolean
Document[JC] def isSupported(feature: String, version: String): Boolean
Document[JC] def lastChild: Node
Document[JC] def lastElementChild: Element
Document[JC] def lastModified: String
Document[JC] def localName: String
Document[JC] def lookupNamespaceURI(prefix: String): String
Document[JC] def lookupPrefix(namespaceURI: String): String
Document[JC] def namespaceURI: String
Document[JC] def nextSibling: Node
Document[JC] def nodeName: String
Document[JC] def nodeType: Int
Document[JC] var nodeValue: String
Document[JC] def normalize(): Unit
Document[JC] var onfullscreenchange: js.Function1[Event, _]
Document[JC] var onfullscreenerror: js.Function1[Event, _]
Document[JC] var onpointerlockchange: js.Function1[Event, _]
Document[JC] var onpointerlockerror: js.Function1[Event, _]
Document[JC] def ownerDocument: Document
Document[JC] def parentNode: Node
Document[JC] def pointerLockElement: Element
Document[JC] def previousSibling: Node
Document[JC] def querySelector(selectors: String): Element
Document[JC] def querySelectorAll(selectors: String): NodeList[Element]
Document[JC] def removeChild(oldChild: Node): Node
Document[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Document[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Document[JC] def replaceChild(newChild: Node, oldChild: Node): Node
Document[JC] def replaceChildren(nodes: Node | String*): Unit
Document[JC] def styleSheets: StyleSheetList
Document[JC] var textContent: String
Document[JC] def visibilityState: VisibilityState | String
Document[JC] var visibilitychange: js.Function1[Event, _]
DocumentEvent[JT] def createEvent(eventInterface: String): Event
DocumentFragment[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
DocumentFragment[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
DocumentFragment[JC] def appendChild(newChild: Node): Node
DocumentFragment[JC] def baseURI: String
DocumentFragment[JC] def childNodes: NodeList[Node]
DocumentFragment[JC] def cloneNode(deep: Boolean?): Node
DocumentFragment[JC] def compareDocumentPosition(other: Node): Int
DocumentFragment[JC] def contains(otherNode: Node): Boolean
DocumentFragment[JC] def dispatchEvent(evt: Event): Boolean
DocumentFragment[JC] def firstChild: Node
DocumentFragment[JC] def hasChildNodes(): Boolean
DocumentFragment[JC] var innerText: String
DocumentFragment[JC] def insertBefore(newChild: Node, refChild: Node): Node
DocumentFragment[JC] def isConnected: Boolean
DocumentFragment[JC] def isDefaultNamespace(namespaceURI: String): Boolean
DocumentFragment[JC] def isEqualNode(arg: Node): Boolean
DocumentFragment[JC] def isSameNode(other: Node): Boolean
DocumentFragment[JC] def isSupported(feature: String, version: String): Boolean
DocumentFragment[JC] def lastChild: Node
DocumentFragment[JC] def localName: String
DocumentFragment[JC] def lookupNamespaceURI(prefix: String): String
DocumentFragment[JC] def lookupPrefix(namespaceURI: String): String
DocumentFragment[JC] def namespaceURI: String
DocumentFragment[JC] def nextSibling: Node
DocumentFragment[JC] def nodeName: String
DocumentFragment[JC] def nodeType: Int
DocumentFragment[JC] var nodeValue: String
DocumentFragment[JC] def normalize(): Unit
DocumentFragment[JC] def ownerDocument: Document
DocumentFragment[JC] def parentNode: Node
DocumentFragment[JC] def previousSibling: Node
DocumentFragment[JC] def querySelector(selectors: String): Element
DocumentFragment[JC] def querySelectorAll(selectors: String): NodeList[Element]
DocumentFragment[JC] def removeChild(oldChild: Node): Node
DocumentFragment[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
DocumentFragment[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
DocumentFragment[JC] def replaceChild(newChild: Node, oldChild: Node): Node
DocumentFragment[JC] var textContent: String
DocumentReadyState[JT]
DocumentReadyState[SO] val complete: DocumentReadyState
DocumentReadyState[SO] val interactive: DocumentReadyState
DocumentReadyState[SO] val loading: DocumentReadyState
DocumentType[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
DocumentType[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
DocumentType[JC] def appendChild(newChild: Node): Node
DocumentType[JC] def baseURI: String
DocumentType[JC] def childNodes: NodeList[Node]
DocumentType[JC] def cloneNode(deep: Boolean?): Node
DocumentType[JC] def compareDocumentPosition(other: Node): Int
DocumentType[JC] def contains(otherNode: Node): Boolean
DocumentType[JC] def dispatchEvent(evt: Event): Boolean
DocumentType[JC] def firstChild: Node
DocumentType[JC] def hasChildNodes(): Boolean
DocumentType[JC] var innerText: String
DocumentType[JC] def insertBefore(newChild: Node, refChild: Node): Node
DocumentType[JC] def isConnected: Boolean
DocumentType[JC] def isDefaultNamespace(namespaceURI: String): Boolean
DocumentType[JC] def isEqualNode(arg: Node): Boolean
DocumentType[JC] def isSameNode(other: Node): Boolean
DocumentType[JC] def isSupported(feature: String, version: String): Boolean
DocumentType[JC] def lastChild: Node
DocumentType[JC] def localName: String
DocumentType[JC] def lookupNamespaceURI(prefix: String): String
DocumentType[JC] def lookupPrefix(namespaceURI: String): String
DocumentType[JC] def name: String
DocumentType[JC] def namespaceURI: String
DocumentType[JC] def nextSibling: Node
DocumentType[JC] def nodeName: String
DocumentType[JC] def nodeType: Int
DocumentType[JC] var nodeValue: String
DocumentType[JC] def normalize(): Unit
DocumentType[JC] def ownerDocument: Document
DocumentType[JC] def parentNode: Node
DocumentType[JC] def previousSibling: Node
DocumentType[JC] def publicId: String
DocumentType[JC] def removeChild(oldChild: Node): Node
DocumentType[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
DocumentType[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
DocumentType[JC] def replaceChild(newChild: Node, oldChild: Node): Node
DocumentType[JC] def systemId: String
DocumentType[JC] var textContent: String
DragDataItemKind[JT]
DragDataItemKind[SO] val file: DragDataItemKind
DragDataItemKind[SO] val string: DragDataItemKind
DragEffect[SO] final val All = "all"
DragEffect[SO] final val Copy = "copy"
DragEffect[SO] final val CopyLink = "copyLink"
DragEffect[SO] final val CopyMove = "copyMove"
DragEffect[SO] final val Link = "link"
DragEffect[SO] final val LinkMove = "linkMove"
DragEffect[SO] final val Move = "move"
DragEffect[SO] final val None = "none"
DragEvent[JT] def altKey: Boolean
DragEvent[JT] def bubbles: Boolean
DragEvent[JT] def button: Int
DragEvent[JT] def buttons: Int
DragEvent[JT] def cancelBubble: Boolean
DragEvent[JT] def cancelable: Boolean
DragEvent[JT] def clientX: Double
DragEvent[JT] def clientY: Double
DragEvent[JT] def composed: Boolean
DragEvent[JT] def ctrlKey: Boolean
DragEvent[JT] def currentTarget: EventTarget
DragEvent[JT] def dataTransfer: DataTransfer
DragEvent[JT] def defaultPrevented: Boolean
DragEvent[JT] def detail: Int
DragEvent[JT] def eventPhase: Int
DragEvent[JT] def getModifierState(keyArg: String): Boolean
DragEvent[JT] def isTrusted: Boolean
DragEvent[JT] def metaKey: Boolean
DragEvent[JT] def movementX: Double
DragEvent[JT] def movementY: Double
DragEvent[JT] def pageX: Double
DragEvent[JT] def pageY: Double
DragEvent[JT] def preventDefault(): Unit
DragEvent[JT] def relatedTarget: EventTarget
DragEvent[JT] def screenX: Double
DragEvent[JT] def screenY: Double
DragEvent[JT] def shiftKey: Boolean
DragEvent[JT] def stopImmediatePropagation(): Unit
DragEvent[JT] def stopPropagation(): Unit
DragEvent[JT] def target: EventTarget
DragEvent[JT] def timeStamp: Double
DragEvent[JT] def `type`: String
DragEvent[JT] def view: Window
DynamicsCompressorNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
DynamicsCompressorNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
DynamicsCompressorNode[JT] val attack: AudioParam
DynamicsCompressorNode[JT] var channelCount: Int
DynamicsCompressorNode[JT] var channelCountMode: AudioNodeChannelCountMode
DynamicsCompressorNode[JT] var channelInterpretation: AudioNodeChannelInterpretation
DynamicsCompressorNode[JT] def connect(audioNode: AudioNode): Unit
DynamicsCompressorNode[JT] def connect(audioParam: AudioParam): Unit
DynamicsCompressorNode[JT] val context: AudioContext
DynamicsCompressorNode[JT] def disconnect(output: AudioNode?): Unit
DynamicsCompressorNode[JT] def dispatchEvent(evt: Event): Boolean
DynamicsCompressorNode[JT] val knee: AudioParam
DynamicsCompressorNode[JT] val numberOfInputs: Int
DynamicsCompressorNode[JT] val numberOfOutputs: Int
DynamicsCompressorNode[JT] val ratio: AudioParam
DynamicsCompressorNode[JT] val reduction: AudioParam
DynamicsCompressorNode[JT] val release: AudioParam
DynamicsCompressorNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
DynamicsCompressorNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
DynamicsCompressorNode[JT] val threshold: AudioParam
EcKeyAlgorithm[JT] val name: String
EcKeyAlgorithm[JT] val namedCurve: String
EcKeyAlgorithm[SO] def apply(name: String, namedCurve: String): EcKeyAlgorithm  (@deprecated in 2.0.0)
EcKeyAlgorithm[SO] val name = name0
EcKeyAlgorithm[SO] val namedCurve = namedCurve0
EcKeyGenParams[JT] val name: String
EcKeyGenParams[JT] val namedCurve: String
EcKeyGenParams[SO] def apply(name: String, namedCurve: String): EcKeyGenParams  (@deprecated in 2.0.0)
EcKeyGenParams[SO] val name = name0
EcKeyGenParams[SO] val namedCurve = namedCurve0
EcKeyImportParams[JT] val name: String
EcKeyImportParams[JT] val namedCurve: String
EcKeyImportParams[SO] def apply(name: String, namedCurve: String): EcKeyImportParams  (@deprecated in 2.0.0)
EcKeyImportParams[SO] val name = name0
EcKeyImportParams[SO] val namedCurve = namedCurve0
EcdhKeyDeriveParams[JT] val name: String
EcdhKeyDeriveParams[JT] val public: CryptoKey
EcdhKeyDeriveParams[SO] def apply(name: String, public: CryptoKey): EcdhKeyDeriveParams  (@deprecated in 2.0.0)
EcdhKeyDeriveParams[SO] val name = name0
EcdhKeyDeriveParams[SO] val public = public0
EcdsaParams[JT] val hash: HashAlgorithmIdentifier
EcdsaParams[JT] val name: String
EcdsaParams[SO] def apply(name: String, hash: HashAlgorithmIdentifier): EcdsaParams  (@deprecated in 2.0.0)
EcdsaParams[SO] val hash = hash0
EcdsaParams[SO] val name = name0
Element[JC] var accessKey: String
Element[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Element[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Element[JC] def after(nodes: Node | String*): Unit
Element[JC] def append(nodes: Node | String*): Unit
Element[JC] def appendChild(newChild: Node): Node
Element[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
Element[JC] def attributes: NamedNodeMap
Element[JC] def baseURI: String
Element[JC] def before(nodes: Node | String*): Unit
Element[JC] def childElementCount: Int
Element[JC] def childNodes: NodeList[Node]
Element[JC] def children: HTMLCollection[Element]
Element[JC] var classList: DOMTokenList
Element[JC] def clientHeight: Int
Element[JC] def clientLeft: Int
Element[JC] def clientTop: Int
Element[JC] def clientWidth: Int
Element[JC] def cloneNode(deep: Boolean?): Node
Element[JC] def closest(selector: String): Element
Element[JC] def compareDocumentPosition(other: Node): Int
Element[JC] def contains(otherNode: Node): Boolean
Element[JC] def dispatchEvent(evt: Event): Boolean
Element[JC] def firstChild: Node
Element[JC] def firstElementChild: Element
Element[JC] def getAttribute(name: String): String
Element[JC] def getAttributeNS(namespaceURI: String, localName: String): String
Element[JC] def getAttributeNode(name: String): Attr
Element[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
Element[JC] def getBoundingClientRect(): DOMRect
Element[JC] def getClientRects(): DOMRectList
Element[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
Element[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
Element[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
Element[JC] def hasAttribute(name: String): Boolean
Element[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
Element[JC] def hasAttributes(): Boolean
Element[JC] def hasChildNodes(): Boolean
Element[JC] def hasPointerCapture(pointerId: Double): Boolean
Element[JC] var id: String
Element[JC] var innerHTML: String
Element[JC] var innerText: String
Element[JC] def insertAdjacentElement(position: String, element: Element): Element
Element[JC] def insertAdjacentHTML(where: String, html: String): Unit
Element[JC] def insertBefore(newChild: Node, refChild: Node): Node
Element[JC] def isConnected: Boolean
Element[JC] def isDefaultNamespace(namespaceURI: String): Boolean
Element[JC] def isEqualNode(arg: Node): Boolean
Element[JC] def isSameNode(other: Node): Boolean
Element[JC] def isSupported(feature: String, version: String): Boolean
Element[JC] def lastChild: Node
Element[JC] def lastElementChild: Element
Element[JC] def localName: String
Element[JC] def lookupNamespaceURI(prefix: String): String
Element[JC] def lookupPrefix(namespaceURI: String): String
Element[JC] def matches(selector: String): Boolean
Element[JC] def namespaceURI: String
Element[JC] def nextElementSibling: Element
Element[JC] def nextSibling: Node
Element[JC] def nodeName: String
Element[JC] def nodeType: Int
Element[JC] var nodeValue: String
Element[JC] def normalize(): Unit
Element[JC] var oncompositionend: js.Function1[CompositionEvent, _]
Element[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
Element[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
Element[JC] var oncopy: js.Function1[ClipboardEvent, _]
Element[JC] var oncut: js.Function1[ClipboardEvent, _]
Element[JC] var onfullscreenchange: js.Function1[Event, _]
Element[JC] var onfullscreenerror: js.Function1[Event, _]
Element[JC] var onpaste: js.Function1[ClipboardEvent, _]
Element[JC] var outerHTML: String
Element[JC] def ownerDocument: Document
Element[JC] def parentNode: Node
Element[JC] def prefix: String
Element[JC] def prepend(nodes: Node | String*): Unit
Element[JC] def previousElementSibling: Element
Element[JC] def previousSibling: Node
Element[JC] def querySelector(selectors: String): Element
Element[JC] def querySelectorAll(selectors: String): NodeList[Element]
Element[JC] def releasePointerCapture(pointerId: Double): Unit
Element[JC] def remove(): Unit
Element[JC] def removeAttribute(name: String): Unit
Element[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
Element[JC] def removeAttributeNode(oldAttr: Attr): Attr
Element[JC] def removeChild(oldChild: Node): Node
Element[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Element[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Element[JC] def replaceChild(newChild: Node, oldChild: Node): Node
Element[JC] def replaceChildren(nodes: Node | String*): Unit
Element[JC] def replaceWith(nodes: Node | String*): Unit
Element[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
Element[JC] def requestPointerLock(): Unit
Element[JC] def scrollHeight: Int
Element[JC] def scrollIntoView(top: Boolean?): Unit
Element[JC] var scrollLeft: Double
Element[JC] var scrollTop: Double
Element[JC] def scrollWidth: Int
Element[JC] def setAttribute(name: String, value: String): Unit
Element[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
Element[JC] def setAttributeNode(newAttr: Attr): Attr
Element[JC] def setAttributeNodeNS(newAttr: Attr): Attr
Element[JC] def setPointerCapture(pointerId: Double): Unit
Element[JC] def shadowRoot: ShadowRoot
Element[JC] def tagName: String
Element[JC] var textContent: String
ElementCreationOptions[JT] var is: js.UndefOr[String]
ElementDefinitionOptions[JT] var `extends`: js.UndefOr[String]
EndOfStreamError[JT]
EndOfStreamError[SO] val decode: EndOfStreamError
EndOfStreamError[SO] val network: EndOfStreamError
EndingType[JT]
EndingType[SO] val native: EndingType
EndingType[SO] val transparent: EndingType
ErrorEvent[JT] def bubbles: Boolean
ErrorEvent[JT] def cancelBubble: Boolean
ErrorEvent[JT] def cancelable: Boolean
ErrorEvent[JT] def colno: Int
ErrorEvent[JT] def composed: Boolean
ErrorEvent[JT] def currentTarget: EventTarget
ErrorEvent[JT] def defaultPrevented: Boolean
ErrorEvent[JT] def eventPhase: Int
ErrorEvent[JT] def filename: String
ErrorEvent[JT] def isTrusted: Boolean
ErrorEvent[JT] def lineno: Int
ErrorEvent[JT] def message: String
ErrorEvent[JT] def preventDefault(): Unit
ErrorEvent[JT] def stopImmediatePropagation(): Unit
ErrorEvent[JT] def stopPropagation(): Unit
ErrorEvent[JT] def target: EventTarget
ErrorEvent[JT] def timeStamp: Double
ErrorEvent[JT] def `type`: String
Event[JC] def bubbles: Boolean
Event[JC] def cancelBubble: Boolean
Event[JC] def cancelable: Boolean
Event[JC] def composed: Boolean
Event[JC] def currentTarget: EventTarget
Event[JC] def defaultPrevented: Boolean
Event[JC] def eventPhase: Int
Event[JC] def isTrusted: Boolean
Event[JC] def preventDefault(): Unit
Event[JC] def stopImmediatePropagation(): Unit
Event[JC] def stopPropagation(): Unit
Event[JC] def target: EventTarget
Event[JC] def timeStamp: Double
Event[JC] def `type`: String
Event[JO] def AT_TARGET: Int
Event[JO] def BUBBLING_PHASE: Int
Event[JO] def CAPTURING_PHASE: Int
EventException[JO] val DISPATCH_REQUEST_ERR: Int
EventException[JO] val UNSPECIFIED_EVENT_TYPE_ERR: Int
EventException[JT] def code: Int
EventException[JT] def message: String
EventException[JT] def name: String
EventInit[JT] var bubbles: js.UndefOr[Boolean]
EventInit[JT] var cancelable: js.UndefOr[Boolean]
EventInit[JT] var composed: js.UndefOr[Boolean]
EventInit[JT] var scoped: js.UndefOr[Boolean]
EventListenerOptions[JT] var capture: js.UndefOr[Boolean]
EventListenerOptions[JT] var once: js.UndefOr[Boolean]
EventListenerOptions[JT] var passive: js.UndefOr[Boolean]
EventListenerOptions[JT] var signal: js.UndefOr[AbortSignal]
EventSource[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
EventSource[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
EventSource[JC] def close(): Unit
EventSource[JC] def dispatchEvent(evt: Event): Boolean
EventSource[JC] var onerror: js.Function1[Event, _]
EventSource[JC] var onmessage: js.Function1[MessageEvent, _]
EventSource[JC] var onopen: js.Function1[Event, _]
EventSource[JC] def readyState: Int
EventSource[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
EventSource[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
EventSource[JC] def url: String
EventSource[JC] def withCredentials: Boolean
EventSource[JO] val CLOSED: Int
EventSource[JO] val CONNECTING: Int
EventSource[JO] val OPEN: Int
EventSourceInit[JT] var withCredentials: js.UndefOr[Boolean]
EventTarget[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
EventTarget[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
EventTarget[JC] def dispatchEvent(evt: Event): Boolean
EventTarget[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
EventTarget[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ExtendableEvent[JC] def bubbles: Boolean
ExtendableEvent[JC] def cancelBubble: Boolean
ExtendableEvent[JC] def cancelable: Boolean
ExtendableEvent[JC] def composed: Boolean
ExtendableEvent[JC] def currentTarget: EventTarget
ExtendableEvent[JC] def defaultPrevented: Boolean
ExtendableEvent[JC] def eventPhase: Int
ExtendableEvent[JC] def isTrusted: Boolean
ExtendableEvent[JC] def preventDefault(): Unit
ExtendableEvent[JC] def stopImmediatePropagation(): Unit
ExtendableEvent[JC] def stopPropagation(): Unit
ExtendableEvent[JC] def target: EventTarget
ExtendableEvent[JC] def timeStamp: Double
ExtendableEvent[JC] def `type`: String
ExtendableEvent[JC] def waitUntil(promise: js.Promise[Any]): Unit
ExtendableEventInit[JT] var bubbles: js.UndefOr[Boolean]
ExtendableEventInit[JT] var cancelable: js.UndefOr[Boolean]
ExtendableEventInit[JT] var composed: js.UndefOr[Boolean]
ExtendableEventInit[JT] var scoped: js.UndefOr[Boolean]
ExtendableMessageEvent[JC] def bubbles: Boolean
ExtendableMessageEvent[JC] def cancelBubble: Boolean
ExtendableMessageEvent[JC] def cancelable: Boolean
ExtendableMessageEvent[JC] def composed: Boolean
ExtendableMessageEvent[JC] def currentTarget: EventTarget
ExtendableMessageEvent[JC] val data: Any
ExtendableMessageEvent[JC] def defaultPrevented: Boolean
ExtendableMessageEvent[JC] def eventPhase: Int
ExtendableMessageEvent[JC] def isTrusted: Boolean
ExtendableMessageEvent[JC] val lastEventId: String
ExtendableMessageEvent[JC] val origin: String
ExtendableMessageEvent[JC] def ports: js.Array[MessagePort]
ExtendableMessageEvent[JC] def preventDefault(): Unit
ExtendableMessageEvent[JC] def source: ServiceWorker | MessagePort
ExtendableMessageEvent[JC] def stopImmediatePropagation(): Unit
ExtendableMessageEvent[JC] def stopPropagation(): Unit
ExtendableMessageEvent[JC] def target: EventTarget
ExtendableMessageEvent[JC] def timeStamp: Double
ExtendableMessageEvent[JC] def `type`: String
ExtendableMessageEvent[JC] def waitUntil(promise: js.Promise[Any]): Unit
ExtendableMessageEventInit[JT] var bubbles: js.UndefOr[Boolean]
ExtendableMessageEventInit[JT] var cancelable: js.UndefOr[Boolean]
ExtendableMessageEventInit[JT] var composed: js.UndefOr[Boolean]
ExtendableMessageEventInit[JT] var data: js.UndefOr[Any]
ExtendableMessageEventInit[JT] var lastEventId: js.UndefOr[String]
ExtendableMessageEventInit[JT] var origin: js.UndefOr[String]
ExtendableMessageEventInit[JT] var ports: js.UndefOr[js.Array[MessagePort]]
ExtendableMessageEventInit[JT] var scoped: js.UndefOr[Boolean]
ExtendableMessageEventInit[JT] var source: js.UndefOr[Client | ServiceWorker | MessagePort]
External[JT]
Fetch[JO] def fetch(info: RequestInfo, init: RequestInit?): js.Promise[Response]
FetchEvent[JC] def bubbles: Boolean
FetchEvent[JC] def cancelBubble: Boolean
FetchEvent[JC] def cancelable: Boolean
FetchEvent[JC] def clientId: String
FetchEvent[JC] def composed: Boolean
FetchEvent[JC] def currentTarget: EventTarget
FetchEvent[JC] def defaultPrevented: Boolean
FetchEvent[JC] def eventPhase: Int
FetchEvent[JC] def isReload: Boolean
FetchEvent[JC] def isTrusted: Boolean
FetchEvent[JC] def preloadResponse: js.Promise[js.UndefOr[Response]]
FetchEvent[JC] def preventDefault(): Unit
FetchEvent[JC] def replacesClientId: String
FetchEvent[JC] def request: Request
FetchEvent[JC] def respondWith(promisedResponse: Response | js.Promise[Response]): Unit
FetchEvent[JC] def resultingClientId: String
FetchEvent[JC] def stopImmediatePropagation(): Unit
FetchEvent[JC] def stopPropagation(): Unit
FetchEvent[JC] def target: EventTarget
FetchEvent[JC] def timeStamp: Double
FetchEvent[JC] def `type`: String
FetchEvent[JC] def waitUntil(promise: js.Promise[Any]): Unit
FetchEventInit[JT] var bubbles: js.UndefOr[Boolean]
FetchEventInit[JT] var cancelable: js.UndefOr[Boolean]
FetchEventInit[JT] var clientId: js.UndefOr[String]
FetchEventInit[JT] var composed: js.UndefOr[Boolean]
FetchEventInit[JT] var isReload: js.UndefOr[Boolean]
FetchEventInit[JT] var request: js.UndefOr[Request]
FetchEventInit[JT] var scoped: js.UndefOr[Boolean]
File[JC] def arrayBuffer(): js.Promise[ArrayBuffer]
File[JC] def close(): Unit  (@deprecated in 1.2.0)
File[JC] def lastModified: Double
File[JC] def name: String
File[JC] def size: Double
File[JC] def slice(start: Double?, end: Double?, contentType: String?): Blob
File[JC] def stream(): ReadableStream[Uint8Array]
File[JC] def text(): js.Promise[String]
File[JC] def `type`: String
File[JC] def webkitRelativePath: String
FileList[JC] @JSBracketAccess def apply(index: Int): T
FileList[JC] def item(index: Int): File
FileList[JC] def length: Int
FilePropertyBag[JT] var endings: js.UndefOr[EndingType]
FilePropertyBag[JT] var lastModified: js.UndefOr[Double]
FilePropertyBag[JT] var `type`: js.UndefOr[String]
FileReader[JC] def abort(): Unit
FileReader[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
FileReader[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
FileReader[JC] def dispatchEvent(evt: Event): Boolean
FileReader[JC] def error: DOMException
FileReader[JC] var onabort: js.Function1[ProgressEvent, _]
FileReader[JC] var onerror: js.Function1[ProgressEvent, _]
FileReader[JC] var onload: js.Function1[ProgressEvent, _]
FileReader[JC] var onloadend: js.Function1[ProgressEvent, _]
FileReader[JC] var onloadstart: js.Function1[ProgressEvent, _]
FileReader[JC] var onprogress: js.Function1[ProgressEvent, _]
FileReader[JC] def readAsArrayBuffer(blob: Blob): Unit
FileReader[JC] def readAsDataURL(blob: Blob): Unit
FileReader[JC] def readAsText(blob: Blob, encoding: String?): Unit
FileReader[JC] def readyState: Short
FileReader[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
FileReader[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
FileReader[JC] def result: js.Any
FileReader[JO] val DONE: Short
FileReader[JO] val EMPTY: Short
FileReader[JO] val LOADING: Short
FileReaderSync[JC] def readAsArrayBuffer(blob: Blob): ArrayBuffer
FileReaderSync[JC] def readAsDataURL(blob: Blob): URL
FileReaderSync[JC] def readAsText(blob: Blob, encoding: String?): String
FocusEvent[JC] def bubbles: Boolean
FocusEvent[JC] def cancelBubble: Boolean
FocusEvent[JC] def cancelable: Boolean
FocusEvent[JC] def composed: Boolean
FocusEvent[JC] def currentTarget: EventTarget
FocusEvent[JC] def defaultPrevented: Boolean
FocusEvent[JC] def detail: Int
FocusEvent[JC] def eventPhase: Int
FocusEvent[JC] def isTrusted: Boolean
FocusEvent[JC] def preventDefault(): Unit
FocusEvent[JC] def relatedTarget: EventTarget
FocusEvent[JC] def stopImmediatePropagation(): Unit
FocusEvent[JC] def stopPropagation(): Unit
FocusEvent[JC] def target: EventTarget
FocusEvent[JC] def timeStamp: Double
FocusEvent[JC] def `type`: String
FocusEvent[JC] def view: Window
FocusEventInit[JT] var bubbles: js.UndefOr[Boolean]
FocusEventInit[JT] var cancelable: js.UndefOr[Boolean]
FocusEventInit[JT] var composed: js.UndefOr[Boolean]
FocusEventInit[JT] var detail: js.UndefOr[Int]
FocusEventInit[JT] var relatedTarget: js.UndefOr[EventTarget]
FocusEventInit[JT] var scoped: js.UndefOr[Boolean]
FocusEventInit[JT] var view: js.UndefOr[Window]
FocusOptions[JT] var focusVisible: js.UndefOr[Boolean]
FocusOptions[JT] var preventScroll: js.UndefOr[Boolean]
FormData[JC] def append(name: String, value: Blob, blobName: String?): Unit
FormData[JC] def append(name: String, value: String): Unit
FormData[JC] def delete(name: String): Unit
FormData[JC] def entries(): js.Iterator[js.Tuple2[String, String | Blob]]
FormData[JC] def get(name: String): String | Blob
FormData[JC] def getAll(name: String): js.Array[String | Blob]
FormData[JC] def has(name: String): Boolean
FormData[JC] @JSName(js.Symbol.iterator) override def jsIterator(): js.Iterator[js.Tuple2[String, String | Blob]]
FormData[JC] def keys(): js.Iterator[String]
FormData[JC] def set(name: String, value: Blob, blobName: String?): Unit
FormData[JC] def set(name: String, value: String): Unit
FormData[JC] def values(): js.Iterator[String | Blob]
FormData[JO]
FrameType[JT]
FrameType[SO] val auxiliary: FrameType
FrameType[SO] val nested: FrameType
FrameType[SO] val none: FrameType
FrameType[SO] val `top-level` = "top-level".asInstanceOf[FrameType]
FrozenArray[JT] @js.annotation.JSBracketAccess def apply(index: Int): T
FrozenArray[JT] val length: Int
FullscreenOptions[JT] var navigationUI: js.UndefOr[String]
GainNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
GainNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
GainNode[JT] var channelCount: Int
GainNode[JT] var channelCountMode: AudioNodeChannelCountMode
GainNode[JT] var channelInterpretation: AudioNodeChannelInterpretation
GainNode[JT] def connect(audioNode: AudioNode): Unit
GainNode[JT] def connect(audioParam: AudioParam): Unit
GainNode[JT] val context: AudioContext
GainNode[JT] def disconnect(output: AudioNode?): Unit
GainNode[JT] def dispatchEvent(evt: Event): Boolean
GainNode[JT] val gain: AudioParam
GainNode[JT] val numberOfInputs: Int
GainNode[JT] val numberOfOutputs: Int
GainNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
GainNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
GainNode[SO] def apply(context: BaseAudioContext, options: js.UndefOr[GainNodeOptions]?): GainNode
GainNodeOptions[JT] var gain: js.UndefOr[Double]
Gamepad[JT] val axes: js.Array[Double]
Gamepad[JT] val buttons: js.Array[GamepadButton]
Gamepad[JT] val connected: Boolean
Gamepad[JT] val id: String
Gamepad[JT] val index: Double
Gamepad[JT] val mapping: GamepadMappingType
Gamepad[JT] val timestamp: Double
GamepadButton[JT] val pressed: Boolean
GamepadButton[JT] val value: Double
GamepadEvent[JC] def bubbles: Boolean
GamepadEvent[JC] def cancelBubble: Boolean
GamepadEvent[JC] def cancelable: Boolean
GamepadEvent[JC] def composed: Boolean
GamepadEvent[JC] def currentTarget: EventTarget
GamepadEvent[JC] def defaultPrevented: Boolean
GamepadEvent[JC] def eventPhase: Int
GamepadEvent[JC] val gamepad: Gamepad
GamepadEvent[JC] def isTrusted: Boolean
GamepadEvent[JC] def preventDefault(): Unit
GamepadEvent[JC] def stopImmediatePropagation(): Unit
GamepadEvent[JC] def stopPropagation(): Unit
GamepadEvent[JC] def target: EventTarget
GamepadEvent[JC] def timeStamp: Double
GamepadEvent[JC] def `type`: String
GamepadEventInit[JT] var bubbles: js.UndefOr[Boolean]
GamepadEventInit[JT] var cancelable: js.UndefOr[Boolean]
GamepadEventInit[JT] var composed: js.UndefOr[Boolean]
GamepadEventInit[JT] var gamepad: js.UndefOr[Gamepad]
GamepadEventInit[JT] var scoped: js.UndefOr[Boolean]
GamepadMappingType[JT]
GamepadMappingType[SO] final val standard: GamepadMappingType
GamepadMappingType[SO] final val unknown: GamepadMappingType
Geolocation[JT] def clearWatch(watchId: Int): Unit
Geolocation[JT] def getCurrentPosition(successCallback: js.Function1[Position, _]): Unit
Geolocation[JT] def getCurrentPosition(successCallback: js.Function1[Position, _], errorCallback: js.Function1[PositionError, _], options: PositionOptions?): Unit
Geolocation[JT] def watchPosition(successCallback: js.Function1[Position, _], errorCallback: js.Function1[PositionError, _]?, options: PositionOptions?): Int
GetNotificationOptions[JT] var tag: js.UndefOr[String]
GetSVGDocument[JT] def getSVGDocument(): Document
HTMLAnchorElement[JC] var accessKey: String
HTMLAnchorElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLAnchorElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLAnchorElement[JC] def after(nodes: Node | String*): Unit
HTMLAnchorElement[JC] def append(nodes: Node | String*): Unit
HTMLAnchorElement[JC] def appendChild(newChild: Node): Node
HTMLAnchorElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLAnchorElement[JC] def attributes: NamedNodeMap
HTMLAnchorElement[JC] def baseURI: String
HTMLAnchorElement[JC] def before(nodes: Node | String*): Unit
HTMLAnchorElement[JC] def blur(): Unit
HTMLAnchorElement[JC] var charset: String
HTMLAnchorElement[JC] def childElementCount: Int
HTMLAnchorElement[JC] def childNodes: NodeList[Node]
HTMLAnchorElement[JC] def children: HTMLCollection[Element]
HTMLAnchorElement[JC] var classList: DOMTokenList
HTMLAnchorElement[JC] var className: String
HTMLAnchorElement[JC] def click(): Unit
HTMLAnchorElement[JC] def clientHeight: Int
HTMLAnchorElement[JC] def clientLeft: Int
HTMLAnchorElement[JC] def clientTop: Int
HTMLAnchorElement[JC] def clientWidth: Int
HTMLAnchorElement[JC] def cloneNode(deep: Boolean?): Node
HTMLAnchorElement[JC] def closest(selector: String): Element
HTMLAnchorElement[JC] def compareDocumentPosition(other: Node): Int
HTMLAnchorElement[JC] def contains(child: HTMLElement): Boolean
HTMLAnchorElement[JC] def contains(otherNode: Node): Boolean
HTMLAnchorElement[JC] var contentEditable: String
HTMLAnchorElement[JC] def dataset: js.Dictionary[String]
HTMLAnchorElement[JC] var dir: String
HTMLAnchorElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLAnchorElement[JC] var download: String
HTMLAnchorElement[JC] var draggable: Boolean
HTMLAnchorElement[JC] var filters: Object
HTMLAnchorElement[JC] def firstChild: Node
HTMLAnchorElement[JC] def firstElementChild: Element
HTMLAnchorElement[JC] def focus(): Unit
HTMLAnchorElement[JC] def focus(options: FocusOptions): Unit
HTMLAnchorElement[JC] def getAttribute(name: String): String
HTMLAnchorElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLAnchorElement[JC] def getAttributeNode(name: String): Attr
HTMLAnchorElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLAnchorElement[JC] def getBoundingClientRect(): DOMRect
HTMLAnchorElement[JC] def getClientRects(): DOMRectList
HTMLAnchorElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLAnchorElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLAnchorElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLAnchorElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLAnchorElement[JC] def hasAttribute(name: String): Boolean
HTMLAnchorElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLAnchorElement[JC] def hasAttributes(): Boolean
HTMLAnchorElement[JC] def hasChildNodes(): Boolean
HTMLAnchorElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLAnchorElement[JC] var hash: String
HTMLAnchorElement[JC] var host: String
HTMLAnchorElement[JC] var hostname: String
HTMLAnchorElement[JC] var href: String
HTMLAnchorElement[JC] var hreflang: String
HTMLAnchorElement[JC] var id: String
HTMLAnchorElement[JC] var innerHTML: String
HTMLAnchorElement[JC] var innerText: String
HTMLAnchorElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLAnchorElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLAnchorElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLAnchorElement[JC] def isConnected: Boolean
HTMLAnchorElement[JC] def isContentEditable: Boolean
HTMLAnchorElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLAnchorElement[JC] def isEqualNode(arg: Node): Boolean
HTMLAnchorElement[JC] def isSameNode(other: Node): Boolean
HTMLAnchorElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLAnchorElement[JC] var lang: String
HTMLAnchorElement[JC] def lastChild: Node
HTMLAnchorElement[JC] def lastElementChild: Element
HTMLAnchorElement[JC] def localName: String
HTMLAnchorElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLAnchorElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLAnchorElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLAnchorElement[JC] def matches(selector: String): Boolean
HTMLAnchorElement[JC] var mimeType: String
HTMLAnchorElement[JC] def namespaceURI: String
HTMLAnchorElement[JC] def nextElementSibling: Element
HTMLAnchorElement[JC] def nextSibling: Node
HTMLAnchorElement[JC] def nodeName: String
HTMLAnchorElement[JC] def nodeType: Int
HTMLAnchorElement[JC] var nodeValue: String
HTMLAnchorElement[JC] def normalize(): Unit
HTMLAnchorElement[JC] def offsetHeight: Double
HTMLAnchorElement[JC] def offsetLeft: Double
HTMLAnchorElement[JC] def offsetParent: Element
HTMLAnchorElement[JC] def offsetTop: Double
HTMLAnchorElement[JC] def offsetWidth: Double
HTMLAnchorElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLAnchorElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLAnchorElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLAnchorElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLAnchorElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLAnchorElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLAnchorElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLAnchorElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLAnchorElement[JC] var oncanplay: js.Function1[Event, _]
HTMLAnchorElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLAnchorElement[JC] var onchange: js.Function1[Event, _]
HTMLAnchorElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLAnchorElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLAnchorElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLAnchorElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLAnchorElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLAnchorElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLAnchorElement[JC] var oncuechange: js.Function1[Event, _]
HTMLAnchorElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLAnchorElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLAnchorElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLAnchorElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLAnchorElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLAnchorElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLAnchorElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLAnchorElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLAnchorElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLAnchorElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLAnchorElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLAnchorElement[JC] var onemptied: js.Function1[Event, _]
HTMLAnchorElement[JC] var onended: js.Function1[Event, _]
HTMLAnchorElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLAnchorElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLAnchorElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLAnchorElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLAnchorElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLAnchorElement[JC] var onhelp: js.Function1[Event, _]
HTMLAnchorElement[JC] var oninput: js.Function1[Event, _]
HTMLAnchorElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLAnchorElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLAnchorElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLAnchorElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLAnchorElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLAnchorElement[JC] var onloadstart: js.Function1[Event, _]
HTMLAnchorElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLAnchorElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLAnchorElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLAnchorElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLAnchorElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLAnchorElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLAnchorElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLAnchorElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLAnchorElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLAnchorElement[JC] var onpause: js.Function1[Event, _]
HTMLAnchorElement[JC] var onplay: js.Function1[Event, _]
HTMLAnchorElement[JC] var onplaying: js.Function1[Event, _]
HTMLAnchorElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLAnchorElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLAnchorElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLAnchorElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLAnchorElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLAnchorElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLAnchorElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLAnchorElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLAnchorElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLAnchorElement[JC] var onratechange: js.Function1[Event, _]
HTMLAnchorElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLAnchorElement[JC] var onreset: js.Function1[Event, _]
HTMLAnchorElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLAnchorElement[JC] var onseeked: js.Function1[Event, _]
HTMLAnchorElement[JC] var onseeking: js.Function1[Event, _]
HTMLAnchorElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLAnchorElement[JC] var onselectstart: js.Function1[Event, _]
HTMLAnchorElement[JC] var onstalled: js.Function1[Event, _]
HTMLAnchorElement[JC] var onsubmit: js.Function1[Event, _]
HTMLAnchorElement[JC] var onsuspend: js.Function1[Event, _]
HTMLAnchorElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLAnchorElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLAnchorElement[JC] var onwaiting: js.Function1[Event, _]
HTMLAnchorElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLAnchorElement[JC] var outerHTML: String
HTMLAnchorElement[JC] def ownerDocument: Document
HTMLAnchorElement[JC] override def ownerDocument: HTMLDocument
HTMLAnchorElement[JC] var parentElement: HTMLElement
HTMLAnchorElement[JC] def parentNode: Node
HTMLAnchorElement[JC] var pathname: String
HTMLAnchorElement[JC] var port: String
HTMLAnchorElement[JC] def prefix: String
HTMLAnchorElement[JC] def prepend(nodes: Node | String*): Unit
HTMLAnchorElement[JC] def previousElementSibling: Element
HTMLAnchorElement[JC] def previousSibling: Node
HTMLAnchorElement[JC] var protocol: String
HTMLAnchorElement[JC] def querySelector(selectors: String): Element
HTMLAnchorElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLAnchorElement[JC] var readyState: js.Any
HTMLAnchorElement[JC] var recordNumber: js.Any
HTMLAnchorElement[JC] var rel: String
HTMLAnchorElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLAnchorElement[JC] def remove(): Unit
HTMLAnchorElement[JC] def removeAttribute(name: String): Unit
HTMLAnchorElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLAnchorElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLAnchorElement[JC] def removeChild(oldChild: Node): Node
HTMLAnchorElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLAnchorElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLAnchorElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLAnchorElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLAnchorElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLAnchorElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLAnchorElement[JC] def requestPointerLock(): Unit
HTMLAnchorElement[JC] def scrollHeight: Int
HTMLAnchorElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLAnchorElement[JC] var scrollLeft: Double
HTMLAnchorElement[JC] var scrollTop: Double
HTMLAnchorElement[JC] def scrollWidth: Int
HTMLAnchorElement[JC] var search: String
HTMLAnchorElement[JC] def setAttribute(name: String, value: String): Unit
HTMLAnchorElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLAnchorElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLAnchorElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLAnchorElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLAnchorElement[JC] def shadowRoot: ShadowRoot
HTMLAnchorElement[JC] var spellcheck: Boolean
HTMLAnchorElement[JC] def style: CSSStyleDeclaration
HTMLAnchorElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLAnchorElement[JC] def style_ = (value: String): Unit
HTMLAnchorElement[JC] var tabIndex: Int
HTMLAnchorElement[JC] def tagName: String
HTMLAnchorElement[JC] var target: String
HTMLAnchorElement[JC] var text: String
HTMLAnchorElement[JC] var textContent: String
HTMLAnchorElement[JC] var title: String
HTMLAnchorElement[JC] var `type`: String
HTMLAreaElement[JC] var accessKey: String
HTMLAreaElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLAreaElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLAreaElement[JC] def after(nodes: Node | String*): Unit
HTMLAreaElement[JC] var alt: String
HTMLAreaElement[JC] def append(nodes: Node | String*): Unit
HTMLAreaElement[JC] def appendChild(newChild: Node): Node
HTMLAreaElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLAreaElement[JC] def attributes: NamedNodeMap
HTMLAreaElement[JC] def baseURI: String
HTMLAreaElement[JC] def before(nodes: Node | String*): Unit
HTMLAreaElement[JC] def blur(): Unit
HTMLAreaElement[JC] def childElementCount: Int
HTMLAreaElement[JC] def childNodes: NodeList[Node]
HTMLAreaElement[JC] def children: HTMLCollection[Element]
HTMLAreaElement[JC] var classList: DOMTokenList
HTMLAreaElement[JC] var className: String
HTMLAreaElement[JC] def click(): Unit
HTMLAreaElement[JC] def clientHeight: Int
HTMLAreaElement[JC] def clientLeft: Int
HTMLAreaElement[JC] def clientTop: Int
HTMLAreaElement[JC] def clientWidth: Int
HTMLAreaElement[JC] def cloneNode(deep: Boolean?): Node
HTMLAreaElement[JC] def closest(selector: String): Element
HTMLAreaElement[JC] def compareDocumentPosition(other: Node): Int
HTMLAreaElement[JC] def contains(child: HTMLElement): Boolean
HTMLAreaElement[JC] def contains(otherNode: Node): Boolean
HTMLAreaElement[JC] var contentEditable: String
HTMLAreaElement[JC] var coords: String
HTMLAreaElement[JC] def dataset: js.Dictionary[String]
HTMLAreaElement[JC] var dir: String
HTMLAreaElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLAreaElement[JC] var draggable: Boolean
HTMLAreaElement[JC] var filters: Object
HTMLAreaElement[JC] def firstChild: Node
HTMLAreaElement[JC] def firstElementChild: Element
HTMLAreaElement[JC] def focus(): Unit
HTMLAreaElement[JC] def focus(options: FocusOptions): Unit
HTMLAreaElement[JC] def getAttribute(name: String): String
HTMLAreaElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLAreaElement[JC] def getAttributeNode(name: String): Attr
HTMLAreaElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLAreaElement[JC] def getBoundingClientRect(): DOMRect
HTMLAreaElement[JC] def getClientRects(): DOMRectList
HTMLAreaElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLAreaElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLAreaElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLAreaElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLAreaElement[JC] def hasAttribute(name: String): Boolean
HTMLAreaElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLAreaElement[JC] def hasAttributes(): Boolean
HTMLAreaElement[JC] def hasChildNodes(): Boolean
HTMLAreaElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLAreaElement[JC] var hash: String
HTMLAreaElement[JC] var host: String
HTMLAreaElement[JC] var hostname: String
HTMLAreaElement[JC] var href: String
HTMLAreaElement[JC] var id: String
HTMLAreaElement[JC] var innerHTML: String
HTMLAreaElement[JC] var innerText: String
HTMLAreaElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLAreaElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLAreaElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLAreaElement[JC] def isConnected: Boolean
HTMLAreaElement[JC] def isContentEditable: Boolean
HTMLAreaElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLAreaElement[JC] def isEqualNode(arg: Node): Boolean
HTMLAreaElement[JC] def isSameNode(other: Node): Boolean
HTMLAreaElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLAreaElement[JC] var lang: String
HTMLAreaElement[JC] def lastChild: Node
HTMLAreaElement[JC] def lastElementChild: Element
HTMLAreaElement[JC] def localName: String
HTMLAreaElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLAreaElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLAreaElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLAreaElement[JC] def matches(selector: String): Boolean
HTMLAreaElement[JC] def namespaceURI: String
HTMLAreaElement[JC] def nextElementSibling: Element
HTMLAreaElement[JC] def nextSibling: Node
HTMLAreaElement[JC] def nodeName: String
HTMLAreaElement[JC] def nodeType: Int
HTMLAreaElement[JC] var nodeValue: String
HTMLAreaElement[JC] def normalize(): Unit
HTMLAreaElement[JC] def offsetHeight: Double
HTMLAreaElement[JC] def offsetLeft: Double
HTMLAreaElement[JC] def offsetParent: Element
HTMLAreaElement[JC] def offsetTop: Double
HTMLAreaElement[JC] def offsetWidth: Double
HTMLAreaElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLAreaElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLAreaElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLAreaElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLAreaElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLAreaElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLAreaElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLAreaElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLAreaElement[JC] var oncanplay: js.Function1[Event, _]
HTMLAreaElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLAreaElement[JC] var onchange: js.Function1[Event, _]
HTMLAreaElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLAreaElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLAreaElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLAreaElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLAreaElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLAreaElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLAreaElement[JC] var oncuechange: js.Function1[Event, _]
HTMLAreaElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLAreaElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLAreaElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLAreaElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLAreaElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLAreaElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLAreaElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLAreaElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLAreaElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLAreaElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLAreaElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLAreaElement[JC] var onemptied: js.Function1[Event, _]
HTMLAreaElement[JC] var onended: js.Function1[Event, _]
HTMLAreaElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLAreaElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLAreaElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLAreaElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLAreaElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLAreaElement[JC] var onhelp: js.Function1[Event, _]
HTMLAreaElement[JC] var oninput: js.Function1[Event, _]
HTMLAreaElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLAreaElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLAreaElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLAreaElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLAreaElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLAreaElement[JC] var onloadstart: js.Function1[Event, _]
HTMLAreaElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLAreaElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLAreaElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLAreaElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLAreaElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLAreaElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLAreaElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLAreaElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLAreaElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLAreaElement[JC] var onpause: js.Function1[Event, _]
HTMLAreaElement[JC] var onplay: js.Function1[Event, _]
HTMLAreaElement[JC] var onplaying: js.Function1[Event, _]
HTMLAreaElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLAreaElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLAreaElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLAreaElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLAreaElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLAreaElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLAreaElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLAreaElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLAreaElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLAreaElement[JC] var onratechange: js.Function1[Event, _]
HTMLAreaElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLAreaElement[JC] var onreset: js.Function1[Event, _]
HTMLAreaElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLAreaElement[JC] var onseeked: js.Function1[Event, _]
HTMLAreaElement[JC] var onseeking: js.Function1[Event, _]
HTMLAreaElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLAreaElement[JC] var onselectstart: js.Function1[Event, _]
HTMLAreaElement[JC] var onstalled: js.Function1[Event, _]
HTMLAreaElement[JC] var onsubmit: js.Function1[Event, _]
HTMLAreaElement[JC] var onsuspend: js.Function1[Event, _]
HTMLAreaElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLAreaElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLAreaElement[JC] var onwaiting: js.Function1[Event, _]
HTMLAreaElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLAreaElement[JC] var outerHTML: String
HTMLAreaElement[JC] def ownerDocument: Document
HTMLAreaElement[JC] override def ownerDocument: HTMLDocument
HTMLAreaElement[JC] var parentElement: HTMLElement
HTMLAreaElement[JC] def parentNode: Node
HTMLAreaElement[JC] var pathname: String
HTMLAreaElement[JC] var port: String
HTMLAreaElement[JC] def prefix: String
HTMLAreaElement[JC] def prepend(nodes: Node | String*): Unit
HTMLAreaElement[JC] def previousElementSibling: Element
HTMLAreaElement[JC] def previousSibling: Node
HTMLAreaElement[JC] var protocol: String
HTMLAreaElement[JC] def querySelector(selectors: String): Element
HTMLAreaElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLAreaElement[JC] var readyState: js.Any
HTMLAreaElement[JC] var recordNumber: js.Any
HTMLAreaElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLAreaElement[JC] def remove(): Unit
HTMLAreaElement[JC] def removeAttribute(name: String): Unit
HTMLAreaElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLAreaElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLAreaElement[JC] def removeChild(oldChild: Node): Node
HTMLAreaElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLAreaElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLAreaElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLAreaElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLAreaElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLAreaElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLAreaElement[JC] def requestPointerLock(): Unit
HTMLAreaElement[JC] def scrollHeight: Int
HTMLAreaElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLAreaElement[JC] var scrollLeft: Double
HTMLAreaElement[JC] var scrollTop: Double
HTMLAreaElement[JC] def scrollWidth: Int
HTMLAreaElement[JC] var search: String
HTMLAreaElement[JC] def setAttribute(name: String, value: String): Unit
HTMLAreaElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLAreaElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLAreaElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLAreaElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLAreaElement[JC] def shadowRoot: ShadowRoot
HTMLAreaElement[JC] var shape: String
HTMLAreaElement[JC] var spellcheck: Boolean
HTMLAreaElement[JC] def style: CSSStyleDeclaration
HTMLAreaElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLAreaElement[JC] def style_ = (value: String): Unit
HTMLAreaElement[JC] var tabIndex: Int
HTMLAreaElement[JC] def tagName: String
HTMLAreaElement[JC] var target: String
HTMLAreaElement[JC] var textContent: String
HTMLAreaElement[JC] var title: String
HTMLAudioElement[JC] var accessKey: String
HTMLAudioElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLAudioElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLAudioElement[JC] def after(nodes: Node | String*): Unit
HTMLAudioElement[JC] def append(nodes: Node | String*): Unit
HTMLAudioElement[JC] def appendChild(newChild: Node): Node
HTMLAudioElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLAudioElement[JC] def attributes: NamedNodeMap
HTMLAudioElement[JC] def audioTracks: AudioTrackList
HTMLAudioElement[JC] var autoplay: Boolean
HTMLAudioElement[JC] def baseURI: String
HTMLAudioElement[JC] def before(nodes: Node | String*): Unit
HTMLAudioElement[JC] def blur(): Unit
HTMLAudioElement[JC] def buffered: TimeRanges
HTMLAudioElement[JC] def canPlayType(`type`: String): String
HTMLAudioElement[JC] def childElementCount: Int
HTMLAudioElement[JC] def childNodes: NodeList[Node]
HTMLAudioElement[JC] def children: HTMLCollection[Element]
HTMLAudioElement[JC] var classList: DOMTokenList
HTMLAudioElement[JC] var className: String
HTMLAudioElement[JC] def click(): Unit
HTMLAudioElement[JC] def clientHeight: Int
HTMLAudioElement[JC] def clientLeft: Int
HTMLAudioElement[JC] def clientTop: Int
HTMLAudioElement[JC] def clientWidth: Int
HTMLAudioElement[JC] def cloneNode(deep: Boolean?): Node
HTMLAudioElement[JC] def closest(selector: String): Element
HTMLAudioElement[JC] def compareDocumentPosition(other: Node): Int
HTMLAudioElement[JC] def contains(child: HTMLElement): Boolean
HTMLAudioElement[JC] def contains(otherNode: Node): Boolean
HTMLAudioElement[JC] var contentEditable: String
HTMLAudioElement[JC] var controls: Boolean
HTMLAudioElement[JC] def currentSrc: String
HTMLAudioElement[JC] var currentTime: Double
HTMLAudioElement[JC] def dataset: js.Dictionary[String]
HTMLAudioElement[JC] var defaultPlaybackRate: Double
HTMLAudioElement[JC] var dir: String
HTMLAudioElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLAudioElement[JC] var draggable: Boolean
HTMLAudioElement[JC] def duration: Double
HTMLAudioElement[JC] def ended: Boolean
HTMLAudioElement[JC] def error: MediaError
HTMLAudioElement[JC] var filters: Object
HTMLAudioElement[JC] def firstChild: Node
HTMLAudioElement[JC] def firstElementChild: Element
HTMLAudioElement[JC] def focus(): Unit
HTMLAudioElement[JC] def focus(options: FocusOptions): Unit
HTMLAudioElement[JC] def getAttribute(name: String): String
HTMLAudioElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLAudioElement[JC] def getAttributeNode(name: String): Attr
HTMLAudioElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLAudioElement[JC] def getBoundingClientRect(): DOMRect
HTMLAudioElement[JC] def getClientRects(): DOMRectList
HTMLAudioElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLAudioElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLAudioElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLAudioElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLAudioElement[JC] def hasAttribute(name: String): Boolean
HTMLAudioElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLAudioElement[JC] def hasAttributes(): Boolean
HTMLAudioElement[JC] def hasChildNodes(): Boolean
HTMLAudioElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLAudioElement[JC] var id: String
HTMLAudioElement[JC] def initialTime: Double
HTMLAudioElement[JC] var innerHTML: String
HTMLAudioElement[JC] var innerText: String
HTMLAudioElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLAudioElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLAudioElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLAudioElement[JC] def isConnected: Boolean
HTMLAudioElement[JC] def isContentEditable: Boolean
HTMLAudioElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLAudioElement[JC] def isEqualNode(arg: Node): Boolean
HTMLAudioElement[JC] def isSameNode(other: Node): Boolean
HTMLAudioElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLAudioElement[JC] var lang: String
HTMLAudioElement[JC] def lastChild: Node
HTMLAudioElement[JC] def lastElementChild: Element
HTMLAudioElement[JC] def load(): Unit
HTMLAudioElement[JC] def localName: String
HTMLAudioElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLAudioElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLAudioElement[JC] var loop: Boolean
HTMLAudioElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLAudioElement[JC] def matches(selector: String): Boolean
HTMLAudioElement[JC] var muted: Boolean
HTMLAudioElement[JC] def namespaceURI: String
HTMLAudioElement[JC] def networkState: Int
HTMLAudioElement[JC] def nextElementSibling: Element
HTMLAudioElement[JC] def nextSibling: Node
HTMLAudioElement[JC] def nodeName: String
HTMLAudioElement[JC] def nodeType: Int
HTMLAudioElement[JC] var nodeValue: String
HTMLAudioElement[JC] def normalize(): Unit
HTMLAudioElement[JC] def offsetHeight: Double
HTMLAudioElement[JC] def offsetLeft: Double
HTMLAudioElement[JC] def offsetParent: Element
HTMLAudioElement[JC] def offsetTop: Double
HTMLAudioElement[JC] def offsetWidth: Double
HTMLAudioElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLAudioElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLAudioElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLAudioElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLAudioElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLAudioElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLAudioElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLAudioElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLAudioElement[JC] var oncanplay: js.Function1[Event, _]
HTMLAudioElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLAudioElement[JC] var onchange: js.Function1[Event, _]
HTMLAudioElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLAudioElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLAudioElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLAudioElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLAudioElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLAudioElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLAudioElement[JC] var oncuechange: js.Function1[Event, _]
HTMLAudioElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLAudioElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLAudioElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLAudioElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLAudioElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLAudioElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLAudioElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLAudioElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLAudioElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLAudioElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLAudioElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLAudioElement[JC] var onemptied: js.Function1[Event, _]
HTMLAudioElement[JC] var onended: js.Function1[Event, _]
HTMLAudioElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLAudioElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLAudioElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLAudioElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLAudioElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLAudioElement[JC] var onhelp: js.Function1[Event, _]
HTMLAudioElement[JC] var oninput: js.Function1[Event, _]
HTMLAudioElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLAudioElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLAudioElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLAudioElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLAudioElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLAudioElement[JC] var onloadstart: js.Function1[Event, _]
HTMLAudioElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLAudioElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLAudioElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLAudioElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLAudioElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLAudioElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLAudioElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLAudioElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLAudioElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLAudioElement[JC] var onpause: js.Function1[Event, _]
HTMLAudioElement[JC] var onplay: js.Function1[Event, _]
HTMLAudioElement[JC] var onplaying: js.Function1[Event, _]
HTMLAudioElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLAudioElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLAudioElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLAudioElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLAudioElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLAudioElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLAudioElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLAudioElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLAudioElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLAudioElement[JC] var onratechange: js.Function1[Event, _]
HTMLAudioElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLAudioElement[JC] var onreset: js.Function1[Event, _]
HTMLAudioElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLAudioElement[JC] var onseeked: js.Function1[Event, _]
HTMLAudioElement[JC] var onseeking: js.Function1[Event, _]
HTMLAudioElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLAudioElement[JC] var onselectstart: js.Function1[Event, _]
HTMLAudioElement[JC] var onstalled: js.Function1[Event, _]
HTMLAudioElement[JC] var onsubmit: js.Function1[Event, _]
HTMLAudioElement[JC] var onsuspend: js.Function1[Event, _]
HTMLAudioElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLAudioElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLAudioElement[JC] var onwaiting: js.Function1[Event, _]
HTMLAudioElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLAudioElement[JC] var outerHTML: String
HTMLAudioElement[JC] def ownerDocument: Document
HTMLAudioElement[JC] override def ownerDocument: HTMLDocument
HTMLAudioElement[JC] var parentElement: HTMLElement
HTMLAudioElement[JC] def parentNode: Node
HTMLAudioElement[JC] def pause(): Unit
HTMLAudioElement[JC] def paused: Boolean
HTMLAudioElement[JC] def play(): js.UndefOr[js.Promise[Unit]]
HTMLAudioElement[JC] var playbackRate: Double
HTMLAudioElement[JC] def played: TimeRanges
HTMLAudioElement[JC] def prefix: String
HTMLAudioElement[JC] var preload: String
HTMLAudioElement[JC] def prepend(nodes: Node | String*): Unit
HTMLAudioElement[JC] def previousElementSibling: Element
HTMLAudioElement[JC] def previousSibling: Node
HTMLAudioElement[JC] def querySelector(selectors: String): Element
HTMLAudioElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLAudioElement[JC] var readyState: js.Any
HTMLAudioElement[JC] var recordNumber: js.Any
HTMLAudioElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLAudioElement[JC] def remove(): Unit
HTMLAudioElement[JC] def removeAttribute(name: String): Unit
HTMLAudioElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLAudioElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLAudioElement[JC] def removeChild(oldChild: Node): Node
HTMLAudioElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLAudioElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLAudioElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLAudioElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLAudioElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLAudioElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLAudioElement[JC] def requestPointerLock(): Unit
HTMLAudioElement[JC] def scrollHeight: Int
HTMLAudioElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLAudioElement[JC] var scrollLeft: Double
HTMLAudioElement[JC] var scrollTop: Double
HTMLAudioElement[JC] def scrollWidth: Int
HTMLAudioElement[JC] def seekable: TimeRanges
HTMLAudioElement[JC] def seeking: Boolean
HTMLAudioElement[JC] def setAttribute(name: String, value: String): Unit
HTMLAudioElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLAudioElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLAudioElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLAudioElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLAudioElement[JC] def shadowRoot: ShadowRoot
HTMLAudioElement[JC] var spellcheck: Boolean
HTMLAudioElement[JC] var src: String
HTMLAudioElement[JC] var srcObject: js.UndefOr[MediaStream | MediaSource | Blob]
HTMLAudioElement[JC] def style: CSSStyleDeclaration
HTMLAudioElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLAudioElement[JC] def style_ = (value: String): Unit
HTMLAudioElement[JC] var tabIndex: Int
HTMLAudioElement[JC] def tagName: String
HTMLAudioElement[JC] var textContent: String
HTMLAudioElement[JC] def textTracks: TextTrackList
HTMLAudioElement[JC] var title: String
HTMLAudioElement[JC] var volume: Double
HTMLBRElement[JC] var accessKey: String
HTMLBRElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLBRElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLBRElement[JC] def after(nodes: Node | String*): Unit
HTMLBRElement[JC] def append(nodes: Node | String*): Unit
HTMLBRElement[JC] def appendChild(newChild: Node): Node
HTMLBRElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLBRElement[JC] def attributes: NamedNodeMap
HTMLBRElement[JC] def baseURI: String
HTMLBRElement[JC] def before(nodes: Node | String*): Unit
HTMLBRElement[JC] def blur(): Unit
HTMLBRElement[JC] def childElementCount: Int
HTMLBRElement[JC] def childNodes: NodeList[Node]
HTMLBRElement[JC] def children: HTMLCollection[Element]
HTMLBRElement[JC] var classList: DOMTokenList
HTMLBRElement[JC] var className: String
HTMLBRElement[JC] def click(): Unit
HTMLBRElement[JC] def clientHeight: Int
HTMLBRElement[JC] def clientLeft: Int
HTMLBRElement[JC] def clientTop: Int
HTMLBRElement[JC] def clientWidth: Int
HTMLBRElement[JC] def cloneNode(deep: Boolean?): Node
HTMLBRElement[JC] def closest(selector: String): Element
HTMLBRElement[JC] def compareDocumentPosition(other: Node): Int
HTMLBRElement[JC] def contains(child: HTMLElement): Boolean
HTMLBRElement[JC] def contains(otherNode: Node): Boolean
HTMLBRElement[JC] var contentEditable: String
HTMLBRElement[JC] def dataset: js.Dictionary[String]
HTMLBRElement[JC] var dir: String
HTMLBRElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLBRElement[JC] var draggable: Boolean
HTMLBRElement[JC] var filters: Object
HTMLBRElement[JC] def firstChild: Node
HTMLBRElement[JC] def firstElementChild: Element
HTMLBRElement[JC] def focus(): Unit
HTMLBRElement[JC] def focus(options: FocusOptions): Unit
HTMLBRElement[JC] def getAttribute(name: String): String
HTMLBRElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLBRElement[JC] def getAttributeNode(name: String): Attr
HTMLBRElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLBRElement[JC] def getBoundingClientRect(): DOMRect
HTMLBRElement[JC] def getClientRects(): DOMRectList
HTMLBRElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLBRElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLBRElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLBRElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLBRElement[JC] def hasAttribute(name: String): Boolean
HTMLBRElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLBRElement[JC] def hasAttributes(): Boolean
HTMLBRElement[JC] def hasChildNodes(): Boolean
HTMLBRElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLBRElement[JC] var id: String
HTMLBRElement[JC] var innerHTML: String
HTMLBRElement[JC] var innerText: String
HTMLBRElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLBRElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLBRElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLBRElement[JC] def isConnected: Boolean
HTMLBRElement[JC] def isContentEditable: Boolean
HTMLBRElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLBRElement[JC] def isEqualNode(arg: Node): Boolean
HTMLBRElement[JC] def isSameNode(other: Node): Boolean
HTMLBRElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLBRElement[JC] var lang: String
HTMLBRElement[JC] def lastChild: Node
HTMLBRElement[JC] def lastElementChild: Element
HTMLBRElement[JC] def localName: String
HTMLBRElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLBRElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLBRElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLBRElement[JC] def matches(selector: String): Boolean
HTMLBRElement[JC] def namespaceURI: String
HTMLBRElement[JC] def nextElementSibling: Element
HTMLBRElement[JC] def nextSibling: Node
HTMLBRElement[JC] def nodeName: String
HTMLBRElement[JC] def nodeType: Int
HTMLBRElement[JC] var nodeValue: String
HTMLBRElement[JC] def normalize(): Unit
HTMLBRElement[JC] def offsetHeight: Double
HTMLBRElement[JC] def offsetLeft: Double
HTMLBRElement[JC] def offsetParent: Element
HTMLBRElement[JC] def offsetTop: Double
HTMLBRElement[JC] def offsetWidth: Double
HTMLBRElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLBRElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLBRElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLBRElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLBRElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLBRElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLBRElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLBRElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLBRElement[JC] var oncanplay: js.Function1[Event, _]
HTMLBRElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLBRElement[JC] var onchange: js.Function1[Event, _]
HTMLBRElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLBRElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLBRElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLBRElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLBRElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLBRElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLBRElement[JC] var oncuechange: js.Function1[Event, _]
HTMLBRElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLBRElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLBRElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLBRElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLBRElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLBRElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLBRElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLBRElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLBRElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLBRElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLBRElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLBRElement[JC] var onemptied: js.Function1[Event, _]
HTMLBRElement[JC] var onended: js.Function1[Event, _]
HTMLBRElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLBRElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLBRElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLBRElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLBRElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLBRElement[JC] var onhelp: js.Function1[Event, _]
HTMLBRElement[JC] var oninput: js.Function1[Event, _]
HTMLBRElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLBRElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLBRElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLBRElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLBRElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLBRElement[JC] var onloadstart: js.Function1[Event, _]
HTMLBRElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLBRElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLBRElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLBRElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLBRElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLBRElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLBRElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLBRElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLBRElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLBRElement[JC] var onpause: js.Function1[Event, _]
HTMLBRElement[JC] var onplay: js.Function1[Event, _]
HTMLBRElement[JC] var onplaying: js.Function1[Event, _]
HTMLBRElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLBRElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLBRElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLBRElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLBRElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLBRElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLBRElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLBRElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLBRElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLBRElement[JC] var onratechange: js.Function1[Event, _]
HTMLBRElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLBRElement[JC] var onreset: js.Function1[Event, _]
HTMLBRElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLBRElement[JC] var onseeked: js.Function1[Event, _]
HTMLBRElement[JC] var onseeking: js.Function1[Event, _]
HTMLBRElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLBRElement[JC] var onselectstart: js.Function1[Event, _]
HTMLBRElement[JC] var onstalled: js.Function1[Event, _]
HTMLBRElement[JC] var onsubmit: js.Function1[Event, _]
HTMLBRElement[JC] var onsuspend: js.Function1[Event, _]
HTMLBRElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLBRElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLBRElement[JC] var onwaiting: js.Function1[Event, _]
HTMLBRElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLBRElement[JC] var outerHTML: String
HTMLBRElement[JC] def ownerDocument: Document
HTMLBRElement[JC] override def ownerDocument: HTMLDocument
HTMLBRElement[JC] var parentElement: HTMLElement
HTMLBRElement[JC] def parentNode: Node
HTMLBRElement[JC] def prefix: String
HTMLBRElement[JC] def prepend(nodes: Node | String*): Unit
HTMLBRElement[JC] def previousElementSibling: Element
HTMLBRElement[JC] def previousSibling: Node
HTMLBRElement[JC] def querySelector(selectors: String): Element
HTMLBRElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLBRElement[JC] var readyState: js.Any
HTMLBRElement[JC] var recordNumber: js.Any
HTMLBRElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLBRElement[JC] def remove(): Unit
HTMLBRElement[JC] def removeAttribute(name: String): Unit
HTMLBRElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLBRElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLBRElement[JC] def removeChild(oldChild: Node): Node
HTMLBRElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLBRElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLBRElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLBRElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLBRElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLBRElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLBRElement[JC] def requestPointerLock(): Unit
HTMLBRElement[JC] def scrollHeight: Int
HTMLBRElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLBRElement[JC] var scrollLeft: Double
HTMLBRElement[JC] var scrollTop: Double
HTMLBRElement[JC] def scrollWidth: Int
HTMLBRElement[JC] def setAttribute(name: String, value: String): Unit
HTMLBRElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLBRElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLBRElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLBRElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLBRElement[JC] def shadowRoot: ShadowRoot
HTMLBRElement[JC] var spellcheck: Boolean
HTMLBRElement[JC] def style: CSSStyleDeclaration
HTMLBRElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLBRElement[JC] def style_ = (value: String): Unit
HTMLBRElement[JC] var tabIndex: Int
HTMLBRElement[JC] def tagName: String
HTMLBRElement[JC] var textContent: String
HTMLBRElement[JC] var title: String
HTMLBaseElement[JC] var accessKey: String
HTMLBaseElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLBaseElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLBaseElement[JC] def after(nodes: Node | String*): Unit
HTMLBaseElement[JC] def append(nodes: Node | String*): Unit
HTMLBaseElement[JC] def appendChild(newChild: Node): Node
HTMLBaseElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLBaseElement[JC] def attributes: NamedNodeMap
HTMLBaseElement[JC] def baseURI: String
HTMLBaseElement[JC] def before(nodes: Node | String*): Unit
HTMLBaseElement[JC] def blur(): Unit
HTMLBaseElement[JC] def childElementCount: Int
HTMLBaseElement[JC] def childNodes: NodeList[Node]
HTMLBaseElement[JC] def children: HTMLCollection[Element]
HTMLBaseElement[JC] var classList: DOMTokenList
HTMLBaseElement[JC] var className: String
HTMLBaseElement[JC] def click(): Unit
HTMLBaseElement[JC] def clientHeight: Int
HTMLBaseElement[JC] def clientLeft: Int
HTMLBaseElement[JC] def clientTop: Int
HTMLBaseElement[JC] def clientWidth: Int
HTMLBaseElement[JC] def cloneNode(deep: Boolean?): Node
HTMLBaseElement[JC] def closest(selector: String): Element
HTMLBaseElement[JC] def compareDocumentPosition(other: Node): Int
HTMLBaseElement[JC] def contains(child: HTMLElement): Boolean
HTMLBaseElement[JC] def contains(otherNode: Node): Boolean
HTMLBaseElement[JC] var contentEditable: String
HTMLBaseElement[JC] def dataset: js.Dictionary[String]
HTMLBaseElement[JC] var dir: String
HTMLBaseElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLBaseElement[JC] var draggable: Boolean
HTMLBaseElement[JC] var filters: Object
HTMLBaseElement[JC] def firstChild: Node
HTMLBaseElement[JC] def firstElementChild: Element
HTMLBaseElement[JC] def focus(): Unit
HTMLBaseElement[JC] def focus(options: FocusOptions): Unit
HTMLBaseElement[JC] def getAttribute(name: String): String
HTMLBaseElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLBaseElement[JC] def getAttributeNode(name: String): Attr
HTMLBaseElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLBaseElement[JC] def getBoundingClientRect(): DOMRect
HTMLBaseElement[JC] def getClientRects(): DOMRectList
HTMLBaseElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLBaseElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLBaseElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLBaseElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLBaseElement[JC] def hasAttribute(name: String): Boolean
HTMLBaseElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLBaseElement[JC] def hasAttributes(): Boolean
HTMLBaseElement[JC] def hasChildNodes(): Boolean
HTMLBaseElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLBaseElement[JC] var href: String
HTMLBaseElement[JC] var id: String
HTMLBaseElement[JC] var innerHTML: String
HTMLBaseElement[JC] var innerText: String
HTMLBaseElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLBaseElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLBaseElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLBaseElement[JC] def isConnected: Boolean
HTMLBaseElement[JC] def isContentEditable: Boolean
HTMLBaseElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLBaseElement[JC] def isEqualNode(arg: Node): Boolean
HTMLBaseElement[JC] def isSameNode(other: Node): Boolean
HTMLBaseElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLBaseElement[JC] var lang: String
HTMLBaseElement[JC] def lastChild: Node
HTMLBaseElement[JC] def lastElementChild: Element
HTMLBaseElement[JC] def localName: String
HTMLBaseElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLBaseElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLBaseElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLBaseElement[JC] def matches(selector: String): Boolean
HTMLBaseElement[JC] def namespaceURI: String
HTMLBaseElement[JC] def nextElementSibling: Element
HTMLBaseElement[JC] def nextSibling: Node
HTMLBaseElement[JC] def nodeName: String
HTMLBaseElement[JC] def nodeType: Int
HTMLBaseElement[JC] var nodeValue: String
HTMLBaseElement[JC] def normalize(): Unit
HTMLBaseElement[JC] def offsetHeight: Double
HTMLBaseElement[JC] def offsetLeft: Double
HTMLBaseElement[JC] def offsetParent: Element
HTMLBaseElement[JC] def offsetTop: Double
HTMLBaseElement[JC] def offsetWidth: Double
HTMLBaseElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLBaseElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLBaseElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLBaseElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLBaseElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLBaseElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLBaseElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLBaseElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLBaseElement[JC] var oncanplay: js.Function1[Event, _]
HTMLBaseElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLBaseElement[JC] var onchange: js.Function1[Event, _]
HTMLBaseElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLBaseElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLBaseElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLBaseElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLBaseElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLBaseElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLBaseElement[JC] var oncuechange: js.Function1[Event, _]
HTMLBaseElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLBaseElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLBaseElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLBaseElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLBaseElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLBaseElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLBaseElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLBaseElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLBaseElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLBaseElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLBaseElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLBaseElement[JC] var onemptied: js.Function1[Event, _]
HTMLBaseElement[JC] var onended: js.Function1[Event, _]
HTMLBaseElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLBaseElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLBaseElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLBaseElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLBaseElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLBaseElement[JC] var onhelp: js.Function1[Event, _]
HTMLBaseElement[JC] var oninput: js.Function1[Event, _]
HTMLBaseElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLBaseElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLBaseElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLBaseElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLBaseElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLBaseElement[JC] var onloadstart: js.Function1[Event, _]
HTMLBaseElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLBaseElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLBaseElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLBaseElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLBaseElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLBaseElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLBaseElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLBaseElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLBaseElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLBaseElement[JC] var onpause: js.Function1[Event, _]
HTMLBaseElement[JC] var onplay: js.Function1[Event, _]
HTMLBaseElement[JC] var onplaying: js.Function1[Event, _]
HTMLBaseElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLBaseElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLBaseElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLBaseElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLBaseElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLBaseElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLBaseElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLBaseElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLBaseElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLBaseElement[JC] var onratechange: js.Function1[Event, _]
HTMLBaseElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLBaseElement[JC] var onreset: js.Function1[Event, _]
HTMLBaseElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLBaseElement[JC] var onseeked: js.Function1[Event, _]
HTMLBaseElement[JC] var onseeking: js.Function1[Event, _]
HTMLBaseElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLBaseElement[JC] var onselectstart: js.Function1[Event, _]
HTMLBaseElement[JC] var onstalled: js.Function1[Event, _]
HTMLBaseElement[JC] var onsubmit: js.Function1[Event, _]
HTMLBaseElement[JC] var onsuspend: js.Function1[Event, _]
HTMLBaseElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLBaseElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLBaseElement[JC] var onwaiting: js.Function1[Event, _]
HTMLBaseElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLBaseElement[JC] var outerHTML: String
HTMLBaseElement[JC] def ownerDocument: Document
HTMLBaseElement[JC] override def ownerDocument: HTMLDocument
HTMLBaseElement[JC] var parentElement: HTMLElement
HTMLBaseElement[JC] def parentNode: Node
HTMLBaseElement[JC] def prefix: String
HTMLBaseElement[JC] def prepend(nodes: Node | String*): Unit
HTMLBaseElement[JC] def previousElementSibling: Element
HTMLBaseElement[JC] def previousSibling: Node
HTMLBaseElement[JC] def querySelector(selectors: String): Element
HTMLBaseElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLBaseElement[JC] var readyState: js.Any
HTMLBaseElement[JC] var recordNumber: js.Any
HTMLBaseElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLBaseElement[JC] def remove(): Unit
HTMLBaseElement[JC] def removeAttribute(name: String): Unit
HTMLBaseElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLBaseElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLBaseElement[JC] def removeChild(oldChild: Node): Node
HTMLBaseElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLBaseElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLBaseElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLBaseElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLBaseElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLBaseElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLBaseElement[JC] def requestPointerLock(): Unit
HTMLBaseElement[JC] def scrollHeight: Int
HTMLBaseElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLBaseElement[JC] var scrollLeft: Double
HTMLBaseElement[JC] var scrollTop: Double
HTMLBaseElement[JC] def scrollWidth: Int
HTMLBaseElement[JC] def setAttribute(name: String, value: String): Unit
HTMLBaseElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLBaseElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLBaseElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLBaseElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLBaseElement[JC] def shadowRoot: ShadowRoot
HTMLBaseElement[JC] var spellcheck: Boolean
HTMLBaseElement[JC] def style: CSSStyleDeclaration
HTMLBaseElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLBaseElement[JC] def style_ = (value: String): Unit
HTMLBaseElement[JC] var tabIndex: Int
HTMLBaseElement[JC] def tagName: String
HTMLBaseElement[JC] var target: String
HTMLBaseElement[JC] var textContent: String
HTMLBaseElement[JC] var title: String
HTMLBodyElement[JC] var accessKey: String
HTMLBodyElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLBodyElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLBodyElement[JC] def after(nodes: Node | String*): Unit
HTMLBodyElement[JC] def append(nodes: Node | String*): Unit
HTMLBodyElement[JC] def appendChild(newChild: Node): Node
HTMLBodyElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLBodyElement[JC] def attributes: NamedNodeMap
HTMLBodyElement[JC] def baseURI: String
HTMLBodyElement[JC] def before(nodes: Node | String*): Unit
HTMLBodyElement[JC] def blur(): Unit
HTMLBodyElement[JC] def childElementCount: Int
HTMLBodyElement[JC] def childNodes: NodeList[Node]
HTMLBodyElement[JC] def children: HTMLCollection[Element]
HTMLBodyElement[JC] var classList: DOMTokenList
HTMLBodyElement[JC] var className: String
HTMLBodyElement[JC] def click(): Unit
HTMLBodyElement[JC] def clientHeight: Int
HTMLBodyElement[JC] def clientLeft: Int
HTMLBodyElement[JC] def clientTop: Int
HTMLBodyElement[JC] def clientWidth: Int
HTMLBodyElement[JC] def cloneNode(deep: Boolean?): Node
HTMLBodyElement[JC] def closest(selector: String): Element
HTMLBodyElement[JC] def compareDocumentPosition(other: Node): Int
HTMLBodyElement[JC] def contains(child: HTMLElement): Boolean
HTMLBodyElement[JC] def contains(otherNode: Node): Boolean
HTMLBodyElement[JC] var contentEditable: String
HTMLBodyElement[JC] def dataset: js.Dictionary[String]
HTMLBodyElement[JC] var dir: String
HTMLBodyElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLBodyElement[JC] var draggable: Boolean
HTMLBodyElement[JC] var filters: Object
HTMLBodyElement[JC] def firstChild: Node
HTMLBodyElement[JC] def firstElementChild: Element
HTMLBodyElement[JC] def focus(): Unit
HTMLBodyElement[JC] def focus(options: FocusOptions): Unit
HTMLBodyElement[JC] def getAttribute(name: String): String
HTMLBodyElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLBodyElement[JC] def getAttributeNode(name: String): Attr
HTMLBodyElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLBodyElement[JC] def getBoundingClientRect(): DOMRect
HTMLBodyElement[JC] def getClientRects(): DOMRectList
HTMLBodyElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLBodyElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLBodyElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLBodyElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLBodyElement[JC] def hasAttribute(name: String): Boolean
HTMLBodyElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLBodyElement[JC] def hasAttributes(): Boolean
HTMLBodyElement[JC] def hasChildNodes(): Boolean
HTMLBodyElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLBodyElement[JC] var id: String
HTMLBodyElement[JC] var innerHTML: String
HTMLBodyElement[JC] var innerText: String
HTMLBodyElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLBodyElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLBodyElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLBodyElement[JC] def isConnected: Boolean
HTMLBodyElement[JC] def isContentEditable: Boolean
HTMLBodyElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLBodyElement[JC] def isEqualNode(arg: Node): Boolean
HTMLBodyElement[JC] def isSameNode(other: Node): Boolean
HTMLBodyElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLBodyElement[JC] var lang: String
HTMLBodyElement[JC] def lastChild: Node
HTMLBodyElement[JC] def lastElementChild: Element
HTMLBodyElement[JC] def localName: String
HTMLBodyElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLBodyElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLBodyElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLBodyElement[JC] def matches(selector: String): Boolean
HTMLBodyElement[JC] def namespaceURI: String
HTMLBodyElement[JC] def nextElementSibling: Element
HTMLBodyElement[JC] def nextSibling: Node
HTMLBodyElement[JC] def nodeName: String
HTMLBodyElement[JC] def nodeType: Int
HTMLBodyElement[JC] var nodeValue: String
HTMLBodyElement[JC] def normalize(): Unit
HTMLBodyElement[JC] def offsetHeight: Double
HTMLBodyElement[JC] def offsetLeft: Double
HTMLBodyElement[JC] def offsetParent: Element
HTMLBodyElement[JC] def offsetTop: Double
HTMLBodyElement[JC] def offsetWidth: Double
HTMLBodyElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLBodyElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLBodyElement[JC] var onafterprint: js.Function1[Event, _]
HTMLBodyElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLBodyElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLBodyElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLBodyElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLBodyElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLBodyElement[JC] var onbeforeprint: js.Function1[Event, _]
HTMLBodyElement[JC] var onbeforeunload: js.Function1[BeforeUnloadEvent, _]
HTMLBodyElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLBodyElement[JC] var oncanplay: js.Function1[Event, _]
HTMLBodyElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLBodyElement[JC] var onchange: js.Function1[Event, _]
HTMLBodyElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLBodyElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLBodyElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLBodyElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLBodyElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLBodyElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLBodyElement[JC] var oncuechange: js.Function1[Event, _]
HTMLBodyElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLBodyElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLBodyElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLBodyElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLBodyElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLBodyElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLBodyElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLBodyElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLBodyElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLBodyElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLBodyElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLBodyElement[JC] var onemptied: js.Function1[Event, _]
HTMLBodyElement[JC] var onended: js.Function1[Event, _]
HTMLBodyElement[JC] var onerror: js.Function1[ErrorEvent, _]
HTMLBodyElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLBodyElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLBodyElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLBodyElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLBodyElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLBodyElement[JC] var onhashchange: js.Function1[Event, _]
HTMLBodyElement[JC] var onhelp: js.Function1[Event, _]
HTMLBodyElement[JC] var oninput: js.Function1[Event, _]
HTMLBodyElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLBodyElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLBodyElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLBodyElement[JC] var onload: js.Function1[Event, _]
HTMLBodyElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLBodyElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLBodyElement[JC] var onloadstart: js.Function1[Event, _]
HTMLBodyElement[JC] var onmessage: js.Function1[MessageEvent, _]
HTMLBodyElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLBodyElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLBodyElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLBodyElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLBodyElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLBodyElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLBodyElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLBodyElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLBodyElement[JC] var onoffline: js.Function1[Event, _]
HTMLBodyElement[JC] var ononline: js.Function1[Event, _]
HTMLBodyElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLBodyElement[JC] var onpause: js.Function1[Event, _]
HTMLBodyElement[JC] var onplay: js.Function1[Event, _]
HTMLBodyElement[JC] var onplaying: js.Function1[Event, _]
HTMLBodyElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLBodyElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLBodyElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLBodyElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLBodyElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLBodyElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLBodyElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLBodyElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLBodyElement[JC] var onpopstate: js.Function1[PopStateEvent, _]
HTMLBodyElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLBodyElement[JC] var onratechange: js.Function1[Event, _]
HTMLBodyElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLBodyElement[JC] var onreset: js.Function1[Event, _]
HTMLBodyElement[JC] var onresize: js.Function1[UIEvent, _]
HTMLBodyElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLBodyElement[JC] var onseeked: js.Function1[Event, _]
HTMLBodyElement[JC] var onseeking: js.Function1[Event, _]
HTMLBodyElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLBodyElement[JC] var onselectstart: js.Function1[Event, _]
HTMLBodyElement[JC] var onstalled: js.Function1[Event, _]
HTMLBodyElement[JC] var onstorage: js.Function1[StorageEvent, _]
HTMLBodyElement[JC] var onsubmit: js.Function1[Event, _]
HTMLBodyElement[JC] var onsuspend: js.Function1[Event, _]
HTMLBodyElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLBodyElement[JC] var onunload: js.Function1[Event, _]
HTMLBodyElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLBodyElement[JC] var onwaiting: js.Function1[Event, _]
HTMLBodyElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLBodyElement[JC] var outerHTML: String
HTMLBodyElement[JC] def ownerDocument: Document
HTMLBodyElement[JC] override def ownerDocument: HTMLDocument
HTMLBodyElement[JC] var parentElement: HTMLElement
HTMLBodyElement[JC] def parentNode: Node
HTMLBodyElement[JC] def prefix: String
HTMLBodyElement[JC] def prepend(nodes: Node | String*): Unit
HTMLBodyElement[JC] def previousElementSibling: Element
HTMLBodyElement[JC] def previousSibling: Node
HTMLBodyElement[JC] def querySelector(selectors: String): Element
HTMLBodyElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLBodyElement[JC] var readyState: js.Any
HTMLBodyElement[JC] var recordNumber: js.Any
HTMLBodyElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLBodyElement[JC] def remove(): Unit
HTMLBodyElement[JC] def removeAttribute(name: String): Unit
HTMLBodyElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLBodyElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLBodyElement[JC] def removeChild(oldChild: Node): Node
HTMLBodyElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLBodyElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLBodyElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLBodyElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLBodyElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLBodyElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLBodyElement[JC] def requestPointerLock(): Unit
HTMLBodyElement[JC] var scroll: String
HTMLBodyElement[JC] def scrollHeight: Int
HTMLBodyElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLBodyElement[JC] var scrollLeft: Double
HTMLBodyElement[JC] var scrollTop: Double
HTMLBodyElement[JC] def scrollWidth: Int
HTMLBodyElement[JC] def setAttribute(name: String, value: String): Unit
HTMLBodyElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLBodyElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLBodyElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLBodyElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLBodyElement[JC] def shadowRoot: ShadowRoot
HTMLBodyElement[JC] var spellcheck: Boolean
HTMLBodyElement[JC] def style: CSSStyleDeclaration
HTMLBodyElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLBodyElement[JC] def style_ = (value: String): Unit
HTMLBodyElement[JC] var tabIndex: Int
HTMLBodyElement[JC] def tagName: String
HTMLBodyElement[JC] var textContent: String
HTMLBodyElement[JC] var title: String
HTMLButtonElement[JC] var accessKey: String
HTMLButtonElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLButtonElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLButtonElement[JC] def after(nodes: Node | String*): Unit
HTMLButtonElement[JC] def append(nodes: Node | String*): Unit
HTMLButtonElement[JC] def appendChild(newChild: Node): Node
HTMLButtonElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLButtonElement[JC] def attributes: NamedNodeMap
HTMLButtonElement[JC] var autofocus: Boolean
HTMLButtonElement[JC] def baseURI: String
HTMLButtonElement[JC] def before(nodes: Node | String*): Unit
HTMLButtonElement[JC] def blur(): Unit
HTMLButtonElement[JC] def checkValidity(): Boolean
HTMLButtonElement[JC] def childElementCount: Int
HTMLButtonElement[JC] def childNodes: NodeList[Node]
HTMLButtonElement[JC] def children: HTMLCollection[Element]
HTMLButtonElement[JC] var classList: DOMTokenList
HTMLButtonElement[JC] var className: String
HTMLButtonElement[JC] def click(): Unit
HTMLButtonElement[JC] def clientHeight: Int
HTMLButtonElement[JC] def clientLeft: Int
HTMLButtonElement[JC] def clientTop: Int
HTMLButtonElement[JC] def clientWidth: Int
HTMLButtonElement[JC] def cloneNode(deep: Boolean?): Node
HTMLButtonElement[JC] def closest(selector: String): Element
HTMLButtonElement[JC] def compareDocumentPosition(other: Node): Int
HTMLButtonElement[JC] def contains(child: HTMLElement): Boolean
HTMLButtonElement[JC] def contains(otherNode: Node): Boolean
HTMLButtonElement[JC] var contentEditable: String
HTMLButtonElement[JC] def dataset: js.Dictionary[String]
HTMLButtonElement[JC] var dir: String
HTMLButtonElement[JC] var disabled: Boolean
HTMLButtonElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLButtonElement[JC] var draggable: Boolean
HTMLButtonElement[JC] var filters: Object
HTMLButtonElement[JC] def firstChild: Node
HTMLButtonElement[JC] def firstElementChild: Element
HTMLButtonElement[JC] def focus(): Unit
HTMLButtonElement[JC] def focus(options: FocusOptions): Unit
HTMLButtonElement[JC] def form: HTMLFormElement
HTMLButtonElement[JC] var formAction: String
HTMLButtonElement[JC] var formEnctype: String
HTMLButtonElement[JC] var formMethod: String
HTMLButtonElement[JC] var formNoValidate: String
HTMLButtonElement[JC] var formTarget: String
HTMLButtonElement[JC] def getAttribute(name: String): String
HTMLButtonElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLButtonElement[JC] def getAttributeNode(name: String): Attr
HTMLButtonElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLButtonElement[JC] def getBoundingClientRect(): DOMRect
HTMLButtonElement[JC] def getClientRects(): DOMRectList
HTMLButtonElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLButtonElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLButtonElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLButtonElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLButtonElement[JC] def hasAttribute(name: String): Boolean
HTMLButtonElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLButtonElement[JC] def hasAttributes(): Boolean
HTMLButtonElement[JC] def hasChildNodes(): Boolean
HTMLButtonElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLButtonElement[JC] var id: String
HTMLButtonElement[JC] var innerHTML: String
HTMLButtonElement[JC] var innerText: String
HTMLButtonElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLButtonElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLButtonElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLButtonElement[JC] def isConnected: Boolean
HTMLButtonElement[JC] def isContentEditable: Boolean
HTMLButtonElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLButtonElement[JC] def isEqualNode(arg: Node): Boolean
HTMLButtonElement[JC] def isSameNode(other: Node): Boolean
HTMLButtonElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLButtonElement[JC] var lang: String
HTMLButtonElement[JC] def lastChild: Node
HTMLButtonElement[JC] def lastElementChild: Element
HTMLButtonElement[JC] def localName: String
HTMLButtonElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLButtonElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLButtonElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLButtonElement[JC] def matches(selector: String): Boolean
HTMLButtonElement[JC] var name: String
HTMLButtonElement[JC] def namespaceURI: String
HTMLButtonElement[JC] def nextElementSibling: Element
HTMLButtonElement[JC] def nextSibling: Node
HTMLButtonElement[JC] def nodeName: String
HTMLButtonElement[JC] def nodeType: Int
HTMLButtonElement[JC] var nodeValue: String
HTMLButtonElement[JC] def normalize(): Unit
HTMLButtonElement[JC] def offsetHeight: Double
HTMLButtonElement[JC] def offsetLeft: Double
HTMLButtonElement[JC] def offsetParent: Element
HTMLButtonElement[JC] def offsetTop: Double
HTMLButtonElement[JC] def offsetWidth: Double
HTMLButtonElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLButtonElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLButtonElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLButtonElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLButtonElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLButtonElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLButtonElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLButtonElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLButtonElement[JC] var oncanplay: js.Function1[Event, _]
HTMLButtonElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLButtonElement[JC] var onchange: js.Function1[Event, _]
HTMLButtonElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLButtonElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLButtonElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLButtonElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLButtonElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLButtonElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLButtonElement[JC] var oncuechange: js.Function1[Event, _]
HTMLButtonElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLButtonElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLButtonElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLButtonElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLButtonElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLButtonElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLButtonElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLButtonElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLButtonElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLButtonElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLButtonElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLButtonElement[JC] var onemptied: js.Function1[Event, _]
HTMLButtonElement[JC] var onended: js.Function1[Event, _]
HTMLButtonElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLButtonElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLButtonElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLButtonElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLButtonElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLButtonElement[JC] var onhelp: js.Function1[Event, _]
HTMLButtonElement[JC] var oninput: js.Function1[Event, _]
HTMLButtonElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLButtonElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLButtonElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLButtonElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLButtonElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLButtonElement[JC] var onloadstart: js.Function1[Event, _]
HTMLButtonElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLButtonElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLButtonElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLButtonElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLButtonElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLButtonElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLButtonElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLButtonElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLButtonElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLButtonElement[JC] var onpause: js.Function1[Event, _]
HTMLButtonElement[JC] var onplay: js.Function1[Event, _]
HTMLButtonElement[JC] var onplaying: js.Function1[Event, _]
HTMLButtonElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLButtonElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLButtonElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLButtonElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLButtonElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLButtonElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLButtonElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLButtonElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLButtonElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLButtonElement[JC] var onratechange: js.Function1[Event, _]
HTMLButtonElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLButtonElement[JC] var onreset: js.Function1[Event, _]
HTMLButtonElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLButtonElement[JC] var onseeked: js.Function1[Event, _]
HTMLButtonElement[JC] var onseeking: js.Function1[Event, _]
HTMLButtonElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLButtonElement[JC] var onselectstart: js.Function1[Event, _]
HTMLButtonElement[JC] var onstalled: js.Function1[Event, _]
HTMLButtonElement[JC] var onsubmit: js.Function1[Event, _]
HTMLButtonElement[JC] var onsuspend: js.Function1[Event, _]
HTMLButtonElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLButtonElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLButtonElement[JC] var onwaiting: js.Function1[Event, _]
HTMLButtonElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLButtonElement[JC] var outerHTML: String
HTMLButtonElement[JC] def ownerDocument: Document
HTMLButtonElement[JC] override def ownerDocument: HTMLDocument
HTMLButtonElement[JC] var parentElement: HTMLElement
HTMLButtonElement[JC] def parentNode: Node
HTMLButtonElement[JC] def prefix: String
HTMLButtonElement[JC] def prepend(nodes: Node | String*): Unit
HTMLButtonElement[JC] def previousElementSibling: Element
HTMLButtonElement[JC] def previousSibling: Node
HTMLButtonElement[JC] def querySelector(selectors: String): Element
HTMLButtonElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLButtonElement[JC] var readyState: js.Any
HTMLButtonElement[JC] var recordNumber: js.Any
HTMLButtonElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLButtonElement[JC] def remove(): Unit
HTMLButtonElement[JC] def removeAttribute(name: String): Unit
HTMLButtonElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLButtonElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLButtonElement[JC] def removeChild(oldChild: Node): Node
HTMLButtonElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLButtonElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLButtonElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLButtonElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLButtonElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLButtonElement[JC] def reportValidity(): Boolean
HTMLButtonElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLButtonElement[JC] def requestPointerLock(): Unit
HTMLButtonElement[JC] def scrollHeight: Int
HTMLButtonElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLButtonElement[JC] var scrollLeft: Double
HTMLButtonElement[JC] var scrollTop: Double
HTMLButtonElement[JC] def scrollWidth: Int
HTMLButtonElement[JC] def setAttribute(name: String, value: String): Unit
HTMLButtonElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLButtonElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLButtonElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLButtonElement[JC] def setCustomValidity(error: String): Unit
HTMLButtonElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLButtonElement[JC] def shadowRoot: ShadowRoot
HTMLButtonElement[JC] var spellcheck: Boolean
HTMLButtonElement[JC] var status: js.Any
HTMLButtonElement[JC] def style: CSSStyleDeclaration
HTMLButtonElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLButtonElement[JC] def style_ = (value: String): Unit
HTMLButtonElement[JC] var tabIndex: Int
HTMLButtonElement[JC] def tagName: String
HTMLButtonElement[JC] var textContent: String
HTMLButtonElement[JC] var title: String
HTMLButtonElement[JC] var `type`: String
HTMLButtonElement[JC] def validationMessage: String
HTMLButtonElement[JC] def validity: ValidityState
HTMLButtonElement[JC] var value: String
HTMLButtonElement[JC] def willValidate: Boolean
HTMLCanvasElement[JC] var accessKey: String
HTMLCanvasElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLCanvasElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLCanvasElement[JC] def after(nodes: Node | String*): Unit
HTMLCanvasElement[JC] def append(nodes: Node | String*): Unit
HTMLCanvasElement[JC] def appendChild(newChild: Node): Node
HTMLCanvasElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLCanvasElement[JC] def attributes: NamedNodeMap
HTMLCanvasElement[JC] def baseURI: String
HTMLCanvasElement[JC] def before(nodes: Node | String*): Unit
HTMLCanvasElement[JC] def blur(): Unit
HTMLCanvasElement[JC] def childElementCount: Int
HTMLCanvasElement[JC] def childNodes: NodeList[Node]
HTMLCanvasElement[JC] def children: HTMLCollection[Element]
HTMLCanvasElement[JC] var classList: DOMTokenList
HTMLCanvasElement[JC] var className: String
HTMLCanvasElement[JC] def click(): Unit
HTMLCanvasElement[JC] def clientHeight: Int
HTMLCanvasElement[JC] def clientLeft: Int
HTMLCanvasElement[JC] def clientTop: Int
HTMLCanvasElement[JC] def clientWidth: Int
HTMLCanvasElement[JC] def cloneNode(deep: Boolean?): Node
HTMLCanvasElement[JC] def closest(selector: String): Element
HTMLCanvasElement[JC] def compareDocumentPosition(other: Node): Int
HTMLCanvasElement[JC] def contains(child: HTMLElement): Boolean
HTMLCanvasElement[JC] def contains(otherNode: Node): Boolean
HTMLCanvasElement[JC] var contentEditable: String
HTMLCanvasElement[JC] def dataset: js.Dictionary[String]
HTMLCanvasElement[JC] var dir: String
HTMLCanvasElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLCanvasElement[JC] var draggable: Boolean
HTMLCanvasElement[JC] var filters: Object
HTMLCanvasElement[JC] def firstChild: Node
HTMLCanvasElement[JC] def firstElementChild: Element
HTMLCanvasElement[JC] def focus(): Unit
HTMLCanvasElement[JC] def focus(options: FocusOptions): Unit
HTMLCanvasElement[JC] def getAttribute(name: String): String
HTMLCanvasElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLCanvasElement[JC] def getAttributeNode(name: String): Attr
HTMLCanvasElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLCanvasElement[JC] def getBoundingClientRect(): DOMRect
HTMLCanvasElement[JC] def getClientRects(): DOMRectList
HTMLCanvasElement[JC] def getContext(contextId: String, args: js.Any*): js.Dynamic
HTMLCanvasElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLCanvasElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLCanvasElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLCanvasElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLCanvasElement[JC] def hasAttribute(name: String): Boolean
HTMLCanvasElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLCanvasElement[JC] def hasAttributes(): Boolean
HTMLCanvasElement[JC] def hasChildNodes(): Boolean
HTMLCanvasElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLCanvasElement[JC] var height: Int
HTMLCanvasElement[JC] var id: String
HTMLCanvasElement[JC] var innerHTML: String
HTMLCanvasElement[JC] var innerText: String
HTMLCanvasElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLCanvasElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLCanvasElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLCanvasElement[JC] def isConnected: Boolean
HTMLCanvasElement[JC] def isContentEditable: Boolean
HTMLCanvasElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLCanvasElement[JC] def isEqualNode(arg: Node): Boolean
HTMLCanvasElement[JC] def isSameNode(other: Node): Boolean
HTMLCanvasElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLCanvasElement[JC] var lang: String
HTMLCanvasElement[JC] def lastChild: Node
HTMLCanvasElement[JC] def lastElementChild: Element
HTMLCanvasElement[JC] def localName: String
HTMLCanvasElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLCanvasElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLCanvasElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLCanvasElement[JC] def matches(selector: String): Boolean
HTMLCanvasElement[JC] def namespaceURI: String
HTMLCanvasElement[JC] def nextElementSibling: Element
HTMLCanvasElement[JC] def nextSibling: Node
HTMLCanvasElement[JC] def nodeName: String
HTMLCanvasElement[JC] def nodeType: Int
HTMLCanvasElement[JC] var nodeValue: String
HTMLCanvasElement[JC] def normalize(): Unit
HTMLCanvasElement[JC] def offsetHeight: Double
HTMLCanvasElement[JC] def offsetLeft: Double
HTMLCanvasElement[JC] def offsetParent: Element
HTMLCanvasElement[JC] def offsetTop: Double
HTMLCanvasElement[JC] def offsetWidth: Double
HTMLCanvasElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLCanvasElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLCanvasElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLCanvasElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLCanvasElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLCanvasElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLCanvasElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLCanvasElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLCanvasElement[JC] var oncanplay: js.Function1[Event, _]
HTMLCanvasElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLCanvasElement[JC] var onchange: js.Function1[Event, _]
HTMLCanvasElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLCanvasElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLCanvasElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLCanvasElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLCanvasElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLCanvasElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLCanvasElement[JC] var oncuechange: js.Function1[Event, _]
HTMLCanvasElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLCanvasElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLCanvasElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLCanvasElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLCanvasElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLCanvasElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLCanvasElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLCanvasElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLCanvasElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLCanvasElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLCanvasElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLCanvasElement[JC] var onemptied: js.Function1[Event, _]
HTMLCanvasElement[JC] var onended: js.Function1[Event, _]
HTMLCanvasElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLCanvasElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLCanvasElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLCanvasElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLCanvasElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLCanvasElement[JC] var onhelp: js.Function1[Event, _]
HTMLCanvasElement[JC] var oninput: js.Function1[Event, _]
HTMLCanvasElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLCanvasElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLCanvasElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLCanvasElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLCanvasElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLCanvasElement[JC] var onloadstart: js.Function1[Event, _]
HTMLCanvasElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLCanvasElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLCanvasElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLCanvasElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLCanvasElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLCanvasElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLCanvasElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLCanvasElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLCanvasElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLCanvasElement[JC] var onpause: js.Function1[Event, _]
HTMLCanvasElement[JC] var onplay: js.Function1[Event, _]
HTMLCanvasElement[JC] var onplaying: js.Function1[Event, _]
HTMLCanvasElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLCanvasElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLCanvasElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLCanvasElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLCanvasElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLCanvasElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLCanvasElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLCanvasElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLCanvasElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLCanvasElement[JC] var onratechange: js.Function1[Event, _]
HTMLCanvasElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLCanvasElement[JC] var onreset: js.Function1[Event, _]
HTMLCanvasElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLCanvasElement[JC] var onseeked: js.Function1[Event, _]
HTMLCanvasElement[JC] var onseeking: js.Function1[Event, _]
HTMLCanvasElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLCanvasElement[JC] var onselectstart: js.Function1[Event, _]
HTMLCanvasElement[JC] var onstalled: js.Function1[Event, _]
HTMLCanvasElement[JC] var onsubmit: js.Function1[Event, _]
HTMLCanvasElement[JC] var onsuspend: js.Function1[Event, _]
HTMLCanvasElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLCanvasElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLCanvasElement[JC] var onwaiting: js.Function1[Event, _]
HTMLCanvasElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLCanvasElement[JC] var outerHTML: String
HTMLCanvasElement[JC] def ownerDocument: Document
HTMLCanvasElement[JC] override def ownerDocument: HTMLDocument
HTMLCanvasElement[JC] var parentElement: HTMLElement
HTMLCanvasElement[JC] def parentNode: Node
HTMLCanvasElement[JC] def prefix: String
HTMLCanvasElement[JC] def prepend(nodes: Node | String*): Unit
HTMLCanvasElement[JC] def previousElementSibling: Element
HTMLCanvasElement[JC] def previousSibling: Node
HTMLCanvasElement[JC] def querySelector(selectors: String): Element
HTMLCanvasElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLCanvasElement[JC] var readyState: js.Any
HTMLCanvasElement[JC] var recordNumber: js.Any
HTMLCanvasElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLCanvasElement[JC] def remove(): Unit
HTMLCanvasElement[JC] def removeAttribute(name: String): Unit
HTMLCanvasElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLCanvasElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLCanvasElement[JC] def removeChild(oldChild: Node): Node
HTMLCanvasElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLCanvasElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLCanvasElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLCanvasElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLCanvasElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLCanvasElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLCanvasElement[JC] def requestPointerLock(): Unit
HTMLCanvasElement[JC] def scrollHeight: Int
HTMLCanvasElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLCanvasElement[JC] var scrollLeft: Double
HTMLCanvasElement[JC] var scrollTop: Double
HTMLCanvasElement[JC] def scrollWidth: Int
HTMLCanvasElement[JC] def setAttribute(name: String, value: String): Unit
HTMLCanvasElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLCanvasElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLCanvasElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLCanvasElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLCanvasElement[JC] def shadowRoot: ShadowRoot
HTMLCanvasElement[JC] var spellcheck: Boolean
HTMLCanvasElement[JC] def style: CSSStyleDeclaration
HTMLCanvasElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLCanvasElement[JC] def style_ = (value: String): Unit
HTMLCanvasElement[JC] var tabIndex: Int
HTMLCanvasElement[JC] def tagName: String
HTMLCanvasElement[JC] var textContent: String
HTMLCanvasElement[JC] var title: String
HTMLCanvasElement[JC] def toDataURL(`type`: String, args: js.Any*): String
HTMLCanvasElement[JC] var width: Int
HTMLCollection[JC] @JSBracketAccess def apply(index: Int): T
HTMLCollection[JC] def item(index: Int): E
HTMLCollection[JC] def length: Int
HTMLCollection[JC] def namedItem(name: String): E
HTMLDListElement[JC] var accessKey: String
HTMLDListElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLDListElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLDListElement[JC] def after(nodes: Node | String*): Unit
HTMLDListElement[JC] def append(nodes: Node | String*): Unit
HTMLDListElement[JC] def appendChild(newChild: Node): Node
HTMLDListElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLDListElement[JC] def attributes: NamedNodeMap
HTMLDListElement[JC] def baseURI: String
HTMLDListElement[JC] def before(nodes: Node | String*): Unit
HTMLDListElement[JC] def blur(): Unit
HTMLDListElement[JC] def childElementCount: Int
HTMLDListElement[JC] def childNodes: NodeList[Node]
HTMLDListElement[JC] def children: HTMLCollection[Element]
HTMLDListElement[JC] var classList: DOMTokenList
HTMLDListElement[JC] var className: String
HTMLDListElement[JC] def click(): Unit
HTMLDListElement[JC] def clientHeight: Int
HTMLDListElement[JC] def clientLeft: Int
HTMLDListElement[JC] def clientTop: Int
HTMLDListElement[JC] def clientWidth: Int
HTMLDListElement[JC] def cloneNode(deep: Boolean?): Node
HTMLDListElement[JC] def closest(selector: String): Element
HTMLDListElement[JC] def compareDocumentPosition(other: Node): Int
HTMLDListElement[JC] def contains(child: HTMLElement): Boolean
HTMLDListElement[JC] def contains(otherNode: Node): Boolean
HTMLDListElement[JC] var contentEditable: String
HTMLDListElement[JC] def dataset: js.Dictionary[String]
HTMLDListElement[JC] var dir: String
HTMLDListElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLDListElement[JC] var draggable: Boolean
HTMLDListElement[JC] var filters: Object
HTMLDListElement[JC] def firstChild: Node
HTMLDListElement[JC] def firstElementChild: Element
HTMLDListElement[JC] def focus(): Unit
HTMLDListElement[JC] def focus(options: FocusOptions): Unit
HTMLDListElement[JC] def getAttribute(name: String): String
HTMLDListElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLDListElement[JC] def getAttributeNode(name: String): Attr
HTMLDListElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLDListElement[JC] def getBoundingClientRect(): DOMRect
HTMLDListElement[JC] def getClientRects(): DOMRectList
HTMLDListElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLDListElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLDListElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLDListElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLDListElement[JC] def hasAttribute(name: String): Boolean
HTMLDListElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLDListElement[JC] def hasAttributes(): Boolean
HTMLDListElement[JC] def hasChildNodes(): Boolean
HTMLDListElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLDListElement[JC] var id: String
HTMLDListElement[JC] var innerHTML: String
HTMLDListElement[JC] var innerText: String
HTMLDListElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLDListElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLDListElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLDListElement[JC] def isConnected: Boolean
HTMLDListElement[JC] def isContentEditable: Boolean
HTMLDListElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLDListElement[JC] def isEqualNode(arg: Node): Boolean
HTMLDListElement[JC] def isSameNode(other: Node): Boolean
HTMLDListElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLDListElement[JC] var lang: String
HTMLDListElement[JC] def lastChild: Node
HTMLDListElement[JC] def lastElementChild: Element
HTMLDListElement[JC] def localName: String
HTMLDListElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLDListElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLDListElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLDListElement[JC] def matches(selector: String): Boolean
HTMLDListElement[JC] def namespaceURI: String
HTMLDListElement[JC] def nextElementSibling: Element
HTMLDListElement[JC] def nextSibling: Node
HTMLDListElement[JC] def nodeName: String
HTMLDListElement[JC] def nodeType: Int
HTMLDListElement[JC] var nodeValue: String
HTMLDListElement[JC] def normalize(): Unit
HTMLDListElement[JC] def offsetHeight: Double
HTMLDListElement[JC] def offsetLeft: Double
HTMLDListElement[JC] def offsetParent: Element
HTMLDListElement[JC] def offsetTop: Double
HTMLDListElement[JC] def offsetWidth: Double
HTMLDListElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLDListElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLDListElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLDListElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLDListElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLDListElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLDListElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLDListElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLDListElement[JC] var oncanplay: js.Function1[Event, _]
HTMLDListElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLDListElement[JC] var onchange: js.Function1[Event, _]
HTMLDListElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLDListElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLDListElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLDListElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLDListElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLDListElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLDListElement[JC] var oncuechange: js.Function1[Event, _]
HTMLDListElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLDListElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLDListElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLDListElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLDListElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLDListElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLDListElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLDListElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLDListElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLDListElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLDListElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLDListElement[JC] var onemptied: js.Function1[Event, _]
HTMLDListElement[JC] var onended: js.Function1[Event, _]
HTMLDListElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLDListElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLDListElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLDListElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLDListElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLDListElement[JC] var onhelp: js.Function1[Event, _]
HTMLDListElement[JC] var oninput: js.Function1[Event, _]
HTMLDListElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLDListElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLDListElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLDListElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLDListElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLDListElement[JC] var onloadstart: js.Function1[Event, _]
HTMLDListElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLDListElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLDListElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLDListElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLDListElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLDListElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLDListElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLDListElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLDListElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLDListElement[JC] var onpause: js.Function1[Event, _]
HTMLDListElement[JC] var onplay: js.Function1[Event, _]
HTMLDListElement[JC] var onplaying: js.Function1[Event, _]
HTMLDListElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLDListElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLDListElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLDListElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLDListElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLDListElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLDListElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLDListElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLDListElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLDListElement[JC] var onratechange: js.Function1[Event, _]
HTMLDListElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLDListElement[JC] var onreset: js.Function1[Event, _]
HTMLDListElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLDListElement[JC] var onseeked: js.Function1[Event, _]
HTMLDListElement[JC] var onseeking: js.Function1[Event, _]
HTMLDListElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLDListElement[JC] var onselectstart: js.Function1[Event, _]
HTMLDListElement[JC] var onstalled: js.Function1[Event, _]
HTMLDListElement[JC] var onsubmit: js.Function1[Event, _]
HTMLDListElement[JC] var onsuspend: js.Function1[Event, _]
HTMLDListElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLDListElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLDListElement[JC] var onwaiting: js.Function1[Event, _]
HTMLDListElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLDListElement[JC] var outerHTML: String
HTMLDListElement[JC] def ownerDocument: Document
HTMLDListElement[JC] override def ownerDocument: HTMLDocument
HTMLDListElement[JC] var parentElement: HTMLElement
HTMLDListElement[JC] def parentNode: Node
HTMLDListElement[JC] def prefix: String
HTMLDListElement[JC] def prepend(nodes: Node | String*): Unit
HTMLDListElement[JC] def previousElementSibling: Element
HTMLDListElement[JC] def previousSibling: Node
HTMLDListElement[JC] def querySelector(selectors: String): Element
HTMLDListElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLDListElement[JC] var readyState: js.Any
HTMLDListElement[JC] var recordNumber: js.Any
HTMLDListElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLDListElement[JC] def remove(): Unit
HTMLDListElement[JC] def removeAttribute(name: String): Unit
HTMLDListElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLDListElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLDListElement[JC] def removeChild(oldChild: Node): Node
HTMLDListElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLDListElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLDListElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLDListElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLDListElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLDListElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLDListElement[JC] def requestPointerLock(): Unit
HTMLDListElement[JC] def scrollHeight: Int
HTMLDListElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLDListElement[JC] var scrollLeft: Double
HTMLDListElement[JC] var scrollTop: Double
HTMLDListElement[JC] def scrollWidth: Int
HTMLDListElement[JC] def setAttribute(name: String, value: String): Unit
HTMLDListElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLDListElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLDListElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLDListElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLDListElement[JC] def shadowRoot: ShadowRoot
HTMLDListElement[JC] var spellcheck: Boolean
HTMLDListElement[JC] def style: CSSStyleDeclaration
HTMLDListElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLDListElement[JC] def style_ = (value: String): Unit
HTMLDListElement[JC] var tabIndex: Int
HTMLDListElement[JC] def tagName: String
HTMLDListElement[JC] var textContent: String
HTMLDListElement[JC] var title: String
HTMLDataListElement[JC] var accessKey: String
HTMLDataListElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLDataListElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLDataListElement[JC] def after(nodes: Node | String*): Unit
HTMLDataListElement[JC] def append(nodes: Node | String*): Unit
HTMLDataListElement[JC] def appendChild(newChild: Node): Node
HTMLDataListElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLDataListElement[JC] def attributes: NamedNodeMap
HTMLDataListElement[JC] def baseURI: String
HTMLDataListElement[JC] def before(nodes: Node | String*): Unit
HTMLDataListElement[JC] def blur(): Unit
HTMLDataListElement[JC] def childElementCount: Int
HTMLDataListElement[JC] def childNodes: NodeList[Node]
HTMLDataListElement[JC] def children: HTMLCollection[Element]
HTMLDataListElement[JC] var classList: DOMTokenList
HTMLDataListElement[JC] var className: String
HTMLDataListElement[JC] def click(): Unit
HTMLDataListElement[JC] def clientHeight: Int
HTMLDataListElement[JC] def clientLeft: Int
HTMLDataListElement[JC] def clientTop: Int
HTMLDataListElement[JC] def clientWidth: Int
HTMLDataListElement[JC] def cloneNode(deep: Boolean?): Node
HTMLDataListElement[JC] def closest(selector: String): Element
HTMLDataListElement[JC] def compareDocumentPosition(other: Node): Int
HTMLDataListElement[JC] def contains(child: HTMLElement): Boolean
HTMLDataListElement[JC] def contains(otherNode: Node): Boolean
HTMLDataListElement[JC] var contentEditable: String
HTMLDataListElement[JC] def dataset: js.Dictionary[String]
HTMLDataListElement[JC] var dir: String
HTMLDataListElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLDataListElement[JC] var draggable: Boolean
HTMLDataListElement[JC] var filters: Object
HTMLDataListElement[JC] def firstChild: Node
HTMLDataListElement[JC] def firstElementChild: Element
HTMLDataListElement[JC] def focus(): Unit
HTMLDataListElement[JC] def focus(options: FocusOptions): Unit
HTMLDataListElement[JC] def getAttribute(name: String): String
HTMLDataListElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLDataListElement[JC] def getAttributeNode(name: String): Attr
HTMLDataListElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLDataListElement[JC] def getBoundingClientRect(): DOMRect
HTMLDataListElement[JC] def getClientRects(): DOMRectList
HTMLDataListElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLDataListElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLDataListElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLDataListElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLDataListElement[JC] def hasAttribute(name: String): Boolean
HTMLDataListElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLDataListElement[JC] def hasAttributes(): Boolean
HTMLDataListElement[JC] def hasChildNodes(): Boolean
HTMLDataListElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLDataListElement[JC] var id: String
HTMLDataListElement[JC] var innerHTML: String
HTMLDataListElement[JC] var innerText: String
HTMLDataListElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLDataListElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLDataListElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLDataListElement[JC] def isConnected: Boolean
HTMLDataListElement[JC] def isContentEditable: Boolean
HTMLDataListElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLDataListElement[JC] def isEqualNode(arg: Node): Boolean
HTMLDataListElement[JC] def isSameNode(other: Node): Boolean
HTMLDataListElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLDataListElement[JC] var lang: String
HTMLDataListElement[JC] def lastChild: Node
HTMLDataListElement[JC] def lastElementChild: Element
HTMLDataListElement[JC] def localName: String
HTMLDataListElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLDataListElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLDataListElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLDataListElement[JC] def matches(selector: String): Boolean
HTMLDataListElement[JC] def namespaceURI: String
HTMLDataListElement[JC] def nextElementSibling: Element
HTMLDataListElement[JC] def nextSibling: Node
HTMLDataListElement[JC] def nodeName: String
HTMLDataListElement[JC] def nodeType: Int
HTMLDataListElement[JC] var nodeValue: String
HTMLDataListElement[JC] def normalize(): Unit
HTMLDataListElement[JC] def offsetHeight: Double
HTMLDataListElement[JC] def offsetLeft: Double
HTMLDataListElement[JC] def offsetParent: Element
HTMLDataListElement[JC] def offsetTop: Double
HTMLDataListElement[JC] def offsetWidth: Double
HTMLDataListElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLDataListElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLDataListElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLDataListElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLDataListElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLDataListElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLDataListElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLDataListElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLDataListElement[JC] var oncanplay: js.Function1[Event, _]
HTMLDataListElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLDataListElement[JC] var onchange: js.Function1[Event, _]
HTMLDataListElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLDataListElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLDataListElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLDataListElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLDataListElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLDataListElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLDataListElement[JC] var oncuechange: js.Function1[Event, _]
HTMLDataListElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLDataListElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLDataListElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLDataListElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLDataListElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLDataListElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLDataListElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLDataListElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLDataListElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLDataListElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLDataListElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLDataListElement[JC] var onemptied: js.Function1[Event, _]
HTMLDataListElement[JC] var onended: js.Function1[Event, _]
HTMLDataListElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLDataListElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLDataListElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLDataListElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLDataListElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLDataListElement[JC] var onhelp: js.Function1[Event, _]
HTMLDataListElement[JC] var oninput: js.Function1[Event, _]
HTMLDataListElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLDataListElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLDataListElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLDataListElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLDataListElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLDataListElement[JC] var onloadstart: js.Function1[Event, _]
HTMLDataListElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLDataListElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLDataListElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLDataListElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLDataListElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLDataListElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLDataListElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLDataListElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLDataListElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLDataListElement[JC] var onpause: js.Function1[Event, _]
HTMLDataListElement[JC] var onplay: js.Function1[Event, _]
HTMLDataListElement[JC] var onplaying: js.Function1[Event, _]
HTMLDataListElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLDataListElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLDataListElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLDataListElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLDataListElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLDataListElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLDataListElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLDataListElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLDataListElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLDataListElement[JC] var onratechange: js.Function1[Event, _]
HTMLDataListElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLDataListElement[JC] var onreset: js.Function1[Event, _]
HTMLDataListElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLDataListElement[JC] var onseeked: js.Function1[Event, _]
HTMLDataListElement[JC] var onseeking: js.Function1[Event, _]
HTMLDataListElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLDataListElement[JC] var onselectstart: js.Function1[Event, _]
HTMLDataListElement[JC] var onstalled: js.Function1[Event, _]
HTMLDataListElement[JC] var onsubmit: js.Function1[Event, _]
HTMLDataListElement[JC] var onsuspend: js.Function1[Event, _]
HTMLDataListElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLDataListElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLDataListElement[JC] var onwaiting: js.Function1[Event, _]
HTMLDataListElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLDataListElement[JC] def options: HTMLCollection[Element]
HTMLDataListElement[JC] var outerHTML: String
HTMLDataListElement[JC] def ownerDocument: Document
HTMLDataListElement[JC] override def ownerDocument: HTMLDocument
HTMLDataListElement[JC] var parentElement: HTMLElement
HTMLDataListElement[JC] def parentNode: Node
HTMLDataListElement[JC] def prefix: String
HTMLDataListElement[JC] def prepend(nodes: Node | String*): Unit
HTMLDataListElement[JC] def previousElementSibling: Element
HTMLDataListElement[JC] def previousSibling: Node
HTMLDataListElement[JC] def querySelector(selectors: String): Element
HTMLDataListElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLDataListElement[JC] var readyState: js.Any
HTMLDataListElement[JC] var recordNumber: js.Any
HTMLDataListElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLDataListElement[JC] def remove(): Unit
HTMLDataListElement[JC] def removeAttribute(name: String): Unit
HTMLDataListElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLDataListElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLDataListElement[JC] def removeChild(oldChild: Node): Node
HTMLDataListElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLDataListElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLDataListElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLDataListElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLDataListElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLDataListElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLDataListElement[JC] def requestPointerLock(): Unit
HTMLDataListElement[JC] def scrollHeight: Int
HTMLDataListElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLDataListElement[JC] var scrollLeft: Double
HTMLDataListElement[JC] var scrollTop: Double
HTMLDataListElement[JC] def scrollWidth: Int
HTMLDataListElement[JC] def setAttribute(name: String, value: String): Unit
HTMLDataListElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLDataListElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLDataListElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLDataListElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLDataListElement[JC] def shadowRoot: ShadowRoot
HTMLDataListElement[JC] var spellcheck: Boolean
HTMLDataListElement[JC] def style: CSSStyleDeclaration
HTMLDataListElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLDataListElement[JC] def style_ = (value: String): Unit
HTMLDataListElement[JC] var tabIndex: Int
HTMLDataListElement[JC] def tagName: String
HTMLDataListElement[JC] var textContent: String
HTMLDataListElement[JC] var title: String
HTMLDialogElement[JC] var accessKey: String
HTMLDialogElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLDialogElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLDialogElement[JC] def after(nodes: Node | String*): Unit
HTMLDialogElement[JC] def append(nodes: Node | String*): Unit
HTMLDialogElement[JC] def appendChild(newChild: Node): Node
HTMLDialogElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLDialogElement[JC] def attributes: NamedNodeMap
HTMLDialogElement[JC] def baseURI: String
HTMLDialogElement[JC] def before(nodes: Node | String*): Unit
HTMLDialogElement[JC] def blur(): Unit
HTMLDialogElement[JC] def childElementCount: Int
HTMLDialogElement[JC] def childNodes: NodeList[Node]
HTMLDialogElement[JC] def children: HTMLCollection[Element]
HTMLDialogElement[JC] var classList: DOMTokenList
HTMLDialogElement[JC] var className: String
HTMLDialogElement[JC] def click(): Unit
HTMLDialogElement[JC] def clientHeight: Int
HTMLDialogElement[JC] def clientLeft: Int
HTMLDialogElement[JC] def clientTop: Int
HTMLDialogElement[JC] def clientWidth: Int
HTMLDialogElement[JC] def cloneNode(deep: Boolean?): Node
HTMLDialogElement[JC] def close(returnValue: String?): Unit
HTMLDialogElement[JC] def closest(selector: String): Element
HTMLDialogElement[JC] def compareDocumentPosition(other: Node): Int
HTMLDialogElement[JC] def contains(child: HTMLElement): Boolean
HTMLDialogElement[JC] def contains(otherNode: Node): Boolean
HTMLDialogElement[JC] var contentEditable: String
HTMLDialogElement[JC] def dataset: js.Dictionary[String]
HTMLDialogElement[JC] var dir: String
HTMLDialogElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLDialogElement[JC] var draggable: Boolean
HTMLDialogElement[JC] var filters: Object
HTMLDialogElement[JC] def firstChild: Node
HTMLDialogElement[JC] def firstElementChild: Element
HTMLDialogElement[JC] def focus(): Unit
HTMLDialogElement[JC] def focus(options: FocusOptions): Unit
HTMLDialogElement[JC] def getAttribute(name: String): String
HTMLDialogElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLDialogElement[JC] def getAttributeNode(name: String): Attr
HTMLDialogElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLDialogElement[JC] def getBoundingClientRect(): DOMRect
HTMLDialogElement[JC] def getClientRects(): DOMRectList
HTMLDialogElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLDialogElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLDialogElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLDialogElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLDialogElement[JC] def hasAttribute(name: String): Boolean
HTMLDialogElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLDialogElement[JC] def hasAttributes(): Boolean
HTMLDialogElement[JC] def hasChildNodes(): Boolean
HTMLDialogElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLDialogElement[JC] var id: String
HTMLDialogElement[JC] var innerHTML: String
HTMLDialogElement[JC] var innerText: String
HTMLDialogElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLDialogElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLDialogElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLDialogElement[JC] def isConnected: Boolean
HTMLDialogElement[JC] def isContentEditable: Boolean
HTMLDialogElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLDialogElement[JC] def isEqualNode(arg: Node): Boolean
HTMLDialogElement[JC] def isSameNode(other: Node): Boolean
HTMLDialogElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLDialogElement[JC] var lang: String
HTMLDialogElement[JC] def lastChild: Node
HTMLDialogElement[JC] def lastElementChild: Element
HTMLDialogElement[JC] def localName: String
HTMLDialogElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLDialogElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLDialogElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLDialogElement[JC] def matches(selector: String): Boolean
HTMLDialogElement[JC] def namespaceURI: String
HTMLDialogElement[JC] def nextElementSibling: Element
HTMLDialogElement[JC] def nextSibling: Node
HTMLDialogElement[JC] def nodeName: String
HTMLDialogElement[JC] def nodeType: Int
HTMLDialogElement[JC] var nodeValue: String
HTMLDialogElement[JC] def normalize(): Unit
HTMLDialogElement[JC] def offsetHeight: Double
HTMLDialogElement[JC] def offsetLeft: Double
HTMLDialogElement[JC] def offsetParent: Element
HTMLDialogElement[JC] def offsetTop: Double
HTMLDialogElement[JC] def offsetWidth: Double
HTMLDialogElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLDialogElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLDialogElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLDialogElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLDialogElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLDialogElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLDialogElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLDialogElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLDialogElement[JC] var oncanplay: js.Function1[Event, _]
HTMLDialogElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLDialogElement[JC] var onchange: js.Function1[Event, _]
HTMLDialogElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLDialogElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLDialogElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLDialogElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLDialogElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLDialogElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLDialogElement[JC] var oncuechange: js.Function1[Event, _]
HTMLDialogElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLDialogElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLDialogElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLDialogElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLDialogElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLDialogElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLDialogElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLDialogElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLDialogElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLDialogElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLDialogElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLDialogElement[JC] var onemptied: js.Function1[Event, _]
HTMLDialogElement[JC] var onended: js.Function1[Event, _]
HTMLDialogElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLDialogElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLDialogElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLDialogElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLDialogElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLDialogElement[JC] var onhelp: js.Function1[Event, _]
HTMLDialogElement[JC] var oninput: js.Function1[Event, _]
HTMLDialogElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLDialogElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLDialogElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLDialogElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLDialogElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLDialogElement[JC] var onloadstart: js.Function1[Event, _]
HTMLDialogElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLDialogElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLDialogElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLDialogElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLDialogElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLDialogElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLDialogElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLDialogElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLDialogElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLDialogElement[JC] var onpause: js.Function1[Event, _]
HTMLDialogElement[JC] var onplay: js.Function1[Event, _]
HTMLDialogElement[JC] var onplaying: js.Function1[Event, _]
HTMLDialogElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLDialogElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLDialogElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLDialogElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLDialogElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLDialogElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLDialogElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLDialogElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLDialogElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLDialogElement[JC] var onratechange: js.Function1[Event, _]
HTMLDialogElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLDialogElement[JC] var onreset: js.Function1[Event, _]
HTMLDialogElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLDialogElement[JC] var onseeked: js.Function1[Event, _]
HTMLDialogElement[JC] var onseeking: js.Function1[Event, _]
HTMLDialogElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLDialogElement[JC] var onselectstart: js.Function1[Event, _]
HTMLDialogElement[JC] var onstalled: js.Function1[Event, _]
HTMLDialogElement[JC] var onsubmit: js.Function1[Event, _]
HTMLDialogElement[JC] var onsuspend: js.Function1[Event, _]
HTMLDialogElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLDialogElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLDialogElement[JC] var onwaiting: js.Function1[Event, _]
HTMLDialogElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLDialogElement[JC] def open: Boolean
HTMLDialogElement[JC] var outerHTML: String
HTMLDialogElement[JC] def ownerDocument: Document
HTMLDialogElement[JC] override def ownerDocument: HTMLDocument
HTMLDialogElement[JC] var parentElement: HTMLElement
HTMLDialogElement[JC] def parentNode: Node
HTMLDialogElement[JC] def prefix: String
HTMLDialogElement[JC] def prepend(nodes: Node | String*): Unit
HTMLDialogElement[JC] def previousElementSibling: Element
HTMLDialogElement[JC] def previousSibling: Node
HTMLDialogElement[JC] def querySelector(selectors: String): Element
HTMLDialogElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLDialogElement[JC] var readyState: js.Any
HTMLDialogElement[JC] var recordNumber: js.Any
HTMLDialogElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLDialogElement[JC] def remove(): Unit
HTMLDialogElement[JC] def removeAttribute(name: String): Unit
HTMLDialogElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLDialogElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLDialogElement[JC] def removeChild(oldChild: Node): Node
HTMLDialogElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLDialogElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLDialogElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLDialogElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLDialogElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLDialogElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLDialogElement[JC] def requestPointerLock(): Unit
HTMLDialogElement[JC] var returnValue: String
HTMLDialogElement[JC] def scrollHeight: Int
HTMLDialogElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLDialogElement[JC] var scrollLeft: Double
HTMLDialogElement[JC] var scrollTop: Double
HTMLDialogElement[JC] def scrollWidth: Int
HTMLDialogElement[JC] def setAttribute(name: String, value: String): Unit
HTMLDialogElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLDialogElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLDialogElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLDialogElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLDialogElement[JC] def shadowRoot: ShadowRoot
HTMLDialogElement[JC] def show(): Unit
HTMLDialogElement[JC] def showModal(): Unit
HTMLDialogElement[JC] var spellcheck: Boolean
HTMLDialogElement[JC] def style: CSSStyleDeclaration
HTMLDialogElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLDialogElement[JC] def style_ = (value: String): Unit
HTMLDialogElement[JC] var tabIndex: Int
HTMLDialogElement[JC] def tagName: String
HTMLDialogElement[JC] var textContent: String
HTMLDialogElement[JC] var title: String
HTMLDivElement[JC] var accessKey: String
HTMLDivElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLDivElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLDivElement[JC] def after(nodes: Node | String*): Unit
HTMLDivElement[JC] def append(nodes: Node | String*): Unit
HTMLDivElement[JC] def appendChild(newChild: Node): Node
HTMLDivElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLDivElement[JC] def attributes: NamedNodeMap
HTMLDivElement[JC] def baseURI: String
HTMLDivElement[JC] def before(nodes: Node | String*): Unit
HTMLDivElement[JC] def blur(): Unit
HTMLDivElement[JC] def childElementCount: Int
HTMLDivElement[JC] def childNodes: NodeList[Node]
HTMLDivElement[JC] def children: HTMLCollection[Element]
HTMLDivElement[JC] var classList: DOMTokenList
HTMLDivElement[JC] var className: String
HTMLDivElement[JC] def click(): Unit
HTMLDivElement[JC] def clientHeight: Int
HTMLDivElement[JC] def clientLeft: Int
HTMLDivElement[JC] def clientTop: Int
HTMLDivElement[JC] def clientWidth: Int
HTMLDivElement[JC] def cloneNode(deep: Boolean?): Node
HTMLDivElement[JC] def closest(selector: String): Element
HTMLDivElement[JC] def compareDocumentPosition(other: Node): Int
HTMLDivElement[JC] def contains(child: HTMLElement): Boolean
HTMLDivElement[JC] def contains(otherNode: Node): Boolean
HTMLDivElement[JC] var contentEditable: String
HTMLDivElement[JC] def dataset: js.Dictionary[String]
HTMLDivElement[JC] var dir: String
HTMLDivElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLDivElement[JC] var draggable: Boolean
HTMLDivElement[JC] var filters: Object
HTMLDivElement[JC] def firstChild: Node
HTMLDivElement[JC] def firstElementChild: Element
HTMLDivElement[JC] def focus(): Unit
HTMLDivElement[JC] def focus(options: FocusOptions): Unit
HTMLDivElement[JC] def getAttribute(name: String): String
HTMLDivElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLDivElement[JC] def getAttributeNode(name: String): Attr
HTMLDivElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLDivElement[JC] def getBoundingClientRect(): DOMRect
HTMLDivElement[JC] def getClientRects(): DOMRectList
HTMLDivElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLDivElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLDivElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLDivElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLDivElement[JC] def hasAttribute(name: String): Boolean
HTMLDivElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLDivElement[JC] def hasAttributes(): Boolean
HTMLDivElement[JC] def hasChildNodes(): Boolean
HTMLDivElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLDivElement[JC] var id: String
HTMLDivElement[JC] var innerHTML: String
HTMLDivElement[JC] var innerText: String
HTMLDivElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLDivElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLDivElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLDivElement[JC] def isConnected: Boolean
HTMLDivElement[JC] def isContentEditable: Boolean
HTMLDivElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLDivElement[JC] def isEqualNode(arg: Node): Boolean
HTMLDivElement[JC] def isSameNode(other: Node): Boolean
HTMLDivElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLDivElement[JC] var lang: String
HTMLDivElement[JC] def lastChild: Node
HTMLDivElement[JC] def lastElementChild: Element
HTMLDivElement[JC] def localName: String
HTMLDivElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLDivElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLDivElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLDivElement[JC] def matches(selector: String): Boolean
HTMLDivElement[JC] def namespaceURI: String
HTMLDivElement[JC] def nextElementSibling: Element
HTMLDivElement[JC] def nextSibling: Node
HTMLDivElement[JC] def nodeName: String
HTMLDivElement[JC] def nodeType: Int
HTMLDivElement[JC] var nodeValue: String
HTMLDivElement[JC] def normalize(): Unit
HTMLDivElement[JC] def offsetHeight: Double
HTMLDivElement[JC] def offsetLeft: Double
HTMLDivElement[JC] def offsetParent: Element
HTMLDivElement[JC] def offsetTop: Double
HTMLDivElement[JC] def offsetWidth: Double
HTMLDivElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLDivElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLDivElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLDivElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLDivElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLDivElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLDivElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLDivElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLDivElement[JC] var oncanplay: js.Function1[Event, _]
HTMLDivElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLDivElement[JC] var onchange: js.Function1[Event, _]
HTMLDivElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLDivElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLDivElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLDivElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLDivElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLDivElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLDivElement[JC] var oncuechange: js.Function1[Event, _]
HTMLDivElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLDivElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLDivElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLDivElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLDivElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLDivElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLDivElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLDivElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLDivElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLDivElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLDivElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLDivElement[JC] var onemptied: js.Function1[Event, _]
HTMLDivElement[JC] var onended: js.Function1[Event, _]
HTMLDivElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLDivElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLDivElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLDivElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLDivElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLDivElement[JC] var onhelp: js.Function1[Event, _]
HTMLDivElement[JC] var oninput: js.Function1[Event, _]
HTMLDivElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLDivElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLDivElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLDivElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLDivElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLDivElement[JC] var onloadstart: js.Function1[Event, _]
HTMLDivElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLDivElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLDivElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLDivElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLDivElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLDivElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLDivElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLDivElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLDivElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLDivElement[JC] var onpause: js.Function1[Event, _]
HTMLDivElement[JC] var onplay: js.Function1[Event, _]
HTMLDivElement[JC] var onplaying: js.Function1[Event, _]
HTMLDivElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLDivElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLDivElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLDivElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLDivElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLDivElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLDivElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLDivElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLDivElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLDivElement[JC] var onratechange: js.Function1[Event, _]
HTMLDivElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLDivElement[JC] var onreset: js.Function1[Event, _]
HTMLDivElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLDivElement[JC] var onseeked: js.Function1[Event, _]
HTMLDivElement[JC] var onseeking: js.Function1[Event, _]
HTMLDivElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLDivElement[JC] var onselectstart: js.Function1[Event, _]
HTMLDivElement[JC] var onstalled: js.Function1[Event, _]
HTMLDivElement[JC] var onsubmit: js.Function1[Event, _]
HTMLDivElement[JC] var onsuspend: js.Function1[Event, _]
HTMLDivElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLDivElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLDivElement[JC] var onwaiting: js.Function1[Event, _]
HTMLDivElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLDivElement[JC] var outerHTML: String
HTMLDivElement[JC] def ownerDocument: Document
HTMLDivElement[JC] override def ownerDocument: HTMLDocument
HTMLDivElement[JC] var parentElement: HTMLElement
HTMLDivElement[JC] def parentNode: Node
HTMLDivElement[JC] def prefix: String
HTMLDivElement[JC] def prepend(nodes: Node | String*): Unit
HTMLDivElement[JC] def previousElementSibling: Element
HTMLDivElement[JC] def previousSibling: Node
HTMLDivElement[JC] def querySelector(selectors: String): Element
HTMLDivElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLDivElement[JC] var readyState: js.Any
HTMLDivElement[JC] var recordNumber: js.Any
HTMLDivElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLDivElement[JC] def remove(): Unit
HTMLDivElement[JC] def removeAttribute(name: String): Unit
HTMLDivElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLDivElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLDivElement[JC] def removeChild(oldChild: Node): Node
HTMLDivElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLDivElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLDivElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLDivElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLDivElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLDivElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLDivElement[JC] def requestPointerLock(): Unit
HTMLDivElement[JC] def scrollHeight: Int
HTMLDivElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLDivElement[JC] var scrollLeft: Double
HTMLDivElement[JC] var scrollTop: Double
HTMLDivElement[JC] def scrollWidth: Int
HTMLDivElement[JC] def setAttribute(name: String, value: String): Unit
HTMLDivElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLDivElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLDivElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLDivElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLDivElement[JC] def shadowRoot: ShadowRoot
HTMLDivElement[JC] var spellcheck: Boolean
HTMLDivElement[JC] def style: CSSStyleDeclaration
HTMLDivElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLDivElement[JC] def style_ = (value: String): Unit
HTMLDivElement[JC] var tabIndex: Int
HTMLDivElement[JC] def tagName: String
HTMLDivElement[JC] var textContent: String
HTMLDivElement[JC] var title: String
HTMLDocument[JC] def URL: String
HTMLDocument[JC] def activeElement: Element
HTMLDocument[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLDocument[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLDocument[JC] def adoptNode(source: Node): Node
HTMLDocument[JC] def anchors: HTMLCollection[Element]
HTMLDocument[JC] def appendChild(newChild: Node): Node
HTMLDocument[JC] def baseURI: String
HTMLDocument[JC] var body: HTMLElement
HTMLDocument[JC] def characterSet: String
HTMLDocument[JC] def childElementCount: Int
HTMLDocument[JC] def childNodes: NodeList[Node]
HTMLDocument[JC] def children: HTMLCollection[Element]
HTMLDocument[JC] def cloneNode(deep: Boolean?): Node
HTMLDocument[JC] def close(): Unit
HTMLDocument[JC] def compareDocumentPosition(other: Node): Int
HTMLDocument[JC] def compatMode: String
HTMLDocument[JC] def contains(otherNode: Node): Boolean
HTMLDocument[JC] var cookie: String
HTMLDocument[JC] def createAttribute(name: String): Attr
HTMLDocument[JC] def createAttributeNS(namespaceURI: String, qualifiedName: String): Attr
HTMLDocument[JC] def createCDATASection(data: String): CDATASection
HTMLDocument[JC] def createComment(data: String): Comment
HTMLDocument[JC] def createDocumentFragment(): DocumentFragment
HTMLDocument[JC] def createElement(tagName: String): Element
HTMLDocument[JC] def createElement(tagName: String, options: ElementCreationOptions): Element
HTMLDocument[JC] def createElement(tagName: String, options: String): Element
HTMLDocument[JC] def createElementNS(namespaceURI: String, qualifiedName: String): Element
HTMLDocument[JC] def createElementNS(namespaceURI: String, qualifiedName: String, options: ElementCreationOptions): Element
HTMLDocument[JC] def createElementNS(namespaceURI: String, qualifiedName: String, options: String): Element
HTMLDocument[JC] def createEvent(eventInterface: String): Event
HTMLDocument[JC] def createNSResolver(node: Node): XPathNSResolver
HTMLDocument[JC] def createNodeIterator(root: Node, whatToShow: Int, filter: NodeFilter, entityReferenceExpansion: Boolean): NodeIterator
HTMLDocument[JC] def createProcessingInstruction(target: String, data: String): ProcessingInstruction
HTMLDocument[JC] def createRange(): Range
HTMLDocument[JC] def createStyleSheet(href: String?, index: Int?): CSSStyleSheet
HTMLDocument[JC] def createTextNode(data: String): Text
HTMLDocument[JC] def createTreeWalker(root: Node, whatToShow: Int, filter: NodeFilter, entityReferenceExpansion: Boolean): TreeWalker
HTMLDocument[JC] def defaultView: Window
HTMLDocument[JC] var designMode: String
HTMLDocument[JC] var dir: String
HTMLDocument[JC] def dispatchEvent(evt: Event): Boolean
HTMLDocument[JC] def doctype: DocumentType
HTMLDocument[JC] def documentElement: Element
HTMLDocument[JC] def documentURI: String
HTMLDocument[JC] var domain: String
HTMLDocument[JC] def elementFromPoint(x: Double, y: Double): Element
HTMLDocument[JC] def embeds: HTMLCollection[Element]
HTMLDocument[JC] def evaluate(xpathExpression: String, contextNode: Node, namespaceResolver: XPathNSResolver, resultType: Int, result: XPathResult): XPathResult
HTMLDocument[JC] def evaluate(xpathExpression: String, contextNode: Node, namespaceResolver: js.Function1[String, String], resultType: Int, result: XPathResult): XPathResult
HTMLDocument[JC] def execCommand(commandId: String, showUI: Boolean?, value: js.Any?): Boolean
HTMLDocument[JC] def execCommandShowHelp(commandId: String): Boolean
HTMLDocument[JC] def exitFullscreen(): js.Promise[Unit]
HTMLDocument[JC] def exitPointerLock(): Unit
HTMLDocument[JC] def fireEvent(eventName: String, eventObj: js.Any?): Boolean
HTMLDocument[JC] def firstChild: Node
HTMLDocument[JC] def firstElementChild: Element
HTMLDocument[JC] def focus(): Unit
HTMLDocument[JC] def forms: HTMLCollection[Element]
HTMLDocument[JC] def fullscreenElement: Element
HTMLDocument[JC] def fullscreenEnabled: Boolean
HTMLDocument[JC] def getElementById(elementId: String): Element
HTMLDocument[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLDocument[JC] def getElementsByName(elementName: String): NodeList[Node]
HTMLDocument[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLDocument[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLDocument[JC] def getSelection(): Selection
HTMLDocument[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLDocument[JC] def hasChildNodes(): Boolean
HTMLDocument[JC] def hasFocus(): Boolean
HTMLDocument[JC] def head: HTMLHeadElement
HTMLDocument[JC] def hidden: Boolean
HTMLDocument[JC] def images: HTMLCollection[Element]
HTMLDocument[JC] def implementation: DOMImplementation
HTMLDocument[JC] def importNode(importedNode: Node, deep: Boolean): Node
HTMLDocument[JC] var innerText: String
HTMLDocument[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLDocument[JC] def isConnected: Boolean
HTMLDocument[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLDocument[JC] def isEqualNode(arg: Node): Boolean
HTMLDocument[JC] def isSameNode(other: Node): Boolean
HTMLDocument[JC] def isSupported(feature: String, version: String): Boolean
HTMLDocument[JC] def lastChild: Node
HTMLDocument[JC] def lastElementChild: Element
HTMLDocument[JC] def lastModified: String
HTMLDocument[JC] def links: HTMLCollection[Element]
HTMLDocument[JC] def localName: String
HTMLDocument[JC] var location: Location
HTMLDocument[JC] def lookupNamespaceURI(prefix: String): String
HTMLDocument[JC] def lookupPrefix(namespaceURI: String): String
HTMLDocument[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLDocument[JC] def namespaceURI: String
HTMLDocument[JC] def nextSibling: Node
HTMLDocument[JC] def nodeName: String
HTMLDocument[JC] def nodeType: Int
HTMLDocument[JC] var nodeValue: String
HTMLDocument[JC] def normalize(): Unit
HTMLDocument[JC] var onabort: js.Function1[UIEvent, _]
HTMLDocument[JC] var onactivate: js.Function1[UIEvent, _]
HTMLDocument[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLDocument[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLDocument[JC] var onblur: js.Function1[FocusEvent, _]
HTMLDocument[JC] var oncanplay: js.Function1[Event, _]
HTMLDocument[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLDocument[JC] var onchange: js.Function1[Event, _]
HTMLDocument[JC] var onclick: js.Function1[MouseEvent, _]
HTMLDocument[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLDocument[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLDocument[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLDocument[JC] var ondrag: js.Function1[DragEvent, _]
HTMLDocument[JC] var ondragend: js.Function1[DragEvent, _]
HTMLDocument[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLDocument[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLDocument[JC] var ondragover: js.Function1[DragEvent, _]
HTMLDocument[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLDocument[JC] var ondrop: js.Function1[DragEvent, _]
HTMLDocument[JC] var ondurationchange: js.Function1[Event, _]
HTMLDocument[JC] var onemptied: js.Function1[Event, _]
HTMLDocument[JC] var onended: js.Function1[Event, _]
HTMLDocument[JC] var onerror: js.Function1[ErrorEvent, _]
HTMLDocument[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLDocument[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLDocument[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLDocument[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLDocument[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLDocument[JC] var onhelp: js.Function1[Event, _]
HTMLDocument[JC] var oninput: js.Function1[Event, _]
HTMLDocument[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLDocument[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLDocument[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLDocument[JC] var onload: js.Function1[Event, _]
HTMLDocument[JC] var onloadeddata: js.Function1[Event, _]
HTMLDocument[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLDocument[JC] var onloadstart: js.Function1[Event, _]
HTMLDocument[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLDocument[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLDocument[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLDocument[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLDocument[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLDocument[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLDocument[JC] var onpause: js.Function1[Event, _]
HTMLDocument[JC] var onplay: js.Function1[Event, _]
HTMLDocument[JC] var onplaying: js.Function1[Event, _]
HTMLDocument[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLDocument[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLDocument[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLDocument[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLDocument[JC] var onpointerlockchange: js.Function1[Event, _]
HTMLDocument[JC] var onpointerlockerror: js.Function1[Event, _]
HTMLDocument[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLDocument[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLDocument[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLDocument[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLDocument[JC] var onprogress: js.Function1[js.Any, _]
HTMLDocument[JC] var onratechange: js.Function1[Event, _]
HTMLDocument[JC] var onreadystatechange: js.Function1[Event, _]
HTMLDocument[JC] var onreset: js.Function1[Event, _]
HTMLDocument[JC] var onscroll: js.Function1[UIEvent, _]
HTMLDocument[JC] var onseeked: js.Function1[Event, _]
HTMLDocument[JC] var onseeking: js.Function1[Event, _]
HTMLDocument[JC] var onselect: js.Function1[UIEvent, _]
HTMLDocument[JC] var onselectionchange: js.Function1[Event, _]
HTMLDocument[JC] var onselectstart: js.Function1[Event, _]
HTMLDocument[JC] var onstalled: js.Function1[Event, _]
HTMLDocument[JC] var onstop: js.Function1[Event, _]
HTMLDocument[JC] var onstoragecommit: js.Function1[StorageEvent, _]
HTMLDocument[JC] var onsubmit: js.Function1[Event, _]
HTMLDocument[JC] var onsuspend: js.Function1[Event, _]
HTMLDocument[JC] var ontimeupdate: js.Function1[Event, _]
HTMLDocument[JC] var onvolumechange: js.Function1[Event, _]
HTMLDocument[JC] var onwaiting: js.Function1[Event, _]
HTMLDocument[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLDocument[JC] def open(url: String?, name: String?, features: String?, replace: Boolean?): js.Dynamic
HTMLDocument[JC] def ownerDocument: Document
HTMLDocument[JC] def parentNode: Node
HTMLDocument[JC] def plugins: HTMLCollection[Element]
HTMLDocument[JC] def pointerLockElement: Element
HTMLDocument[JC] def previousSibling: Node
HTMLDocument[JC] def queryCommandEnabled(commandId: String): Boolean
HTMLDocument[JC] def queryCommandIndeterm(commandId: String): Boolean
HTMLDocument[JC] def queryCommandState(commandId: String): Boolean
HTMLDocument[JC] def queryCommandSupported(commandId: String): Boolean
HTMLDocument[JC] def queryCommandText(commandId: String): String
HTMLDocument[JC] def queryCommandValue(commandId: String): String
HTMLDocument[JC] def querySelector(selectors: String): Element
HTMLDocument[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLDocument[JC] def readyState: DocumentReadyState
HTMLDocument[JC] def referrer: String
HTMLDocument[JC] def removeChild(oldChild: Node): Node
HTMLDocument[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLDocument[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLDocument[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLDocument[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLDocument[JC] def styleSheets: StyleSheetList
HTMLDocument[JC] var textContent: String
HTMLDocument[JC] var title: String
HTMLDocument[JC] var uniqueID: String
HTMLDocument[JC] def updateSettings(): Unit
HTMLDocument[JC] def visibilityState: VisibilityState | String
HTMLDocument[JC] var visibilitychange: js.Function1[Event, _]
HTMLDocument[JC] def write(content: String*): Unit
HTMLDocument[JC] def writeln(content: String*): Unit
HTMLElement[JC] var accessKey: String
HTMLElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLElement[JC] def after(nodes: Node | String*): Unit
HTMLElement[JC] def append(nodes: Node | String*): Unit
HTMLElement[JC] def appendChild(newChild: Node): Node
HTMLElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLElement[JC] def attributes: NamedNodeMap
HTMLElement[JC] def baseURI: String
HTMLElement[JC] def before(nodes: Node | String*): Unit
HTMLElement[JC] def blur(): Unit
HTMLElement[JC] def childElementCount: Int
HTMLElement[JC] def childNodes: NodeList[Node]
HTMLElement[JC] def children: HTMLCollection[Element]
HTMLElement[JC] var classList: DOMTokenList
HTMLElement[JC] var className: String
HTMLElement[JC] def click(): Unit
HTMLElement[JC] def clientHeight: Int
HTMLElement[JC] def clientLeft: Int
HTMLElement[JC] def clientTop: Int
HTMLElement[JC] def clientWidth: Int
HTMLElement[JC] def cloneNode(deep: Boolean?): Node
HTMLElement[JC] def closest(selector: String): Element
HTMLElement[JC] def compareDocumentPosition(other: Node): Int
HTMLElement[JC] def contains(child: HTMLElement): Boolean
HTMLElement[JC] def contains(otherNode: Node): Boolean
HTMLElement[JC] var contentEditable: String
HTMLElement[JC] def dataset: js.Dictionary[String]
HTMLElement[JC] var dir: String
HTMLElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLElement[JC] var draggable: Boolean
HTMLElement[JC] var filters: Object
HTMLElement[JC] def firstChild: Node
HTMLElement[JC] def firstElementChild: Element
HTMLElement[JC] def focus(): Unit
HTMLElement[JC] def focus(options: FocusOptions): Unit
HTMLElement[JC] def getAttribute(name: String): String
HTMLElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLElement[JC] def getAttributeNode(name: String): Attr
HTMLElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLElement[JC] def getBoundingClientRect(): DOMRect
HTMLElement[JC] def getClientRects(): DOMRectList
HTMLElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLElement[JC] def hasAttribute(name: String): Boolean
HTMLElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLElement[JC] def hasAttributes(): Boolean
HTMLElement[JC] def hasChildNodes(): Boolean
HTMLElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLElement[JC] var id: String
HTMLElement[JC] var innerHTML: String
HTMLElement[JC] var innerText: String
HTMLElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLElement[JC] def isConnected: Boolean
HTMLElement[JC] def isContentEditable: Boolean
HTMLElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLElement[JC] def isEqualNode(arg: Node): Boolean
HTMLElement[JC] def isSameNode(other: Node): Boolean
HTMLElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLElement[JC] var lang: String
HTMLElement[JC] def lastChild: Node
HTMLElement[JC] def lastElementChild: Element
HTMLElement[JC] def localName: String
HTMLElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLElement[JC] def matches(selector: String): Boolean
HTMLElement[JC] def namespaceURI: String
HTMLElement[JC] def nextElementSibling: Element
HTMLElement[JC] def nextSibling: Node
HTMLElement[JC] def nodeName: String
HTMLElement[JC] def nodeType: Int
HTMLElement[JC] var nodeValue: String
HTMLElement[JC] def normalize(): Unit
HTMLElement[JC] def offsetHeight: Double
HTMLElement[JC] def offsetLeft: Double
HTMLElement[JC] def offsetParent: Element
HTMLElement[JC] def offsetTop: Double
HTMLElement[JC] def offsetWidth: Double
HTMLElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLElement[JC] var oncanplay: js.Function1[Event, _]
HTMLElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLElement[JC] var onchange: js.Function1[Event, _]
HTMLElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLElement[JC] var oncuechange: js.Function1[Event, _]
HTMLElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLElement[JC] var onemptied: js.Function1[Event, _]
HTMLElement[JC] var onended: js.Function1[Event, _]
HTMLElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLElement[JC] var onhelp: js.Function1[Event, _]
HTMLElement[JC] var oninput: js.Function1[Event, _]
HTMLElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLElement[JC] var onloadstart: js.Function1[Event, _]
HTMLElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLElement[JC] var onpause: js.Function1[Event, _]
HTMLElement[JC] var onplay: js.Function1[Event, _]
HTMLElement[JC] var onplaying: js.Function1[Event, _]
HTMLElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLElement[JC] var onratechange: js.Function1[Event, _]
HTMLElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLElement[JC] var onreset: js.Function1[Event, _]
HTMLElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLElement[JC] var onseeked: js.Function1[Event, _]
HTMLElement[JC] var onseeking: js.Function1[Event, _]
HTMLElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLElement[JC] var onselectstart: js.Function1[Event, _]
HTMLElement[JC] var onstalled: js.Function1[Event, _]
HTMLElement[JC] var onsubmit: js.Function1[Event, _]
HTMLElement[JC] var onsuspend: js.Function1[Event, _]
HTMLElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLElement[JC] var onwaiting: js.Function1[Event, _]
HTMLElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLElement[JC] var outerHTML: String
HTMLElement[JC] def ownerDocument: Document
HTMLElement[JC] override def ownerDocument: HTMLDocument
HTMLElement[JC] var parentElement: HTMLElement
HTMLElement[JC] def parentNode: Node
HTMLElement[JC] def prefix: String
HTMLElement[JC] def prepend(nodes: Node | String*): Unit
HTMLElement[JC] def previousElementSibling: Element
HTMLElement[JC] def previousSibling: Node
HTMLElement[JC] def querySelector(selectors: String): Element
HTMLElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLElement[JC] var readyState: js.Any
HTMLElement[JC] var recordNumber: js.Any
HTMLElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLElement[JC] def remove(): Unit
HTMLElement[JC] def removeAttribute(name: String): Unit
HTMLElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLElement[JC] def removeChild(oldChild: Node): Node
HTMLElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLElement[JC] def requestPointerLock(): Unit
HTMLElement[JC] def scrollHeight: Int
HTMLElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLElement[JC] var scrollLeft: Double
HTMLElement[JC] var scrollTop: Double
HTMLElement[JC] def scrollWidth: Int
HTMLElement[JC] def setAttribute(name: String, value: String): Unit
HTMLElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLElement[JC] def shadowRoot: ShadowRoot
HTMLElement[JC] var spellcheck: Boolean
HTMLElement[JC] def style: CSSStyleDeclaration
HTMLElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLElement[JC] def style_ = (value: String): Unit
HTMLElement[JC] var tabIndex: Int
HTMLElement[JC] def tagName: String
HTMLElement[JC] var textContent: String
HTMLElement[JC] var title: String
HTMLEmbedElement[JC] var accessKey: String
HTMLEmbedElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLEmbedElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLEmbedElement[JC] def after(nodes: Node | String*): Unit
HTMLEmbedElement[JC] def append(nodes: Node | String*): Unit
HTMLEmbedElement[JC] def appendChild(newChild: Node): Node
HTMLEmbedElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLEmbedElement[JC] def attributes: NamedNodeMap
HTMLEmbedElement[JC] def baseURI: String
HTMLEmbedElement[JC] def before(nodes: Node | String*): Unit
HTMLEmbedElement[JC] def blur(): Unit
HTMLEmbedElement[JC] def childElementCount: Int
HTMLEmbedElement[JC] def childNodes: NodeList[Node]
HTMLEmbedElement[JC] def children: HTMLCollection[Element]
HTMLEmbedElement[JC] var classList: DOMTokenList
HTMLEmbedElement[JC] var className: String
HTMLEmbedElement[JC] def click(): Unit
HTMLEmbedElement[JC] def clientHeight: Int
HTMLEmbedElement[JC] def clientLeft: Int
HTMLEmbedElement[JC] def clientTop: Int
HTMLEmbedElement[JC] def clientWidth: Int
HTMLEmbedElement[JC] def cloneNode(deep: Boolean?): Node
HTMLEmbedElement[JC] def closest(selector: String): Element
HTMLEmbedElement[JC] def compareDocumentPosition(other: Node): Int
HTMLEmbedElement[JC] def contains(child: HTMLElement): Boolean
HTMLEmbedElement[JC] def contains(otherNode: Node): Boolean
HTMLEmbedElement[JC] var contentEditable: String
HTMLEmbedElement[JC] def dataset: js.Dictionary[String]
HTMLEmbedElement[JC] var dir: String
HTMLEmbedElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLEmbedElement[JC] var draggable: Boolean
HTMLEmbedElement[JC] var filters: Object
HTMLEmbedElement[JC] def firstChild: Node
HTMLEmbedElement[JC] def firstElementChild: Element
HTMLEmbedElement[JC] def focus(): Unit
HTMLEmbedElement[JC] def focus(options: FocusOptions): Unit
HTMLEmbedElement[JC] def getAttribute(name: String): String
HTMLEmbedElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLEmbedElement[JC] def getAttributeNode(name: String): Attr
HTMLEmbedElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLEmbedElement[JC] def getBoundingClientRect(): DOMRect
HTMLEmbedElement[JC] def getClientRects(): DOMRectList
HTMLEmbedElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLEmbedElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLEmbedElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLEmbedElement[JC] def getSVGDocument(): Document
HTMLEmbedElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLEmbedElement[JC] def hasAttribute(name: String): Boolean
HTMLEmbedElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLEmbedElement[JC] def hasAttributes(): Boolean
HTMLEmbedElement[JC] def hasChildNodes(): Boolean
HTMLEmbedElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLEmbedElement[JC] var height: String
HTMLEmbedElement[JC] var id: String
HTMLEmbedElement[JC] var innerHTML: String
HTMLEmbedElement[JC] var innerText: String
HTMLEmbedElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLEmbedElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLEmbedElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLEmbedElement[JC] def isConnected: Boolean
HTMLEmbedElement[JC] def isContentEditable: Boolean
HTMLEmbedElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLEmbedElement[JC] def isEqualNode(arg: Node): Boolean
HTMLEmbedElement[JC] def isSameNode(other: Node): Boolean
HTMLEmbedElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLEmbedElement[JC] var lang: String
HTMLEmbedElement[JC] def lastChild: Node
HTMLEmbedElement[JC] def lastElementChild: Element
HTMLEmbedElement[JC] def localName: String
HTMLEmbedElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLEmbedElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLEmbedElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLEmbedElement[JC] def matches(selector: String): Boolean
HTMLEmbedElement[JC] def namespaceURI: String
HTMLEmbedElement[JC] def nextElementSibling: Element
HTMLEmbedElement[JC] def nextSibling: Node
HTMLEmbedElement[JC] def nodeName: String
HTMLEmbedElement[JC] def nodeType: Int
HTMLEmbedElement[JC] var nodeValue: String
HTMLEmbedElement[JC] def normalize(): Unit
HTMLEmbedElement[JC] def offsetHeight: Double
HTMLEmbedElement[JC] def offsetLeft: Double
HTMLEmbedElement[JC] def offsetParent: Element
HTMLEmbedElement[JC] def offsetTop: Double
HTMLEmbedElement[JC] def offsetWidth: Double
HTMLEmbedElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLEmbedElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLEmbedElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLEmbedElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLEmbedElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLEmbedElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLEmbedElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLEmbedElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLEmbedElement[JC] var oncanplay: js.Function1[Event, _]
HTMLEmbedElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLEmbedElement[JC] var onchange: js.Function1[Event, _]
HTMLEmbedElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLEmbedElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLEmbedElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLEmbedElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLEmbedElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLEmbedElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLEmbedElement[JC] var oncuechange: js.Function1[Event, _]
HTMLEmbedElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLEmbedElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLEmbedElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLEmbedElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLEmbedElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLEmbedElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLEmbedElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLEmbedElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLEmbedElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLEmbedElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLEmbedElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLEmbedElement[JC] var onemptied: js.Function1[Event, _]
HTMLEmbedElement[JC] var onended: js.Function1[Event, _]
HTMLEmbedElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLEmbedElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLEmbedElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLEmbedElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLEmbedElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLEmbedElement[JC] var onhelp: js.Function1[Event, _]
HTMLEmbedElement[JC] var oninput: js.Function1[Event, _]
HTMLEmbedElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLEmbedElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLEmbedElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLEmbedElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLEmbedElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLEmbedElement[JC] var onloadstart: js.Function1[Event, _]
HTMLEmbedElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLEmbedElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLEmbedElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLEmbedElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLEmbedElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLEmbedElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLEmbedElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLEmbedElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLEmbedElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLEmbedElement[JC] var onpause: js.Function1[Event, _]
HTMLEmbedElement[JC] var onplay: js.Function1[Event, _]
HTMLEmbedElement[JC] var onplaying: js.Function1[Event, _]
HTMLEmbedElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLEmbedElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLEmbedElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLEmbedElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLEmbedElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLEmbedElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLEmbedElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLEmbedElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLEmbedElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLEmbedElement[JC] var onratechange: js.Function1[Event, _]
HTMLEmbedElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLEmbedElement[JC] var onreset: js.Function1[Event, _]
HTMLEmbedElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLEmbedElement[JC] var onseeked: js.Function1[Event, _]
HTMLEmbedElement[JC] var onseeking: js.Function1[Event, _]
HTMLEmbedElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLEmbedElement[JC] var onselectstart: js.Function1[Event, _]
HTMLEmbedElement[JC] var onstalled: js.Function1[Event, _]
HTMLEmbedElement[JC] var onsubmit: js.Function1[Event, _]
HTMLEmbedElement[JC] var onsuspend: js.Function1[Event, _]
HTMLEmbedElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLEmbedElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLEmbedElement[JC] var onwaiting: js.Function1[Event, _]
HTMLEmbedElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLEmbedElement[JC] var outerHTML: String
HTMLEmbedElement[JC] def ownerDocument: Document
HTMLEmbedElement[JC] override def ownerDocument: HTMLDocument
HTMLEmbedElement[JC] var parentElement: HTMLElement
HTMLEmbedElement[JC] def parentNode: Node
HTMLEmbedElement[JC] def prefix: String
HTMLEmbedElement[JC] def prepend(nodes: Node | String*): Unit
HTMLEmbedElement[JC] def previousElementSibling: Element
HTMLEmbedElement[JC] def previousSibling: Node
HTMLEmbedElement[JC] def querySelector(selectors: String): Element
HTMLEmbedElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLEmbedElement[JC] var readyState: js.Any
HTMLEmbedElement[JC] var recordNumber: js.Any
HTMLEmbedElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLEmbedElement[JC] def remove(): Unit
HTMLEmbedElement[JC] def removeAttribute(name: String): Unit
HTMLEmbedElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLEmbedElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLEmbedElement[JC] def removeChild(oldChild: Node): Node
HTMLEmbedElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLEmbedElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLEmbedElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLEmbedElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLEmbedElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLEmbedElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLEmbedElement[JC] def requestPointerLock(): Unit
HTMLEmbedElement[JC] def scrollHeight: Int
HTMLEmbedElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLEmbedElement[JC] var scrollLeft: Double
HTMLEmbedElement[JC] var scrollTop: Double
HTMLEmbedElement[JC] def scrollWidth: Int
HTMLEmbedElement[JC] def setAttribute(name: String, value: String): Unit
HTMLEmbedElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLEmbedElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLEmbedElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLEmbedElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLEmbedElement[JC] def shadowRoot: ShadowRoot
HTMLEmbedElement[JC] var spellcheck: Boolean
HTMLEmbedElement[JC] var src: String
HTMLEmbedElement[JC] def style: CSSStyleDeclaration
HTMLEmbedElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLEmbedElement[JC] def style_ = (value: String): Unit
HTMLEmbedElement[JC] var tabIndex: Int
HTMLEmbedElement[JC] def tagName: String
HTMLEmbedElement[JC] var textContent: String
HTMLEmbedElement[JC] var title: String
HTMLEmbedElement[JC] var width: String
HTMLFieldSetElement[JC] var accessKey: String
HTMLFieldSetElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLFieldSetElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLFieldSetElement[JC] def after(nodes: Node | String*): Unit
HTMLFieldSetElement[JC] def append(nodes: Node | String*): Unit
HTMLFieldSetElement[JC] def appendChild(newChild: Node): Node
HTMLFieldSetElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLFieldSetElement[JC] def attributes: NamedNodeMap
HTMLFieldSetElement[JC] def baseURI: String
HTMLFieldSetElement[JC] def before(nodes: Node | String*): Unit
HTMLFieldSetElement[JC] def blur(): Unit
HTMLFieldSetElement[JC] def checkValidity(): Boolean
HTMLFieldSetElement[JC] def childElementCount: Int
HTMLFieldSetElement[JC] def childNodes: NodeList[Node]
HTMLFieldSetElement[JC] def children: HTMLCollection[Element]
HTMLFieldSetElement[JC] var classList: DOMTokenList
HTMLFieldSetElement[JC] var className: String
HTMLFieldSetElement[JC] def click(): Unit
HTMLFieldSetElement[JC] def clientHeight: Int
HTMLFieldSetElement[JC] def clientLeft: Int
HTMLFieldSetElement[JC] def clientTop: Int
HTMLFieldSetElement[JC] def clientWidth: Int
HTMLFieldSetElement[JC] def cloneNode(deep: Boolean?): Node
HTMLFieldSetElement[JC] def closest(selector: String): Element
HTMLFieldSetElement[JC] def compareDocumentPosition(other: Node): Int
HTMLFieldSetElement[JC] def contains(child: HTMLElement): Boolean
HTMLFieldSetElement[JC] def contains(otherNode: Node): Boolean
HTMLFieldSetElement[JC] var contentEditable: String
HTMLFieldSetElement[JC] def dataset: js.Dictionary[String]
HTMLFieldSetElement[JC] var dir: String
HTMLFieldSetElement[JC] var disabled: Boolean
HTMLFieldSetElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLFieldSetElement[JC] var draggable: Boolean
HTMLFieldSetElement[JC] var filters: Object
HTMLFieldSetElement[JC] def firstChild: Node
HTMLFieldSetElement[JC] def firstElementChild: Element
HTMLFieldSetElement[JC] def focus(): Unit
HTMLFieldSetElement[JC] def focus(options: FocusOptions): Unit
HTMLFieldSetElement[JC] def form: HTMLFormElement
HTMLFieldSetElement[JC] def getAttribute(name: String): String
HTMLFieldSetElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLFieldSetElement[JC] def getAttributeNode(name: String): Attr
HTMLFieldSetElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLFieldSetElement[JC] def getBoundingClientRect(): DOMRect
HTMLFieldSetElement[JC] def getClientRects(): DOMRectList
HTMLFieldSetElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLFieldSetElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLFieldSetElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLFieldSetElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLFieldSetElement[JC] def hasAttribute(name: String): Boolean
HTMLFieldSetElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLFieldSetElement[JC] def hasAttributes(): Boolean
HTMLFieldSetElement[JC] def hasChildNodes(): Boolean
HTMLFieldSetElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLFieldSetElement[JC] var id: String
HTMLFieldSetElement[JC] var innerHTML: String
HTMLFieldSetElement[JC] var innerText: String
HTMLFieldSetElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLFieldSetElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLFieldSetElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLFieldSetElement[JC] def isConnected: Boolean
HTMLFieldSetElement[JC] def isContentEditable: Boolean
HTMLFieldSetElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLFieldSetElement[JC] def isEqualNode(arg: Node): Boolean
HTMLFieldSetElement[JC] def isSameNode(other: Node): Boolean
HTMLFieldSetElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLFieldSetElement[JC] var lang: String
HTMLFieldSetElement[JC] def lastChild: Node
HTMLFieldSetElement[JC] def lastElementChild: Element
HTMLFieldSetElement[JC] def localName: String
HTMLFieldSetElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLFieldSetElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLFieldSetElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLFieldSetElement[JC] def matches(selector: String): Boolean
HTMLFieldSetElement[JC] def namespaceURI: String
HTMLFieldSetElement[JC] def nextElementSibling: Element
HTMLFieldSetElement[JC] def nextSibling: Node
HTMLFieldSetElement[JC] def nodeName: String
HTMLFieldSetElement[JC] def nodeType: Int
HTMLFieldSetElement[JC] var nodeValue: String
HTMLFieldSetElement[JC] def normalize(): Unit
HTMLFieldSetElement[JC] def offsetHeight: Double
HTMLFieldSetElement[JC] def offsetLeft: Double
HTMLFieldSetElement[JC] def offsetParent: Element
HTMLFieldSetElement[JC] def offsetTop: Double
HTMLFieldSetElement[JC] def offsetWidth: Double
HTMLFieldSetElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLFieldSetElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLFieldSetElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLFieldSetElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLFieldSetElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLFieldSetElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLFieldSetElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLFieldSetElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLFieldSetElement[JC] var oncanplay: js.Function1[Event, _]
HTMLFieldSetElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onchange: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLFieldSetElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLFieldSetElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLFieldSetElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLFieldSetElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLFieldSetElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLFieldSetElement[JC] var oncuechange: js.Function1[Event, _]
HTMLFieldSetElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLFieldSetElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLFieldSetElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLFieldSetElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLFieldSetElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLFieldSetElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLFieldSetElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLFieldSetElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLFieldSetElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLFieldSetElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLFieldSetElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onemptied: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onended: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLFieldSetElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLFieldSetElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLFieldSetElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onhelp: js.Function1[Event, _]
HTMLFieldSetElement[JC] var oninput: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLFieldSetElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLFieldSetElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLFieldSetElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onloadstart: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLFieldSetElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLFieldSetElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLFieldSetElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLFieldSetElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLFieldSetElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLFieldSetElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLFieldSetElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLFieldSetElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLFieldSetElement[JC] var onpause: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onplay: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onplaying: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLFieldSetElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLFieldSetElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLFieldSetElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLFieldSetElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLFieldSetElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLFieldSetElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLFieldSetElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLFieldSetElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLFieldSetElement[JC] var onratechange: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onreset: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLFieldSetElement[JC] var onseeked: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onseeking: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLFieldSetElement[JC] var onselectstart: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onstalled: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onsubmit: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onsuspend: js.Function1[Event, _]
HTMLFieldSetElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onwaiting: js.Function1[Event, _]
HTMLFieldSetElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLFieldSetElement[JC] var outerHTML: String
HTMLFieldSetElement[JC] def ownerDocument: Document
HTMLFieldSetElement[JC] override def ownerDocument: HTMLDocument
HTMLFieldSetElement[JC] var parentElement: HTMLElement
HTMLFieldSetElement[JC] def parentNode: Node
HTMLFieldSetElement[JC] def prefix: String
HTMLFieldSetElement[JC] def prepend(nodes: Node | String*): Unit
HTMLFieldSetElement[JC] def previousElementSibling: Element
HTMLFieldSetElement[JC] def previousSibling: Node
HTMLFieldSetElement[JC] def querySelector(selectors: String): Element
HTMLFieldSetElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLFieldSetElement[JC] var readyState: js.Any
HTMLFieldSetElement[JC] var recordNumber: js.Any
HTMLFieldSetElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLFieldSetElement[JC] def remove(): Unit
HTMLFieldSetElement[JC] def removeAttribute(name: String): Unit
HTMLFieldSetElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLFieldSetElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLFieldSetElement[JC] def removeChild(oldChild: Node): Node
HTMLFieldSetElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLFieldSetElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLFieldSetElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLFieldSetElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLFieldSetElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLFieldSetElement[JC] def reportValidity(): Boolean
HTMLFieldSetElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLFieldSetElement[JC] def requestPointerLock(): Unit
HTMLFieldSetElement[JC] def scrollHeight: Int
HTMLFieldSetElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLFieldSetElement[JC] var scrollLeft: Double
HTMLFieldSetElement[JC] var scrollTop: Double
HTMLFieldSetElement[JC] def scrollWidth: Int
HTMLFieldSetElement[JC] def setAttribute(name: String, value: String): Unit
HTMLFieldSetElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLFieldSetElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLFieldSetElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLFieldSetElement[JC] def setCustomValidity(error: String): Unit
HTMLFieldSetElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLFieldSetElement[JC] def shadowRoot: ShadowRoot
HTMLFieldSetElement[JC] var spellcheck: Boolean
HTMLFieldSetElement[JC] def style: CSSStyleDeclaration
HTMLFieldSetElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLFieldSetElement[JC] def style_ = (value: String): Unit
HTMLFieldSetElement[JC] var tabIndex: Int
HTMLFieldSetElement[JC] def tagName: String
HTMLFieldSetElement[JC] var textContent: String
HTMLFieldSetElement[JC] var title: String
HTMLFieldSetElement[JC] def validationMessage: String
HTMLFieldSetElement[JC] def validity: ValidityState
HTMLFieldSetElement[JC] def willValidate: Boolean
HTMLFormControlsCollection[JC] @JSBracketAccess def apply(index: Int): T
HTMLFormControlsCollection[JC] def item(index: Int): E
HTMLFormControlsCollection[JC] def length: Int
HTMLFormControlsCollection[JC] def namedItem(name: String): E
HTMLFormElement[JC] var acceptCharset: String
HTMLFormElement[JC] var accessKey: String
HTMLFormElement[JC] var action: String
HTMLFormElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLFormElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLFormElement[JC] def after(nodes: Node | String*): Unit
HTMLFormElement[JC] def append(nodes: Node | String*): Unit
HTMLFormElement[JC] def appendChild(newChild: Node): Node
HTMLFormElement[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(name: String): js.Any
HTMLFormElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLFormElement[JC] def attributes: NamedNodeMap
HTMLFormElement[JC] var autocomplete: String
HTMLFormElement[JC] def baseURI: String
HTMLFormElement[JC] def before(nodes: Node | String*): Unit
HTMLFormElement[JC] def blur(): Unit
HTMLFormElement[JC] def checkValidity(): Boolean
HTMLFormElement[JC] def childElementCount: Int
HTMLFormElement[JC] def childNodes: NodeList[Node]
HTMLFormElement[JC] def children: HTMLCollection[Element]
HTMLFormElement[JC] var classList: DOMTokenList
HTMLFormElement[JC] var className: String
HTMLFormElement[JC] def click(): Unit
HTMLFormElement[JC] def clientHeight: Int
HTMLFormElement[JC] def clientLeft: Int
HTMLFormElement[JC] def clientTop: Int
HTMLFormElement[JC] def clientWidth: Int
HTMLFormElement[JC] def cloneNode(deep: Boolean?): Node
HTMLFormElement[JC] def closest(selector: String): Element
HTMLFormElement[JC] def compareDocumentPosition(other: Node): Int
HTMLFormElement[JC] def contains(child: HTMLElement): Boolean
HTMLFormElement[JC] def contains(otherNode: Node): Boolean
HTMLFormElement[JC] var contentEditable: String
HTMLFormElement[JC] def dataset: js.Dictionary[String]
HTMLFormElement[JC] var dir: String
HTMLFormElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLFormElement[JC] var draggable: Boolean
HTMLFormElement[JC] def elements: HTMLCollection[Element]
HTMLFormElement[JC] var encoding: String
HTMLFormElement[JC] var enctype: String
HTMLFormElement[JC] var filters: Object
HTMLFormElement[JC] def firstChild: Node
HTMLFormElement[JC] def firstElementChild: Element
HTMLFormElement[JC] def focus(): Unit
HTMLFormElement[JC] def focus(options: FocusOptions): Unit
HTMLFormElement[JC] def getAttribute(name: String): String
HTMLFormElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLFormElement[JC] def getAttributeNode(name: String): Attr
HTMLFormElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLFormElement[JC] def getBoundingClientRect(): DOMRect
HTMLFormElement[JC] def getClientRects(): DOMRectList
HTMLFormElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLFormElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLFormElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLFormElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLFormElement[JC] def hasAttribute(name: String): Boolean
HTMLFormElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLFormElement[JC] def hasAttributes(): Boolean
HTMLFormElement[JC] def hasChildNodes(): Boolean
HTMLFormElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLFormElement[JC] var id: String
HTMLFormElement[JC] var innerHTML: String
HTMLFormElement[JC] var innerText: String
HTMLFormElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLFormElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLFormElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLFormElement[JC] def isConnected: Boolean
HTMLFormElement[JC] def isContentEditable: Boolean
HTMLFormElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLFormElement[JC] def isEqualNode(arg: Node): Boolean
HTMLFormElement[JC] def isSameNode(other: Node): Boolean
HTMLFormElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLFormElement[JC] def item(name: js.Any?, index: js.Any?): js.Dynamic
HTMLFormElement[JC] var lang: String
HTMLFormElement[JC] def lastChild: Node
HTMLFormElement[JC] def lastElementChild: Element
HTMLFormElement[JC] def length: Int
HTMLFormElement[JC] def localName: String
HTMLFormElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLFormElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLFormElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLFormElement[JC] def matches(selector: String): Boolean
HTMLFormElement[JC] var method: String
HTMLFormElement[JC] var name: String
HTMLFormElement[JC] def namedItem(name: String): js.Dynamic
HTMLFormElement[JC] def namespaceURI: String
HTMLFormElement[JC] def nextElementSibling: Element
HTMLFormElement[JC] def nextSibling: Node
HTMLFormElement[JC] var noValidate: Boolean
HTMLFormElement[JC] def nodeName: String
HTMLFormElement[JC] def nodeType: Int
HTMLFormElement[JC] var nodeValue: String
HTMLFormElement[JC] def normalize(): Unit
HTMLFormElement[JC] def offsetHeight: Double
HTMLFormElement[JC] def offsetLeft: Double
HTMLFormElement[JC] def offsetParent: Element
HTMLFormElement[JC] def offsetTop: Double
HTMLFormElement[JC] def offsetWidth: Double
HTMLFormElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLFormElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLFormElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLFormElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLFormElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLFormElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLFormElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLFormElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLFormElement[JC] var oncanplay: js.Function1[Event, _]
HTMLFormElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLFormElement[JC] var onchange: js.Function1[Event, _]
HTMLFormElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLFormElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLFormElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLFormElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLFormElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLFormElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLFormElement[JC] var oncuechange: js.Function1[Event, _]
HTMLFormElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLFormElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLFormElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLFormElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLFormElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLFormElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLFormElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLFormElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLFormElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLFormElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLFormElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLFormElement[JC] var onemptied: js.Function1[Event, _]
HTMLFormElement[JC] var onended: js.Function1[Event, _]
HTMLFormElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLFormElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLFormElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLFormElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLFormElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLFormElement[JC] var onhelp: js.Function1[Event, _]
HTMLFormElement[JC] var oninput: js.Function1[Event, _]
HTMLFormElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLFormElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLFormElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLFormElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLFormElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLFormElement[JC] var onloadstart: js.Function1[Event, _]
HTMLFormElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLFormElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLFormElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLFormElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLFormElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLFormElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLFormElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLFormElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLFormElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLFormElement[JC] var onpause: js.Function1[Event, _]
HTMLFormElement[JC] var onplay: js.Function1[Event, _]
HTMLFormElement[JC] var onplaying: js.Function1[Event, _]
HTMLFormElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLFormElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLFormElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLFormElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLFormElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLFormElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLFormElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLFormElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLFormElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLFormElement[JC] var onratechange: js.Function1[Event, _]
HTMLFormElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLFormElement[JC] var onreset: js.Function1[Event, _]
HTMLFormElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLFormElement[JC] var onseeked: js.Function1[Event, _]
HTMLFormElement[JC] var onseeking: js.Function1[Event, _]
HTMLFormElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLFormElement[JC] var onselectstart: js.Function1[Event, _]
HTMLFormElement[JC] var onstalled: js.Function1[Event, _]
HTMLFormElement[JC] var onsubmit: js.Function1[Event, _]
HTMLFormElement[JC] var onsuspend: js.Function1[Event, _]
HTMLFormElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLFormElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLFormElement[JC] var onwaiting: js.Function1[Event, _]
HTMLFormElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLFormElement[JC] var outerHTML: String
HTMLFormElement[JC] def ownerDocument: Document
HTMLFormElement[JC] override def ownerDocument: HTMLDocument
HTMLFormElement[JC] var parentElement: HTMLElement
HTMLFormElement[JC] def parentNode: Node
HTMLFormElement[JC] def prefix: String
HTMLFormElement[JC] def prepend(nodes: Node | String*): Unit
HTMLFormElement[JC] def previousElementSibling: Element
HTMLFormElement[JC] def previousSibling: Node
HTMLFormElement[JC] def querySelector(selectors: String): Element
HTMLFormElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLFormElement[JC] var readyState: js.Any
HTMLFormElement[JC] var recordNumber: js.Any
HTMLFormElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLFormElement[JC] def remove(): Unit
HTMLFormElement[JC] def removeAttribute(name: String): Unit
HTMLFormElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLFormElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLFormElement[JC] def removeChild(oldChild: Node): Node
HTMLFormElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLFormElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLFormElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLFormElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLFormElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLFormElement[JC] def reportValidity(): Boolean
HTMLFormElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLFormElement[JC] def requestPointerLock(): Unit
HTMLFormElement[JC] def reset(): Unit
HTMLFormElement[JC] def scrollHeight: Int
HTMLFormElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLFormElement[JC] var scrollLeft: Double
HTMLFormElement[JC] var scrollTop: Double
HTMLFormElement[JC] def scrollWidth: Int
HTMLFormElement[JC] def setAttribute(name: String, value: String): Unit
HTMLFormElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLFormElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLFormElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLFormElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLFormElement[JC] def shadowRoot: ShadowRoot
HTMLFormElement[JC] var spellcheck: Boolean
HTMLFormElement[JC] def style: CSSStyleDeclaration
HTMLFormElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLFormElement[JC] def style_ = (value: String): Unit
HTMLFormElement[JC] def submit(): Unit
HTMLFormElement[JC] var tabIndex: Int
HTMLFormElement[JC] def tagName: String
HTMLFormElement[JC] var target: String
HTMLFormElement[JC] var textContent: String
HTMLFormElement[JC] var title: String
HTMLFormElement[JC] @scala.scalajs.js.annotation.JSBracketAccess def update(name: String, v: js.Any): Unit
HTMLHRElement[JC] var accessKey: String
HTMLHRElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLHRElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLHRElement[JC] def after(nodes: Node | String*): Unit
HTMLHRElement[JC] def append(nodes: Node | String*): Unit
HTMLHRElement[JC] def appendChild(newChild: Node): Node
HTMLHRElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLHRElement[JC] def attributes: NamedNodeMap
HTMLHRElement[JC] def baseURI: String
HTMLHRElement[JC] def before(nodes: Node | String*): Unit
HTMLHRElement[JC] def blur(): Unit
HTMLHRElement[JC] def childElementCount: Int
HTMLHRElement[JC] def childNodes: NodeList[Node]
HTMLHRElement[JC] def children: HTMLCollection[Element]
HTMLHRElement[JC] var classList: DOMTokenList
HTMLHRElement[JC] var className: String
HTMLHRElement[JC] def click(): Unit
HTMLHRElement[JC] def clientHeight: Int
HTMLHRElement[JC] def clientLeft: Int
HTMLHRElement[JC] def clientTop: Int
HTMLHRElement[JC] def clientWidth: Int
HTMLHRElement[JC] def cloneNode(deep: Boolean?): Node
HTMLHRElement[JC] def closest(selector: String): Element
HTMLHRElement[JC] def compareDocumentPosition(other: Node): Int
HTMLHRElement[JC] def contains(child: HTMLElement): Boolean
HTMLHRElement[JC] def contains(otherNode: Node): Boolean
HTMLHRElement[JC] var contentEditable: String
HTMLHRElement[JC] def dataset: js.Dictionary[String]
HTMLHRElement[JC] var dir: String
HTMLHRElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLHRElement[JC] var draggable: Boolean
HTMLHRElement[JC] var filters: Object
HTMLHRElement[JC] def firstChild: Node
HTMLHRElement[JC] def firstElementChild: Element
HTMLHRElement[JC] def focus(): Unit
HTMLHRElement[JC] def focus(options: FocusOptions): Unit
HTMLHRElement[JC] def getAttribute(name: String): String
HTMLHRElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLHRElement[JC] def getAttributeNode(name: String): Attr
HTMLHRElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLHRElement[JC] def getBoundingClientRect(): DOMRect
HTMLHRElement[JC] def getClientRects(): DOMRectList
HTMLHRElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLHRElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLHRElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLHRElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLHRElement[JC] def hasAttribute(name: String): Boolean
HTMLHRElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLHRElement[JC] def hasAttributes(): Boolean
HTMLHRElement[JC] def hasChildNodes(): Boolean
HTMLHRElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLHRElement[JC] var id: String
HTMLHRElement[JC] var innerHTML: String
HTMLHRElement[JC] var innerText: String
HTMLHRElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLHRElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLHRElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLHRElement[JC] def isConnected: Boolean
HTMLHRElement[JC] def isContentEditable: Boolean
HTMLHRElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLHRElement[JC] def isEqualNode(arg: Node): Boolean
HTMLHRElement[JC] def isSameNode(other: Node): Boolean
HTMLHRElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLHRElement[JC] var lang: String
HTMLHRElement[JC] def lastChild: Node
HTMLHRElement[JC] def lastElementChild: Element
HTMLHRElement[JC] def localName: String
HTMLHRElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLHRElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLHRElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLHRElement[JC] def matches(selector: String): Boolean
HTMLHRElement[JC] def namespaceURI: String
HTMLHRElement[JC] def nextElementSibling: Element
HTMLHRElement[JC] def nextSibling: Node
HTMLHRElement[JC] def nodeName: String
HTMLHRElement[JC] def nodeType: Int
HTMLHRElement[JC] var nodeValue: String
HTMLHRElement[JC] def normalize(): Unit
HTMLHRElement[JC] def offsetHeight: Double
HTMLHRElement[JC] def offsetLeft: Double
HTMLHRElement[JC] def offsetParent: Element
HTMLHRElement[JC] def offsetTop: Double
HTMLHRElement[JC] def offsetWidth: Double
HTMLHRElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLHRElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLHRElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLHRElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLHRElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLHRElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLHRElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLHRElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLHRElement[JC] var oncanplay: js.Function1[Event, _]
HTMLHRElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLHRElement[JC] var onchange: js.Function1[Event, _]
HTMLHRElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLHRElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLHRElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLHRElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLHRElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLHRElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLHRElement[JC] var oncuechange: js.Function1[Event, _]
HTMLHRElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLHRElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLHRElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLHRElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLHRElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLHRElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLHRElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLHRElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLHRElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLHRElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLHRElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLHRElement[JC] var onemptied: js.Function1[Event, _]
HTMLHRElement[JC] var onended: js.Function1[Event, _]
HTMLHRElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLHRElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLHRElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLHRElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLHRElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLHRElement[JC] var onhelp: js.Function1[Event, _]
HTMLHRElement[JC] var oninput: js.Function1[Event, _]
HTMLHRElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLHRElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLHRElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLHRElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLHRElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLHRElement[JC] var onloadstart: js.Function1[Event, _]
HTMLHRElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLHRElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLHRElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLHRElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLHRElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLHRElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLHRElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLHRElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLHRElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLHRElement[JC] var onpause: js.Function1[Event, _]
HTMLHRElement[JC] var onplay: js.Function1[Event, _]
HTMLHRElement[JC] var onplaying: js.Function1[Event, _]
HTMLHRElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLHRElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLHRElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLHRElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLHRElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLHRElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLHRElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLHRElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLHRElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLHRElement[JC] var onratechange: js.Function1[Event, _]
HTMLHRElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLHRElement[JC] var onreset: js.Function1[Event, _]
HTMLHRElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLHRElement[JC] var onseeked: js.Function1[Event, _]
HTMLHRElement[JC] var onseeking: js.Function1[Event, _]
HTMLHRElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLHRElement[JC] var onselectstart: js.Function1[Event, _]
HTMLHRElement[JC] var onstalled: js.Function1[Event, _]
HTMLHRElement[JC] var onsubmit: js.Function1[Event, _]
HTMLHRElement[JC] var onsuspend: js.Function1[Event, _]
HTMLHRElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLHRElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLHRElement[JC] var onwaiting: js.Function1[Event, _]
HTMLHRElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLHRElement[JC] var outerHTML: String
HTMLHRElement[JC] def ownerDocument: Document
HTMLHRElement[JC] override def ownerDocument: HTMLDocument
HTMLHRElement[JC] var parentElement: HTMLElement
HTMLHRElement[JC] def parentNode: Node
HTMLHRElement[JC] def prefix: String
HTMLHRElement[JC] def prepend(nodes: Node | String*): Unit
HTMLHRElement[JC] def previousElementSibling: Element
HTMLHRElement[JC] def previousSibling: Node
HTMLHRElement[JC] def querySelector(selectors: String): Element
HTMLHRElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLHRElement[JC] var readyState: js.Any
HTMLHRElement[JC] var recordNumber: js.Any
HTMLHRElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLHRElement[JC] def remove(): Unit
HTMLHRElement[JC] def removeAttribute(name: String): Unit
HTMLHRElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLHRElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLHRElement[JC] def removeChild(oldChild: Node): Node
HTMLHRElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLHRElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLHRElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLHRElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLHRElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLHRElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLHRElement[JC] def requestPointerLock(): Unit
HTMLHRElement[JC] def scrollHeight: Int
HTMLHRElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLHRElement[JC] var scrollLeft: Double
HTMLHRElement[JC] var scrollTop: Double
HTMLHRElement[JC] def scrollWidth: Int
HTMLHRElement[JC] def setAttribute(name: String, value: String): Unit
HTMLHRElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLHRElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLHRElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLHRElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLHRElement[JC] def shadowRoot: ShadowRoot
HTMLHRElement[JC] var spellcheck: Boolean
HTMLHRElement[JC] def style: CSSStyleDeclaration
HTMLHRElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLHRElement[JC] def style_ = (value: String): Unit
HTMLHRElement[JC] var tabIndex: Int
HTMLHRElement[JC] def tagName: String
HTMLHRElement[JC] var textContent: String
HTMLHRElement[JC] var title: String
HTMLHeadElement[JC] var accessKey: String
HTMLHeadElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLHeadElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLHeadElement[JC] def after(nodes: Node | String*): Unit
HTMLHeadElement[JC] def append(nodes: Node | String*): Unit
HTMLHeadElement[JC] def appendChild(newChild: Node): Node
HTMLHeadElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLHeadElement[JC] def attributes: NamedNodeMap
HTMLHeadElement[JC] def baseURI: String
HTMLHeadElement[JC] def before(nodes: Node | String*): Unit
HTMLHeadElement[JC] def blur(): Unit
HTMLHeadElement[JC] def childElementCount: Int
HTMLHeadElement[JC] def childNodes: NodeList[Node]
HTMLHeadElement[JC] def children: HTMLCollection[Element]
HTMLHeadElement[JC] var classList: DOMTokenList
HTMLHeadElement[JC] var className: String
HTMLHeadElement[JC] def click(): Unit
HTMLHeadElement[JC] def clientHeight: Int
HTMLHeadElement[JC] def clientLeft: Int
HTMLHeadElement[JC] def clientTop: Int
HTMLHeadElement[JC] def clientWidth: Int
HTMLHeadElement[JC] def cloneNode(deep: Boolean?): Node
HTMLHeadElement[JC] def closest(selector: String): Element
HTMLHeadElement[JC] def compareDocumentPosition(other: Node): Int
HTMLHeadElement[JC] def contains(child: HTMLElement): Boolean
HTMLHeadElement[JC] def contains(otherNode: Node): Boolean
HTMLHeadElement[JC] var contentEditable: String
HTMLHeadElement[JC] def dataset: js.Dictionary[String]
HTMLHeadElement[JC] var dir: String
HTMLHeadElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLHeadElement[JC] var draggable: Boolean
HTMLHeadElement[JC] var filters: Object
HTMLHeadElement[JC] def firstChild: Node
HTMLHeadElement[JC] def firstElementChild: Element
HTMLHeadElement[JC] def focus(): Unit
HTMLHeadElement[JC] def focus(options: FocusOptions): Unit
HTMLHeadElement[JC] def getAttribute(name: String): String
HTMLHeadElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLHeadElement[JC] def getAttributeNode(name: String): Attr
HTMLHeadElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLHeadElement[JC] def getBoundingClientRect(): DOMRect
HTMLHeadElement[JC] def getClientRects(): DOMRectList
HTMLHeadElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLHeadElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLHeadElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLHeadElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLHeadElement[JC] def hasAttribute(name: String): Boolean
HTMLHeadElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLHeadElement[JC] def hasAttributes(): Boolean
HTMLHeadElement[JC] def hasChildNodes(): Boolean
HTMLHeadElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLHeadElement[JC] var id: String
HTMLHeadElement[JC] var innerHTML: String
HTMLHeadElement[JC] var innerText: String
HTMLHeadElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLHeadElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLHeadElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLHeadElement[JC] def isConnected: Boolean
HTMLHeadElement[JC] def isContentEditable: Boolean
HTMLHeadElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLHeadElement[JC] def isEqualNode(arg: Node): Boolean
HTMLHeadElement[JC] def isSameNode(other: Node): Boolean
HTMLHeadElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLHeadElement[JC] var lang: String
HTMLHeadElement[JC] def lastChild: Node
HTMLHeadElement[JC] def lastElementChild: Element
HTMLHeadElement[JC] def localName: String
HTMLHeadElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLHeadElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLHeadElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLHeadElement[JC] def matches(selector: String): Boolean
HTMLHeadElement[JC] def namespaceURI: String
HTMLHeadElement[JC] def nextElementSibling: Element
HTMLHeadElement[JC] def nextSibling: Node
HTMLHeadElement[JC] def nodeName: String
HTMLHeadElement[JC] def nodeType: Int
HTMLHeadElement[JC] var nodeValue: String
HTMLHeadElement[JC] def normalize(): Unit
HTMLHeadElement[JC] def offsetHeight: Double
HTMLHeadElement[JC] def offsetLeft: Double
HTMLHeadElement[JC] def offsetParent: Element
HTMLHeadElement[JC] def offsetTop: Double
HTMLHeadElement[JC] def offsetWidth: Double
HTMLHeadElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLHeadElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLHeadElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLHeadElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLHeadElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLHeadElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLHeadElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLHeadElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLHeadElement[JC] var oncanplay: js.Function1[Event, _]
HTMLHeadElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLHeadElement[JC] var onchange: js.Function1[Event, _]
HTMLHeadElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLHeadElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLHeadElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLHeadElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLHeadElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLHeadElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLHeadElement[JC] var oncuechange: js.Function1[Event, _]
HTMLHeadElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLHeadElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLHeadElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLHeadElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLHeadElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLHeadElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLHeadElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLHeadElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLHeadElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLHeadElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLHeadElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLHeadElement[JC] var onemptied: js.Function1[Event, _]
HTMLHeadElement[JC] var onended: js.Function1[Event, _]
HTMLHeadElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLHeadElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLHeadElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLHeadElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLHeadElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLHeadElement[JC] var onhelp: js.Function1[Event, _]
HTMLHeadElement[JC] var oninput: js.Function1[Event, _]
HTMLHeadElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLHeadElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLHeadElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLHeadElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLHeadElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLHeadElement[JC] var onloadstart: js.Function1[Event, _]
HTMLHeadElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLHeadElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLHeadElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLHeadElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLHeadElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLHeadElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLHeadElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLHeadElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLHeadElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLHeadElement[JC] var onpause: js.Function1[Event, _]
HTMLHeadElement[JC] var onplay: js.Function1[Event, _]
HTMLHeadElement[JC] var onplaying: js.Function1[Event, _]
HTMLHeadElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLHeadElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLHeadElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLHeadElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLHeadElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLHeadElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLHeadElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLHeadElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLHeadElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLHeadElement[JC] var onratechange: js.Function1[Event, _]
HTMLHeadElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLHeadElement[JC] var onreset: js.Function1[Event, _]
HTMLHeadElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLHeadElement[JC] var onseeked: js.Function1[Event, _]
HTMLHeadElement[JC] var onseeking: js.Function1[Event, _]
HTMLHeadElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLHeadElement[JC] var onselectstart: js.Function1[Event, _]
HTMLHeadElement[JC] var onstalled: js.Function1[Event, _]
HTMLHeadElement[JC] var onsubmit: js.Function1[Event, _]
HTMLHeadElement[JC] var onsuspend: js.Function1[Event, _]
HTMLHeadElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLHeadElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLHeadElement[JC] var onwaiting: js.Function1[Event, _]
HTMLHeadElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLHeadElement[JC] var outerHTML: String
HTMLHeadElement[JC] def ownerDocument: Document
HTMLHeadElement[JC] override def ownerDocument: HTMLDocument
HTMLHeadElement[JC] var parentElement: HTMLElement
HTMLHeadElement[JC] def parentNode: Node
HTMLHeadElement[JC] def prefix: String
HTMLHeadElement[JC] def prepend(nodes: Node | String*): Unit
HTMLHeadElement[JC] def previousElementSibling: Element
HTMLHeadElement[JC] def previousSibling: Node
HTMLHeadElement[JC] def querySelector(selectors: String): Element
HTMLHeadElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLHeadElement[JC] var readyState: js.Any
HTMLHeadElement[JC] var recordNumber: js.Any
HTMLHeadElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLHeadElement[JC] def remove(): Unit
HTMLHeadElement[JC] def removeAttribute(name: String): Unit
HTMLHeadElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLHeadElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLHeadElement[JC] def removeChild(oldChild: Node): Node
HTMLHeadElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLHeadElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLHeadElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLHeadElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLHeadElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLHeadElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLHeadElement[JC] def requestPointerLock(): Unit
HTMLHeadElement[JC] def scrollHeight: Int
HTMLHeadElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLHeadElement[JC] var scrollLeft: Double
HTMLHeadElement[JC] var scrollTop: Double
HTMLHeadElement[JC] def scrollWidth: Int
HTMLHeadElement[JC] def setAttribute(name: String, value: String): Unit
HTMLHeadElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLHeadElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLHeadElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLHeadElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLHeadElement[JC] def shadowRoot: ShadowRoot
HTMLHeadElement[JC] var spellcheck: Boolean
HTMLHeadElement[JC] def style: CSSStyleDeclaration
HTMLHeadElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLHeadElement[JC] def style_ = (value: String): Unit
HTMLHeadElement[JC] var tabIndex: Int
HTMLHeadElement[JC] def tagName: String
HTMLHeadElement[JC] var textContent: String
HTMLHeadElement[JC] var title: String
HTMLHeadingElement[JC] var accessKey: String
HTMLHeadingElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLHeadingElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLHeadingElement[JC] def after(nodes: Node | String*): Unit
HTMLHeadingElement[JC] def append(nodes: Node | String*): Unit
HTMLHeadingElement[JC] def appendChild(newChild: Node): Node
HTMLHeadingElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLHeadingElement[JC] def attributes: NamedNodeMap
HTMLHeadingElement[JC] def baseURI: String
HTMLHeadingElement[JC] def before(nodes: Node | String*): Unit
HTMLHeadingElement[JC] def blur(): Unit
HTMLHeadingElement[JC] def childElementCount: Int
HTMLHeadingElement[JC] def childNodes: NodeList[Node]
HTMLHeadingElement[JC] def children: HTMLCollection[Element]
HTMLHeadingElement[JC] var classList: DOMTokenList
HTMLHeadingElement[JC] var className: String
HTMLHeadingElement[JC] def click(): Unit
HTMLHeadingElement[JC] def clientHeight: Int
HTMLHeadingElement[JC] def clientLeft: Int
HTMLHeadingElement[JC] def clientTop: Int
HTMLHeadingElement[JC] def clientWidth: Int
HTMLHeadingElement[JC] def cloneNode(deep: Boolean?): Node
HTMLHeadingElement[JC] def closest(selector: String): Element
HTMLHeadingElement[JC] def compareDocumentPosition(other: Node): Int
HTMLHeadingElement[JC] def contains(child: HTMLElement): Boolean
HTMLHeadingElement[JC] def contains(otherNode: Node): Boolean
HTMLHeadingElement[JC] var contentEditable: String
HTMLHeadingElement[JC] def dataset: js.Dictionary[String]
HTMLHeadingElement[JC] var dir: String
HTMLHeadingElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLHeadingElement[JC] var draggable: Boolean
HTMLHeadingElement[JC] var filters: Object
HTMLHeadingElement[JC] def firstChild: Node
HTMLHeadingElement[JC] def firstElementChild: Element
HTMLHeadingElement[JC] def focus(): Unit
HTMLHeadingElement[JC] def focus(options: FocusOptions): Unit
HTMLHeadingElement[JC] def getAttribute(name: String): String
HTMLHeadingElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLHeadingElement[JC] def getAttributeNode(name: String): Attr
HTMLHeadingElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLHeadingElement[JC] def getBoundingClientRect(): DOMRect
HTMLHeadingElement[JC] def getClientRects(): DOMRectList
HTMLHeadingElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLHeadingElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLHeadingElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLHeadingElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLHeadingElement[JC] def hasAttribute(name: String): Boolean
HTMLHeadingElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLHeadingElement[JC] def hasAttributes(): Boolean
HTMLHeadingElement[JC] def hasChildNodes(): Boolean
HTMLHeadingElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLHeadingElement[JC] var id: String
HTMLHeadingElement[JC] var innerHTML: String
HTMLHeadingElement[JC] var innerText: String
HTMLHeadingElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLHeadingElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLHeadingElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLHeadingElement[JC] def isConnected: Boolean
HTMLHeadingElement[JC] def isContentEditable: Boolean
HTMLHeadingElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLHeadingElement[JC] def isEqualNode(arg: Node): Boolean
HTMLHeadingElement[JC] def isSameNode(other: Node): Boolean
HTMLHeadingElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLHeadingElement[JC] var lang: String
HTMLHeadingElement[JC] def lastChild: Node
HTMLHeadingElement[JC] def lastElementChild: Element
HTMLHeadingElement[JC] def localName: String
HTMLHeadingElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLHeadingElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLHeadingElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLHeadingElement[JC] def matches(selector: String): Boolean
HTMLHeadingElement[JC] def namespaceURI: String
HTMLHeadingElement[JC] def nextElementSibling: Element
HTMLHeadingElement[JC] def nextSibling: Node
HTMLHeadingElement[JC] def nodeName: String
HTMLHeadingElement[JC] def nodeType: Int
HTMLHeadingElement[JC] var nodeValue: String
HTMLHeadingElement[JC] def normalize(): Unit
HTMLHeadingElement[JC] def offsetHeight: Double
HTMLHeadingElement[JC] def offsetLeft: Double
HTMLHeadingElement[JC] def offsetParent: Element
HTMLHeadingElement[JC] def offsetTop: Double
HTMLHeadingElement[JC] def offsetWidth: Double
HTMLHeadingElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLHeadingElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLHeadingElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLHeadingElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLHeadingElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLHeadingElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLHeadingElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLHeadingElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLHeadingElement[JC] var oncanplay: js.Function1[Event, _]
HTMLHeadingElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLHeadingElement[JC] var onchange: js.Function1[Event, _]
HTMLHeadingElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLHeadingElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLHeadingElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLHeadingElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLHeadingElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLHeadingElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLHeadingElement[JC] var oncuechange: js.Function1[Event, _]
HTMLHeadingElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLHeadingElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLHeadingElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLHeadingElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLHeadingElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLHeadingElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLHeadingElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLHeadingElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLHeadingElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLHeadingElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLHeadingElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLHeadingElement[JC] var onemptied: js.Function1[Event, _]
HTMLHeadingElement[JC] var onended: js.Function1[Event, _]
HTMLHeadingElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLHeadingElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLHeadingElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLHeadingElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLHeadingElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLHeadingElement[JC] var onhelp: js.Function1[Event, _]
HTMLHeadingElement[JC] var oninput: js.Function1[Event, _]
HTMLHeadingElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLHeadingElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLHeadingElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLHeadingElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLHeadingElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLHeadingElement[JC] var onloadstart: js.Function1[Event, _]
HTMLHeadingElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLHeadingElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLHeadingElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLHeadingElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLHeadingElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLHeadingElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLHeadingElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLHeadingElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLHeadingElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLHeadingElement[JC] var onpause: js.Function1[Event, _]
HTMLHeadingElement[JC] var onplay: js.Function1[Event, _]
HTMLHeadingElement[JC] var onplaying: js.Function1[Event, _]
HTMLHeadingElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLHeadingElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLHeadingElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLHeadingElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLHeadingElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLHeadingElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLHeadingElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLHeadingElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLHeadingElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLHeadingElement[JC] var onratechange: js.Function1[Event, _]
HTMLHeadingElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLHeadingElement[JC] var onreset: js.Function1[Event, _]
HTMLHeadingElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLHeadingElement[JC] var onseeked: js.Function1[Event, _]
HTMLHeadingElement[JC] var onseeking: js.Function1[Event, _]
HTMLHeadingElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLHeadingElement[JC] var onselectstart: js.Function1[Event, _]
HTMLHeadingElement[JC] var onstalled: js.Function1[Event, _]
HTMLHeadingElement[JC] var onsubmit: js.Function1[Event, _]
HTMLHeadingElement[JC] var onsuspend: js.Function1[Event, _]
HTMLHeadingElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLHeadingElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLHeadingElement[JC] var onwaiting: js.Function1[Event, _]
HTMLHeadingElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLHeadingElement[JC] var outerHTML: String
HTMLHeadingElement[JC] def ownerDocument: Document
HTMLHeadingElement[JC] override def ownerDocument: HTMLDocument
HTMLHeadingElement[JC] var parentElement: HTMLElement
HTMLHeadingElement[JC] def parentNode: Node
HTMLHeadingElement[JC] def prefix: String
HTMLHeadingElement[JC] def prepend(nodes: Node | String*): Unit
HTMLHeadingElement[JC] def previousElementSibling: Element
HTMLHeadingElement[JC] def previousSibling: Node
HTMLHeadingElement[JC] def querySelector(selectors: String): Element
HTMLHeadingElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLHeadingElement[JC] var readyState: js.Any
HTMLHeadingElement[JC] var recordNumber: js.Any
HTMLHeadingElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLHeadingElement[JC] def remove(): Unit
HTMLHeadingElement[JC] def removeAttribute(name: String): Unit
HTMLHeadingElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLHeadingElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLHeadingElement[JC] def removeChild(oldChild: Node): Node
HTMLHeadingElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLHeadingElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLHeadingElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLHeadingElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLHeadingElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLHeadingElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLHeadingElement[JC] def requestPointerLock(): Unit
HTMLHeadingElement[JC] def scrollHeight: Int
HTMLHeadingElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLHeadingElement[JC] var scrollLeft: Double
HTMLHeadingElement[JC] var scrollTop: Double
HTMLHeadingElement[JC] def scrollWidth: Int
HTMLHeadingElement[JC] def setAttribute(name: String, value: String): Unit
HTMLHeadingElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLHeadingElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLHeadingElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLHeadingElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLHeadingElement[JC] def shadowRoot: ShadowRoot
HTMLHeadingElement[JC] var spellcheck: Boolean
HTMLHeadingElement[JC] def style: CSSStyleDeclaration
HTMLHeadingElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLHeadingElement[JC] def style_ = (value: String): Unit
HTMLHeadingElement[JC] var tabIndex: Int
HTMLHeadingElement[JC] def tagName: String
HTMLHeadingElement[JC] var textContent: String
HTMLHeadingElement[JC] var title: String
HTMLHtmlElement[JC] var accessKey: String
HTMLHtmlElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLHtmlElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLHtmlElement[JC] def after(nodes: Node | String*): Unit
HTMLHtmlElement[JC] def append(nodes: Node | String*): Unit
HTMLHtmlElement[JC] def appendChild(newChild: Node): Node
HTMLHtmlElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLHtmlElement[JC] def attributes: NamedNodeMap
HTMLHtmlElement[JC] def baseURI: String
HTMLHtmlElement[JC] def before(nodes: Node | String*): Unit
HTMLHtmlElement[JC] def blur(): Unit
HTMLHtmlElement[JC] def childElementCount: Int
HTMLHtmlElement[JC] def childNodes: NodeList[Node]
HTMLHtmlElement[JC] def children: HTMLCollection[Element]
HTMLHtmlElement[JC] var classList: DOMTokenList
HTMLHtmlElement[JC] var className: String
HTMLHtmlElement[JC] def click(): Unit
HTMLHtmlElement[JC] def clientHeight: Int
HTMLHtmlElement[JC] def clientLeft: Int
HTMLHtmlElement[JC] def clientTop: Int
HTMLHtmlElement[JC] def clientWidth: Int
HTMLHtmlElement[JC] def cloneNode(deep: Boolean?): Node
HTMLHtmlElement[JC] def closest(selector: String): Element
HTMLHtmlElement[JC] def compareDocumentPosition(other: Node): Int
HTMLHtmlElement[JC] def contains(child: HTMLElement): Boolean
HTMLHtmlElement[JC] def contains(otherNode: Node): Boolean
HTMLHtmlElement[JC] var contentEditable: String
HTMLHtmlElement[JC] def dataset: js.Dictionary[String]
HTMLHtmlElement[JC] var dir: String
HTMLHtmlElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLHtmlElement[JC] var draggable: Boolean
HTMLHtmlElement[JC] var filters: Object
HTMLHtmlElement[JC] def firstChild: Node
HTMLHtmlElement[JC] def firstElementChild: Element
HTMLHtmlElement[JC] def focus(): Unit
HTMLHtmlElement[JC] def focus(options: FocusOptions): Unit
HTMLHtmlElement[JC] def getAttribute(name: String): String
HTMLHtmlElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLHtmlElement[JC] def getAttributeNode(name: String): Attr
HTMLHtmlElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLHtmlElement[JC] def getBoundingClientRect(): DOMRect
HTMLHtmlElement[JC] def getClientRects(): DOMRectList
HTMLHtmlElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLHtmlElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLHtmlElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLHtmlElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLHtmlElement[JC] def hasAttribute(name: String): Boolean
HTMLHtmlElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLHtmlElement[JC] def hasAttributes(): Boolean
HTMLHtmlElement[JC] def hasChildNodes(): Boolean
HTMLHtmlElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLHtmlElement[JC] var id: String
HTMLHtmlElement[JC] var innerHTML: String
HTMLHtmlElement[JC] var innerText: String
HTMLHtmlElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLHtmlElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLHtmlElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLHtmlElement[JC] def isConnected: Boolean
HTMLHtmlElement[JC] def isContentEditable: Boolean
HTMLHtmlElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLHtmlElement[JC] def isEqualNode(arg: Node): Boolean
HTMLHtmlElement[JC] def isSameNode(other: Node): Boolean
HTMLHtmlElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLHtmlElement[JC] var lang: String
HTMLHtmlElement[JC] def lastChild: Node
HTMLHtmlElement[JC] def lastElementChild: Element
HTMLHtmlElement[JC] def localName: String
HTMLHtmlElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLHtmlElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLHtmlElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLHtmlElement[JC] def matches(selector: String): Boolean
HTMLHtmlElement[JC] def namespaceURI: String
HTMLHtmlElement[JC] def nextElementSibling: Element
HTMLHtmlElement[JC] def nextSibling: Node
HTMLHtmlElement[JC] def nodeName: String
HTMLHtmlElement[JC] def nodeType: Int
HTMLHtmlElement[JC] var nodeValue: String
HTMLHtmlElement[JC] def normalize(): Unit
HTMLHtmlElement[JC] def offsetHeight: Double
HTMLHtmlElement[JC] def offsetLeft: Double
HTMLHtmlElement[JC] def offsetParent: Element
HTMLHtmlElement[JC] def offsetTop: Double
HTMLHtmlElement[JC] def offsetWidth: Double
HTMLHtmlElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLHtmlElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLHtmlElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLHtmlElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLHtmlElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLHtmlElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLHtmlElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLHtmlElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLHtmlElement[JC] var oncanplay: js.Function1[Event, _]
HTMLHtmlElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLHtmlElement[JC] var onchange: js.Function1[Event, _]
HTMLHtmlElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLHtmlElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLHtmlElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLHtmlElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLHtmlElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLHtmlElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLHtmlElement[JC] var oncuechange: js.Function1[Event, _]
HTMLHtmlElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLHtmlElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLHtmlElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLHtmlElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLHtmlElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLHtmlElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLHtmlElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLHtmlElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLHtmlElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLHtmlElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLHtmlElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLHtmlElement[JC] var onemptied: js.Function1[Event, _]
HTMLHtmlElement[JC] var onended: js.Function1[Event, _]
HTMLHtmlElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLHtmlElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLHtmlElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLHtmlElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLHtmlElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLHtmlElement[JC] var onhelp: js.Function1[Event, _]
HTMLHtmlElement[JC] var oninput: js.Function1[Event, _]
HTMLHtmlElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLHtmlElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLHtmlElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLHtmlElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLHtmlElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLHtmlElement[JC] var onloadstart: js.Function1[Event, _]
HTMLHtmlElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLHtmlElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLHtmlElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLHtmlElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLHtmlElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLHtmlElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLHtmlElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLHtmlElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLHtmlElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLHtmlElement[JC] var onpause: js.Function1[Event, _]
HTMLHtmlElement[JC] var onplay: js.Function1[Event, _]
HTMLHtmlElement[JC] var onplaying: js.Function1[Event, _]
HTMLHtmlElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLHtmlElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLHtmlElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLHtmlElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLHtmlElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLHtmlElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLHtmlElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLHtmlElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLHtmlElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLHtmlElement[JC] var onratechange: js.Function1[Event, _]
HTMLHtmlElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLHtmlElement[JC] var onreset: js.Function1[Event, _]
HTMLHtmlElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLHtmlElement[JC] var onseeked: js.Function1[Event, _]
HTMLHtmlElement[JC] var onseeking: js.Function1[Event, _]
HTMLHtmlElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLHtmlElement[JC] var onselectstart: js.Function1[Event, _]
HTMLHtmlElement[JC] var onstalled: js.Function1[Event, _]
HTMLHtmlElement[JC] var onsubmit: js.Function1[Event, _]
HTMLHtmlElement[JC] var onsuspend: js.Function1[Event, _]
HTMLHtmlElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLHtmlElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLHtmlElement[JC] var onwaiting: js.Function1[Event, _]
HTMLHtmlElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLHtmlElement[JC] var outerHTML: String
HTMLHtmlElement[JC] def ownerDocument: Document
HTMLHtmlElement[JC] override def ownerDocument: HTMLDocument
HTMLHtmlElement[JC] var parentElement: HTMLElement
HTMLHtmlElement[JC] def parentNode: Node
HTMLHtmlElement[JC] def prefix: String
HTMLHtmlElement[JC] def prepend(nodes: Node | String*): Unit
HTMLHtmlElement[JC] def previousElementSibling: Element
HTMLHtmlElement[JC] def previousSibling: Node
HTMLHtmlElement[JC] def querySelector(selectors: String): Element
HTMLHtmlElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLHtmlElement[JC] var readyState: js.Any
HTMLHtmlElement[JC] var recordNumber: js.Any
HTMLHtmlElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLHtmlElement[JC] def remove(): Unit
HTMLHtmlElement[JC] def removeAttribute(name: String): Unit
HTMLHtmlElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLHtmlElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLHtmlElement[JC] def removeChild(oldChild: Node): Node
HTMLHtmlElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLHtmlElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLHtmlElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLHtmlElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLHtmlElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLHtmlElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLHtmlElement[JC] def requestPointerLock(): Unit
HTMLHtmlElement[JC] def scrollHeight: Int
HTMLHtmlElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLHtmlElement[JC] var scrollLeft: Double
HTMLHtmlElement[JC] var scrollTop: Double
HTMLHtmlElement[JC] def scrollWidth: Int
HTMLHtmlElement[JC] def setAttribute(name: String, value: String): Unit
HTMLHtmlElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLHtmlElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLHtmlElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLHtmlElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLHtmlElement[JC] def shadowRoot: ShadowRoot
HTMLHtmlElement[JC] var spellcheck: Boolean
HTMLHtmlElement[JC] def style: CSSStyleDeclaration
HTMLHtmlElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLHtmlElement[JC] def style_ = (value: String): Unit
HTMLHtmlElement[JC] var tabIndex: Int
HTMLHtmlElement[JC] def tagName: String
HTMLHtmlElement[JC] var textContent: String
HTMLHtmlElement[JC] var title: String
HTMLIFrameElement[JC] var accessKey: String
HTMLIFrameElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLIFrameElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLIFrameElement[JC] def after(nodes: Node | String*): Unit
HTMLIFrameElement[JC] def append(nodes: Node | String*): Unit
HTMLIFrameElement[JC] def appendChild(newChild: Node): Node
HTMLIFrameElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLIFrameElement[JC] def attributes: NamedNodeMap
HTMLIFrameElement[JC] def baseURI: String
HTMLIFrameElement[JC] def before(nodes: Node | String*): Unit
HTMLIFrameElement[JC] def blur(): Unit
HTMLIFrameElement[JC] var border: String
HTMLIFrameElement[JC] def childElementCount: Int
HTMLIFrameElement[JC] def childNodes: NodeList[Node]
HTMLIFrameElement[JC] def children: HTMLCollection[Element]
HTMLIFrameElement[JC] var classList: DOMTokenList
HTMLIFrameElement[JC] var className: String
HTMLIFrameElement[JC] def click(): Unit
HTMLIFrameElement[JC] def clientHeight: Int
HTMLIFrameElement[JC] def clientLeft: Int
HTMLIFrameElement[JC] def clientTop: Int
HTMLIFrameElement[JC] def clientWidth: Int
HTMLIFrameElement[JC] def cloneNode(deep: Boolean?): Node
HTMLIFrameElement[JC] def closest(selector: String): Element
HTMLIFrameElement[JC] def compareDocumentPosition(other: Node): Int
HTMLIFrameElement[JC] def contains(child: HTMLElement): Boolean
HTMLIFrameElement[JC] def contains(otherNode: Node): Boolean
HTMLIFrameElement[JC] def contentDocument: Document
HTMLIFrameElement[JC] var contentEditable: String
HTMLIFrameElement[JC] def contentWindow: Window
HTMLIFrameElement[JC] def dataset: js.Dictionary[String]
HTMLIFrameElement[JC] var dir: String
HTMLIFrameElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLIFrameElement[JC] var draggable: Boolean
HTMLIFrameElement[JC] var filters: Object
HTMLIFrameElement[JC] def firstChild: Node
HTMLIFrameElement[JC] def firstElementChild: Element
HTMLIFrameElement[JC] def focus(): Unit
HTMLIFrameElement[JC] def focus(options: FocusOptions): Unit
HTMLIFrameElement[JC] def getAttribute(name: String): String
HTMLIFrameElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLIFrameElement[JC] def getAttributeNode(name: String): Attr
HTMLIFrameElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLIFrameElement[JC] def getBoundingClientRect(): DOMRect
HTMLIFrameElement[JC] def getClientRects(): DOMRectList
HTMLIFrameElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLIFrameElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLIFrameElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLIFrameElement[JC] def getSVGDocument(): Document
HTMLIFrameElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLIFrameElement[JC] def hasAttribute(name: String): Boolean
HTMLIFrameElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLIFrameElement[JC] def hasAttributes(): Boolean
HTMLIFrameElement[JC] def hasChildNodes(): Boolean
HTMLIFrameElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLIFrameElement[JC] var height: String
HTMLIFrameElement[JC] var id: String
HTMLIFrameElement[JC] var innerHTML: String
HTMLIFrameElement[JC] var innerText: String
HTMLIFrameElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLIFrameElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLIFrameElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLIFrameElement[JC] def isConnected: Boolean
HTMLIFrameElement[JC] def isContentEditable: Boolean
HTMLIFrameElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLIFrameElement[JC] def isEqualNode(arg: Node): Boolean
HTMLIFrameElement[JC] def isSameNode(other: Node): Boolean
HTMLIFrameElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLIFrameElement[JC] var lang: String
HTMLIFrameElement[JC] def lastChild: Node
HTMLIFrameElement[JC] def lastElementChild: Element
HTMLIFrameElement[JC] def localName: String
HTMLIFrameElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLIFrameElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLIFrameElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLIFrameElement[JC] def matches(selector: String): Boolean
HTMLIFrameElement[JC] var name: String
HTMLIFrameElement[JC] def namespaceURI: String
HTMLIFrameElement[JC] def nextElementSibling: Element
HTMLIFrameElement[JC] def nextSibling: Node
HTMLIFrameElement[JC] def nodeName: String
HTMLIFrameElement[JC] def nodeType: Int
HTMLIFrameElement[JC] var nodeValue: String
HTMLIFrameElement[JC] def normalize(): Unit
HTMLIFrameElement[JC] def offsetHeight: Double
HTMLIFrameElement[JC] def offsetLeft: Double
HTMLIFrameElement[JC] def offsetParent: Element
HTMLIFrameElement[JC] def offsetTop: Double
HTMLIFrameElement[JC] def offsetWidth: Double
HTMLIFrameElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLIFrameElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLIFrameElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLIFrameElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLIFrameElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLIFrameElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLIFrameElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLIFrameElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLIFrameElement[JC] var oncanplay: js.Function1[Event, _]
HTMLIFrameElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLIFrameElement[JC] var onchange: js.Function1[Event, _]
HTMLIFrameElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLIFrameElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLIFrameElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLIFrameElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLIFrameElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLIFrameElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLIFrameElement[JC] var oncuechange: js.Function1[Event, _]
HTMLIFrameElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLIFrameElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLIFrameElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLIFrameElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLIFrameElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLIFrameElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLIFrameElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLIFrameElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLIFrameElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLIFrameElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLIFrameElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLIFrameElement[JC] var onemptied: js.Function1[Event, _]
HTMLIFrameElement[JC] var onended: js.Function1[Event, _]
HTMLIFrameElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLIFrameElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLIFrameElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLIFrameElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLIFrameElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLIFrameElement[JC] var onhelp: js.Function1[Event, _]
HTMLIFrameElement[JC] var oninput: js.Function1[Event, _]
HTMLIFrameElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLIFrameElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLIFrameElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLIFrameElement[JC] var onload: js.Function1[Event, _]
HTMLIFrameElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLIFrameElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLIFrameElement[JC] var onloadstart: js.Function1[Event, _]
HTMLIFrameElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLIFrameElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLIFrameElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLIFrameElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLIFrameElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLIFrameElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLIFrameElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLIFrameElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLIFrameElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLIFrameElement[JC] var onpause: js.Function1[Event, _]
HTMLIFrameElement[JC] var onplay: js.Function1[Event, _]
HTMLIFrameElement[JC] var onplaying: js.Function1[Event, _]
HTMLIFrameElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLIFrameElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLIFrameElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLIFrameElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLIFrameElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLIFrameElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLIFrameElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLIFrameElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLIFrameElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLIFrameElement[JC] var onratechange: js.Function1[Event, _]
HTMLIFrameElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLIFrameElement[JC] var onreset: js.Function1[Event, _]
HTMLIFrameElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLIFrameElement[JC] var onseeked: js.Function1[Event, _]
HTMLIFrameElement[JC] var onseeking: js.Function1[Event, _]
HTMLIFrameElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLIFrameElement[JC] var onselectstart: js.Function1[Event, _]
HTMLIFrameElement[JC] var onstalled: js.Function1[Event, _]
HTMLIFrameElement[JC] var onsubmit: js.Function1[Event, _]
HTMLIFrameElement[JC] var onsuspend: js.Function1[Event, _]
HTMLIFrameElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLIFrameElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLIFrameElement[JC] var onwaiting: js.Function1[Event, _]
HTMLIFrameElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLIFrameElement[JC] var outerHTML: String
HTMLIFrameElement[JC] def ownerDocument: Document
HTMLIFrameElement[JC] override def ownerDocument: HTMLDocument
HTMLIFrameElement[JC] var parentElement: HTMLElement
HTMLIFrameElement[JC] def parentNode: Node
HTMLIFrameElement[JC] def prefix: String
HTMLIFrameElement[JC] def prepend(nodes: Node | String*): Unit
HTMLIFrameElement[JC] def previousElementSibling: Element
HTMLIFrameElement[JC] def previousSibling: Node
HTMLIFrameElement[JC] def querySelector(selectors: String): Element
HTMLIFrameElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLIFrameElement[JC] var readyState: js.Any
HTMLIFrameElement[JC] var recordNumber: js.Any
HTMLIFrameElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLIFrameElement[JC] def remove(): Unit
HTMLIFrameElement[JC] def removeAttribute(name: String): Unit
HTMLIFrameElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLIFrameElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLIFrameElement[JC] def removeChild(oldChild: Node): Node
HTMLIFrameElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLIFrameElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLIFrameElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLIFrameElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLIFrameElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLIFrameElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLIFrameElement[JC] def requestPointerLock(): Unit
HTMLIFrameElement[JC] var sandbox: DOMSettableTokenList
HTMLIFrameElement[JC] def scrollHeight: Int
HTMLIFrameElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLIFrameElement[JC] var scrollLeft: Double
HTMLIFrameElement[JC] var scrollTop: Double
HTMLIFrameElement[JC] def scrollWidth: Int
HTMLIFrameElement[JC] var security: js.Any
HTMLIFrameElement[JC] def setAttribute(name: String, value: String): Unit
HTMLIFrameElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLIFrameElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLIFrameElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLIFrameElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLIFrameElement[JC] def shadowRoot: ShadowRoot
HTMLIFrameElement[JC] var spellcheck: Boolean
HTMLIFrameElement[JC] var src: String
HTMLIFrameElement[JC] def style: CSSStyleDeclaration
HTMLIFrameElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLIFrameElement[JC] def style_ = (value: String): Unit
HTMLIFrameElement[JC] var tabIndex: Int
HTMLIFrameElement[JC] def tagName: String
HTMLIFrameElement[JC] var textContent: String
HTMLIFrameElement[JC] var title: String
HTMLIFrameElement[JC] var width: String
HTMLImageElement[JC] var accessKey: String
HTMLImageElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLImageElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLImageElement[JC] def after(nodes: Node | String*): Unit
HTMLImageElement[JC] var alt: String
HTMLImageElement[JC] def append(nodes: Node | String*): Unit
HTMLImageElement[JC] def appendChild(newChild: Node): Node
HTMLImageElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLImageElement[JC] def attributes: NamedNodeMap
HTMLImageElement[JC] def baseURI: String
HTMLImageElement[JC] def before(nodes: Node | String*): Unit
HTMLImageElement[JC] def blur(): Unit
HTMLImageElement[JC] def childElementCount: Int
HTMLImageElement[JC] def childNodes: NodeList[Node]
HTMLImageElement[JC] def children: HTMLCollection[Element]
HTMLImageElement[JC] var classList: DOMTokenList
HTMLImageElement[JC] var className: String
HTMLImageElement[JC] def click(): Unit
HTMLImageElement[JC] def clientHeight: Int
HTMLImageElement[JC] def clientLeft: Int
HTMLImageElement[JC] def clientTop: Int
HTMLImageElement[JC] def clientWidth: Int
HTMLImageElement[JC] def cloneNode(deep: Boolean?): Node
HTMLImageElement[JC] def closest(selector: String): Element
HTMLImageElement[JC] def compareDocumentPosition(other: Node): Int
HTMLImageElement[JC] def complete: Boolean
HTMLImageElement[JC] def contains(child: HTMLElement): Boolean
HTMLImageElement[JC] def contains(otherNode: Node): Boolean
HTMLImageElement[JC] var contentEditable: String
HTMLImageElement[JC] def currentSrc: String
HTMLImageElement[JC] def dataset: js.Dictionary[String]
HTMLImageElement[JC] var dir: String
HTMLImageElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLImageElement[JC] var draggable: Boolean
HTMLImageElement[JC] var filters: Object
HTMLImageElement[JC] def firstChild: Node
HTMLImageElement[JC] def firstElementChild: Element
HTMLImageElement[JC] def focus(): Unit
HTMLImageElement[JC] def focus(options: FocusOptions): Unit
HTMLImageElement[JC] def getAttribute(name: String): String
HTMLImageElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLImageElement[JC] def getAttributeNode(name: String): Attr
HTMLImageElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLImageElement[JC] def getBoundingClientRect(): DOMRect
HTMLImageElement[JC] def getClientRects(): DOMRectList
HTMLImageElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLImageElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLImageElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLImageElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLImageElement[JC] def hasAttribute(name: String): Boolean
HTMLImageElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLImageElement[JC] def hasAttributes(): Boolean
HTMLImageElement[JC] def hasChildNodes(): Boolean
HTMLImageElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLImageElement[JC] var height: Int
HTMLImageElement[JC] var href: String
HTMLImageElement[JC] var id: String
HTMLImageElement[JC] var innerHTML: String
HTMLImageElement[JC] var innerText: String
HTMLImageElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLImageElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLImageElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLImageElement[JC] def isConnected: Boolean
HTMLImageElement[JC] def isContentEditable: Boolean
HTMLImageElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLImageElement[JC] def isEqualNode(arg: Node): Boolean
HTMLImageElement[JC] var isMap: Boolean
HTMLImageElement[JC] def isSameNode(other: Node): Boolean
HTMLImageElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLImageElement[JC] var lang: String
HTMLImageElement[JC] def lastChild: Node
HTMLImageElement[JC] def lastElementChild: Element
HTMLImageElement[JC] var loading: LazyLoadingState
HTMLImageElement[JC] def localName: String
HTMLImageElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLImageElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLImageElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLImageElement[JC] def matches(selector: String): Boolean
HTMLImageElement[JC] def namespaceURI: String
HTMLImageElement[JC] var naturalHeight: Int
HTMLImageElement[JC] var naturalWidth: Int
HTMLImageElement[JC] def nextElementSibling: Element
HTMLImageElement[JC] def nextSibling: Node
HTMLImageElement[JC] def nodeName: String
HTMLImageElement[JC] def nodeType: Int
HTMLImageElement[JC] var nodeValue: String
HTMLImageElement[JC] def normalize(): Unit
HTMLImageElement[JC] def offsetHeight: Double
HTMLImageElement[JC] def offsetLeft: Double
HTMLImageElement[JC] def offsetParent: Element
HTMLImageElement[JC] def offsetTop: Double
HTMLImageElement[JC] def offsetWidth: Double
HTMLImageElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLImageElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLImageElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLImageElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLImageElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLImageElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLImageElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLImageElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLImageElement[JC] var oncanplay: js.Function1[Event, _]
HTMLImageElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLImageElement[JC] var onchange: js.Function1[Event, _]
HTMLImageElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLImageElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLImageElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLImageElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLImageElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLImageElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLImageElement[JC] var oncuechange: js.Function1[Event, _]
HTMLImageElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLImageElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLImageElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLImageElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLImageElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLImageElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLImageElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLImageElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLImageElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLImageElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLImageElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLImageElement[JC] var onemptied: js.Function1[Event, _]
HTMLImageElement[JC] var onended: js.Function1[Event, _]
HTMLImageElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLImageElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLImageElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLImageElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLImageElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLImageElement[JC] var onhelp: js.Function1[Event, _]
HTMLImageElement[JC] var oninput: js.Function1[Event, _]
HTMLImageElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLImageElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLImageElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLImageElement[JC] var onload: js.Function1[Event, _]
HTMLImageElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLImageElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLImageElement[JC] var onloadstart: js.Function1[Event, _]
HTMLImageElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLImageElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLImageElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLImageElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLImageElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLImageElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLImageElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLImageElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLImageElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLImageElement[JC] var onpause: js.Function1[Event, _]
HTMLImageElement[JC] var onplay: js.Function1[Event, _]
HTMLImageElement[JC] var onplaying: js.Function1[Event, _]
HTMLImageElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLImageElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLImageElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLImageElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLImageElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLImageElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLImageElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLImageElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLImageElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLImageElement[JC] var onratechange: js.Function1[Event, _]
HTMLImageElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLImageElement[JC] var onreset: js.Function1[Event, _]
HTMLImageElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLImageElement[JC] var onseeked: js.Function1[Event, _]
HTMLImageElement[JC] var onseeking: js.Function1[Event, _]
HTMLImageElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLImageElement[JC] var onselectstart: js.Function1[Event, _]
HTMLImageElement[JC] var onstalled: js.Function1[Event, _]
HTMLImageElement[JC] var onsubmit: js.Function1[Event, _]
HTMLImageElement[JC] var onsuspend: js.Function1[Event, _]
HTMLImageElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLImageElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLImageElement[JC] var onwaiting: js.Function1[Event, _]
HTMLImageElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLImageElement[JC] var outerHTML: String
HTMLImageElement[JC] def ownerDocument: Document
HTMLImageElement[JC] override def ownerDocument: HTMLDocument
HTMLImageElement[JC] var parentElement: HTMLElement
HTMLImageElement[JC] def parentNode: Node
HTMLImageElement[JC] def prefix: String
HTMLImageElement[JC] def prepend(nodes: Node | String*): Unit
HTMLImageElement[JC] def previousElementSibling: Element
HTMLImageElement[JC] def previousSibling: Node
HTMLImageElement[JC] def querySelector(selectors: String): Element
HTMLImageElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLImageElement[JC] var readyState: js.Any
HTMLImageElement[JC] var recordNumber: js.Any
HTMLImageElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLImageElement[JC] def remove(): Unit
HTMLImageElement[JC] def removeAttribute(name: String): Unit
HTMLImageElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLImageElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLImageElement[JC] def removeChild(oldChild: Node): Node
HTMLImageElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLImageElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLImageElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLImageElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLImageElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLImageElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLImageElement[JC] def requestPointerLock(): Unit
HTMLImageElement[JC] def scrollHeight: Int
HTMLImageElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLImageElement[JC] var scrollLeft: Double
HTMLImageElement[JC] var scrollTop: Double
HTMLImageElement[JC] def scrollWidth: Int
HTMLImageElement[JC] def setAttribute(name: String, value: String): Unit
HTMLImageElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLImageElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLImageElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLImageElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLImageElement[JC] def shadowRoot: ShadowRoot
HTMLImageElement[JC] var sizes: String
HTMLImageElement[JC] var spellcheck: Boolean
HTMLImageElement[JC] var src: String
HTMLImageElement[JC] var srcset: String
HTMLImageElement[JC] def style: CSSStyleDeclaration
HTMLImageElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLImageElement[JC] def style_ = (value: String): Unit
HTMLImageElement[JC] var tabIndex: Int
HTMLImageElement[JC] def tagName: String
HTMLImageElement[JC] var textContent: String
HTMLImageElement[JC] var title: String
HTMLImageElement[JC] var useMap: String
HTMLImageElement[JC] var width: Int
HTMLImageElement[JC] def x: Int
HTMLImageElement[JC] def y: Int
HTMLInputElement[JC] var accept: String
HTMLInputElement[JC] var accessKey: String
HTMLInputElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLInputElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLInputElement[JC] def after(nodes: Node | String*): Unit
HTMLInputElement[JC] var alt: String
HTMLInputElement[JC] def append(nodes: Node | String*): Unit
HTMLInputElement[JC] def appendChild(newChild: Node): Node
HTMLInputElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLInputElement[JC] def attributes: NamedNodeMap
HTMLInputElement[JC] var autocomplete: String
HTMLInputElement[JC] var autofocus: Boolean
HTMLInputElement[JC] def baseURI: String
HTMLInputElement[JC] def before(nodes: Node | String*): Unit
HTMLInputElement[JC] def blur(): Unit
HTMLInputElement[JC] def checkValidity(): Boolean
HTMLInputElement[JC] var checked: Boolean
HTMLInputElement[JC] def childElementCount: Int
HTMLInputElement[JC] def childNodes: NodeList[Node]
HTMLInputElement[JC] def children: HTMLCollection[Element]
HTMLInputElement[JC] var classList: DOMTokenList
HTMLInputElement[JC] var className: String
HTMLInputElement[JC] def click(): Unit
HTMLInputElement[JC] def clientHeight: Int
HTMLInputElement[JC] def clientLeft: Int
HTMLInputElement[JC] def clientTop: Int
HTMLInputElement[JC] def clientWidth: Int
HTMLInputElement[JC] def cloneNode(deep: Boolean?): Node
HTMLInputElement[JC] def closest(selector: String): Element
HTMLInputElement[JC] def compareDocumentPosition(other: Node): Int
HTMLInputElement[JC] def contains(child: HTMLElement): Boolean
HTMLInputElement[JC] def contains(otherNode: Node): Boolean
HTMLInputElement[JC] var contentEditable: String
HTMLInputElement[JC] def dataset: js.Dictionary[String]
HTMLInputElement[JC] var defaultChecked: Boolean
HTMLInputElement[JC] var defaultValue: String
HTMLInputElement[JC] var dir: String
HTMLInputElement[JC] var disabled: Boolean
HTMLInputElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLInputElement[JC] var draggable: Boolean
HTMLInputElement[JC] var files: FileList
HTMLInputElement[JC] var filters: Object
HTMLInputElement[JC] def firstChild: Node
HTMLInputElement[JC] def firstElementChild: Element
HTMLInputElement[JC] def focus(): Unit
HTMLInputElement[JC] def focus(options: FocusOptions): Unit
HTMLInputElement[JC] def form: HTMLFormElement
HTMLInputElement[JC] var formAction: String
HTMLInputElement[JC] var formEnctype: String
HTMLInputElement[JC] var formMethod: String
HTMLInputElement[JC] var formNoValidate: String
HTMLInputElement[JC] var formTarget: String
HTMLInputElement[JC] def getAttribute(name: String): String
HTMLInputElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLInputElement[JC] def getAttributeNode(name: String): Attr
HTMLInputElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLInputElement[JC] def getBoundingClientRect(): DOMRect
HTMLInputElement[JC] def getClientRects(): DOMRectList
HTMLInputElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLInputElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLInputElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLInputElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLInputElement[JC] def hasAttribute(name: String): Boolean
HTMLInputElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLInputElement[JC] def hasAttributes(): Boolean
HTMLInputElement[JC] def hasChildNodes(): Boolean
HTMLInputElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLInputElement[JC] var height: String
HTMLInputElement[JC] var id: String
HTMLInputElement[JC] var indeterminate: Boolean
HTMLInputElement[JC] var innerHTML: String
HTMLInputElement[JC] var innerText: String
HTMLInputElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLInputElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLInputElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLInputElement[JC] def isConnected: Boolean
HTMLInputElement[JC] def isContentEditable: Boolean
HTMLInputElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLInputElement[JC] def isEqualNode(arg: Node): Boolean
HTMLInputElement[JC] def isSameNode(other: Node): Boolean
HTMLInputElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLInputElement[JC] var lang: String
HTMLInputElement[JC] def lastChild: Node
HTMLInputElement[JC] def lastElementChild: Element
HTMLInputElement[JC] var list: HTMLElement
HTMLInputElement[JC] def localName: String
HTMLInputElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLInputElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLInputElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLInputElement[JC] def matches(selector: String): Boolean
HTMLInputElement[JC] var max: String
HTMLInputElement[JC] var maxLength: Int
HTMLInputElement[JC] var min: String
HTMLInputElement[JC] var multiple: Boolean
HTMLInputElement[JC] var name: String
HTMLInputElement[JC] def namespaceURI: String
HTMLInputElement[JC] def nextElementSibling: Element
HTMLInputElement[JC] def nextSibling: Node
HTMLInputElement[JC] def nodeName: String
HTMLInputElement[JC] def nodeType: Int
HTMLInputElement[JC] var nodeValue: String
HTMLInputElement[JC] def normalize(): Unit
HTMLInputElement[JC] def offsetHeight: Double
HTMLInputElement[JC] def offsetLeft: Double
HTMLInputElement[JC] def offsetParent: Element
HTMLInputElement[JC] def offsetTop: Double
HTMLInputElement[JC] def offsetWidth: Double
HTMLInputElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLInputElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLInputElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLInputElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLInputElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLInputElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLInputElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLInputElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLInputElement[JC] var oncanplay: js.Function1[Event, _]
HTMLInputElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLInputElement[JC] var onchange: js.Function1[Event, _]
HTMLInputElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLInputElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLInputElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLInputElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLInputElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLInputElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLInputElement[JC] var oncuechange: js.Function1[Event, _]
HTMLInputElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLInputElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLInputElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLInputElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLInputElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLInputElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLInputElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLInputElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLInputElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLInputElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLInputElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLInputElement[JC] var onemptied: js.Function1[Event, _]
HTMLInputElement[JC] var onended: js.Function1[Event, _]
HTMLInputElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLInputElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLInputElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLInputElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLInputElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLInputElement[JC] var onhelp: js.Function1[Event, _]
HTMLInputElement[JC] var oninput: js.Function1[Event, _]
HTMLInputElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLInputElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLInputElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLInputElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLInputElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLInputElement[JC] var onloadstart: js.Function1[Event, _]
HTMLInputElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLInputElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLInputElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLInputElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLInputElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLInputElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLInputElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLInputElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLInputElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLInputElement[JC] var onpause: js.Function1[Event, _]
HTMLInputElement[JC] var onplay: js.Function1[Event, _]
HTMLInputElement[JC] var onplaying: js.Function1[Event, _]
HTMLInputElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLInputElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLInputElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLInputElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLInputElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLInputElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLInputElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLInputElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLInputElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLInputElement[JC] var onratechange: js.Function1[Event, _]
HTMLInputElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLInputElement[JC] var onreset: js.Function1[Event, _]
HTMLInputElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLInputElement[JC] var onseeked: js.Function1[Event, _]
HTMLInputElement[JC] var onseeking: js.Function1[Event, _]
HTMLInputElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLInputElement[JC] var onselectstart: js.Function1[Event, _]
HTMLInputElement[JC] var onstalled: js.Function1[Event, _]
HTMLInputElement[JC] var onsubmit: js.Function1[Event, _]
HTMLInputElement[JC] var onsuspend: js.Function1[Event, _]
HTMLInputElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLInputElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLInputElement[JC] var onwaiting: js.Function1[Event, _]
HTMLInputElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLInputElement[JC] var outerHTML: String
HTMLInputElement[JC] def ownerDocument: Document
HTMLInputElement[JC] override def ownerDocument: HTMLDocument
HTMLInputElement[JC] var parentElement: HTMLElement
HTMLInputElement[JC] def parentNode: Node
HTMLInputElement[JC] var pattern: String
HTMLInputElement[JC] var placeholder: String
HTMLInputElement[JC] def prefix: String
HTMLInputElement[JC] def prepend(nodes: Node | String*): Unit
HTMLInputElement[JC] def previousElementSibling: Element
HTMLInputElement[JC] def previousSibling: Node
HTMLInputElement[JC] def querySelector(selectors: String): Element
HTMLInputElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLInputElement[JC] var readOnly: Boolean
HTMLInputElement[JC] var readyState: js.Any
HTMLInputElement[JC] var recordNumber: js.Any
HTMLInputElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLInputElement[JC] def remove(): Unit
HTMLInputElement[JC] def removeAttribute(name: String): Unit
HTMLInputElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLInputElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLInputElement[JC] def removeChild(oldChild: Node): Node
HTMLInputElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLInputElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLInputElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLInputElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLInputElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLInputElement[JC] def reportValidity(): Boolean
HTMLInputElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLInputElement[JC] def requestPointerLock(): Unit
HTMLInputElement[JC] var required: Boolean
HTMLInputElement[JC] def scrollHeight: Int
HTMLInputElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLInputElement[JC] var scrollLeft: Double
HTMLInputElement[JC] var scrollTop: Double
HTMLInputElement[JC] def scrollWidth: Int
HTMLInputElement[JC] def select(): Unit
HTMLInputElement[JC] var selectionEnd: Int
HTMLInputElement[JC] var selectionStart: Int
HTMLInputElement[JC] def setAttribute(name: String, value: String): Unit
HTMLInputElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLInputElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLInputElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLInputElement[JC] def setCustomValidity(error: String): Unit
HTMLInputElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLInputElement[JC] def setSelectionRange(start: Int, end: Int): Unit
HTMLInputElement[JC] def shadowRoot: ShadowRoot
HTMLInputElement[JC] var size: Int
HTMLInputElement[JC] var spellcheck: Boolean
HTMLInputElement[JC] var src: String
HTMLInputElement[JC] var status: Boolean
HTMLInputElement[JC] var step: String
HTMLInputElement[JC] def stepDown(n: Int?): Unit
HTMLInputElement[JC] def stepUp(n: Int?): Unit
HTMLInputElement[JC] def style: CSSStyleDeclaration
HTMLInputElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLInputElement[JC] def style_ = (value: String): Unit
HTMLInputElement[JC] var tabIndex: Int
HTMLInputElement[JC] def tagName: String
HTMLInputElement[JC] var textContent: String
HTMLInputElement[JC] var title: String
HTMLInputElement[JC] var `type`: String
HTMLInputElement[JC] def validationMessage: String
HTMLInputElement[JC] def validity: ValidityState
HTMLInputElement[JC] var value: String
HTMLInputElement[JC] var valueAsNumber: Double
HTMLInputElement[JC] var width: String
HTMLInputElement[JC] def willValidate: Boolean
HTMLLIElement[JC] var accessKey: String
HTMLLIElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLLIElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLLIElement[JC] def after(nodes: Node | String*): Unit
HTMLLIElement[JC] def append(nodes: Node | String*): Unit
HTMLLIElement[JC] def appendChild(newChild: Node): Node
HTMLLIElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLLIElement[JC] def attributes: NamedNodeMap
HTMLLIElement[JC] def baseURI: String
HTMLLIElement[JC] def before(nodes: Node | String*): Unit
HTMLLIElement[JC] def blur(): Unit
HTMLLIElement[JC] def childElementCount: Int
HTMLLIElement[JC] def childNodes: NodeList[Node]
HTMLLIElement[JC] def children: HTMLCollection[Element]
HTMLLIElement[JC] var classList: DOMTokenList
HTMLLIElement[JC] var className: String
HTMLLIElement[JC] def click(): Unit
HTMLLIElement[JC] def clientHeight: Int
HTMLLIElement[JC] def clientLeft: Int
HTMLLIElement[JC] def clientTop: Int
HTMLLIElement[JC] def clientWidth: Int
HTMLLIElement[JC] def cloneNode(deep: Boolean?): Node
HTMLLIElement[JC] def closest(selector: String): Element
HTMLLIElement[JC] def compareDocumentPosition(other: Node): Int
HTMLLIElement[JC] def contains(child: HTMLElement): Boolean
HTMLLIElement[JC] def contains(otherNode: Node): Boolean
HTMLLIElement[JC] var contentEditable: String
HTMLLIElement[JC] def dataset: js.Dictionary[String]
HTMLLIElement[JC] var dir: String
HTMLLIElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLLIElement[JC] var draggable: Boolean
HTMLLIElement[JC] var filters: Object
HTMLLIElement[JC] def firstChild: Node
HTMLLIElement[JC] def firstElementChild: Element
HTMLLIElement[JC] def focus(): Unit
HTMLLIElement[JC] def focus(options: FocusOptions): Unit
HTMLLIElement[JC] def getAttribute(name: String): String
HTMLLIElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLLIElement[JC] def getAttributeNode(name: String): Attr
HTMLLIElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLLIElement[JC] def getBoundingClientRect(): DOMRect
HTMLLIElement[JC] def getClientRects(): DOMRectList
HTMLLIElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLLIElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLLIElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLLIElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLLIElement[JC] def hasAttribute(name: String): Boolean
HTMLLIElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLLIElement[JC] def hasAttributes(): Boolean
HTMLLIElement[JC] def hasChildNodes(): Boolean
HTMLLIElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLLIElement[JC] var id: String
HTMLLIElement[JC] var innerHTML: String
HTMLLIElement[JC] var innerText: String
HTMLLIElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLLIElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLLIElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLLIElement[JC] def isConnected: Boolean
HTMLLIElement[JC] def isContentEditable: Boolean
HTMLLIElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLLIElement[JC] def isEqualNode(arg: Node): Boolean
HTMLLIElement[JC] def isSameNode(other: Node): Boolean
HTMLLIElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLLIElement[JC] var lang: String
HTMLLIElement[JC] def lastChild: Node
HTMLLIElement[JC] def lastElementChild: Element
HTMLLIElement[JC] def localName: String
HTMLLIElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLLIElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLLIElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLLIElement[JC] def matches(selector: String): Boolean
HTMLLIElement[JC] def namespaceURI: String
HTMLLIElement[JC] def nextElementSibling: Element
HTMLLIElement[JC] def nextSibling: Node
HTMLLIElement[JC] def nodeName: String
HTMLLIElement[JC] def nodeType: Int
HTMLLIElement[JC] var nodeValue: String
HTMLLIElement[JC] def normalize(): Unit
HTMLLIElement[JC] def offsetHeight: Double
HTMLLIElement[JC] def offsetLeft: Double
HTMLLIElement[JC] def offsetParent: Element
HTMLLIElement[JC] def offsetTop: Double
HTMLLIElement[JC] def offsetWidth: Double
HTMLLIElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLLIElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLLIElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLLIElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLLIElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLLIElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLLIElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLLIElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLLIElement[JC] var oncanplay: js.Function1[Event, _]
HTMLLIElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLLIElement[JC] var onchange: js.Function1[Event, _]
HTMLLIElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLLIElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLLIElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLLIElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLLIElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLLIElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLLIElement[JC] var oncuechange: js.Function1[Event, _]
HTMLLIElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLLIElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLLIElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLLIElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLLIElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLLIElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLLIElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLLIElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLLIElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLLIElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLLIElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLLIElement[JC] var onemptied: js.Function1[Event, _]
HTMLLIElement[JC] var onended: js.Function1[Event, _]
HTMLLIElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLLIElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLLIElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLLIElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLLIElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLLIElement[JC] var onhelp: js.Function1[Event, _]
HTMLLIElement[JC] var oninput: js.Function1[Event, _]
HTMLLIElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLLIElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLLIElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLLIElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLLIElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLLIElement[JC] var onloadstart: js.Function1[Event, _]
HTMLLIElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLLIElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLLIElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLLIElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLLIElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLLIElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLLIElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLLIElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLLIElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLLIElement[JC] var onpause: js.Function1[Event, _]
HTMLLIElement[JC] var onplay: js.Function1[Event, _]
HTMLLIElement[JC] var onplaying: js.Function1[Event, _]
HTMLLIElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLLIElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLLIElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLLIElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLLIElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLLIElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLLIElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLLIElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLLIElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLLIElement[JC] var onratechange: js.Function1[Event, _]
HTMLLIElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLLIElement[JC] var onreset: js.Function1[Event, _]
HTMLLIElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLLIElement[JC] var onseeked: js.Function1[Event, _]
HTMLLIElement[JC] var onseeking: js.Function1[Event, _]
HTMLLIElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLLIElement[JC] var onselectstart: js.Function1[Event, _]
HTMLLIElement[JC] var onstalled: js.Function1[Event, _]
HTMLLIElement[JC] var onsubmit: js.Function1[Event, _]
HTMLLIElement[JC] var onsuspend: js.Function1[Event, _]
HTMLLIElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLLIElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLLIElement[JC] var onwaiting: js.Function1[Event, _]
HTMLLIElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLLIElement[JC] var outerHTML: String
HTMLLIElement[JC] def ownerDocument: Document
HTMLLIElement[JC] override def ownerDocument: HTMLDocument
HTMLLIElement[JC] var parentElement: HTMLElement
HTMLLIElement[JC] def parentNode: Node
HTMLLIElement[JC] def prefix: String
HTMLLIElement[JC] def prepend(nodes: Node | String*): Unit
HTMLLIElement[JC] def previousElementSibling: Element
HTMLLIElement[JC] def previousSibling: Node
HTMLLIElement[JC] def querySelector(selectors: String): Element
HTMLLIElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLLIElement[JC] var readyState: js.Any
HTMLLIElement[JC] var recordNumber: js.Any
HTMLLIElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLLIElement[JC] def remove(): Unit
HTMLLIElement[JC] def removeAttribute(name: String): Unit
HTMLLIElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLLIElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLLIElement[JC] def removeChild(oldChild: Node): Node
HTMLLIElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLLIElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLLIElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLLIElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLLIElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLLIElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLLIElement[JC] def requestPointerLock(): Unit
HTMLLIElement[JC] def scrollHeight: Int
HTMLLIElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLLIElement[JC] var scrollLeft: Double
HTMLLIElement[JC] var scrollTop: Double
HTMLLIElement[JC] def scrollWidth: Int
HTMLLIElement[JC] def setAttribute(name: String, value: String): Unit
HTMLLIElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLLIElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLLIElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLLIElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLLIElement[JC] def shadowRoot: ShadowRoot
HTMLLIElement[JC] var spellcheck: Boolean
HTMLLIElement[JC] def style: CSSStyleDeclaration
HTMLLIElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLLIElement[JC] def style_ = (value: String): Unit
HTMLLIElement[JC] var tabIndex: Int
HTMLLIElement[JC] def tagName: String
HTMLLIElement[JC] var textContent: String
HTMLLIElement[JC] var title: String
HTMLLIElement[JC] var value: Int
HTMLLabelElement[JC] var accessKey: String
HTMLLabelElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLLabelElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLLabelElement[JC] def after(nodes: Node | String*): Unit
HTMLLabelElement[JC] def append(nodes: Node | String*): Unit
HTMLLabelElement[JC] def appendChild(newChild: Node): Node
HTMLLabelElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLLabelElement[JC] def attributes: NamedNodeMap
HTMLLabelElement[JC] def baseURI: String
HTMLLabelElement[JC] def before(nodes: Node | String*): Unit
HTMLLabelElement[JC] def blur(): Unit
HTMLLabelElement[JC] def childElementCount: Int
HTMLLabelElement[JC] def childNodes: NodeList[Node]
HTMLLabelElement[JC] def children: HTMLCollection[Element]
HTMLLabelElement[JC] var classList: DOMTokenList
HTMLLabelElement[JC] var className: String
HTMLLabelElement[JC] def click(): Unit
HTMLLabelElement[JC] def clientHeight: Int
HTMLLabelElement[JC] def clientLeft: Int
HTMLLabelElement[JC] def clientTop: Int
HTMLLabelElement[JC] def clientWidth: Int
HTMLLabelElement[JC] def cloneNode(deep: Boolean?): Node
HTMLLabelElement[JC] def closest(selector: String): Element
HTMLLabelElement[JC] def compareDocumentPosition(other: Node): Int
HTMLLabelElement[JC] def contains(child: HTMLElement): Boolean
HTMLLabelElement[JC] def contains(otherNode: Node): Boolean
HTMLLabelElement[JC] var contentEditable: String
HTMLLabelElement[JC] def dataset: js.Dictionary[String]
HTMLLabelElement[JC] var dir: String
HTMLLabelElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLLabelElement[JC] var draggable: Boolean
HTMLLabelElement[JC] var filters: Object
HTMLLabelElement[JC] def firstChild: Node
HTMLLabelElement[JC] def firstElementChild: Element
HTMLLabelElement[JC] def focus(): Unit
HTMLLabelElement[JC] def focus(options: FocusOptions): Unit
HTMLLabelElement[JC] def form: HTMLFormElement
HTMLLabelElement[JC] def getAttribute(name: String): String
HTMLLabelElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLLabelElement[JC] def getAttributeNode(name: String): Attr
HTMLLabelElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLLabelElement[JC] def getBoundingClientRect(): DOMRect
HTMLLabelElement[JC] def getClientRects(): DOMRectList
HTMLLabelElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLLabelElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLLabelElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLLabelElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLLabelElement[JC] def hasAttribute(name: String): Boolean
HTMLLabelElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLLabelElement[JC] def hasAttributes(): Boolean
HTMLLabelElement[JC] def hasChildNodes(): Boolean
HTMLLabelElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLLabelElement[JC] var htmlFor: String
HTMLLabelElement[JC] var id: String
HTMLLabelElement[JC] var innerHTML: String
HTMLLabelElement[JC] var innerText: String
HTMLLabelElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLLabelElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLLabelElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLLabelElement[JC] def isConnected: Boolean
HTMLLabelElement[JC] def isContentEditable: Boolean
HTMLLabelElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLLabelElement[JC] def isEqualNode(arg: Node): Boolean
HTMLLabelElement[JC] def isSameNode(other: Node): Boolean
HTMLLabelElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLLabelElement[JC] var lang: String
HTMLLabelElement[JC] def lastChild: Node
HTMLLabelElement[JC] def lastElementChild: Element
HTMLLabelElement[JC] def localName: String
HTMLLabelElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLLabelElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLLabelElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLLabelElement[JC] def matches(selector: String): Boolean
HTMLLabelElement[JC] def namespaceURI: String
HTMLLabelElement[JC] def nextElementSibling: Element
HTMLLabelElement[JC] def nextSibling: Node
HTMLLabelElement[JC] def nodeName: String
HTMLLabelElement[JC] def nodeType: Int
HTMLLabelElement[JC] var nodeValue: String
HTMLLabelElement[JC] def normalize(): Unit
HTMLLabelElement[JC] def offsetHeight: Double
HTMLLabelElement[JC] def offsetLeft: Double
HTMLLabelElement[JC] def offsetParent: Element
HTMLLabelElement[JC] def offsetTop: Double
HTMLLabelElement[JC] def offsetWidth: Double
HTMLLabelElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLLabelElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLLabelElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLLabelElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLLabelElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLLabelElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLLabelElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLLabelElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLLabelElement[JC] var oncanplay: js.Function1[Event, _]
HTMLLabelElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLLabelElement[JC] var onchange: js.Function1[Event, _]
HTMLLabelElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLLabelElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLLabelElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLLabelElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLLabelElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLLabelElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLLabelElement[JC] var oncuechange: js.Function1[Event, _]
HTMLLabelElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLLabelElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLLabelElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLLabelElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLLabelElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLLabelElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLLabelElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLLabelElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLLabelElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLLabelElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLLabelElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLLabelElement[JC] var onemptied: js.Function1[Event, _]
HTMLLabelElement[JC] var onended: js.Function1[Event, _]
HTMLLabelElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLLabelElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLLabelElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLLabelElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLLabelElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLLabelElement[JC] var onhelp: js.Function1[Event, _]
HTMLLabelElement[JC] var oninput: js.Function1[Event, _]
HTMLLabelElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLLabelElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLLabelElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLLabelElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLLabelElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLLabelElement[JC] var onloadstart: js.Function1[Event, _]
HTMLLabelElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLLabelElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLLabelElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLLabelElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLLabelElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLLabelElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLLabelElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLLabelElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLLabelElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLLabelElement[JC] var onpause: js.Function1[Event, _]
HTMLLabelElement[JC] var onplay: js.Function1[Event, _]
HTMLLabelElement[JC] var onplaying: js.Function1[Event, _]
HTMLLabelElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLLabelElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLLabelElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLLabelElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLLabelElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLLabelElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLLabelElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLLabelElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLLabelElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLLabelElement[JC] var onratechange: js.Function1[Event, _]
HTMLLabelElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLLabelElement[JC] var onreset: js.Function1[Event, _]
HTMLLabelElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLLabelElement[JC] var onseeked: js.Function1[Event, _]
HTMLLabelElement[JC] var onseeking: js.Function1[Event, _]
HTMLLabelElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLLabelElement[JC] var onselectstart: js.Function1[Event, _]
HTMLLabelElement[JC] var onstalled: js.Function1[Event, _]
HTMLLabelElement[JC] var onsubmit: js.Function1[Event, _]
HTMLLabelElement[JC] var onsuspend: js.Function1[Event, _]
HTMLLabelElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLLabelElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLLabelElement[JC] var onwaiting: js.Function1[Event, _]
HTMLLabelElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLLabelElement[JC] var outerHTML: String
HTMLLabelElement[JC] def ownerDocument: Document
HTMLLabelElement[JC] override def ownerDocument: HTMLDocument
HTMLLabelElement[JC] var parentElement: HTMLElement
HTMLLabelElement[JC] def parentNode: Node
HTMLLabelElement[JC] def prefix: String
HTMLLabelElement[JC] def prepend(nodes: Node | String*): Unit
HTMLLabelElement[JC] def previousElementSibling: Element
HTMLLabelElement[JC] def previousSibling: Node
HTMLLabelElement[JC] def querySelector(selectors: String): Element
HTMLLabelElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLLabelElement[JC] var readyState: js.Any
HTMLLabelElement[JC] var recordNumber: js.Any
HTMLLabelElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLLabelElement[JC] def remove(): Unit
HTMLLabelElement[JC] def removeAttribute(name: String): Unit
HTMLLabelElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLLabelElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLLabelElement[JC] def removeChild(oldChild: Node): Node
HTMLLabelElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLLabelElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLLabelElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLLabelElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLLabelElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLLabelElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLLabelElement[JC] def requestPointerLock(): Unit
HTMLLabelElement[JC] def scrollHeight: Int
HTMLLabelElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLLabelElement[JC] var scrollLeft: Double
HTMLLabelElement[JC] var scrollTop: Double
HTMLLabelElement[JC] def scrollWidth: Int
HTMLLabelElement[JC] def setAttribute(name: String, value: String): Unit
HTMLLabelElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLLabelElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLLabelElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLLabelElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLLabelElement[JC] def shadowRoot: ShadowRoot
HTMLLabelElement[JC] var spellcheck: Boolean
HTMLLabelElement[JC] def style: CSSStyleDeclaration
HTMLLabelElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLLabelElement[JC] def style_ = (value: String): Unit
HTMLLabelElement[JC] var tabIndex: Int
HTMLLabelElement[JC] def tagName: String
HTMLLabelElement[JC] var textContent: String
HTMLLabelElement[JC] var title: String
HTMLLegendElement[JC] var accessKey: String
HTMLLegendElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLLegendElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLLegendElement[JC] def after(nodes: Node | String*): Unit
HTMLLegendElement[JC] var align: String
HTMLLegendElement[JC] def append(nodes: Node | String*): Unit
HTMLLegendElement[JC] def appendChild(newChild: Node): Node
HTMLLegendElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLLegendElement[JC] def attributes: NamedNodeMap
HTMLLegendElement[JC] def baseURI: String
HTMLLegendElement[JC] def before(nodes: Node | String*): Unit
HTMLLegendElement[JC] def blur(): Unit
HTMLLegendElement[JC] def childElementCount: Int
HTMLLegendElement[JC] def childNodes: NodeList[Node]
HTMLLegendElement[JC] def children: HTMLCollection[Element]
HTMLLegendElement[JC] var classList: DOMTokenList
HTMLLegendElement[JC] var className: String
HTMLLegendElement[JC] def click(): Unit
HTMLLegendElement[JC] def clientHeight: Int
HTMLLegendElement[JC] def clientLeft: Int
HTMLLegendElement[JC] def clientTop: Int
HTMLLegendElement[JC] def clientWidth: Int
HTMLLegendElement[JC] def cloneNode(deep: Boolean?): Node
HTMLLegendElement[JC] def closest(selector: String): Element
HTMLLegendElement[JC] def compareDocumentPosition(other: Node): Int
HTMLLegendElement[JC] def contains(child: HTMLElement): Boolean
HTMLLegendElement[JC] def contains(otherNode: Node): Boolean
HTMLLegendElement[JC] var contentEditable: String
HTMLLegendElement[JC] def dataset: js.Dictionary[String]
HTMLLegendElement[JC] var dir: String
HTMLLegendElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLLegendElement[JC] var draggable: Boolean
HTMLLegendElement[JC] var filters: Object
HTMLLegendElement[JC] def firstChild: Node
HTMLLegendElement[JC] def firstElementChild: Element
HTMLLegendElement[JC] def focus(): Unit
HTMLLegendElement[JC] def focus(options: FocusOptions): Unit
HTMLLegendElement[JC] def form: HTMLFormElement
HTMLLegendElement[JC] def getAttribute(name: String): String
HTMLLegendElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLLegendElement[JC] def getAttributeNode(name: String): Attr
HTMLLegendElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLLegendElement[JC] def getBoundingClientRect(): DOMRect
HTMLLegendElement[JC] def getClientRects(): DOMRectList
HTMLLegendElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLLegendElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLLegendElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLLegendElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLLegendElement[JC] def hasAttribute(name: String): Boolean
HTMLLegendElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLLegendElement[JC] def hasAttributes(): Boolean
HTMLLegendElement[JC] def hasChildNodes(): Boolean
HTMLLegendElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLLegendElement[JC] var id: String
HTMLLegendElement[JC] var innerHTML: String
HTMLLegendElement[JC] var innerText: String
HTMLLegendElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLLegendElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLLegendElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLLegendElement[JC] def isConnected: Boolean
HTMLLegendElement[JC] def isContentEditable: Boolean
HTMLLegendElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLLegendElement[JC] def isEqualNode(arg: Node): Boolean
HTMLLegendElement[JC] def isSameNode(other: Node): Boolean
HTMLLegendElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLLegendElement[JC] var lang: String
HTMLLegendElement[JC] def lastChild: Node
HTMLLegendElement[JC] def lastElementChild: Element
HTMLLegendElement[JC] def localName: String
HTMLLegendElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLLegendElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLLegendElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLLegendElement[JC] def matches(selector: String): Boolean
HTMLLegendElement[JC] def namespaceURI: String
HTMLLegendElement[JC] def nextElementSibling: Element
HTMLLegendElement[JC] def nextSibling: Node
HTMLLegendElement[JC] def nodeName: String
HTMLLegendElement[JC] def nodeType: Int
HTMLLegendElement[JC] var nodeValue: String
HTMLLegendElement[JC] def normalize(): Unit
HTMLLegendElement[JC] def offsetHeight: Double
HTMLLegendElement[JC] def offsetLeft: Double
HTMLLegendElement[JC] def offsetParent: Element
HTMLLegendElement[JC] def offsetTop: Double
HTMLLegendElement[JC] def offsetWidth: Double
HTMLLegendElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLLegendElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLLegendElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLLegendElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLLegendElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLLegendElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLLegendElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLLegendElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLLegendElement[JC] var oncanplay: js.Function1[Event, _]
HTMLLegendElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLLegendElement[JC] var onchange: js.Function1[Event, _]
HTMLLegendElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLLegendElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLLegendElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLLegendElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLLegendElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLLegendElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLLegendElement[JC] var oncuechange: js.Function1[Event, _]
HTMLLegendElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLLegendElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLLegendElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLLegendElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLLegendElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLLegendElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLLegendElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLLegendElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLLegendElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLLegendElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLLegendElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLLegendElement[JC] var onemptied: js.Function1[Event, _]
HTMLLegendElement[JC] var onended: js.Function1[Event, _]
HTMLLegendElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLLegendElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLLegendElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLLegendElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLLegendElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLLegendElement[JC] var onhelp: js.Function1[Event, _]
HTMLLegendElement[JC] var oninput: js.Function1[Event, _]
HTMLLegendElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLLegendElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLLegendElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLLegendElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLLegendElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLLegendElement[JC] var onloadstart: js.Function1[Event, _]
HTMLLegendElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLLegendElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLLegendElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLLegendElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLLegendElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLLegendElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLLegendElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLLegendElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLLegendElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLLegendElement[JC] var onpause: js.Function1[Event, _]
HTMLLegendElement[JC] var onplay: js.Function1[Event, _]
HTMLLegendElement[JC] var onplaying: js.Function1[Event, _]
HTMLLegendElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLLegendElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLLegendElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLLegendElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLLegendElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLLegendElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLLegendElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLLegendElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLLegendElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLLegendElement[JC] var onratechange: js.Function1[Event, _]
HTMLLegendElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLLegendElement[JC] var onreset: js.Function1[Event, _]
HTMLLegendElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLLegendElement[JC] var onseeked: js.Function1[Event, _]
HTMLLegendElement[JC] var onseeking: js.Function1[Event, _]
HTMLLegendElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLLegendElement[JC] var onselectstart: js.Function1[Event, _]
HTMLLegendElement[JC] var onstalled: js.Function1[Event, _]
HTMLLegendElement[JC] var onsubmit: js.Function1[Event, _]
HTMLLegendElement[JC] var onsuspend: js.Function1[Event, _]
HTMLLegendElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLLegendElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLLegendElement[JC] var onwaiting: js.Function1[Event, _]
HTMLLegendElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLLegendElement[JC] var outerHTML: String
HTMLLegendElement[JC] def ownerDocument: Document
HTMLLegendElement[JC] override def ownerDocument: HTMLDocument
HTMLLegendElement[JC] var parentElement: HTMLElement
HTMLLegendElement[JC] def parentNode: Node
HTMLLegendElement[JC] def prefix: String
HTMLLegendElement[JC] def prepend(nodes: Node | String*): Unit
HTMLLegendElement[JC] def previousElementSibling: Element
HTMLLegendElement[JC] def previousSibling: Node
HTMLLegendElement[JC] def querySelector(selectors: String): Element
HTMLLegendElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLLegendElement[JC] var readyState: js.Any
HTMLLegendElement[JC] var recordNumber: js.Any
HTMLLegendElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLLegendElement[JC] def remove(): Unit
HTMLLegendElement[JC] def removeAttribute(name: String): Unit
HTMLLegendElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLLegendElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLLegendElement[JC] def removeChild(oldChild: Node): Node
HTMLLegendElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLLegendElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLLegendElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLLegendElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLLegendElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLLegendElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLLegendElement[JC] def requestPointerLock(): Unit
HTMLLegendElement[JC] def scrollHeight: Int
HTMLLegendElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLLegendElement[JC] var scrollLeft: Double
HTMLLegendElement[JC] var scrollTop: Double
HTMLLegendElement[JC] def scrollWidth: Int
HTMLLegendElement[JC] def setAttribute(name: String, value: String): Unit
HTMLLegendElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLLegendElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLLegendElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLLegendElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLLegendElement[JC] def shadowRoot: ShadowRoot
HTMLLegendElement[JC] var spellcheck: Boolean
HTMLLegendElement[JC] def style: CSSStyleDeclaration
HTMLLegendElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLLegendElement[JC] def style_ = (value: String): Unit
HTMLLegendElement[JC] var tabIndex: Int
HTMLLegendElement[JC] def tagName: String
HTMLLegendElement[JC] var textContent: String
HTMLLegendElement[JC] var title: String
HTMLLinkElement[JC] var accessKey: String
HTMLLinkElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLLinkElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLLinkElement[JC] def after(nodes: Node | String*): Unit
HTMLLinkElement[JC] def append(nodes: Node | String*): Unit
HTMLLinkElement[JC] def appendChild(newChild: Node): Node
HTMLLinkElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLLinkElement[JC] def attributes: NamedNodeMap
HTMLLinkElement[JC] def baseURI: String
HTMLLinkElement[JC] def before(nodes: Node | String*): Unit
HTMLLinkElement[JC] def blur(): Unit
HTMLLinkElement[JC] def childElementCount: Int
HTMLLinkElement[JC] def childNodes: NodeList[Node]
HTMLLinkElement[JC] def children: HTMLCollection[Element]
HTMLLinkElement[JC] var classList: DOMTokenList
HTMLLinkElement[JC] var className: String
HTMLLinkElement[JC] def click(): Unit
HTMLLinkElement[JC] def clientHeight: Int
HTMLLinkElement[JC] def clientLeft: Int
HTMLLinkElement[JC] def clientTop: Int
HTMLLinkElement[JC] def clientWidth: Int
HTMLLinkElement[JC] def cloneNode(deep: Boolean?): Node
HTMLLinkElement[JC] def closest(selector: String): Element
HTMLLinkElement[JC] def compareDocumentPosition(other: Node): Int
HTMLLinkElement[JC] def contains(child: HTMLElement): Boolean
HTMLLinkElement[JC] def contains(otherNode: Node): Boolean
HTMLLinkElement[JC] var contentEditable: String
HTMLLinkElement[JC] def dataset: js.Dictionary[String]
HTMLLinkElement[JC] var dir: String
HTMLLinkElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLLinkElement[JC] var draggable: Boolean
HTMLLinkElement[JC] var filters: Object
HTMLLinkElement[JC] def firstChild: Node
HTMLLinkElement[JC] def firstElementChild: Element
HTMLLinkElement[JC] def focus(): Unit
HTMLLinkElement[JC] def focus(options: FocusOptions): Unit
HTMLLinkElement[JC] def getAttribute(name: String): String
HTMLLinkElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLLinkElement[JC] def getAttributeNode(name: String): Attr
HTMLLinkElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLLinkElement[JC] def getBoundingClientRect(): DOMRect
HTMLLinkElement[JC] def getClientRects(): DOMRectList
HTMLLinkElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLLinkElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLLinkElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLLinkElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLLinkElement[JC] def hasAttribute(name: String): Boolean
HTMLLinkElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLLinkElement[JC] def hasAttributes(): Boolean
HTMLLinkElement[JC] def hasChildNodes(): Boolean
HTMLLinkElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLLinkElement[JC] var href: String
HTMLLinkElement[JC] var hreflang: String
HTMLLinkElement[JC] var id: String
HTMLLinkElement[JC] var innerHTML: String
HTMLLinkElement[JC] var innerText: String
HTMLLinkElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLLinkElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLLinkElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLLinkElement[JC] def isConnected: Boolean
HTMLLinkElement[JC] def isContentEditable: Boolean
HTMLLinkElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLLinkElement[JC] def isEqualNode(arg: Node): Boolean
HTMLLinkElement[JC] def isSameNode(other: Node): Boolean
HTMLLinkElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLLinkElement[JC] var lang: String
HTMLLinkElement[JC] def lastChild: Node
HTMLLinkElement[JC] def lastElementChild: Element
HTMLLinkElement[JC] def localName: String
HTMLLinkElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLLinkElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLLinkElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLLinkElement[JC] def matches(selector: String): Boolean
HTMLLinkElement[JC] var media: String
HTMLLinkElement[JC] def namespaceURI: String
HTMLLinkElement[JC] def nextElementSibling: Element
HTMLLinkElement[JC] def nextSibling: Node
HTMLLinkElement[JC] def nodeName: String
HTMLLinkElement[JC] def nodeType: Int
HTMLLinkElement[JC] var nodeValue: String
HTMLLinkElement[JC] def normalize(): Unit
HTMLLinkElement[JC] def offsetHeight: Double
HTMLLinkElement[JC] def offsetLeft: Double
HTMLLinkElement[JC] def offsetParent: Element
HTMLLinkElement[JC] def offsetTop: Double
HTMLLinkElement[JC] def offsetWidth: Double
HTMLLinkElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLLinkElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLLinkElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLLinkElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLLinkElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLLinkElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLLinkElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLLinkElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLLinkElement[JC] var oncanplay: js.Function1[Event, _]
HTMLLinkElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLLinkElement[JC] var onchange: js.Function1[Event, _]
HTMLLinkElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLLinkElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLLinkElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLLinkElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLLinkElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLLinkElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLLinkElement[JC] var oncuechange: js.Function1[Event, _]
HTMLLinkElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLLinkElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLLinkElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLLinkElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLLinkElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLLinkElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLLinkElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLLinkElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLLinkElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLLinkElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLLinkElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLLinkElement[JC] var onemptied: js.Function1[Event, _]
HTMLLinkElement[JC] var onended: js.Function1[Event, _]
HTMLLinkElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLLinkElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLLinkElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLLinkElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLLinkElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLLinkElement[JC] var onhelp: js.Function1[Event, _]
HTMLLinkElement[JC] var oninput: js.Function1[Event, _]
HTMLLinkElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLLinkElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLLinkElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLLinkElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLLinkElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLLinkElement[JC] var onloadstart: js.Function1[Event, _]
HTMLLinkElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLLinkElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLLinkElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLLinkElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLLinkElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLLinkElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLLinkElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLLinkElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLLinkElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLLinkElement[JC] var onpause: js.Function1[Event, _]
HTMLLinkElement[JC] var onplay: js.Function1[Event, _]
HTMLLinkElement[JC] var onplaying: js.Function1[Event, _]
HTMLLinkElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLLinkElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLLinkElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLLinkElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLLinkElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLLinkElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLLinkElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLLinkElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLLinkElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLLinkElement[JC] var onratechange: js.Function1[Event, _]
HTMLLinkElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLLinkElement[JC] var onreset: js.Function1[Event, _]
HTMLLinkElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLLinkElement[JC] var onseeked: js.Function1[Event, _]
HTMLLinkElement[JC] var onseeking: js.Function1[Event, _]
HTMLLinkElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLLinkElement[JC] var onselectstart: js.Function1[Event, _]
HTMLLinkElement[JC] var onstalled: js.Function1[Event, _]
HTMLLinkElement[JC] var onsubmit: js.Function1[Event, _]
HTMLLinkElement[JC] var onsuspend: js.Function1[Event, _]
HTMLLinkElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLLinkElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLLinkElement[JC] var onwaiting: js.Function1[Event, _]
HTMLLinkElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLLinkElement[JC] var outerHTML: String
HTMLLinkElement[JC] def ownerDocument: Document
HTMLLinkElement[JC] override def ownerDocument: HTMLDocument
HTMLLinkElement[JC] var parentElement: HTMLElement
HTMLLinkElement[JC] def parentNode: Node
HTMLLinkElement[JC] def prefix: String
HTMLLinkElement[JC] def prepend(nodes: Node | String*): Unit
HTMLLinkElement[JC] def previousElementSibling: Element
HTMLLinkElement[JC] def previousSibling: Node
HTMLLinkElement[JC] def querySelector(selectors: String): Element
HTMLLinkElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLLinkElement[JC] var readyState: js.Any
HTMLLinkElement[JC] var recordNumber: js.Any
HTMLLinkElement[JC] var rel: String
HTMLLinkElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLLinkElement[JC] def remove(): Unit
HTMLLinkElement[JC] def removeAttribute(name: String): Unit
HTMLLinkElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLLinkElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLLinkElement[JC] def removeChild(oldChild: Node): Node
HTMLLinkElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLLinkElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLLinkElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLLinkElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLLinkElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLLinkElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLLinkElement[JC] def requestPointerLock(): Unit
HTMLLinkElement[JC] var rev: String
HTMLLinkElement[JC] def scrollHeight: Int
HTMLLinkElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLLinkElement[JC] var scrollLeft: Double
HTMLLinkElement[JC] var scrollTop: Double
HTMLLinkElement[JC] def scrollWidth: Int
HTMLLinkElement[JC] def setAttribute(name: String, value: String): Unit
HTMLLinkElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLLinkElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLLinkElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLLinkElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLLinkElement[JC] def shadowRoot: ShadowRoot
HTMLLinkElement[JC] def sheet: StyleSheet
HTMLLinkElement[JC] var spellcheck: Boolean
HTMLLinkElement[JC] def style: CSSStyleDeclaration
HTMLLinkElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLLinkElement[JC] def style_ = (value: String): Unit
HTMLLinkElement[JC] var tabIndex: Int
HTMLLinkElement[JC] def tagName: String
HTMLLinkElement[JC] var target: String
HTMLLinkElement[JC] var textContent: String
HTMLLinkElement[JC] var title: String
HTMLLinkElement[JC] var `type`: String
HTMLMapElement[JC] var accessKey: String
HTMLMapElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLMapElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLMapElement[JC] def after(nodes: Node | String*): Unit
HTMLMapElement[JC] def append(nodes: Node | String*): Unit
HTMLMapElement[JC] def appendChild(newChild: Node): Node
HTMLMapElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLMapElement[JC] def attributes: NamedNodeMap
HTMLMapElement[JC] def baseURI: String
HTMLMapElement[JC] def before(nodes: Node | String*): Unit
HTMLMapElement[JC] def blur(): Unit
HTMLMapElement[JC] def childElementCount: Int
HTMLMapElement[JC] def childNodes: NodeList[Node]
HTMLMapElement[JC] def children: HTMLCollection[Element]
HTMLMapElement[JC] var classList: DOMTokenList
HTMLMapElement[JC] var className: String
HTMLMapElement[JC] def click(): Unit
HTMLMapElement[JC] def clientHeight: Int
HTMLMapElement[JC] def clientLeft: Int
HTMLMapElement[JC] def clientTop: Int
HTMLMapElement[JC] def clientWidth: Int
HTMLMapElement[JC] def cloneNode(deep: Boolean?): Node
HTMLMapElement[JC] def closest(selector: String): Element
HTMLMapElement[JC] def compareDocumentPosition(other: Node): Int
HTMLMapElement[JC] def contains(child: HTMLElement): Boolean
HTMLMapElement[JC] def contains(otherNode: Node): Boolean
HTMLMapElement[JC] var contentEditable: String
HTMLMapElement[JC] def dataset: js.Dictionary[String]
HTMLMapElement[JC] var dir: String
HTMLMapElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLMapElement[JC] var draggable: Boolean
HTMLMapElement[JC] var filters: Object
HTMLMapElement[JC] def firstChild: Node
HTMLMapElement[JC] def firstElementChild: Element
HTMLMapElement[JC] def focus(): Unit
HTMLMapElement[JC] def focus(options: FocusOptions): Unit
HTMLMapElement[JC] def getAttribute(name: String): String
HTMLMapElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLMapElement[JC] def getAttributeNode(name: String): Attr
HTMLMapElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLMapElement[JC] def getBoundingClientRect(): DOMRect
HTMLMapElement[JC] def getClientRects(): DOMRectList
HTMLMapElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLMapElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLMapElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLMapElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLMapElement[JC] def hasAttribute(name: String): Boolean
HTMLMapElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLMapElement[JC] def hasAttributes(): Boolean
HTMLMapElement[JC] def hasChildNodes(): Boolean
HTMLMapElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLMapElement[JC] var id: String
HTMLMapElement[JC] var innerHTML: String
HTMLMapElement[JC] var innerText: String
HTMLMapElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLMapElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLMapElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLMapElement[JC] def isConnected: Boolean
HTMLMapElement[JC] def isContentEditable: Boolean
HTMLMapElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLMapElement[JC] def isEqualNode(arg: Node): Boolean
HTMLMapElement[JC] def isSameNode(other: Node): Boolean
HTMLMapElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLMapElement[JC] var lang: String
HTMLMapElement[JC] def lastChild: Node
HTMLMapElement[JC] def lastElementChild: Element
HTMLMapElement[JC] def localName: String
HTMLMapElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLMapElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLMapElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLMapElement[JC] def matches(selector: String): Boolean
HTMLMapElement[JC] var name: String
HTMLMapElement[JC] def namespaceURI: String
HTMLMapElement[JC] def nextElementSibling: Element
HTMLMapElement[JC] def nextSibling: Node
HTMLMapElement[JC] def nodeName: String
HTMLMapElement[JC] def nodeType: Int
HTMLMapElement[JC] var nodeValue: String
HTMLMapElement[JC] def normalize(): Unit
HTMLMapElement[JC] def offsetHeight: Double
HTMLMapElement[JC] def offsetLeft: Double
HTMLMapElement[JC] def offsetParent: Element
HTMLMapElement[JC] def offsetTop: Double
HTMLMapElement[JC] def offsetWidth: Double
HTMLMapElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLMapElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLMapElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLMapElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLMapElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLMapElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLMapElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLMapElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLMapElement[JC] var oncanplay: js.Function1[Event, _]
HTMLMapElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLMapElement[JC] var onchange: js.Function1[Event, _]
HTMLMapElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLMapElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLMapElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLMapElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLMapElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLMapElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLMapElement[JC] var oncuechange: js.Function1[Event, _]
HTMLMapElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLMapElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLMapElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLMapElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLMapElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLMapElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLMapElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLMapElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLMapElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLMapElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLMapElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLMapElement[JC] var onemptied: js.Function1[Event, _]
HTMLMapElement[JC] var onended: js.Function1[Event, _]
HTMLMapElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLMapElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLMapElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLMapElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLMapElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLMapElement[JC] var onhelp: js.Function1[Event, _]
HTMLMapElement[JC] var oninput: js.Function1[Event, _]
HTMLMapElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLMapElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLMapElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLMapElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLMapElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLMapElement[JC] var onloadstart: js.Function1[Event, _]
HTMLMapElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLMapElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLMapElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLMapElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLMapElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLMapElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLMapElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLMapElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLMapElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLMapElement[JC] var onpause: js.Function1[Event, _]
HTMLMapElement[JC] var onplay: js.Function1[Event, _]
HTMLMapElement[JC] var onplaying: js.Function1[Event, _]
HTMLMapElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLMapElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLMapElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLMapElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLMapElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLMapElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLMapElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLMapElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLMapElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLMapElement[JC] var onratechange: js.Function1[Event, _]
HTMLMapElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLMapElement[JC] var onreset: js.Function1[Event, _]
HTMLMapElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLMapElement[JC] var onseeked: js.Function1[Event, _]
HTMLMapElement[JC] var onseeking: js.Function1[Event, _]
HTMLMapElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLMapElement[JC] var onselectstart: js.Function1[Event, _]
HTMLMapElement[JC] var onstalled: js.Function1[Event, _]
HTMLMapElement[JC] var onsubmit: js.Function1[Event, _]
HTMLMapElement[JC] var onsuspend: js.Function1[Event, _]
HTMLMapElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLMapElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLMapElement[JC] var onwaiting: js.Function1[Event, _]
HTMLMapElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLMapElement[JC] var outerHTML: String
HTMLMapElement[JC] def ownerDocument: Document
HTMLMapElement[JC] override def ownerDocument: HTMLDocument
HTMLMapElement[JC] var parentElement: HTMLElement
HTMLMapElement[JC] def parentNode: Node
HTMLMapElement[JC] def prefix: String
HTMLMapElement[JC] def prepend(nodes: Node | String*): Unit
HTMLMapElement[JC] def previousElementSibling: Element
HTMLMapElement[JC] def previousSibling: Node
HTMLMapElement[JC] def querySelector(selectors: String): Element
HTMLMapElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLMapElement[JC] var readyState: js.Any
HTMLMapElement[JC] var recordNumber: js.Any
HTMLMapElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLMapElement[JC] def remove(): Unit
HTMLMapElement[JC] def removeAttribute(name: String): Unit
HTMLMapElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLMapElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLMapElement[JC] def removeChild(oldChild: Node): Node
HTMLMapElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLMapElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLMapElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLMapElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLMapElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLMapElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLMapElement[JC] def requestPointerLock(): Unit
HTMLMapElement[JC] def scrollHeight: Int
HTMLMapElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLMapElement[JC] var scrollLeft: Double
HTMLMapElement[JC] var scrollTop: Double
HTMLMapElement[JC] def scrollWidth: Int
HTMLMapElement[JC] def setAttribute(name: String, value: String): Unit
HTMLMapElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLMapElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLMapElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLMapElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLMapElement[JC] def shadowRoot: ShadowRoot
HTMLMapElement[JC] var spellcheck: Boolean
HTMLMapElement[JC] def style: CSSStyleDeclaration
HTMLMapElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLMapElement[JC] def style_ = (value: String): Unit
HTMLMapElement[JC] var tabIndex: Int
HTMLMapElement[JC] def tagName: String
HTMLMapElement[JC] var textContent: String
HTMLMapElement[JC] var title: String
HTMLMediaElement[JC] var accessKey: String
HTMLMediaElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLMediaElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLMediaElement[JC] def after(nodes: Node | String*): Unit
HTMLMediaElement[JC] def append(nodes: Node | String*): Unit
HTMLMediaElement[JC] def appendChild(newChild: Node): Node
HTMLMediaElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLMediaElement[JC] def attributes: NamedNodeMap
HTMLMediaElement[JC] def audioTracks: AudioTrackList
HTMLMediaElement[JC] var autoplay: Boolean
HTMLMediaElement[JC] def baseURI: String
HTMLMediaElement[JC] def before(nodes: Node | String*): Unit
HTMLMediaElement[JC] def blur(): Unit
HTMLMediaElement[JC] def buffered: TimeRanges
HTMLMediaElement[JC] def canPlayType(`type`: String): String
HTMLMediaElement[JC] def childElementCount: Int
HTMLMediaElement[JC] def childNodes: NodeList[Node]
HTMLMediaElement[JC] def children: HTMLCollection[Element]
HTMLMediaElement[JC] var classList: DOMTokenList
HTMLMediaElement[JC] var className: String
HTMLMediaElement[JC] def click(): Unit
HTMLMediaElement[JC] def clientHeight: Int
HTMLMediaElement[JC] def clientLeft: Int
HTMLMediaElement[JC] def clientTop: Int
HTMLMediaElement[JC] def clientWidth: Int
HTMLMediaElement[JC] def cloneNode(deep: Boolean?): Node
HTMLMediaElement[JC] def closest(selector: String): Element
HTMLMediaElement[JC] def compareDocumentPosition(other: Node): Int
HTMLMediaElement[JC] def contains(child: HTMLElement): Boolean
HTMLMediaElement[JC] def contains(otherNode: Node): Boolean
HTMLMediaElement[JC] var contentEditable: String
HTMLMediaElement[JC] var controls: Boolean
HTMLMediaElement[JC] def currentSrc: String
HTMLMediaElement[JC] var currentTime: Double
HTMLMediaElement[JC] def dataset: js.Dictionary[String]
HTMLMediaElement[JC] var defaultPlaybackRate: Double
HTMLMediaElement[JC] var dir: String
HTMLMediaElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLMediaElement[JC] var draggable: Boolean
HTMLMediaElement[JC] def duration: Double
HTMLMediaElement[JC] def ended: Boolean
HTMLMediaElement[JC] def error: MediaError
HTMLMediaElement[JC] var filters: Object
HTMLMediaElement[JC] def firstChild: Node
HTMLMediaElement[JC] def firstElementChild: Element
HTMLMediaElement[JC] def focus(): Unit
HTMLMediaElement[JC] def focus(options: FocusOptions): Unit
HTMLMediaElement[JC] def getAttribute(name: String): String
HTMLMediaElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLMediaElement[JC] def getAttributeNode(name: String): Attr
HTMLMediaElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLMediaElement[JC] def getBoundingClientRect(): DOMRect
HTMLMediaElement[JC] def getClientRects(): DOMRectList
HTMLMediaElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLMediaElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLMediaElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLMediaElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLMediaElement[JC] def hasAttribute(name: String): Boolean
HTMLMediaElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLMediaElement[JC] def hasAttributes(): Boolean
HTMLMediaElement[JC] def hasChildNodes(): Boolean
HTMLMediaElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLMediaElement[JC] var id: String
HTMLMediaElement[JC] def initialTime: Double
HTMLMediaElement[JC] var innerHTML: String
HTMLMediaElement[JC] var innerText: String
HTMLMediaElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLMediaElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLMediaElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLMediaElement[JC] def isConnected: Boolean
HTMLMediaElement[JC] def isContentEditable: Boolean
HTMLMediaElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLMediaElement[JC] def isEqualNode(arg: Node): Boolean
HTMLMediaElement[JC] def isSameNode(other: Node): Boolean
HTMLMediaElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLMediaElement[JC] var lang: String
HTMLMediaElement[JC] def lastChild: Node
HTMLMediaElement[JC] def lastElementChild: Element
HTMLMediaElement[JC] def load(): Unit
HTMLMediaElement[JC] def localName: String
HTMLMediaElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLMediaElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLMediaElement[JC] var loop: Boolean
HTMLMediaElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLMediaElement[JC] def matches(selector: String): Boolean
HTMLMediaElement[JC] var muted: Boolean
HTMLMediaElement[JC] def namespaceURI: String
HTMLMediaElement[JC] def networkState: Int
HTMLMediaElement[JC] def nextElementSibling: Element
HTMLMediaElement[JC] def nextSibling: Node
HTMLMediaElement[JC] def nodeName: String
HTMLMediaElement[JC] def nodeType: Int
HTMLMediaElement[JC] var nodeValue: String
HTMLMediaElement[JC] def normalize(): Unit
HTMLMediaElement[JC] def offsetHeight: Double
HTMLMediaElement[JC] def offsetLeft: Double
HTMLMediaElement[JC] def offsetParent: Element
HTMLMediaElement[JC] def offsetTop: Double
HTMLMediaElement[JC] def offsetWidth: Double
HTMLMediaElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLMediaElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLMediaElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLMediaElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLMediaElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLMediaElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLMediaElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLMediaElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLMediaElement[JC] var oncanplay: js.Function1[Event, _]
HTMLMediaElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLMediaElement[JC] var onchange: js.Function1[Event, _]
HTMLMediaElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLMediaElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLMediaElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLMediaElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLMediaElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLMediaElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLMediaElement[JC] var oncuechange: js.Function1[Event, _]
HTMLMediaElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLMediaElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLMediaElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLMediaElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLMediaElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLMediaElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLMediaElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLMediaElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLMediaElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLMediaElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLMediaElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLMediaElement[JC] var onemptied: js.Function1[Event, _]
HTMLMediaElement[JC] var onended: js.Function1[Event, _]
HTMLMediaElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLMediaElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLMediaElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLMediaElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLMediaElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLMediaElement[JC] var onhelp: js.Function1[Event, _]
HTMLMediaElement[JC] var oninput: js.Function1[Event, _]
HTMLMediaElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLMediaElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLMediaElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLMediaElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLMediaElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLMediaElement[JC] var onloadstart: js.Function1[Event, _]
HTMLMediaElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLMediaElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLMediaElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLMediaElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLMediaElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLMediaElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLMediaElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLMediaElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLMediaElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLMediaElement[JC] var onpause: js.Function1[Event, _]
HTMLMediaElement[JC] var onplay: js.Function1[Event, _]
HTMLMediaElement[JC] var onplaying: js.Function1[Event, _]
HTMLMediaElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLMediaElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLMediaElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLMediaElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLMediaElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLMediaElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLMediaElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLMediaElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLMediaElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLMediaElement[JC] var onratechange: js.Function1[Event, _]
HTMLMediaElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLMediaElement[JC] var onreset: js.Function1[Event, _]
HTMLMediaElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLMediaElement[JC] var onseeked: js.Function1[Event, _]
HTMLMediaElement[JC] var onseeking: js.Function1[Event, _]
HTMLMediaElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLMediaElement[JC] var onselectstart: js.Function1[Event, _]
HTMLMediaElement[JC] var onstalled: js.Function1[Event, _]
HTMLMediaElement[JC] var onsubmit: js.Function1[Event, _]
HTMLMediaElement[JC] var onsuspend: js.Function1[Event, _]
HTMLMediaElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLMediaElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLMediaElement[JC] var onwaiting: js.Function1[Event, _]
HTMLMediaElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLMediaElement[JC] var outerHTML: String
HTMLMediaElement[JC] def ownerDocument: Document
HTMLMediaElement[JC] override def ownerDocument: HTMLDocument
HTMLMediaElement[JC] var parentElement: HTMLElement
HTMLMediaElement[JC] def parentNode: Node
HTMLMediaElement[JC] def pause(): Unit
HTMLMediaElement[JC] def paused: Boolean
HTMLMediaElement[JC] def play(): js.UndefOr[js.Promise[Unit]]
HTMLMediaElement[JC] var playbackRate: Double
HTMLMediaElement[JC] def played: TimeRanges
HTMLMediaElement[JC] def prefix: String
HTMLMediaElement[JC] var preload: String
HTMLMediaElement[JC] def prepend(nodes: Node | String*): Unit
HTMLMediaElement[JC] def previousElementSibling: Element
HTMLMediaElement[JC] def previousSibling: Node
HTMLMediaElement[JC] def querySelector(selectors: String): Element
HTMLMediaElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLMediaElement[JC] var readyState: js.Any
HTMLMediaElement[JC] var recordNumber: js.Any
HTMLMediaElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLMediaElement[JC] def remove(): Unit
HTMLMediaElement[JC] def removeAttribute(name: String): Unit
HTMLMediaElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLMediaElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLMediaElement[JC] def removeChild(oldChild: Node): Node
HTMLMediaElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLMediaElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLMediaElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLMediaElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLMediaElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLMediaElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLMediaElement[JC] def requestPointerLock(): Unit
HTMLMediaElement[JC] def scrollHeight: Int
HTMLMediaElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLMediaElement[JC] var scrollLeft: Double
HTMLMediaElement[JC] var scrollTop: Double
HTMLMediaElement[JC] def scrollWidth: Int
HTMLMediaElement[JC] def seekable: TimeRanges
HTMLMediaElement[JC] def seeking: Boolean
HTMLMediaElement[JC] def setAttribute(name: String, value: String): Unit
HTMLMediaElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLMediaElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLMediaElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLMediaElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLMediaElement[JC] def shadowRoot: ShadowRoot
HTMLMediaElement[JC] var spellcheck: Boolean
HTMLMediaElement[JC] var src: String
HTMLMediaElement[JC] var srcObject: js.UndefOr[MediaStream | MediaSource | Blob]
HTMLMediaElement[JC] def style: CSSStyleDeclaration
HTMLMediaElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLMediaElement[JC] def style_ = (value: String): Unit
HTMLMediaElement[JC] var tabIndex: Int
HTMLMediaElement[JC] def tagName: String
HTMLMediaElement[JC] var textContent: String
HTMLMediaElement[JC] def textTracks: TextTrackList
HTMLMediaElement[JC] var title: String
HTMLMediaElement[JC] var volume: Double
HTMLMediaElement[JO] val HAVE_CURRENT_DATA: Int
HTMLMediaElement[JO] val HAVE_ENOUGH_DATA: Int
HTMLMediaElement[JO] val HAVE_FUTURE_DATA: Int
HTMLMediaElement[JO] val HAVE_METADATA: Int
HTMLMediaElement[JO] val HAVE_NOTHING: Int
HTMLMediaElement[JO] val NETWORK_EMPTY: Int
HTMLMediaElement[JO] val NETWORK_IDLE: Int
HTMLMediaElement[JO] val NETWORK_LOADING: Int
HTMLMediaElement[JO] val NETWORK_NO_SOURCE: Int
HTMLMenuElement[JC] var accessKey: String
HTMLMenuElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLMenuElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLMenuElement[JC] def after(nodes: Node | String*): Unit
HTMLMenuElement[JC] def append(nodes: Node | String*): Unit
HTMLMenuElement[JC] def appendChild(newChild: Node): Node
HTMLMenuElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLMenuElement[JC] def attributes: NamedNodeMap
HTMLMenuElement[JC] def baseURI: String
HTMLMenuElement[JC] def before(nodes: Node | String*): Unit
HTMLMenuElement[JC] def blur(): Unit
HTMLMenuElement[JC] def childElementCount: Int
HTMLMenuElement[JC] def childNodes: NodeList[Node]
HTMLMenuElement[JC] def children: HTMLCollection[Element]
HTMLMenuElement[JC] var classList: DOMTokenList
HTMLMenuElement[JC] var className: String
HTMLMenuElement[JC] def click(): Unit
HTMLMenuElement[JC] def clientHeight: Int
HTMLMenuElement[JC] def clientLeft: Int
HTMLMenuElement[JC] def clientTop: Int
HTMLMenuElement[JC] def clientWidth: Int
HTMLMenuElement[JC] def cloneNode(deep: Boolean?): Node
HTMLMenuElement[JC] def closest(selector: String): Element
HTMLMenuElement[JC] def compareDocumentPosition(other: Node): Int
HTMLMenuElement[JC] def contains(child: HTMLElement): Boolean
HTMLMenuElement[JC] def contains(otherNode: Node): Boolean
HTMLMenuElement[JC] var contentEditable: String
HTMLMenuElement[JC] def dataset: js.Dictionary[String]
HTMLMenuElement[JC] var dir: String
HTMLMenuElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLMenuElement[JC] var draggable: Boolean
HTMLMenuElement[JC] var filters: Object
HTMLMenuElement[JC] def firstChild: Node
HTMLMenuElement[JC] def firstElementChild: Element
HTMLMenuElement[JC] def focus(): Unit
HTMLMenuElement[JC] def focus(options: FocusOptions): Unit
HTMLMenuElement[JC] def getAttribute(name: String): String
HTMLMenuElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLMenuElement[JC] def getAttributeNode(name: String): Attr
HTMLMenuElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLMenuElement[JC] def getBoundingClientRect(): DOMRect
HTMLMenuElement[JC] def getClientRects(): DOMRectList
HTMLMenuElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLMenuElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLMenuElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLMenuElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLMenuElement[JC] def hasAttribute(name: String): Boolean
HTMLMenuElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLMenuElement[JC] def hasAttributes(): Boolean
HTMLMenuElement[JC] def hasChildNodes(): Boolean
HTMLMenuElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLMenuElement[JC] var id: String
HTMLMenuElement[JC] var innerHTML: String
HTMLMenuElement[JC] var innerText: String
HTMLMenuElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLMenuElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLMenuElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLMenuElement[JC] def isConnected: Boolean
HTMLMenuElement[JC] def isContentEditable: Boolean
HTMLMenuElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLMenuElement[JC] def isEqualNode(arg: Node): Boolean
HTMLMenuElement[JC] def isSameNode(other: Node): Boolean
HTMLMenuElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLMenuElement[JC] var lang: String
HTMLMenuElement[JC] def lastChild: Node
HTMLMenuElement[JC] def lastElementChild: Element
HTMLMenuElement[JC] def localName: String
HTMLMenuElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLMenuElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLMenuElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLMenuElement[JC] def matches(selector: String): Boolean
HTMLMenuElement[JC] def namespaceURI: String
HTMLMenuElement[JC] def nextElementSibling: Element
HTMLMenuElement[JC] def nextSibling: Node
HTMLMenuElement[JC] def nodeName: String
HTMLMenuElement[JC] def nodeType: Int
HTMLMenuElement[JC] var nodeValue: String
HTMLMenuElement[JC] def normalize(): Unit
HTMLMenuElement[JC] def offsetHeight: Double
HTMLMenuElement[JC] def offsetLeft: Double
HTMLMenuElement[JC] def offsetParent: Element
HTMLMenuElement[JC] def offsetTop: Double
HTMLMenuElement[JC] def offsetWidth: Double
HTMLMenuElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLMenuElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLMenuElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLMenuElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLMenuElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLMenuElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLMenuElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLMenuElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLMenuElement[JC] var oncanplay: js.Function1[Event, _]
HTMLMenuElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLMenuElement[JC] var onchange: js.Function1[Event, _]
HTMLMenuElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLMenuElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLMenuElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLMenuElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLMenuElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLMenuElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLMenuElement[JC] var oncuechange: js.Function1[Event, _]
HTMLMenuElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLMenuElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLMenuElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLMenuElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLMenuElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLMenuElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLMenuElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLMenuElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLMenuElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLMenuElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLMenuElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLMenuElement[JC] var onemptied: js.Function1[Event, _]
HTMLMenuElement[JC] var onended: js.Function1[Event, _]
HTMLMenuElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLMenuElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLMenuElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLMenuElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLMenuElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLMenuElement[JC] var onhelp: js.Function1[Event, _]
HTMLMenuElement[JC] var oninput: js.Function1[Event, _]
HTMLMenuElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLMenuElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLMenuElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLMenuElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLMenuElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLMenuElement[JC] var onloadstart: js.Function1[Event, _]
HTMLMenuElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLMenuElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLMenuElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLMenuElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLMenuElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLMenuElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLMenuElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLMenuElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLMenuElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLMenuElement[JC] var onpause: js.Function1[Event, _]
HTMLMenuElement[JC] var onplay: js.Function1[Event, _]
HTMLMenuElement[JC] var onplaying: js.Function1[Event, _]
HTMLMenuElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLMenuElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLMenuElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLMenuElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLMenuElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLMenuElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLMenuElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLMenuElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLMenuElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLMenuElement[JC] var onratechange: js.Function1[Event, _]
HTMLMenuElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLMenuElement[JC] var onreset: js.Function1[Event, _]
HTMLMenuElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLMenuElement[JC] var onseeked: js.Function1[Event, _]
HTMLMenuElement[JC] var onseeking: js.Function1[Event, _]
HTMLMenuElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLMenuElement[JC] var onselectstart: js.Function1[Event, _]
HTMLMenuElement[JC] var onstalled: js.Function1[Event, _]
HTMLMenuElement[JC] var onsubmit: js.Function1[Event, _]
HTMLMenuElement[JC] var onsuspend: js.Function1[Event, _]
HTMLMenuElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLMenuElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLMenuElement[JC] var onwaiting: js.Function1[Event, _]
HTMLMenuElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLMenuElement[JC] var outerHTML: String
HTMLMenuElement[JC] def ownerDocument: Document
HTMLMenuElement[JC] override def ownerDocument: HTMLDocument
HTMLMenuElement[JC] var parentElement: HTMLElement
HTMLMenuElement[JC] def parentNode: Node
HTMLMenuElement[JC] def prefix: String
HTMLMenuElement[JC] def prepend(nodes: Node | String*): Unit
HTMLMenuElement[JC] def previousElementSibling: Element
HTMLMenuElement[JC] def previousSibling: Node
HTMLMenuElement[JC] def querySelector(selectors: String): Element
HTMLMenuElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLMenuElement[JC] var readyState: js.Any
HTMLMenuElement[JC] var recordNumber: js.Any
HTMLMenuElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLMenuElement[JC] def remove(): Unit
HTMLMenuElement[JC] def removeAttribute(name: String): Unit
HTMLMenuElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLMenuElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLMenuElement[JC] def removeChild(oldChild: Node): Node
HTMLMenuElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLMenuElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLMenuElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLMenuElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLMenuElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLMenuElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLMenuElement[JC] def requestPointerLock(): Unit
HTMLMenuElement[JC] def scrollHeight: Int
HTMLMenuElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLMenuElement[JC] var scrollLeft: Double
HTMLMenuElement[JC] var scrollTop: Double
HTMLMenuElement[JC] def scrollWidth: Int
HTMLMenuElement[JC] def setAttribute(name: String, value: String): Unit
HTMLMenuElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLMenuElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLMenuElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLMenuElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLMenuElement[JC] def shadowRoot: ShadowRoot
HTMLMenuElement[JC] var spellcheck: Boolean
HTMLMenuElement[JC] def style: CSSStyleDeclaration
HTMLMenuElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLMenuElement[JC] def style_ = (value: String): Unit
HTMLMenuElement[JC] var tabIndex: Int
HTMLMenuElement[JC] def tagName: String
HTMLMenuElement[JC] var textContent: String
HTMLMenuElement[JC] var title: String
HTMLMenuElement[JC] var `type`: String
HTMLMetaElement[JC] var accessKey: String
HTMLMetaElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLMetaElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLMetaElement[JC] def after(nodes: Node | String*): Unit
HTMLMetaElement[JC] def append(nodes: Node | String*): Unit
HTMLMetaElement[JC] def appendChild(newChild: Node): Node
HTMLMetaElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLMetaElement[JC] def attributes: NamedNodeMap
HTMLMetaElement[JC] def baseURI: String
HTMLMetaElement[JC] def before(nodes: Node | String*): Unit
HTMLMetaElement[JC] def blur(): Unit
HTMLMetaElement[JC] var charset: String
HTMLMetaElement[JC] def childElementCount: Int
HTMLMetaElement[JC] def childNodes: NodeList[Node]
HTMLMetaElement[JC] def children: HTMLCollection[Element]
HTMLMetaElement[JC] var classList: DOMTokenList
HTMLMetaElement[JC] var className: String
HTMLMetaElement[JC] def click(): Unit
HTMLMetaElement[JC] def clientHeight: Int
HTMLMetaElement[JC] def clientLeft: Int
HTMLMetaElement[JC] def clientTop: Int
HTMLMetaElement[JC] def clientWidth: Int
HTMLMetaElement[JC] def cloneNode(deep: Boolean?): Node
HTMLMetaElement[JC] def closest(selector: String): Element
HTMLMetaElement[JC] def compareDocumentPosition(other: Node): Int
HTMLMetaElement[JC] def contains(child: HTMLElement): Boolean
HTMLMetaElement[JC] def contains(otherNode: Node): Boolean
HTMLMetaElement[JC] var content: String
HTMLMetaElement[JC] var contentEditable: String
HTMLMetaElement[JC] def dataset: js.Dictionary[String]
HTMLMetaElement[JC] var dir: String
HTMLMetaElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLMetaElement[JC] var draggable: Boolean
HTMLMetaElement[JC] var filters: Object
HTMLMetaElement[JC] def firstChild: Node
HTMLMetaElement[JC] def firstElementChild: Element
HTMLMetaElement[JC] def focus(): Unit
HTMLMetaElement[JC] def focus(options: FocusOptions): Unit
HTMLMetaElement[JC] def getAttribute(name: String): String
HTMLMetaElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLMetaElement[JC] def getAttributeNode(name: String): Attr
HTMLMetaElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLMetaElement[JC] def getBoundingClientRect(): DOMRect
HTMLMetaElement[JC] def getClientRects(): DOMRectList
HTMLMetaElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLMetaElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLMetaElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLMetaElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLMetaElement[JC] def hasAttribute(name: String): Boolean
HTMLMetaElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLMetaElement[JC] def hasAttributes(): Boolean
HTMLMetaElement[JC] def hasChildNodes(): Boolean
HTMLMetaElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLMetaElement[JC] var httpEquiv: String
HTMLMetaElement[JC] var id: String
HTMLMetaElement[JC] var innerHTML: String
HTMLMetaElement[JC] var innerText: String
HTMLMetaElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLMetaElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLMetaElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLMetaElement[JC] def isConnected: Boolean
HTMLMetaElement[JC] def isContentEditable: Boolean
HTMLMetaElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLMetaElement[JC] def isEqualNode(arg: Node): Boolean
HTMLMetaElement[JC] def isSameNode(other: Node): Boolean
HTMLMetaElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLMetaElement[JC] var lang: String
HTMLMetaElement[JC] def lastChild: Node
HTMLMetaElement[JC] def lastElementChild: Element
HTMLMetaElement[JC] def localName: String
HTMLMetaElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLMetaElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLMetaElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLMetaElement[JC] def matches(selector: String): Boolean
HTMLMetaElement[JC] var name: String
HTMLMetaElement[JC] def namespaceURI: String
HTMLMetaElement[JC] def nextElementSibling: Element
HTMLMetaElement[JC] def nextSibling: Node
HTMLMetaElement[JC] def nodeName: String
HTMLMetaElement[JC] def nodeType: Int
HTMLMetaElement[JC] var nodeValue: String
HTMLMetaElement[JC] def normalize(): Unit
HTMLMetaElement[JC] def offsetHeight: Double
HTMLMetaElement[JC] def offsetLeft: Double
HTMLMetaElement[JC] def offsetParent: Element
HTMLMetaElement[JC] def offsetTop: Double
HTMLMetaElement[JC] def offsetWidth: Double
HTMLMetaElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLMetaElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLMetaElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLMetaElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLMetaElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLMetaElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLMetaElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLMetaElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLMetaElement[JC] var oncanplay: js.Function1[Event, _]
HTMLMetaElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLMetaElement[JC] var onchange: js.Function1[Event, _]
HTMLMetaElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLMetaElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLMetaElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLMetaElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLMetaElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLMetaElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLMetaElement[JC] var oncuechange: js.Function1[Event, _]
HTMLMetaElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLMetaElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLMetaElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLMetaElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLMetaElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLMetaElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLMetaElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLMetaElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLMetaElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLMetaElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLMetaElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLMetaElement[JC] var onemptied: js.Function1[Event, _]
HTMLMetaElement[JC] var onended: js.Function1[Event, _]
HTMLMetaElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLMetaElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLMetaElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLMetaElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLMetaElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLMetaElement[JC] var onhelp: js.Function1[Event, _]
HTMLMetaElement[JC] var oninput: js.Function1[Event, _]
HTMLMetaElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLMetaElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLMetaElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLMetaElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLMetaElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLMetaElement[JC] var onloadstart: js.Function1[Event, _]
HTMLMetaElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLMetaElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLMetaElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLMetaElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLMetaElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLMetaElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLMetaElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLMetaElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLMetaElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLMetaElement[JC] var onpause: js.Function1[Event, _]
HTMLMetaElement[JC] var onplay: js.Function1[Event, _]
HTMLMetaElement[JC] var onplaying: js.Function1[Event, _]
HTMLMetaElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLMetaElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLMetaElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLMetaElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLMetaElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLMetaElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLMetaElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLMetaElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLMetaElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLMetaElement[JC] var onratechange: js.Function1[Event, _]
HTMLMetaElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLMetaElement[JC] var onreset: js.Function1[Event, _]
HTMLMetaElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLMetaElement[JC] var onseeked: js.Function1[Event, _]
HTMLMetaElement[JC] var onseeking: js.Function1[Event, _]
HTMLMetaElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLMetaElement[JC] var onselectstart: js.Function1[Event, _]
HTMLMetaElement[JC] var onstalled: js.Function1[Event, _]
HTMLMetaElement[JC] var onsubmit: js.Function1[Event, _]
HTMLMetaElement[JC] var onsuspend: js.Function1[Event, _]
HTMLMetaElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLMetaElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLMetaElement[JC] var onwaiting: js.Function1[Event, _]
HTMLMetaElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLMetaElement[JC] var outerHTML: String
HTMLMetaElement[JC] def ownerDocument: Document
HTMLMetaElement[JC] override def ownerDocument: HTMLDocument
HTMLMetaElement[JC] var parentElement: HTMLElement
HTMLMetaElement[JC] def parentNode: Node
HTMLMetaElement[JC] def prefix: String
HTMLMetaElement[JC] def prepend(nodes: Node | String*): Unit
HTMLMetaElement[JC] def previousElementSibling: Element
HTMLMetaElement[JC] def previousSibling: Node
HTMLMetaElement[JC] def querySelector(selectors: String): Element
HTMLMetaElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLMetaElement[JC] var readyState: js.Any
HTMLMetaElement[JC] var recordNumber: js.Any
HTMLMetaElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLMetaElement[JC] def remove(): Unit
HTMLMetaElement[JC] def removeAttribute(name: String): Unit
HTMLMetaElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLMetaElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLMetaElement[JC] def removeChild(oldChild: Node): Node
HTMLMetaElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLMetaElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLMetaElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLMetaElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLMetaElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLMetaElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLMetaElement[JC] def requestPointerLock(): Unit
HTMLMetaElement[JC] def scrollHeight: Int
HTMLMetaElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLMetaElement[JC] var scrollLeft: Double
HTMLMetaElement[JC] var scrollTop: Double
HTMLMetaElement[JC] def scrollWidth: Int
HTMLMetaElement[JC] def setAttribute(name: String, value: String): Unit
HTMLMetaElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLMetaElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLMetaElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLMetaElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLMetaElement[JC] def shadowRoot: ShadowRoot
HTMLMetaElement[JC] var spellcheck: Boolean
HTMLMetaElement[JC] def style: CSSStyleDeclaration
HTMLMetaElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLMetaElement[JC] def style_ = (value: String): Unit
HTMLMetaElement[JC] var tabIndex: Int
HTMLMetaElement[JC] def tagName: String
HTMLMetaElement[JC] var textContent: String
HTMLMetaElement[JC] var title: String
HTMLMetaElement[JC] var url: String
HTMLModElement[JC] var accessKey: String
HTMLModElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLModElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLModElement[JC] def after(nodes: Node | String*): Unit
HTMLModElement[JC] def append(nodes: Node | String*): Unit
HTMLModElement[JC] def appendChild(newChild: Node): Node
HTMLModElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLModElement[JC] def attributes: NamedNodeMap
HTMLModElement[JC] def baseURI: String
HTMLModElement[JC] def before(nodes: Node | String*): Unit
HTMLModElement[JC] def blur(): Unit
HTMLModElement[JC] def childElementCount: Int
HTMLModElement[JC] def childNodes: NodeList[Node]
HTMLModElement[JC] def children: HTMLCollection[Element]
HTMLModElement[JC] var cite: String
HTMLModElement[JC] var classList: DOMTokenList
HTMLModElement[JC] var className: String
HTMLModElement[JC] def click(): Unit
HTMLModElement[JC] def clientHeight: Int
HTMLModElement[JC] def clientLeft: Int
HTMLModElement[JC] def clientTop: Int
HTMLModElement[JC] def clientWidth: Int
HTMLModElement[JC] def cloneNode(deep: Boolean?): Node
HTMLModElement[JC] def closest(selector: String): Element
HTMLModElement[JC] def compareDocumentPosition(other: Node): Int
HTMLModElement[JC] def contains(child: HTMLElement): Boolean
HTMLModElement[JC] def contains(otherNode: Node): Boolean
HTMLModElement[JC] var contentEditable: String
HTMLModElement[JC] def dataset: js.Dictionary[String]
HTMLModElement[JC] var dateTime: String
HTMLModElement[JC] var dir: String
HTMLModElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLModElement[JC] var draggable: Boolean
HTMLModElement[JC] var filters: Object
HTMLModElement[JC] def firstChild: Node
HTMLModElement[JC] def firstElementChild: Element
HTMLModElement[JC] def focus(): Unit
HTMLModElement[JC] def focus(options: FocusOptions): Unit
HTMLModElement[JC] def getAttribute(name: String): String
HTMLModElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLModElement[JC] def getAttributeNode(name: String): Attr
HTMLModElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLModElement[JC] def getBoundingClientRect(): DOMRect
HTMLModElement[JC] def getClientRects(): DOMRectList
HTMLModElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLModElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLModElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLModElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLModElement[JC] def hasAttribute(name: String): Boolean
HTMLModElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLModElement[JC] def hasAttributes(): Boolean
HTMLModElement[JC] def hasChildNodes(): Boolean
HTMLModElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLModElement[JC] var id: String
HTMLModElement[JC] var innerHTML: String
HTMLModElement[JC] var innerText: String
HTMLModElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLModElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLModElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLModElement[JC] def isConnected: Boolean
HTMLModElement[JC] def isContentEditable: Boolean
HTMLModElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLModElement[JC] def isEqualNode(arg: Node): Boolean
HTMLModElement[JC] def isSameNode(other: Node): Boolean
HTMLModElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLModElement[JC] var lang: String
HTMLModElement[JC] def lastChild: Node
HTMLModElement[JC] def lastElementChild: Element
HTMLModElement[JC] def localName: String
HTMLModElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLModElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLModElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLModElement[JC] def matches(selector: String): Boolean
HTMLModElement[JC] def namespaceURI: String
HTMLModElement[JC] def nextElementSibling: Element
HTMLModElement[JC] def nextSibling: Node
HTMLModElement[JC] def nodeName: String
HTMLModElement[JC] def nodeType: Int
HTMLModElement[JC] var nodeValue: String
HTMLModElement[JC] def normalize(): Unit
HTMLModElement[JC] def offsetHeight: Double
HTMLModElement[JC] def offsetLeft: Double
HTMLModElement[JC] def offsetParent: Element
HTMLModElement[JC] def offsetTop: Double
HTMLModElement[JC] def offsetWidth: Double
HTMLModElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLModElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLModElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLModElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLModElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLModElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLModElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLModElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLModElement[JC] var oncanplay: js.Function1[Event, _]
HTMLModElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLModElement[JC] var onchange: js.Function1[Event, _]
HTMLModElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLModElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLModElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLModElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLModElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLModElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLModElement[JC] var oncuechange: js.Function1[Event, _]
HTMLModElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLModElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLModElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLModElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLModElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLModElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLModElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLModElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLModElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLModElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLModElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLModElement[JC] var onemptied: js.Function1[Event, _]
HTMLModElement[JC] var onended: js.Function1[Event, _]
HTMLModElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLModElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLModElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLModElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLModElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLModElement[JC] var onhelp: js.Function1[Event, _]
HTMLModElement[JC] var oninput: js.Function1[Event, _]
HTMLModElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLModElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLModElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLModElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLModElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLModElement[JC] var onloadstart: js.Function1[Event, _]
HTMLModElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLModElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLModElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLModElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLModElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLModElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLModElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLModElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLModElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLModElement[JC] var onpause: js.Function1[Event, _]
HTMLModElement[JC] var onplay: js.Function1[Event, _]
HTMLModElement[JC] var onplaying: js.Function1[Event, _]
HTMLModElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLModElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLModElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLModElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLModElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLModElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLModElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLModElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLModElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLModElement[JC] var onratechange: js.Function1[Event, _]
HTMLModElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLModElement[JC] var onreset: js.Function1[Event, _]
HTMLModElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLModElement[JC] var onseeked: js.Function1[Event, _]
HTMLModElement[JC] var onseeking: js.Function1[Event, _]
HTMLModElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLModElement[JC] var onselectstart: js.Function1[Event, _]
HTMLModElement[JC] var onstalled: js.Function1[Event, _]
HTMLModElement[JC] var onsubmit: js.Function1[Event, _]
HTMLModElement[JC] var onsuspend: js.Function1[Event, _]
HTMLModElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLModElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLModElement[JC] var onwaiting: js.Function1[Event, _]
HTMLModElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLModElement[JC] var outerHTML: String
HTMLModElement[JC] def ownerDocument: Document
HTMLModElement[JC] override def ownerDocument: HTMLDocument
HTMLModElement[JC] var parentElement: HTMLElement
HTMLModElement[JC] def parentNode: Node
HTMLModElement[JC] def prefix: String
HTMLModElement[JC] def prepend(nodes: Node | String*): Unit
HTMLModElement[JC] def previousElementSibling: Element
HTMLModElement[JC] def previousSibling: Node
HTMLModElement[JC] def querySelector(selectors: String): Element
HTMLModElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLModElement[JC] var readyState: js.Any
HTMLModElement[JC] var recordNumber: js.Any
HTMLModElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLModElement[JC] def remove(): Unit
HTMLModElement[JC] def removeAttribute(name: String): Unit
HTMLModElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLModElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLModElement[JC] def removeChild(oldChild: Node): Node
HTMLModElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLModElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLModElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLModElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLModElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLModElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLModElement[JC] def requestPointerLock(): Unit
HTMLModElement[JC] def scrollHeight: Int
HTMLModElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLModElement[JC] var scrollLeft: Double
HTMLModElement[JC] var scrollTop: Double
HTMLModElement[JC] def scrollWidth: Int
HTMLModElement[JC] def setAttribute(name: String, value: String): Unit
HTMLModElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLModElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLModElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLModElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLModElement[JC] def shadowRoot: ShadowRoot
HTMLModElement[JC] var spellcheck: Boolean
HTMLModElement[JC] def style: CSSStyleDeclaration
HTMLModElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLModElement[JC] def style_ = (value: String): Unit
HTMLModElement[JC] var tabIndex: Int
HTMLModElement[JC] def tagName: String
HTMLModElement[JC] var textContent: String
HTMLModElement[JC] var title: String
HTMLOListElement[JC] var accessKey: String
HTMLOListElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLOListElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLOListElement[JC] def after(nodes: Node | String*): Unit
HTMLOListElement[JC] def append(nodes: Node | String*): Unit
HTMLOListElement[JC] def appendChild(newChild: Node): Node
HTMLOListElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLOListElement[JC] def attributes: NamedNodeMap
HTMLOListElement[JC] def baseURI: String
HTMLOListElement[JC] def before(nodes: Node | String*): Unit
HTMLOListElement[JC] def blur(): Unit
HTMLOListElement[JC] def childElementCount: Int
HTMLOListElement[JC] def childNodes: NodeList[Node]
HTMLOListElement[JC] def children: HTMLCollection[Element]
HTMLOListElement[JC] var classList: DOMTokenList
HTMLOListElement[JC] var className: String
HTMLOListElement[JC] def click(): Unit
HTMLOListElement[JC] def clientHeight: Int
HTMLOListElement[JC] def clientLeft: Int
HTMLOListElement[JC] def clientTop: Int
HTMLOListElement[JC] def clientWidth: Int
HTMLOListElement[JC] def cloneNode(deep: Boolean?): Node
HTMLOListElement[JC] def closest(selector: String): Element
HTMLOListElement[JC] def compareDocumentPosition(other: Node): Int
HTMLOListElement[JC] def contains(child: HTMLElement): Boolean
HTMLOListElement[JC] def contains(otherNode: Node): Boolean
HTMLOListElement[JC] var contentEditable: String
HTMLOListElement[JC] def dataset: js.Dictionary[String]
HTMLOListElement[JC] var dir: String
HTMLOListElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLOListElement[JC] var draggable: Boolean
HTMLOListElement[JC] var filters: Object
HTMLOListElement[JC] def firstChild: Node
HTMLOListElement[JC] def firstElementChild: Element
HTMLOListElement[JC] def focus(): Unit
HTMLOListElement[JC] def focus(options: FocusOptions): Unit
HTMLOListElement[JC] def getAttribute(name: String): String
HTMLOListElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLOListElement[JC] def getAttributeNode(name: String): Attr
HTMLOListElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLOListElement[JC] def getBoundingClientRect(): DOMRect
HTMLOListElement[JC] def getClientRects(): DOMRectList
HTMLOListElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLOListElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLOListElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLOListElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLOListElement[JC] def hasAttribute(name: String): Boolean
HTMLOListElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLOListElement[JC] def hasAttributes(): Boolean
HTMLOListElement[JC] def hasChildNodes(): Boolean
HTMLOListElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLOListElement[JC] var id: String
HTMLOListElement[JC] var innerHTML: String
HTMLOListElement[JC] var innerText: String
HTMLOListElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLOListElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLOListElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLOListElement[JC] def isConnected: Boolean
HTMLOListElement[JC] def isContentEditable: Boolean
HTMLOListElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLOListElement[JC] def isEqualNode(arg: Node): Boolean
HTMLOListElement[JC] def isSameNode(other: Node): Boolean
HTMLOListElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLOListElement[JC] var lang: String
HTMLOListElement[JC] def lastChild: Node
HTMLOListElement[JC] def lastElementChild: Element
HTMLOListElement[JC] def localName: String
HTMLOListElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLOListElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLOListElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLOListElement[JC] def matches(selector: String): Boolean
HTMLOListElement[JC] def namespaceURI: String
HTMLOListElement[JC] def nextElementSibling: Element
HTMLOListElement[JC] def nextSibling: Node
HTMLOListElement[JC] def nodeName: String
HTMLOListElement[JC] def nodeType: Int
HTMLOListElement[JC] var nodeValue: String
HTMLOListElement[JC] def normalize(): Unit
HTMLOListElement[JC] def offsetHeight: Double
HTMLOListElement[JC] def offsetLeft: Double
HTMLOListElement[JC] def offsetParent: Element
HTMLOListElement[JC] def offsetTop: Double
HTMLOListElement[JC] def offsetWidth: Double
HTMLOListElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLOListElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLOListElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLOListElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLOListElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLOListElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLOListElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLOListElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLOListElement[JC] var oncanplay: js.Function1[Event, _]
HTMLOListElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLOListElement[JC] var onchange: js.Function1[Event, _]
HTMLOListElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLOListElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLOListElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLOListElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLOListElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLOListElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLOListElement[JC] var oncuechange: js.Function1[Event, _]
HTMLOListElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLOListElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLOListElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLOListElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLOListElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLOListElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLOListElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLOListElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLOListElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLOListElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLOListElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLOListElement[JC] var onemptied: js.Function1[Event, _]
HTMLOListElement[JC] var onended: js.Function1[Event, _]
HTMLOListElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLOListElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLOListElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLOListElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLOListElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLOListElement[JC] var onhelp: js.Function1[Event, _]
HTMLOListElement[JC] var oninput: js.Function1[Event, _]
HTMLOListElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLOListElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLOListElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLOListElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLOListElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLOListElement[JC] var onloadstart: js.Function1[Event, _]
HTMLOListElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLOListElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLOListElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLOListElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLOListElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLOListElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLOListElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLOListElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLOListElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLOListElement[JC] var onpause: js.Function1[Event, _]
HTMLOListElement[JC] var onplay: js.Function1[Event, _]
HTMLOListElement[JC] var onplaying: js.Function1[Event, _]
HTMLOListElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLOListElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLOListElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLOListElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLOListElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLOListElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLOListElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLOListElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLOListElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLOListElement[JC] var onratechange: js.Function1[Event, _]
HTMLOListElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLOListElement[JC] var onreset: js.Function1[Event, _]
HTMLOListElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLOListElement[JC] var onseeked: js.Function1[Event, _]
HTMLOListElement[JC] var onseeking: js.Function1[Event, _]
HTMLOListElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLOListElement[JC] var onselectstart: js.Function1[Event, _]
HTMLOListElement[JC] var onstalled: js.Function1[Event, _]
HTMLOListElement[JC] var onsubmit: js.Function1[Event, _]
HTMLOListElement[JC] var onsuspend: js.Function1[Event, _]
HTMLOListElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLOListElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLOListElement[JC] var onwaiting: js.Function1[Event, _]
HTMLOListElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLOListElement[JC] var outerHTML: String
HTMLOListElement[JC] def ownerDocument: Document
HTMLOListElement[JC] override def ownerDocument: HTMLDocument
HTMLOListElement[JC] var parentElement: HTMLElement
HTMLOListElement[JC] def parentNode: Node
HTMLOListElement[JC] def prefix: String
HTMLOListElement[JC] def prepend(nodes: Node | String*): Unit
HTMLOListElement[JC] def previousElementSibling: Element
HTMLOListElement[JC] def previousSibling: Node
HTMLOListElement[JC] def querySelector(selectors: String): Element
HTMLOListElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLOListElement[JC] var readyState: js.Any
HTMLOListElement[JC] var recordNumber: js.Any
HTMLOListElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLOListElement[JC] def remove(): Unit
HTMLOListElement[JC] def removeAttribute(name: String): Unit
HTMLOListElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLOListElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLOListElement[JC] def removeChild(oldChild: Node): Node
HTMLOListElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLOListElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLOListElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLOListElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLOListElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLOListElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLOListElement[JC] def requestPointerLock(): Unit
HTMLOListElement[JC] def scrollHeight: Int
HTMLOListElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLOListElement[JC] var scrollLeft: Double
HTMLOListElement[JC] var scrollTop: Double
HTMLOListElement[JC] def scrollWidth: Int
HTMLOListElement[JC] def setAttribute(name: String, value: String): Unit
HTMLOListElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLOListElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLOListElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLOListElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLOListElement[JC] def shadowRoot: ShadowRoot
HTMLOListElement[JC] var spellcheck: Boolean
HTMLOListElement[JC] var start: Int
HTMLOListElement[JC] def style: CSSStyleDeclaration
HTMLOListElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLOListElement[JC] def style_ = (value: String): Unit
HTMLOListElement[JC] var tabIndex: Int
HTMLOListElement[JC] def tagName: String
HTMLOListElement[JC] var textContent: String
HTMLOListElement[JC] var title: String
HTMLObjectElement[JC] var BaseHref: String
HTMLObjectElement[JC] var accessKey: String
HTMLObjectElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLObjectElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLObjectElement[JC] def after(nodes: Node | String*): Unit
HTMLObjectElement[JC] var alt: String
HTMLObjectElement[JC] var altHtml: String
HTMLObjectElement[JC] def append(nodes: Node | String*): Unit
HTMLObjectElement[JC] def appendChild(newChild: Node): Node
HTMLObjectElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLObjectElement[JC] def attributes: NamedNodeMap
HTMLObjectElement[JC] def baseURI: String
HTMLObjectElement[JC] def before(nodes: Node | String*): Unit
HTMLObjectElement[JC] def blur(): Unit
HTMLObjectElement[JC] def checkValidity(): Boolean
HTMLObjectElement[JC] def childElementCount: Int
HTMLObjectElement[JC] def childNodes: NodeList[Node]
HTMLObjectElement[JC] def children: HTMLCollection[Element]
HTMLObjectElement[JC] var classList: DOMTokenList
HTMLObjectElement[JC] var className: String
HTMLObjectElement[JC] var classid: String
HTMLObjectElement[JC] def click(): Unit
HTMLObjectElement[JC] def clientHeight: Int
HTMLObjectElement[JC] def clientLeft: Int
HTMLObjectElement[JC] def clientTop: Int
HTMLObjectElement[JC] def clientWidth: Int
HTMLObjectElement[JC] def cloneNode(deep: Boolean?): Node
HTMLObjectElement[JC] def closest(selector: String): Element
HTMLObjectElement[JC] def compareDocumentPosition(other: Node): Int
HTMLObjectElement[JC] def contains(child: HTMLElement): Boolean
HTMLObjectElement[JC] def contains(otherNode: Node): Boolean
HTMLObjectElement[JC] def contentDocument: Document
HTMLObjectElement[JC] var contentEditable: String
HTMLObjectElement[JC] var data: String
HTMLObjectElement[JC] def dataset: js.Dictionary[String]
HTMLObjectElement[JC] var dir: String
HTMLObjectElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLObjectElement[JC] var draggable: Boolean
HTMLObjectElement[JC] var filters: Object
HTMLObjectElement[JC] def firstChild: Node
HTMLObjectElement[JC] def firstElementChild: Element
HTMLObjectElement[JC] def focus(): Unit
HTMLObjectElement[JC] def focus(options: FocusOptions): Unit
HTMLObjectElement[JC] def form: HTMLFormElement
HTMLObjectElement[JC] def getAttribute(name: String): String
HTMLObjectElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLObjectElement[JC] def getAttributeNode(name: String): Attr
HTMLObjectElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLObjectElement[JC] def getBoundingClientRect(): DOMRect
HTMLObjectElement[JC] def getClientRects(): DOMRectList
HTMLObjectElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLObjectElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLObjectElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLObjectElement[JC] def getSVGDocument(): Document
HTMLObjectElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLObjectElement[JC] def hasAttribute(name: String): Boolean
HTMLObjectElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLObjectElement[JC] def hasAttributes(): Boolean
HTMLObjectElement[JC] def hasChildNodes(): Boolean
HTMLObjectElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLObjectElement[JC] var height: String
HTMLObjectElement[JC] var id: String
HTMLObjectElement[JC] var innerHTML: String
HTMLObjectElement[JC] var innerText: String
HTMLObjectElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLObjectElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLObjectElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLObjectElement[JC] def isConnected: Boolean
HTMLObjectElement[JC] def isContentEditable: Boolean
HTMLObjectElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLObjectElement[JC] def isEqualNode(arg: Node): Boolean
HTMLObjectElement[JC] def isSameNode(other: Node): Boolean
HTMLObjectElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLObjectElement[JC] var lang: String
HTMLObjectElement[JC] def lastChild: Node
HTMLObjectElement[JC] def lastElementChild: Element
HTMLObjectElement[JC] def localName: String
HTMLObjectElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLObjectElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLObjectElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLObjectElement[JC] def matches(selector: String): Boolean
HTMLObjectElement[JC] var name: String
HTMLObjectElement[JC] def namespaceURI: String
HTMLObjectElement[JC] def nextElementSibling: Element
HTMLObjectElement[JC] def nextSibling: Node
HTMLObjectElement[JC] def nodeName: String
HTMLObjectElement[JC] def nodeType: Int
HTMLObjectElement[JC] var nodeValue: String
HTMLObjectElement[JC] def normalize(): Unit
HTMLObjectElement[JC] var `object`: Object
HTMLObjectElement[JC] def offsetHeight: Double
HTMLObjectElement[JC] def offsetLeft: Double
HTMLObjectElement[JC] def offsetParent: Element
HTMLObjectElement[JC] def offsetTop: Double
HTMLObjectElement[JC] def offsetWidth: Double
HTMLObjectElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLObjectElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLObjectElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLObjectElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLObjectElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLObjectElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLObjectElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLObjectElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLObjectElement[JC] var oncanplay: js.Function1[Event, _]
HTMLObjectElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLObjectElement[JC] var onchange: js.Function1[Event, _]
HTMLObjectElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLObjectElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLObjectElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLObjectElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLObjectElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLObjectElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLObjectElement[JC] var oncuechange: js.Function1[Event, _]
HTMLObjectElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLObjectElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLObjectElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLObjectElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLObjectElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLObjectElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLObjectElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLObjectElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLObjectElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLObjectElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLObjectElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLObjectElement[JC] var onemptied: js.Function1[Event, _]
HTMLObjectElement[JC] var onended: js.Function1[Event, _]
HTMLObjectElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLObjectElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLObjectElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLObjectElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLObjectElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLObjectElement[JC] var onhelp: js.Function1[Event, _]
HTMLObjectElement[JC] var oninput: js.Function1[Event, _]
HTMLObjectElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLObjectElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLObjectElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLObjectElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLObjectElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLObjectElement[JC] var onloadstart: js.Function1[Event, _]
HTMLObjectElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLObjectElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLObjectElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLObjectElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLObjectElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLObjectElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLObjectElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLObjectElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLObjectElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLObjectElement[JC] var onpause: js.Function1[Event, _]
HTMLObjectElement[JC] var onplay: js.Function1[Event, _]
HTMLObjectElement[JC] var onplaying: js.Function1[Event, _]
HTMLObjectElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLObjectElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLObjectElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLObjectElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLObjectElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLObjectElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLObjectElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLObjectElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLObjectElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLObjectElement[JC] var onratechange: js.Function1[Event, _]
HTMLObjectElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLObjectElement[JC] var onreset: js.Function1[Event, _]
HTMLObjectElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLObjectElement[JC] var onseeked: js.Function1[Event, _]
HTMLObjectElement[JC] var onseeking: js.Function1[Event, _]
HTMLObjectElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLObjectElement[JC] var onselectstart: js.Function1[Event, _]
HTMLObjectElement[JC] var onstalled: js.Function1[Event, _]
HTMLObjectElement[JC] var onsubmit: js.Function1[Event, _]
HTMLObjectElement[JC] var onsuspend: js.Function1[Event, _]
HTMLObjectElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLObjectElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLObjectElement[JC] var onwaiting: js.Function1[Event, _]
HTMLObjectElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLObjectElement[JC] var outerHTML: String
HTMLObjectElement[JC] def ownerDocument: Document
HTMLObjectElement[JC] override def ownerDocument: HTMLDocument
HTMLObjectElement[JC] var parentElement: HTMLElement
HTMLObjectElement[JC] def parentNode: Node
HTMLObjectElement[JC] def prefix: String
HTMLObjectElement[JC] def prepend(nodes: Node | String*): Unit
HTMLObjectElement[JC] def previousElementSibling: Element
HTMLObjectElement[JC] def previousSibling: Node
HTMLObjectElement[JC] def querySelector(selectors: String): Element
HTMLObjectElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLObjectElement[JC] var readyState: js.Any
HTMLObjectElement[JC] var recordNumber: js.Any
HTMLObjectElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLObjectElement[JC] def remove(): Unit
HTMLObjectElement[JC] def removeAttribute(name: String): Unit
HTMLObjectElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLObjectElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLObjectElement[JC] def removeChild(oldChild: Node): Node
HTMLObjectElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLObjectElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLObjectElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLObjectElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLObjectElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLObjectElement[JC] def reportValidity(): Boolean
HTMLObjectElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLObjectElement[JC] def requestPointerLock(): Unit
HTMLObjectElement[JC] def scrollHeight: Int
HTMLObjectElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLObjectElement[JC] var scrollLeft: Double
HTMLObjectElement[JC] var scrollTop: Double
HTMLObjectElement[JC] def scrollWidth: Int
HTMLObjectElement[JC] def setAttribute(name: String, value: String): Unit
HTMLObjectElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLObjectElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLObjectElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLObjectElement[JC] def setCustomValidity(error: String): Unit
HTMLObjectElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLObjectElement[JC] def shadowRoot: ShadowRoot
HTMLObjectElement[JC] var spellcheck: Boolean
HTMLObjectElement[JC] def style: CSSStyleDeclaration
HTMLObjectElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLObjectElement[JC] def style_ = (value: String): Unit
HTMLObjectElement[JC] var tabIndex: Int
HTMLObjectElement[JC] def tagName: String
HTMLObjectElement[JC] var textContent: String
HTMLObjectElement[JC] var title: String
HTMLObjectElement[JC] var `type`: String
HTMLObjectElement[JC] var useMap: String
HTMLObjectElement[JC] def validationMessage: String
HTMLObjectElement[JC] def validity: ValidityState
HTMLObjectElement[JC] var width: String
HTMLObjectElement[JC] def willValidate: Boolean
HTMLOptGroupElement[JC] var accessKey: String
HTMLOptGroupElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLOptGroupElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLOptGroupElement[JC] def after(nodes: Node | String*): Unit
HTMLOptGroupElement[JC] def append(nodes: Node | String*): Unit
HTMLOptGroupElement[JC] def appendChild(newChild: Node): Node
HTMLOptGroupElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLOptGroupElement[JC] def attributes: NamedNodeMap
HTMLOptGroupElement[JC] def baseURI: String
HTMLOptGroupElement[JC] def before(nodes: Node | String*): Unit
HTMLOptGroupElement[JC] def blur(): Unit
HTMLOptGroupElement[JC] def childElementCount: Int
HTMLOptGroupElement[JC] def childNodes: NodeList[Node]
HTMLOptGroupElement[JC] def children: HTMLCollection[Element]
HTMLOptGroupElement[JC] var classList: DOMTokenList
HTMLOptGroupElement[JC] var className: String
HTMLOptGroupElement[JC] def click(): Unit
HTMLOptGroupElement[JC] def clientHeight: Int
HTMLOptGroupElement[JC] def clientLeft: Int
HTMLOptGroupElement[JC] def clientTop: Int
HTMLOptGroupElement[JC] def clientWidth: Int
HTMLOptGroupElement[JC] def cloneNode(deep: Boolean?): Node
HTMLOptGroupElement[JC] def closest(selector: String): Element
HTMLOptGroupElement[JC] def compareDocumentPosition(other: Node): Int
HTMLOptGroupElement[JC] def contains(child: HTMLElement): Boolean
HTMLOptGroupElement[JC] def contains(otherNode: Node): Boolean
HTMLOptGroupElement[JC] var contentEditable: String
HTMLOptGroupElement[JC] def dataset: js.Dictionary[String]
HTMLOptGroupElement[JC] var dir: String
HTMLOptGroupElement[JC] var disabled: Boolean
HTMLOptGroupElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLOptGroupElement[JC] var draggable: Boolean
HTMLOptGroupElement[JC] var filters: Object
HTMLOptGroupElement[JC] def firstChild: Node
HTMLOptGroupElement[JC] def firstElementChild: Element
HTMLOptGroupElement[JC] def focus(): Unit
HTMLOptGroupElement[JC] def focus(options: FocusOptions): Unit
HTMLOptGroupElement[JC] def getAttribute(name: String): String
HTMLOptGroupElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLOptGroupElement[JC] def getAttributeNode(name: String): Attr
HTMLOptGroupElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLOptGroupElement[JC] def getBoundingClientRect(): DOMRect
HTMLOptGroupElement[JC] def getClientRects(): DOMRectList
HTMLOptGroupElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLOptGroupElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLOptGroupElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLOptGroupElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLOptGroupElement[JC] def hasAttribute(name: String): Boolean
HTMLOptGroupElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLOptGroupElement[JC] def hasAttributes(): Boolean
HTMLOptGroupElement[JC] def hasChildNodes(): Boolean
HTMLOptGroupElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLOptGroupElement[JC] var id: String
HTMLOptGroupElement[JC] var innerHTML: String
HTMLOptGroupElement[JC] var innerText: String
HTMLOptGroupElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLOptGroupElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLOptGroupElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLOptGroupElement[JC] def isConnected: Boolean
HTMLOptGroupElement[JC] def isContentEditable: Boolean
HTMLOptGroupElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLOptGroupElement[JC] def isEqualNode(arg: Node): Boolean
HTMLOptGroupElement[JC] def isSameNode(other: Node): Boolean
HTMLOptGroupElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLOptGroupElement[JC] var label: String
HTMLOptGroupElement[JC] var lang: String
HTMLOptGroupElement[JC] def lastChild: Node
HTMLOptGroupElement[JC] def lastElementChild: Element
HTMLOptGroupElement[JC] def localName: String
HTMLOptGroupElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLOptGroupElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLOptGroupElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLOptGroupElement[JC] def matches(selector: String): Boolean
HTMLOptGroupElement[JC] def namespaceURI: String
HTMLOptGroupElement[JC] def nextElementSibling: Element
HTMLOptGroupElement[JC] def nextSibling: Node
HTMLOptGroupElement[JC] def nodeName: String
HTMLOptGroupElement[JC] def nodeType: Int
HTMLOptGroupElement[JC] var nodeValue: String
HTMLOptGroupElement[JC] def normalize(): Unit
HTMLOptGroupElement[JC] def offsetHeight: Double
HTMLOptGroupElement[JC] def offsetLeft: Double
HTMLOptGroupElement[JC] def offsetParent: Element
HTMLOptGroupElement[JC] def offsetTop: Double
HTMLOptGroupElement[JC] def offsetWidth: Double
HTMLOptGroupElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLOptGroupElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLOptGroupElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLOptGroupElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLOptGroupElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLOptGroupElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLOptGroupElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLOptGroupElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLOptGroupElement[JC] var oncanplay: js.Function1[Event, _]
HTMLOptGroupElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onchange: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLOptGroupElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLOptGroupElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLOptGroupElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLOptGroupElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLOptGroupElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLOptGroupElement[JC] var oncuechange: js.Function1[Event, _]
HTMLOptGroupElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLOptGroupElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLOptGroupElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLOptGroupElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLOptGroupElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLOptGroupElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLOptGroupElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLOptGroupElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLOptGroupElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLOptGroupElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLOptGroupElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onemptied: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onended: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLOptGroupElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLOptGroupElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLOptGroupElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onhelp: js.Function1[Event, _]
HTMLOptGroupElement[JC] var oninput: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLOptGroupElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLOptGroupElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLOptGroupElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onloadstart: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLOptGroupElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLOptGroupElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLOptGroupElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLOptGroupElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLOptGroupElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLOptGroupElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLOptGroupElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLOptGroupElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLOptGroupElement[JC] var onpause: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onplay: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onplaying: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLOptGroupElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLOptGroupElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLOptGroupElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLOptGroupElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLOptGroupElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLOptGroupElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLOptGroupElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLOptGroupElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLOptGroupElement[JC] var onratechange: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onreset: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLOptGroupElement[JC] var onseeked: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onseeking: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLOptGroupElement[JC] var onselectstart: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onstalled: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onsubmit: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onsuspend: js.Function1[Event, _]
HTMLOptGroupElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onwaiting: js.Function1[Event, _]
HTMLOptGroupElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLOptGroupElement[JC] var outerHTML: String
HTMLOptGroupElement[JC] def ownerDocument: Document
HTMLOptGroupElement[JC] override def ownerDocument: HTMLDocument
HTMLOptGroupElement[JC] var parentElement: HTMLElement
HTMLOptGroupElement[JC] def parentNode: Node
HTMLOptGroupElement[JC] def prefix: String
HTMLOptGroupElement[JC] def prepend(nodes: Node | String*): Unit
HTMLOptGroupElement[JC] def previousElementSibling: Element
HTMLOptGroupElement[JC] def previousSibling: Node
HTMLOptGroupElement[JC] def querySelector(selectors: String): Element
HTMLOptGroupElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLOptGroupElement[JC] var readyState: js.Any
HTMLOptGroupElement[JC] var recordNumber: js.Any
HTMLOptGroupElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLOptGroupElement[JC] def remove(): Unit
HTMLOptGroupElement[JC] def removeAttribute(name: String): Unit
HTMLOptGroupElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLOptGroupElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLOptGroupElement[JC] def removeChild(oldChild: Node): Node
HTMLOptGroupElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLOptGroupElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLOptGroupElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLOptGroupElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLOptGroupElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLOptGroupElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLOptGroupElement[JC] def requestPointerLock(): Unit
HTMLOptGroupElement[JC] def scrollHeight: Int
HTMLOptGroupElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLOptGroupElement[JC] var scrollLeft: Double
HTMLOptGroupElement[JC] var scrollTop: Double
HTMLOptGroupElement[JC] def scrollWidth: Int
HTMLOptGroupElement[JC] def setAttribute(name: String, value: String): Unit
HTMLOptGroupElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLOptGroupElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLOptGroupElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLOptGroupElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLOptGroupElement[JC] def shadowRoot: ShadowRoot
HTMLOptGroupElement[JC] var spellcheck: Boolean
HTMLOptGroupElement[JC] def style: CSSStyleDeclaration
HTMLOptGroupElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLOptGroupElement[JC] def style_ = (value: String): Unit
HTMLOptGroupElement[JC] var tabIndex: Int
HTMLOptGroupElement[JC] def tagName: String
HTMLOptGroupElement[JC] var textContent: String
HTMLOptGroupElement[JC] var title: String
HTMLOptionElement[JC] var accessKey: String
HTMLOptionElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLOptionElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLOptionElement[JC] def after(nodes: Node | String*): Unit
HTMLOptionElement[JC] def append(nodes: Node | String*): Unit
HTMLOptionElement[JC] def appendChild(newChild: Node): Node
HTMLOptionElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLOptionElement[JC] def attributes: NamedNodeMap
HTMLOptionElement[JC] def baseURI: String
HTMLOptionElement[JC] def before(nodes: Node | String*): Unit
HTMLOptionElement[JC] def blur(): Unit
HTMLOptionElement[JC] def childElementCount: Int
HTMLOptionElement[JC] def childNodes: NodeList[Node]
HTMLOptionElement[JC] def children: HTMLCollection[Element]
HTMLOptionElement[JC] var classList: DOMTokenList
HTMLOptionElement[JC] var className: String
HTMLOptionElement[JC] def click(): Unit
HTMLOptionElement[JC] def clientHeight: Int
HTMLOptionElement[JC] def clientLeft: Int
HTMLOptionElement[JC] def clientTop: Int
HTMLOptionElement[JC] def clientWidth: Int
HTMLOptionElement[JC] def cloneNode(deep: Boolean?): Node
HTMLOptionElement[JC] def closest(selector: String): Element
HTMLOptionElement[JC] def compareDocumentPosition(other: Node): Int
HTMLOptionElement[JC] def contains(child: HTMLElement): Boolean
HTMLOptionElement[JC] def contains(otherNode: Node): Boolean
HTMLOptionElement[JC] var contentEditable: String
HTMLOptionElement[JC] def create(): HTMLOptionElement
HTMLOptionElement[JC] def dataset: js.Dictionary[String]
HTMLOptionElement[JC] var defaultSelected: Boolean
HTMLOptionElement[JC] var dir: String
HTMLOptionElement[JC] var disabled: Boolean
HTMLOptionElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLOptionElement[JC] var draggable: Boolean
HTMLOptionElement[JC] var filters: Object
HTMLOptionElement[JC] def firstChild: Node
HTMLOptionElement[JC] def firstElementChild: Element
HTMLOptionElement[JC] def focus(): Unit
HTMLOptionElement[JC] def focus(options: FocusOptions): Unit
HTMLOptionElement[JC] def form: HTMLFormElement
HTMLOptionElement[JC] def getAttribute(name: String): String
HTMLOptionElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLOptionElement[JC] def getAttributeNode(name: String): Attr
HTMLOptionElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLOptionElement[JC] def getBoundingClientRect(): DOMRect
HTMLOptionElement[JC] def getClientRects(): DOMRectList
HTMLOptionElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLOptionElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLOptionElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLOptionElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLOptionElement[JC] def hasAttribute(name: String): Boolean
HTMLOptionElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLOptionElement[JC] def hasAttributes(): Boolean
HTMLOptionElement[JC] def hasChildNodes(): Boolean
HTMLOptionElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLOptionElement[JC] var id: String
HTMLOptionElement[JC] def index: Int
HTMLOptionElement[JC] var innerHTML: String
HTMLOptionElement[JC] var innerText: String
HTMLOptionElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLOptionElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLOptionElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLOptionElement[JC] def isConnected: Boolean
HTMLOptionElement[JC] def isContentEditable: Boolean
HTMLOptionElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLOptionElement[JC] def isEqualNode(arg: Node): Boolean
HTMLOptionElement[JC] def isSameNode(other: Node): Boolean
HTMLOptionElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLOptionElement[JC] var label: String
HTMLOptionElement[JC] var lang: String
HTMLOptionElement[JC] def lastChild: Node
HTMLOptionElement[JC] def lastElementChild: Element
HTMLOptionElement[JC] def localName: String
HTMLOptionElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLOptionElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLOptionElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLOptionElement[JC] def matches(selector: String): Boolean
HTMLOptionElement[JC] def namespaceURI: String
HTMLOptionElement[JC] def nextElementSibling: Element
HTMLOptionElement[JC] def nextSibling: Node
HTMLOptionElement[JC] def nodeName: String
HTMLOptionElement[JC] def nodeType: Int
HTMLOptionElement[JC] var nodeValue: String
HTMLOptionElement[JC] def normalize(): Unit
HTMLOptionElement[JC] def offsetHeight: Double
HTMLOptionElement[JC] def offsetLeft: Double
HTMLOptionElement[JC] def offsetParent: Element
HTMLOptionElement[JC] def offsetTop: Double
HTMLOptionElement[JC] def offsetWidth: Double
HTMLOptionElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLOptionElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLOptionElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLOptionElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLOptionElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLOptionElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLOptionElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLOptionElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLOptionElement[JC] var oncanplay: js.Function1[Event, _]
HTMLOptionElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLOptionElement[JC] var onchange: js.Function1[Event, _]
HTMLOptionElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLOptionElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLOptionElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLOptionElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLOptionElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLOptionElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLOptionElement[JC] var oncuechange: js.Function1[Event, _]
HTMLOptionElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLOptionElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLOptionElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLOptionElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLOptionElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLOptionElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLOptionElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLOptionElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLOptionElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLOptionElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLOptionElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLOptionElement[JC] var onemptied: js.Function1[Event, _]
HTMLOptionElement[JC] var onended: js.Function1[Event, _]
HTMLOptionElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLOptionElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLOptionElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLOptionElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLOptionElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLOptionElement[JC] var onhelp: js.Function1[Event, _]
HTMLOptionElement[JC] var oninput: js.Function1[Event, _]
HTMLOptionElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLOptionElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLOptionElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLOptionElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLOptionElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLOptionElement[JC] var onloadstart: js.Function1[Event, _]
HTMLOptionElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLOptionElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLOptionElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLOptionElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLOptionElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLOptionElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLOptionElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLOptionElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLOptionElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLOptionElement[JC] var onpause: js.Function1[Event, _]
HTMLOptionElement[JC] var onplay: js.Function1[Event, _]
HTMLOptionElement[JC] var onplaying: js.Function1[Event, _]
HTMLOptionElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLOptionElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLOptionElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLOptionElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLOptionElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLOptionElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLOptionElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLOptionElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLOptionElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLOptionElement[JC] var onratechange: js.Function1[Event, _]
HTMLOptionElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLOptionElement[JC] var onreset: js.Function1[Event, _]
HTMLOptionElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLOptionElement[JC] var onseeked: js.Function1[Event, _]
HTMLOptionElement[JC] var onseeking: js.Function1[Event, _]
HTMLOptionElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLOptionElement[JC] var onselectstart: js.Function1[Event, _]
HTMLOptionElement[JC] var onstalled: js.Function1[Event, _]
HTMLOptionElement[JC] var onsubmit: js.Function1[Event, _]
HTMLOptionElement[JC] var onsuspend: js.Function1[Event, _]
HTMLOptionElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLOptionElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLOptionElement[JC] var onwaiting: js.Function1[Event, _]
HTMLOptionElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLOptionElement[JC] var outerHTML: String
HTMLOptionElement[JC] def ownerDocument: Document
HTMLOptionElement[JC] override def ownerDocument: HTMLDocument
HTMLOptionElement[JC] var parentElement: HTMLElement
HTMLOptionElement[JC] def parentNode: Node
HTMLOptionElement[JC] def prefix: String
HTMLOptionElement[JC] def prepend(nodes: Node | String*): Unit
HTMLOptionElement[JC] def previousElementSibling: Element
HTMLOptionElement[JC] def previousSibling: Node
HTMLOptionElement[JC] def querySelector(selectors: String): Element
HTMLOptionElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLOptionElement[JC] var readyState: js.Any
HTMLOptionElement[JC] var recordNumber: js.Any
HTMLOptionElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLOptionElement[JC] def remove(): Unit
HTMLOptionElement[JC] def removeAttribute(name: String): Unit
HTMLOptionElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLOptionElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLOptionElement[JC] def removeChild(oldChild: Node): Node
HTMLOptionElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLOptionElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLOptionElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLOptionElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLOptionElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLOptionElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLOptionElement[JC] def requestPointerLock(): Unit
HTMLOptionElement[JC] def scrollHeight: Int
HTMLOptionElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLOptionElement[JC] var scrollLeft: Double
HTMLOptionElement[JC] var scrollTop: Double
HTMLOptionElement[JC] def scrollWidth: Int
HTMLOptionElement[JC] var selected: Boolean
HTMLOptionElement[JC] def setAttribute(name: String, value: String): Unit
HTMLOptionElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLOptionElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLOptionElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLOptionElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLOptionElement[JC] def shadowRoot: ShadowRoot
HTMLOptionElement[JC] var spellcheck: Boolean
HTMLOptionElement[JC] def style: CSSStyleDeclaration
HTMLOptionElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLOptionElement[JC] def style_ = (value: String): Unit
HTMLOptionElement[JC] var tabIndex: Int
HTMLOptionElement[JC] def tagName: String
HTMLOptionElement[JC] var text: String
HTMLOptionElement[JC] var textContent: String
HTMLOptionElement[JC] var title: String
HTMLOptionElement[JC] var value: String
HTMLOptionsCollection[JC] @JSBracketAccess def apply(index: Int): T
HTMLOptionsCollection[JC] def item(index: Int): E
HTMLOptionsCollection[JC] def length: Int
HTMLOptionsCollection[JC] def namedItem(name: String): E
HTMLParagraphElement[JC] var accessKey: String
HTMLParagraphElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLParagraphElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLParagraphElement[JC] def after(nodes: Node | String*): Unit
HTMLParagraphElement[JC] def append(nodes: Node | String*): Unit
HTMLParagraphElement[JC] def appendChild(newChild: Node): Node
HTMLParagraphElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLParagraphElement[JC] def attributes: NamedNodeMap
HTMLParagraphElement[JC] def baseURI: String
HTMLParagraphElement[JC] def before(nodes: Node | String*): Unit
HTMLParagraphElement[JC] def blur(): Unit
HTMLParagraphElement[JC] def childElementCount: Int
HTMLParagraphElement[JC] def childNodes: NodeList[Node]
HTMLParagraphElement[JC] def children: HTMLCollection[Element]
HTMLParagraphElement[JC] var classList: DOMTokenList
HTMLParagraphElement[JC] var className: String
HTMLParagraphElement[JC] def click(): Unit
HTMLParagraphElement[JC] def clientHeight: Int
HTMLParagraphElement[JC] def clientLeft: Int
HTMLParagraphElement[JC] def clientTop: Int
HTMLParagraphElement[JC] def clientWidth: Int
HTMLParagraphElement[JC] def cloneNode(deep: Boolean?): Node
HTMLParagraphElement[JC] def closest(selector: String): Element
HTMLParagraphElement[JC] def compareDocumentPosition(other: Node): Int
HTMLParagraphElement[JC] def contains(child: HTMLElement): Boolean
HTMLParagraphElement[JC] def contains(otherNode: Node): Boolean
HTMLParagraphElement[JC] var contentEditable: String
HTMLParagraphElement[JC] def dataset: js.Dictionary[String]
HTMLParagraphElement[JC] var dir: String
HTMLParagraphElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLParagraphElement[JC] var draggable: Boolean
HTMLParagraphElement[JC] var filters: Object
HTMLParagraphElement[JC] def firstChild: Node
HTMLParagraphElement[JC] def firstElementChild: Element
HTMLParagraphElement[JC] def focus(): Unit
HTMLParagraphElement[JC] def focus(options: FocusOptions): Unit
HTMLParagraphElement[JC] def getAttribute(name: String): String
HTMLParagraphElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLParagraphElement[JC] def getAttributeNode(name: String): Attr
HTMLParagraphElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLParagraphElement[JC] def getBoundingClientRect(): DOMRect
HTMLParagraphElement[JC] def getClientRects(): DOMRectList
HTMLParagraphElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLParagraphElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLParagraphElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLParagraphElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLParagraphElement[JC] def hasAttribute(name: String): Boolean
HTMLParagraphElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLParagraphElement[JC] def hasAttributes(): Boolean
HTMLParagraphElement[JC] def hasChildNodes(): Boolean
HTMLParagraphElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLParagraphElement[JC] var id: String
HTMLParagraphElement[JC] var innerHTML: String
HTMLParagraphElement[JC] var innerText: String
HTMLParagraphElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLParagraphElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLParagraphElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLParagraphElement[JC] def isConnected: Boolean
HTMLParagraphElement[JC] def isContentEditable: Boolean
HTMLParagraphElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLParagraphElement[JC] def isEqualNode(arg: Node): Boolean
HTMLParagraphElement[JC] def isSameNode(other: Node): Boolean
HTMLParagraphElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLParagraphElement[JC] var lang: String
HTMLParagraphElement[JC] def lastChild: Node
HTMLParagraphElement[JC] def lastElementChild: Element
HTMLParagraphElement[JC] def localName: String
HTMLParagraphElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLParagraphElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLParagraphElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLParagraphElement[JC] def matches(selector: String): Boolean
HTMLParagraphElement[JC] def namespaceURI: String
HTMLParagraphElement[JC] def nextElementSibling: Element
HTMLParagraphElement[JC] def nextSibling: Node
HTMLParagraphElement[JC] def nodeName: String
HTMLParagraphElement[JC] def nodeType: Int
HTMLParagraphElement[JC] var nodeValue: String
HTMLParagraphElement[JC] def normalize(): Unit
HTMLParagraphElement[JC] def offsetHeight: Double
HTMLParagraphElement[JC] def offsetLeft: Double
HTMLParagraphElement[JC] def offsetParent: Element
HTMLParagraphElement[JC] def offsetTop: Double
HTMLParagraphElement[JC] def offsetWidth: Double
HTMLParagraphElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLParagraphElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLParagraphElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLParagraphElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLParagraphElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLParagraphElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLParagraphElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLParagraphElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLParagraphElement[JC] var oncanplay: js.Function1[Event, _]
HTMLParagraphElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLParagraphElement[JC] var onchange: js.Function1[Event, _]
HTMLParagraphElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLParagraphElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLParagraphElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLParagraphElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLParagraphElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLParagraphElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLParagraphElement[JC] var oncuechange: js.Function1[Event, _]
HTMLParagraphElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLParagraphElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLParagraphElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLParagraphElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLParagraphElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLParagraphElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLParagraphElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLParagraphElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLParagraphElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLParagraphElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLParagraphElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLParagraphElement[JC] var onemptied: js.Function1[Event, _]
HTMLParagraphElement[JC] var onended: js.Function1[Event, _]
HTMLParagraphElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLParagraphElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLParagraphElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLParagraphElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLParagraphElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLParagraphElement[JC] var onhelp: js.Function1[Event, _]
HTMLParagraphElement[JC] var oninput: js.Function1[Event, _]
HTMLParagraphElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLParagraphElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLParagraphElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLParagraphElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLParagraphElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLParagraphElement[JC] var onloadstart: js.Function1[Event, _]
HTMLParagraphElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLParagraphElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLParagraphElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLParagraphElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLParagraphElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLParagraphElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLParagraphElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLParagraphElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLParagraphElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLParagraphElement[JC] var onpause: js.Function1[Event, _]
HTMLParagraphElement[JC] var onplay: js.Function1[Event, _]
HTMLParagraphElement[JC] var onplaying: js.Function1[Event, _]
HTMLParagraphElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLParagraphElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLParagraphElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLParagraphElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLParagraphElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLParagraphElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLParagraphElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLParagraphElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLParagraphElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLParagraphElement[JC] var onratechange: js.Function1[Event, _]
HTMLParagraphElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLParagraphElement[JC] var onreset: js.Function1[Event, _]
HTMLParagraphElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLParagraphElement[JC] var onseeked: js.Function1[Event, _]
HTMLParagraphElement[JC] var onseeking: js.Function1[Event, _]
HTMLParagraphElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLParagraphElement[JC] var onselectstart: js.Function1[Event, _]
HTMLParagraphElement[JC] var onstalled: js.Function1[Event, _]
HTMLParagraphElement[JC] var onsubmit: js.Function1[Event, _]
HTMLParagraphElement[JC] var onsuspend: js.Function1[Event, _]
HTMLParagraphElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLParagraphElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLParagraphElement[JC] var onwaiting: js.Function1[Event, _]
HTMLParagraphElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLParagraphElement[JC] var outerHTML: String
HTMLParagraphElement[JC] def ownerDocument: Document
HTMLParagraphElement[JC] override def ownerDocument: HTMLDocument
HTMLParagraphElement[JC] var parentElement: HTMLElement
HTMLParagraphElement[JC] def parentNode: Node
HTMLParagraphElement[JC] def prefix: String
HTMLParagraphElement[JC] def prepend(nodes: Node | String*): Unit
HTMLParagraphElement[JC] def previousElementSibling: Element
HTMLParagraphElement[JC] def previousSibling: Node
HTMLParagraphElement[JC] def querySelector(selectors: String): Element
HTMLParagraphElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLParagraphElement[JC] var readyState: js.Any
HTMLParagraphElement[JC] var recordNumber: js.Any
HTMLParagraphElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLParagraphElement[JC] def remove(): Unit
HTMLParagraphElement[JC] def removeAttribute(name: String): Unit
HTMLParagraphElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLParagraphElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLParagraphElement[JC] def removeChild(oldChild: Node): Node
HTMLParagraphElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLParagraphElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLParagraphElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLParagraphElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLParagraphElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLParagraphElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLParagraphElement[JC] def requestPointerLock(): Unit
HTMLParagraphElement[JC] def scrollHeight: Int
HTMLParagraphElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLParagraphElement[JC] var scrollLeft: Double
HTMLParagraphElement[JC] var scrollTop: Double
HTMLParagraphElement[JC] def scrollWidth: Int
HTMLParagraphElement[JC] def setAttribute(name: String, value: String): Unit
HTMLParagraphElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLParagraphElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLParagraphElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLParagraphElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLParagraphElement[JC] def shadowRoot: ShadowRoot
HTMLParagraphElement[JC] var spellcheck: Boolean
HTMLParagraphElement[JC] def style: CSSStyleDeclaration
HTMLParagraphElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLParagraphElement[JC] def style_ = (value: String): Unit
HTMLParagraphElement[JC] var tabIndex: Int
HTMLParagraphElement[JC] def tagName: String
HTMLParagraphElement[JC] var textContent: String
HTMLParagraphElement[JC] var title: String
HTMLParamElement[JC] var accessKey: String
HTMLParamElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLParamElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLParamElement[JC] def after(nodes: Node | String*): Unit
HTMLParamElement[JC] def append(nodes: Node | String*): Unit
HTMLParamElement[JC] def appendChild(newChild: Node): Node
HTMLParamElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLParamElement[JC] def attributes: NamedNodeMap
HTMLParamElement[JC] def baseURI: String
HTMLParamElement[JC] def before(nodes: Node | String*): Unit
HTMLParamElement[JC] def blur(): Unit
HTMLParamElement[JC] def childElementCount: Int
HTMLParamElement[JC] def childNodes: NodeList[Node]
HTMLParamElement[JC] def children: HTMLCollection[Element]
HTMLParamElement[JC] var classList: DOMTokenList
HTMLParamElement[JC] var className: String
HTMLParamElement[JC] def click(): Unit
HTMLParamElement[JC] def clientHeight: Int
HTMLParamElement[JC] def clientLeft: Int
HTMLParamElement[JC] def clientTop: Int
HTMLParamElement[JC] def clientWidth: Int
HTMLParamElement[JC] def cloneNode(deep: Boolean?): Node
HTMLParamElement[JC] def closest(selector: String): Element
HTMLParamElement[JC] def compareDocumentPosition(other: Node): Int
HTMLParamElement[JC] def contains(child: HTMLElement): Boolean
HTMLParamElement[JC] def contains(otherNode: Node): Boolean
HTMLParamElement[JC] var contentEditable: String
HTMLParamElement[JC] def dataset: js.Dictionary[String]
HTMLParamElement[JC] var dir: String
HTMLParamElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLParamElement[JC] var draggable: Boolean
HTMLParamElement[JC] var filters: Object
HTMLParamElement[JC] def firstChild: Node
HTMLParamElement[JC] def firstElementChild: Element
HTMLParamElement[JC] def focus(): Unit
HTMLParamElement[JC] def focus(options: FocusOptions): Unit
HTMLParamElement[JC] def getAttribute(name: String): String
HTMLParamElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLParamElement[JC] def getAttributeNode(name: String): Attr
HTMLParamElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLParamElement[JC] def getBoundingClientRect(): DOMRect
HTMLParamElement[JC] def getClientRects(): DOMRectList
HTMLParamElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLParamElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLParamElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLParamElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLParamElement[JC] def hasAttribute(name: String): Boolean
HTMLParamElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLParamElement[JC] def hasAttributes(): Boolean
HTMLParamElement[JC] def hasChildNodes(): Boolean
HTMLParamElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLParamElement[JC] var id: String
HTMLParamElement[JC] var innerHTML: String
HTMLParamElement[JC] var innerText: String
HTMLParamElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLParamElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLParamElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLParamElement[JC] def isConnected: Boolean
HTMLParamElement[JC] def isContentEditable: Boolean
HTMLParamElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLParamElement[JC] def isEqualNode(arg: Node): Boolean
HTMLParamElement[JC] def isSameNode(other: Node): Boolean
HTMLParamElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLParamElement[JC] var lang: String
HTMLParamElement[JC] def lastChild: Node
HTMLParamElement[JC] def lastElementChild: Element
HTMLParamElement[JC] def localName: String
HTMLParamElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLParamElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLParamElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLParamElement[JC] def matches(selector: String): Boolean
HTMLParamElement[JC] var name: String
HTMLParamElement[JC] def namespaceURI: String
HTMLParamElement[JC] def nextElementSibling: Element
HTMLParamElement[JC] def nextSibling: Node
HTMLParamElement[JC] def nodeName: String
HTMLParamElement[JC] def nodeType: Int
HTMLParamElement[JC] var nodeValue: String
HTMLParamElement[JC] def normalize(): Unit
HTMLParamElement[JC] def offsetHeight: Double
HTMLParamElement[JC] def offsetLeft: Double
HTMLParamElement[JC] def offsetParent: Element
HTMLParamElement[JC] def offsetTop: Double
HTMLParamElement[JC] def offsetWidth: Double
HTMLParamElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLParamElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLParamElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLParamElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLParamElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLParamElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLParamElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLParamElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLParamElement[JC] var oncanplay: js.Function1[Event, _]
HTMLParamElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLParamElement[JC] var onchange: js.Function1[Event, _]
HTMLParamElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLParamElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLParamElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLParamElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLParamElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLParamElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLParamElement[JC] var oncuechange: js.Function1[Event, _]
HTMLParamElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLParamElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLParamElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLParamElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLParamElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLParamElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLParamElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLParamElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLParamElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLParamElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLParamElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLParamElement[JC] var onemptied: js.Function1[Event, _]
HTMLParamElement[JC] var onended: js.Function1[Event, _]
HTMLParamElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLParamElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLParamElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLParamElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLParamElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLParamElement[JC] var onhelp: js.Function1[Event, _]
HTMLParamElement[JC] var oninput: js.Function1[Event, _]
HTMLParamElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLParamElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLParamElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLParamElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLParamElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLParamElement[JC] var onloadstart: js.Function1[Event, _]
HTMLParamElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLParamElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLParamElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLParamElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLParamElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLParamElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLParamElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLParamElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLParamElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLParamElement[JC] var onpause: js.Function1[Event, _]
HTMLParamElement[JC] var onplay: js.Function1[Event, _]
HTMLParamElement[JC] var onplaying: js.Function1[Event, _]
HTMLParamElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLParamElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLParamElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLParamElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLParamElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLParamElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLParamElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLParamElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLParamElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLParamElement[JC] var onratechange: js.Function1[Event, _]
HTMLParamElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLParamElement[JC] var onreset: js.Function1[Event, _]
HTMLParamElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLParamElement[JC] var onseeked: js.Function1[Event, _]
HTMLParamElement[JC] var onseeking: js.Function1[Event, _]
HTMLParamElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLParamElement[JC] var onselectstart: js.Function1[Event, _]
HTMLParamElement[JC] var onstalled: js.Function1[Event, _]
HTMLParamElement[JC] var onsubmit: js.Function1[Event, _]
HTMLParamElement[JC] var onsuspend: js.Function1[Event, _]
HTMLParamElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLParamElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLParamElement[JC] var onwaiting: js.Function1[Event, _]
HTMLParamElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLParamElement[JC] var outerHTML: String
HTMLParamElement[JC] def ownerDocument: Document
HTMLParamElement[JC] override def ownerDocument: HTMLDocument
HTMLParamElement[JC] var parentElement: HTMLElement
HTMLParamElement[JC] def parentNode: Node
HTMLParamElement[JC] def prefix: String
HTMLParamElement[JC] def prepend(nodes: Node | String*): Unit
HTMLParamElement[JC] def previousElementSibling: Element
HTMLParamElement[JC] def previousSibling: Node
HTMLParamElement[JC] def querySelector(selectors: String): Element
HTMLParamElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLParamElement[JC] var readyState: js.Any
HTMLParamElement[JC] var recordNumber: js.Any
HTMLParamElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLParamElement[JC] def remove(): Unit
HTMLParamElement[JC] def removeAttribute(name: String): Unit
HTMLParamElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLParamElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLParamElement[JC] def removeChild(oldChild: Node): Node
HTMLParamElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLParamElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLParamElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLParamElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLParamElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLParamElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLParamElement[JC] def requestPointerLock(): Unit
HTMLParamElement[JC] def scrollHeight: Int
HTMLParamElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLParamElement[JC] var scrollLeft: Double
HTMLParamElement[JC] var scrollTop: Double
HTMLParamElement[JC] def scrollWidth: Int
HTMLParamElement[JC] def setAttribute(name: String, value: String): Unit
HTMLParamElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLParamElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLParamElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLParamElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLParamElement[JC] def shadowRoot: ShadowRoot
HTMLParamElement[JC] var spellcheck: Boolean
HTMLParamElement[JC] def style: CSSStyleDeclaration
HTMLParamElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLParamElement[JC] def style_ = (value: String): Unit
HTMLParamElement[JC] var tabIndex: Int
HTMLParamElement[JC] def tagName: String
HTMLParamElement[JC] var textContent: String
HTMLParamElement[JC] var title: String
HTMLParamElement[JC] var value: String
HTMLPreElement[JC] var accessKey: String
HTMLPreElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLPreElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLPreElement[JC] def after(nodes: Node | String*): Unit
HTMLPreElement[JC] def append(nodes: Node | String*): Unit
HTMLPreElement[JC] def appendChild(newChild: Node): Node
HTMLPreElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLPreElement[JC] def attributes: NamedNodeMap
HTMLPreElement[JC] def baseURI: String
HTMLPreElement[JC] def before(nodes: Node | String*): Unit
HTMLPreElement[JC] def blur(): Unit
HTMLPreElement[JC] def childElementCount: Int
HTMLPreElement[JC] def childNodes: NodeList[Node]
HTMLPreElement[JC] def children: HTMLCollection[Element]
HTMLPreElement[JC] var classList: DOMTokenList
HTMLPreElement[JC] var className: String
HTMLPreElement[JC] def click(): Unit
HTMLPreElement[JC] def clientHeight: Int
HTMLPreElement[JC] def clientLeft: Int
HTMLPreElement[JC] def clientTop: Int
HTMLPreElement[JC] def clientWidth: Int
HTMLPreElement[JC] def cloneNode(deep: Boolean?): Node
HTMLPreElement[JC] def closest(selector: String): Element
HTMLPreElement[JC] def compareDocumentPosition(other: Node): Int
HTMLPreElement[JC] def contains(child: HTMLElement): Boolean
HTMLPreElement[JC] def contains(otherNode: Node): Boolean
HTMLPreElement[JC] var contentEditable: String
HTMLPreElement[JC] def dataset: js.Dictionary[String]
HTMLPreElement[JC] var dir: String
HTMLPreElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLPreElement[JC] var draggable: Boolean
HTMLPreElement[JC] var filters: Object
HTMLPreElement[JC] def firstChild: Node
HTMLPreElement[JC] def firstElementChild: Element
HTMLPreElement[JC] def focus(): Unit
HTMLPreElement[JC] def focus(options: FocusOptions): Unit
HTMLPreElement[JC] def getAttribute(name: String): String
HTMLPreElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLPreElement[JC] def getAttributeNode(name: String): Attr
HTMLPreElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLPreElement[JC] def getBoundingClientRect(): DOMRect
HTMLPreElement[JC] def getClientRects(): DOMRectList
HTMLPreElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLPreElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLPreElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLPreElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLPreElement[JC] def hasAttribute(name: String): Boolean
HTMLPreElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLPreElement[JC] def hasAttributes(): Boolean
HTMLPreElement[JC] def hasChildNodes(): Boolean
HTMLPreElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLPreElement[JC] var id: String
HTMLPreElement[JC] var innerHTML: String
HTMLPreElement[JC] var innerText: String
HTMLPreElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLPreElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLPreElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLPreElement[JC] def isConnected: Boolean
HTMLPreElement[JC] def isContentEditable: Boolean
HTMLPreElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLPreElement[JC] def isEqualNode(arg: Node): Boolean
HTMLPreElement[JC] def isSameNode(other: Node): Boolean
HTMLPreElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLPreElement[JC] var lang: String
HTMLPreElement[JC] def lastChild: Node
HTMLPreElement[JC] def lastElementChild: Element
HTMLPreElement[JC] def localName: String
HTMLPreElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLPreElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLPreElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLPreElement[JC] def matches(selector: String): Boolean
HTMLPreElement[JC] def namespaceURI: String
HTMLPreElement[JC] def nextElementSibling: Element
HTMLPreElement[JC] def nextSibling: Node
HTMLPreElement[JC] def nodeName: String
HTMLPreElement[JC] def nodeType: Int
HTMLPreElement[JC] var nodeValue: String
HTMLPreElement[JC] def normalize(): Unit
HTMLPreElement[JC] def offsetHeight: Double
HTMLPreElement[JC] def offsetLeft: Double
HTMLPreElement[JC] def offsetParent: Element
HTMLPreElement[JC] def offsetTop: Double
HTMLPreElement[JC] def offsetWidth: Double
HTMLPreElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLPreElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLPreElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLPreElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLPreElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLPreElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLPreElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLPreElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLPreElement[JC] var oncanplay: js.Function1[Event, _]
HTMLPreElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLPreElement[JC] var onchange: js.Function1[Event, _]
HTMLPreElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLPreElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLPreElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLPreElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLPreElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLPreElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLPreElement[JC] var oncuechange: js.Function1[Event, _]
HTMLPreElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLPreElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLPreElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLPreElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLPreElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLPreElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLPreElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLPreElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLPreElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLPreElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLPreElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLPreElement[JC] var onemptied: js.Function1[Event, _]
HTMLPreElement[JC] var onended: js.Function1[Event, _]
HTMLPreElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLPreElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLPreElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLPreElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLPreElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLPreElement[JC] var onhelp: js.Function1[Event, _]
HTMLPreElement[JC] var oninput: js.Function1[Event, _]
HTMLPreElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLPreElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLPreElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLPreElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLPreElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLPreElement[JC] var onloadstart: js.Function1[Event, _]
HTMLPreElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLPreElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLPreElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLPreElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLPreElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLPreElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLPreElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLPreElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLPreElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLPreElement[JC] var onpause: js.Function1[Event, _]
HTMLPreElement[JC] var onplay: js.Function1[Event, _]
HTMLPreElement[JC] var onplaying: js.Function1[Event, _]
HTMLPreElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLPreElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLPreElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLPreElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLPreElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLPreElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLPreElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLPreElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLPreElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLPreElement[JC] var onratechange: js.Function1[Event, _]
HTMLPreElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLPreElement[JC] var onreset: js.Function1[Event, _]
HTMLPreElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLPreElement[JC] var onseeked: js.Function1[Event, _]
HTMLPreElement[JC] var onseeking: js.Function1[Event, _]
HTMLPreElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLPreElement[JC] var onselectstart: js.Function1[Event, _]
HTMLPreElement[JC] var onstalled: js.Function1[Event, _]
HTMLPreElement[JC] var onsubmit: js.Function1[Event, _]
HTMLPreElement[JC] var onsuspend: js.Function1[Event, _]
HTMLPreElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLPreElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLPreElement[JC] var onwaiting: js.Function1[Event, _]
HTMLPreElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLPreElement[JC] var outerHTML: String
HTMLPreElement[JC] def ownerDocument: Document
HTMLPreElement[JC] override def ownerDocument: HTMLDocument
HTMLPreElement[JC] var parentElement: HTMLElement
HTMLPreElement[JC] def parentNode: Node
HTMLPreElement[JC] def prefix: String
HTMLPreElement[JC] def prepend(nodes: Node | String*): Unit
HTMLPreElement[JC] def previousElementSibling: Element
HTMLPreElement[JC] def previousSibling: Node
HTMLPreElement[JC] def querySelector(selectors: String): Element
HTMLPreElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLPreElement[JC] var readyState: js.Any
HTMLPreElement[JC] var recordNumber: js.Any
HTMLPreElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLPreElement[JC] def remove(): Unit
HTMLPreElement[JC] def removeAttribute(name: String): Unit
HTMLPreElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLPreElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLPreElement[JC] def removeChild(oldChild: Node): Node
HTMLPreElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLPreElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLPreElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLPreElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLPreElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLPreElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLPreElement[JC] def requestPointerLock(): Unit
HTMLPreElement[JC] def scrollHeight: Int
HTMLPreElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLPreElement[JC] var scrollLeft: Double
HTMLPreElement[JC] var scrollTop: Double
HTMLPreElement[JC] def scrollWidth: Int
HTMLPreElement[JC] def setAttribute(name: String, value: String): Unit
HTMLPreElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLPreElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLPreElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLPreElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLPreElement[JC] def shadowRoot: ShadowRoot
HTMLPreElement[JC] var spellcheck: Boolean
HTMLPreElement[JC] def style: CSSStyleDeclaration
HTMLPreElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLPreElement[JC] def style_ = (value: String): Unit
HTMLPreElement[JC] var tabIndex: Int
HTMLPreElement[JC] def tagName: String
HTMLPreElement[JC] var textContent: String
HTMLPreElement[JC] var title: String
HTMLProgressElement[JC] var accessKey: String
HTMLProgressElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLProgressElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLProgressElement[JC] def after(nodes: Node | String*): Unit
HTMLProgressElement[JC] def append(nodes: Node | String*): Unit
HTMLProgressElement[JC] def appendChild(newChild: Node): Node
HTMLProgressElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLProgressElement[JC] def attributes: NamedNodeMap
HTMLProgressElement[JC] def baseURI: String
HTMLProgressElement[JC] def before(nodes: Node | String*): Unit
HTMLProgressElement[JC] def blur(): Unit
HTMLProgressElement[JC] def childElementCount: Int
HTMLProgressElement[JC] def childNodes: NodeList[Node]
HTMLProgressElement[JC] def children: HTMLCollection[Element]
HTMLProgressElement[JC] var classList: DOMTokenList
HTMLProgressElement[JC] var className: String
HTMLProgressElement[JC] def click(): Unit
HTMLProgressElement[JC] def clientHeight: Int
HTMLProgressElement[JC] def clientLeft: Int
HTMLProgressElement[JC] def clientTop: Int
HTMLProgressElement[JC] def clientWidth: Int
HTMLProgressElement[JC] def cloneNode(deep: Boolean?): Node
HTMLProgressElement[JC] def closest(selector: String): Element
HTMLProgressElement[JC] def compareDocumentPosition(other: Node): Int
HTMLProgressElement[JC] def contains(child: HTMLElement): Boolean
HTMLProgressElement[JC] def contains(otherNode: Node): Boolean
HTMLProgressElement[JC] var contentEditable: String
HTMLProgressElement[JC] def dataset: js.Dictionary[String]
HTMLProgressElement[JC] var dir: String
HTMLProgressElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLProgressElement[JC] var draggable: Boolean
HTMLProgressElement[JC] var filters: Object
HTMLProgressElement[JC] def firstChild: Node
HTMLProgressElement[JC] def firstElementChild: Element
HTMLProgressElement[JC] def focus(): Unit
HTMLProgressElement[JC] def focus(options: FocusOptions): Unit
HTMLProgressElement[JC] var form: HTMLFormElement
HTMLProgressElement[JC] def getAttribute(name: String): String
HTMLProgressElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLProgressElement[JC] def getAttributeNode(name: String): Attr
HTMLProgressElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLProgressElement[JC] def getBoundingClientRect(): DOMRect
HTMLProgressElement[JC] def getClientRects(): DOMRectList
HTMLProgressElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLProgressElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLProgressElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLProgressElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLProgressElement[JC] def hasAttribute(name: String): Boolean
HTMLProgressElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLProgressElement[JC] def hasAttributes(): Boolean
HTMLProgressElement[JC] def hasChildNodes(): Boolean
HTMLProgressElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLProgressElement[JC] var id: String
HTMLProgressElement[JC] var innerHTML: String
HTMLProgressElement[JC] var innerText: String
HTMLProgressElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLProgressElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLProgressElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLProgressElement[JC] def isConnected: Boolean
HTMLProgressElement[JC] def isContentEditable: Boolean
HTMLProgressElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLProgressElement[JC] def isEqualNode(arg: Node): Boolean
HTMLProgressElement[JC] def isSameNode(other: Node): Boolean
HTMLProgressElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLProgressElement[JC] var lang: String
HTMLProgressElement[JC] def lastChild: Node
HTMLProgressElement[JC] def lastElementChild: Element
HTMLProgressElement[JC] def localName: String
HTMLProgressElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLProgressElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLProgressElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLProgressElement[JC] def matches(selector: String): Boolean
HTMLProgressElement[JC] var max: Double
HTMLProgressElement[JC] def namespaceURI: String
HTMLProgressElement[JC] def nextElementSibling: Element
HTMLProgressElement[JC] def nextSibling: Node
HTMLProgressElement[JC] def nodeName: String
HTMLProgressElement[JC] def nodeType: Int
HTMLProgressElement[JC] var nodeValue: String
HTMLProgressElement[JC] def normalize(): Unit
HTMLProgressElement[JC] def offsetHeight: Double
HTMLProgressElement[JC] def offsetLeft: Double
HTMLProgressElement[JC] def offsetParent: Element
HTMLProgressElement[JC] def offsetTop: Double
HTMLProgressElement[JC] def offsetWidth: Double
HTMLProgressElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLProgressElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLProgressElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLProgressElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLProgressElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLProgressElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLProgressElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLProgressElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLProgressElement[JC] var oncanplay: js.Function1[Event, _]
HTMLProgressElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLProgressElement[JC] var onchange: js.Function1[Event, _]
HTMLProgressElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLProgressElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLProgressElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLProgressElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLProgressElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLProgressElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLProgressElement[JC] var oncuechange: js.Function1[Event, _]
HTMLProgressElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLProgressElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLProgressElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLProgressElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLProgressElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLProgressElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLProgressElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLProgressElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLProgressElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLProgressElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLProgressElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLProgressElement[JC] var onemptied: js.Function1[Event, _]
HTMLProgressElement[JC] var onended: js.Function1[Event, _]
HTMLProgressElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLProgressElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLProgressElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLProgressElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLProgressElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLProgressElement[JC] var onhelp: js.Function1[Event, _]
HTMLProgressElement[JC] var oninput: js.Function1[Event, _]
HTMLProgressElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLProgressElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLProgressElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLProgressElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLProgressElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLProgressElement[JC] var onloadstart: js.Function1[Event, _]
HTMLProgressElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLProgressElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLProgressElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLProgressElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLProgressElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLProgressElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLProgressElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLProgressElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLProgressElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLProgressElement[JC] var onpause: js.Function1[Event, _]
HTMLProgressElement[JC] var onplay: js.Function1[Event, _]
HTMLProgressElement[JC] var onplaying: js.Function1[Event, _]
HTMLProgressElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLProgressElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLProgressElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLProgressElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLProgressElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLProgressElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLProgressElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLProgressElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLProgressElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLProgressElement[JC] var onratechange: js.Function1[Event, _]
HTMLProgressElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLProgressElement[JC] var onreset: js.Function1[Event, _]
HTMLProgressElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLProgressElement[JC] var onseeked: js.Function1[Event, _]
HTMLProgressElement[JC] var onseeking: js.Function1[Event, _]
HTMLProgressElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLProgressElement[JC] var onselectstart: js.Function1[Event, _]
HTMLProgressElement[JC] var onstalled: js.Function1[Event, _]
HTMLProgressElement[JC] var onsubmit: js.Function1[Event, _]
HTMLProgressElement[JC] var onsuspend: js.Function1[Event, _]
HTMLProgressElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLProgressElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLProgressElement[JC] var onwaiting: js.Function1[Event, _]
HTMLProgressElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLProgressElement[JC] var outerHTML: String
HTMLProgressElement[JC] def ownerDocument: Document
HTMLProgressElement[JC] override def ownerDocument: HTMLDocument
HTMLProgressElement[JC] var parentElement: HTMLElement
HTMLProgressElement[JC] def parentNode: Node
HTMLProgressElement[JC] def position: Double
HTMLProgressElement[JC] def prefix: String
HTMLProgressElement[JC] def prepend(nodes: Node | String*): Unit
HTMLProgressElement[JC] def previousElementSibling: Element
HTMLProgressElement[JC] def previousSibling: Node
HTMLProgressElement[JC] def querySelector(selectors: String): Element
HTMLProgressElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLProgressElement[JC] var readyState: js.Any
HTMLProgressElement[JC] var recordNumber: js.Any
HTMLProgressElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLProgressElement[JC] def remove(): Unit
HTMLProgressElement[JC] def removeAttribute(name: String): Unit
HTMLProgressElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLProgressElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLProgressElement[JC] def removeChild(oldChild: Node): Node
HTMLProgressElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLProgressElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLProgressElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLProgressElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLProgressElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLProgressElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLProgressElement[JC] def requestPointerLock(): Unit
HTMLProgressElement[JC] def scrollHeight: Int
HTMLProgressElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLProgressElement[JC] var scrollLeft: Double
HTMLProgressElement[JC] var scrollTop: Double
HTMLProgressElement[JC] def scrollWidth: Int
HTMLProgressElement[JC] def setAttribute(name: String, value: String): Unit
HTMLProgressElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLProgressElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLProgressElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLProgressElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLProgressElement[JC] def shadowRoot: ShadowRoot
HTMLProgressElement[JC] var spellcheck: Boolean
HTMLProgressElement[JC] def style: CSSStyleDeclaration
HTMLProgressElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLProgressElement[JC] def style_ = (value: String): Unit
HTMLProgressElement[JC] var tabIndex: Int
HTMLProgressElement[JC] def tagName: String
HTMLProgressElement[JC] var textContent: String
HTMLProgressElement[JC] var title: String
HTMLProgressElement[JC] var value: Double
HTMLQuoteElement[JC] var accessKey: String
HTMLQuoteElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLQuoteElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLQuoteElement[JC] def after(nodes: Node | String*): Unit
HTMLQuoteElement[JC] def append(nodes: Node | String*): Unit
HTMLQuoteElement[JC] def appendChild(newChild: Node): Node
HTMLQuoteElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLQuoteElement[JC] def attributes: NamedNodeMap
HTMLQuoteElement[JC] def baseURI: String
HTMLQuoteElement[JC] def before(nodes: Node | String*): Unit
HTMLQuoteElement[JC] def blur(): Unit
HTMLQuoteElement[JC] def childElementCount: Int
HTMLQuoteElement[JC] def childNodes: NodeList[Node]
HTMLQuoteElement[JC] def children: HTMLCollection[Element]
HTMLQuoteElement[JC] var cite: String
HTMLQuoteElement[JC] var classList: DOMTokenList
HTMLQuoteElement[JC] var className: String
HTMLQuoteElement[JC] def click(): Unit
HTMLQuoteElement[JC] def clientHeight: Int
HTMLQuoteElement[JC] def clientLeft: Int
HTMLQuoteElement[JC] def clientTop: Int
HTMLQuoteElement[JC] def clientWidth: Int
HTMLQuoteElement[JC] def cloneNode(deep: Boolean?): Node
HTMLQuoteElement[JC] def closest(selector: String): Element
HTMLQuoteElement[JC] def compareDocumentPosition(other: Node): Int
HTMLQuoteElement[JC] def contains(child: HTMLElement): Boolean
HTMLQuoteElement[JC] def contains(otherNode: Node): Boolean
HTMLQuoteElement[JC] var contentEditable: String
HTMLQuoteElement[JC] def dataset: js.Dictionary[String]
HTMLQuoteElement[JC] var dateTime: String
HTMLQuoteElement[JC] var dir: String
HTMLQuoteElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLQuoteElement[JC] var draggable: Boolean
HTMLQuoteElement[JC] var filters: Object
HTMLQuoteElement[JC] def firstChild: Node
HTMLQuoteElement[JC] def firstElementChild: Element
HTMLQuoteElement[JC] def focus(): Unit
HTMLQuoteElement[JC] def focus(options: FocusOptions): Unit
HTMLQuoteElement[JC] def getAttribute(name: String): String
HTMLQuoteElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLQuoteElement[JC] def getAttributeNode(name: String): Attr
HTMLQuoteElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLQuoteElement[JC] def getBoundingClientRect(): DOMRect
HTMLQuoteElement[JC] def getClientRects(): DOMRectList
HTMLQuoteElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLQuoteElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLQuoteElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLQuoteElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLQuoteElement[JC] def hasAttribute(name: String): Boolean
HTMLQuoteElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLQuoteElement[JC] def hasAttributes(): Boolean
HTMLQuoteElement[JC] def hasChildNodes(): Boolean
HTMLQuoteElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLQuoteElement[JC] var id: String
HTMLQuoteElement[JC] var innerHTML: String
HTMLQuoteElement[JC] var innerText: String
HTMLQuoteElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLQuoteElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLQuoteElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLQuoteElement[JC] def isConnected: Boolean
HTMLQuoteElement[JC] def isContentEditable: Boolean
HTMLQuoteElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLQuoteElement[JC] def isEqualNode(arg: Node): Boolean
HTMLQuoteElement[JC] def isSameNode(other: Node): Boolean
HTMLQuoteElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLQuoteElement[JC] var lang: String
HTMLQuoteElement[JC] def lastChild: Node
HTMLQuoteElement[JC] def lastElementChild: Element
HTMLQuoteElement[JC] def localName: String
HTMLQuoteElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLQuoteElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLQuoteElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLQuoteElement[JC] def matches(selector: String): Boolean
HTMLQuoteElement[JC] def namespaceURI: String
HTMLQuoteElement[JC] def nextElementSibling: Element
HTMLQuoteElement[JC] def nextSibling: Node
HTMLQuoteElement[JC] def nodeName: String
HTMLQuoteElement[JC] def nodeType: Int
HTMLQuoteElement[JC] var nodeValue: String
HTMLQuoteElement[JC] def normalize(): Unit
HTMLQuoteElement[JC] def offsetHeight: Double
HTMLQuoteElement[JC] def offsetLeft: Double
HTMLQuoteElement[JC] def offsetParent: Element
HTMLQuoteElement[JC] def offsetTop: Double
HTMLQuoteElement[JC] def offsetWidth: Double
HTMLQuoteElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLQuoteElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLQuoteElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLQuoteElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLQuoteElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLQuoteElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLQuoteElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLQuoteElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLQuoteElement[JC] var oncanplay: js.Function1[Event, _]
HTMLQuoteElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLQuoteElement[JC] var onchange: js.Function1[Event, _]
HTMLQuoteElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLQuoteElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLQuoteElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLQuoteElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLQuoteElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLQuoteElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLQuoteElement[JC] var oncuechange: js.Function1[Event, _]
HTMLQuoteElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLQuoteElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLQuoteElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLQuoteElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLQuoteElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLQuoteElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLQuoteElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLQuoteElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLQuoteElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLQuoteElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLQuoteElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLQuoteElement[JC] var onemptied: js.Function1[Event, _]
HTMLQuoteElement[JC] var onended: js.Function1[Event, _]
HTMLQuoteElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLQuoteElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLQuoteElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLQuoteElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLQuoteElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLQuoteElement[JC] var onhelp: js.Function1[Event, _]
HTMLQuoteElement[JC] var oninput: js.Function1[Event, _]
HTMLQuoteElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLQuoteElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLQuoteElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLQuoteElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLQuoteElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLQuoteElement[JC] var onloadstart: js.Function1[Event, _]
HTMLQuoteElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLQuoteElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLQuoteElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLQuoteElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLQuoteElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLQuoteElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLQuoteElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLQuoteElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLQuoteElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLQuoteElement[JC] var onpause: js.Function1[Event, _]
HTMLQuoteElement[JC] var onplay: js.Function1[Event, _]
HTMLQuoteElement[JC] var onplaying: js.Function1[Event, _]
HTMLQuoteElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLQuoteElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLQuoteElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLQuoteElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLQuoteElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLQuoteElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLQuoteElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLQuoteElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLQuoteElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLQuoteElement[JC] var onratechange: js.Function1[Event, _]
HTMLQuoteElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLQuoteElement[JC] var onreset: js.Function1[Event, _]
HTMLQuoteElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLQuoteElement[JC] var onseeked: js.Function1[Event, _]
HTMLQuoteElement[JC] var onseeking: js.Function1[Event, _]
HTMLQuoteElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLQuoteElement[JC] var onselectstart: js.Function1[Event, _]
HTMLQuoteElement[JC] var onstalled: js.Function1[Event, _]
HTMLQuoteElement[JC] var onsubmit: js.Function1[Event, _]
HTMLQuoteElement[JC] var onsuspend: js.Function1[Event, _]
HTMLQuoteElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLQuoteElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLQuoteElement[JC] var onwaiting: js.Function1[Event, _]
HTMLQuoteElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLQuoteElement[JC] var outerHTML: String
HTMLQuoteElement[JC] def ownerDocument: Document
HTMLQuoteElement[JC] override def ownerDocument: HTMLDocument
HTMLQuoteElement[JC] var parentElement: HTMLElement
HTMLQuoteElement[JC] def parentNode: Node
HTMLQuoteElement[JC] def prefix: String
HTMLQuoteElement[JC] def prepend(nodes: Node | String*): Unit
HTMLQuoteElement[JC] def previousElementSibling: Element
HTMLQuoteElement[JC] def previousSibling: Node
HTMLQuoteElement[JC] def querySelector(selectors: String): Element
HTMLQuoteElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLQuoteElement[JC] var readyState: js.Any
HTMLQuoteElement[JC] var recordNumber: js.Any
HTMLQuoteElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLQuoteElement[JC] def remove(): Unit
HTMLQuoteElement[JC] def removeAttribute(name: String): Unit
HTMLQuoteElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLQuoteElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLQuoteElement[JC] def removeChild(oldChild: Node): Node
HTMLQuoteElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLQuoteElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLQuoteElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLQuoteElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLQuoteElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLQuoteElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLQuoteElement[JC] def requestPointerLock(): Unit
HTMLQuoteElement[JC] def scrollHeight: Int
HTMLQuoteElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLQuoteElement[JC] var scrollLeft: Double
HTMLQuoteElement[JC] var scrollTop: Double
HTMLQuoteElement[JC] def scrollWidth: Int
HTMLQuoteElement[JC] def setAttribute(name: String, value: String): Unit
HTMLQuoteElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLQuoteElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLQuoteElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLQuoteElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLQuoteElement[JC] def shadowRoot: ShadowRoot
HTMLQuoteElement[JC] var spellcheck: Boolean
HTMLQuoteElement[JC] def style: CSSStyleDeclaration
HTMLQuoteElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLQuoteElement[JC] def style_ = (value: String): Unit
HTMLQuoteElement[JC] var tabIndex: Int
HTMLQuoteElement[JC] def tagName: String
HTMLQuoteElement[JC] var textContent: String
HTMLQuoteElement[JC] var title: String
HTMLScriptElement[JC] var accessKey: String
HTMLScriptElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLScriptElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLScriptElement[JC] def after(nodes: Node | String*): Unit
HTMLScriptElement[JC] def append(nodes: Node | String*): Unit
HTMLScriptElement[JC] def appendChild(newChild: Node): Node
HTMLScriptElement[JC] var async: Boolean
HTMLScriptElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLScriptElement[JC] def attributes: NamedNodeMap
HTMLScriptElement[JC] def baseURI: String
HTMLScriptElement[JC] def before(nodes: Node | String*): Unit
HTMLScriptElement[JC] def blur(): Unit
HTMLScriptElement[JC] var charset: String
HTMLScriptElement[JC] def childElementCount: Int
HTMLScriptElement[JC] def childNodes: NodeList[Node]
HTMLScriptElement[JC] def children: HTMLCollection[Element]
HTMLScriptElement[JC] var classList: DOMTokenList
HTMLScriptElement[JC] var className: String
HTMLScriptElement[JC] def click(): Unit
HTMLScriptElement[JC] def clientHeight: Int
HTMLScriptElement[JC] def clientLeft: Int
HTMLScriptElement[JC] def clientTop: Int
HTMLScriptElement[JC] def clientWidth: Int
HTMLScriptElement[JC] def cloneNode(deep: Boolean?): Node
HTMLScriptElement[JC] def closest(selector: String): Element
HTMLScriptElement[JC] def compareDocumentPosition(other: Node): Int
HTMLScriptElement[JC] def contains(child: HTMLElement): Boolean
HTMLScriptElement[JC] def contains(otherNode: Node): Boolean
HTMLScriptElement[JC] var contentEditable: String
HTMLScriptElement[JC] def dataset: js.Dictionary[String]
HTMLScriptElement[JC] var defer: Boolean
HTMLScriptElement[JC] var dir: String
HTMLScriptElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLScriptElement[JC] var draggable: Boolean
HTMLScriptElement[JC] var event: String
HTMLScriptElement[JC] var filters: Object
HTMLScriptElement[JC] def firstChild: Node
HTMLScriptElement[JC] def firstElementChild: Element
HTMLScriptElement[JC] def focus(): Unit
HTMLScriptElement[JC] def focus(options: FocusOptions): Unit
HTMLScriptElement[JC] def getAttribute(name: String): String
HTMLScriptElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLScriptElement[JC] def getAttributeNode(name: String): Attr
HTMLScriptElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLScriptElement[JC] def getBoundingClientRect(): DOMRect
HTMLScriptElement[JC] def getClientRects(): DOMRectList
HTMLScriptElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLScriptElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLScriptElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLScriptElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLScriptElement[JC] def hasAttribute(name: String): Boolean
HTMLScriptElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLScriptElement[JC] def hasAttributes(): Boolean
HTMLScriptElement[JC] def hasChildNodes(): Boolean
HTMLScriptElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLScriptElement[JC] var id: String
HTMLScriptElement[JC] var innerHTML: String
HTMLScriptElement[JC] var innerText: String
HTMLScriptElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLScriptElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLScriptElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLScriptElement[JC] def isConnected: Boolean
HTMLScriptElement[JC] def isContentEditable: Boolean
HTMLScriptElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLScriptElement[JC] def isEqualNode(arg: Node): Boolean
HTMLScriptElement[JC] def isSameNode(other: Node): Boolean
HTMLScriptElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLScriptElement[JC] var lang: String
HTMLScriptElement[JC] def lastChild: Node
HTMLScriptElement[JC] def lastElementChild: Element
HTMLScriptElement[JC] def localName: String
HTMLScriptElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLScriptElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLScriptElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLScriptElement[JC] def matches(selector: String): Boolean
HTMLScriptElement[JC] def namespaceURI: String
HTMLScriptElement[JC] def nextElementSibling: Element
HTMLScriptElement[JC] def nextSibling: Node
HTMLScriptElement[JC] def nodeName: String
HTMLScriptElement[JC] def nodeType: Int
HTMLScriptElement[JC] var nodeValue: String
HTMLScriptElement[JC] def normalize(): Unit
HTMLScriptElement[JC] def offsetHeight: Double
HTMLScriptElement[JC] def offsetLeft: Double
HTMLScriptElement[JC] def offsetParent: Element
HTMLScriptElement[JC] def offsetTop: Double
HTMLScriptElement[JC] def offsetWidth: Double
HTMLScriptElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLScriptElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLScriptElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLScriptElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLScriptElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLScriptElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLScriptElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLScriptElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLScriptElement[JC] var oncanplay: js.Function1[Event, _]
HTMLScriptElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLScriptElement[JC] var onchange: js.Function1[Event, _]
HTMLScriptElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLScriptElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLScriptElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLScriptElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLScriptElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLScriptElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLScriptElement[JC] var oncuechange: js.Function1[Event, _]
HTMLScriptElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLScriptElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLScriptElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLScriptElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLScriptElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLScriptElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLScriptElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLScriptElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLScriptElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLScriptElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLScriptElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLScriptElement[JC] var onemptied: js.Function1[Event, _]
HTMLScriptElement[JC] var onended: js.Function1[Event, _]
HTMLScriptElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLScriptElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLScriptElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLScriptElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLScriptElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLScriptElement[JC] var onhelp: js.Function1[Event, _]
HTMLScriptElement[JC] var oninput: js.Function1[Event, _]
HTMLScriptElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLScriptElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLScriptElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLScriptElement[JC] var onload: js.Function1[Event, _]
HTMLScriptElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLScriptElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLScriptElement[JC] var onloadstart: js.Function1[Event, _]
HTMLScriptElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLScriptElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLScriptElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLScriptElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLScriptElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLScriptElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLScriptElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLScriptElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLScriptElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLScriptElement[JC] var onpause: js.Function1[Event, _]
HTMLScriptElement[JC] var onplay: js.Function1[Event, _]
HTMLScriptElement[JC] var onplaying: js.Function1[Event, _]
HTMLScriptElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLScriptElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLScriptElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLScriptElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLScriptElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLScriptElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLScriptElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLScriptElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLScriptElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLScriptElement[JC] var onratechange: js.Function1[Event, _]
HTMLScriptElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLScriptElement[JC] var onreset: js.Function1[Event, _]
HTMLScriptElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLScriptElement[JC] var onseeked: js.Function1[Event, _]
HTMLScriptElement[JC] var onseeking: js.Function1[Event, _]
HTMLScriptElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLScriptElement[JC] var onselectstart: js.Function1[Event, _]
HTMLScriptElement[JC] var onstalled: js.Function1[Event, _]
HTMLScriptElement[JC] var onsubmit: js.Function1[Event, _]
HTMLScriptElement[JC] var onsuspend: js.Function1[Event, _]
HTMLScriptElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLScriptElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLScriptElement[JC] var onwaiting: js.Function1[Event, _]
HTMLScriptElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLScriptElement[JC] var outerHTML: String
HTMLScriptElement[JC] def ownerDocument: Document
HTMLScriptElement[JC] override def ownerDocument: HTMLDocument
HTMLScriptElement[JC] var parentElement: HTMLElement
HTMLScriptElement[JC] def parentNode: Node
HTMLScriptElement[JC] def prefix: String
HTMLScriptElement[JC] def prepend(nodes: Node | String*): Unit
HTMLScriptElement[JC] def previousElementSibling: Element
HTMLScriptElement[JC] def previousSibling: Node
HTMLScriptElement[JC] def querySelector(selectors: String): Element
HTMLScriptElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLScriptElement[JC] var readyState: js.Any
HTMLScriptElement[JC] var recordNumber: js.Any
HTMLScriptElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLScriptElement[JC] def remove(): Unit
HTMLScriptElement[JC] def removeAttribute(name: String): Unit
HTMLScriptElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLScriptElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLScriptElement[JC] def removeChild(oldChild: Node): Node
HTMLScriptElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLScriptElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLScriptElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLScriptElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLScriptElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLScriptElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLScriptElement[JC] def requestPointerLock(): Unit
HTMLScriptElement[JC] def scrollHeight: Int
HTMLScriptElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLScriptElement[JC] var scrollLeft: Double
HTMLScriptElement[JC] var scrollTop: Double
HTMLScriptElement[JC] def scrollWidth: Int
HTMLScriptElement[JC] def setAttribute(name: String, value: String): Unit
HTMLScriptElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLScriptElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLScriptElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLScriptElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLScriptElement[JC] def shadowRoot: ShadowRoot
HTMLScriptElement[JC] var spellcheck: Boolean
HTMLScriptElement[JC] var src: String
HTMLScriptElement[JC] def style: CSSStyleDeclaration
HTMLScriptElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLScriptElement[JC] def style_ = (value: String): Unit
HTMLScriptElement[JC] var tabIndex: Int
HTMLScriptElement[JC] def tagName: String
HTMLScriptElement[JC] var text: String
HTMLScriptElement[JC] var textContent: String
HTMLScriptElement[JC] var title: String
HTMLScriptElement[JC] var `type`: String
HTMLSelectElement[JC] var accessKey: String
HTMLSelectElement[JC] def add(element: HTMLElement, before: js.Any?): Unit
HTMLSelectElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLSelectElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLSelectElement[JC] def after(nodes: Node | String*): Unit
HTMLSelectElement[JC] def append(nodes: Node | String*): Unit
HTMLSelectElement[JC] def appendChild(newChild: Node): Node
HTMLSelectElement[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(name: String): js.Any
HTMLSelectElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLSelectElement[JC] def attributes: NamedNodeMap
HTMLSelectElement[JC] var autofocus: Boolean
HTMLSelectElement[JC] def baseURI: String
HTMLSelectElement[JC] def before(nodes: Node | String*): Unit
HTMLSelectElement[JC] def blur(): Unit
HTMLSelectElement[JC] def checkValidity(): Boolean
HTMLSelectElement[JC] def childElementCount: Int
HTMLSelectElement[JC] def childNodes: NodeList[Node]
HTMLSelectElement[JC] def children: HTMLCollection[Element]
HTMLSelectElement[JC] var classList: DOMTokenList
HTMLSelectElement[JC] var className: String
HTMLSelectElement[JC] def click(): Unit
HTMLSelectElement[JC] def clientHeight: Int
HTMLSelectElement[JC] def clientLeft: Int
HTMLSelectElement[JC] def clientTop: Int
HTMLSelectElement[JC] def clientWidth: Int
HTMLSelectElement[JC] def cloneNode(deep: Boolean?): Node
HTMLSelectElement[JC] def closest(selector: String): Element
HTMLSelectElement[JC] def compareDocumentPosition(other: Node): Int
HTMLSelectElement[JC] def contains(child: HTMLElement): Boolean
HTMLSelectElement[JC] def contains(otherNode: Node): Boolean
HTMLSelectElement[JC] var contentEditable: String
HTMLSelectElement[JC] def dataset: js.Dictionary[String]
HTMLSelectElement[JC] var dir: String
HTMLSelectElement[JC] var disabled: Boolean
HTMLSelectElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLSelectElement[JC] var draggable: Boolean
HTMLSelectElement[JC] var filters: Object
HTMLSelectElement[JC] def firstChild: Node
HTMLSelectElement[JC] def firstElementChild: Element
HTMLSelectElement[JC] def focus(): Unit
HTMLSelectElement[JC] def focus(options: FocusOptions): Unit
HTMLSelectElement[JC] def form: HTMLFormElement
HTMLSelectElement[JC] def getAttribute(name: String): String
HTMLSelectElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLSelectElement[JC] def getAttributeNode(name: String): Attr
HTMLSelectElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLSelectElement[JC] def getBoundingClientRect(): DOMRect
HTMLSelectElement[JC] def getClientRects(): DOMRectList
HTMLSelectElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLSelectElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLSelectElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLSelectElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLSelectElement[JC] def hasAttribute(name: String): Boolean
HTMLSelectElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLSelectElement[JC] def hasAttributes(): Boolean
HTMLSelectElement[JC] def hasChildNodes(): Boolean
HTMLSelectElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLSelectElement[JC] var id: String
HTMLSelectElement[JC] var innerHTML: String
HTMLSelectElement[JC] var innerText: String
HTMLSelectElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLSelectElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLSelectElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLSelectElement[JC] def isConnected: Boolean
HTMLSelectElement[JC] def isContentEditable: Boolean
HTMLSelectElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLSelectElement[JC] def isEqualNode(arg: Node): Boolean
HTMLSelectElement[JC] def isSameNode(other: Node): Boolean
HTMLSelectElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLSelectElement[JC] def item(name: js.Any?, index: js.Any?): js.Dynamic
HTMLSelectElement[JC] var lang: String
HTMLSelectElement[JC] def lastChild: Node
HTMLSelectElement[JC] def lastElementChild: Element
HTMLSelectElement[JC] var length: Int
HTMLSelectElement[JC] def localName: String
HTMLSelectElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLSelectElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLSelectElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLSelectElement[JC] def matches(selector: String): Boolean
HTMLSelectElement[JC] var multiple: Boolean
HTMLSelectElement[JC] var name: String
HTMLSelectElement[JC] def namedItem(name: String): js.Dynamic
HTMLSelectElement[JC] def namespaceURI: String
HTMLSelectElement[JC] def nextElementSibling: Element
HTMLSelectElement[JC] def nextSibling: Node
HTMLSelectElement[JC] def nodeName: String
HTMLSelectElement[JC] def nodeType: Int
HTMLSelectElement[JC] var nodeValue: String
HTMLSelectElement[JC] def normalize(): Unit
HTMLSelectElement[JC] def offsetHeight: Double
HTMLSelectElement[JC] def offsetLeft: Double
HTMLSelectElement[JC] def offsetParent: Element
HTMLSelectElement[JC] def offsetTop: Double
HTMLSelectElement[JC] def offsetWidth: Double
HTMLSelectElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLSelectElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLSelectElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLSelectElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLSelectElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLSelectElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLSelectElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLSelectElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLSelectElement[JC] var oncanplay: js.Function1[Event, _]
HTMLSelectElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLSelectElement[JC] var onchange: js.Function1[Event, _]
HTMLSelectElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLSelectElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLSelectElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLSelectElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLSelectElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLSelectElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLSelectElement[JC] var oncuechange: js.Function1[Event, _]
HTMLSelectElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLSelectElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLSelectElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLSelectElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLSelectElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLSelectElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLSelectElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLSelectElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLSelectElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLSelectElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLSelectElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLSelectElement[JC] var onemptied: js.Function1[Event, _]
HTMLSelectElement[JC] var onended: js.Function1[Event, _]
HTMLSelectElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLSelectElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLSelectElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLSelectElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLSelectElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLSelectElement[JC] var onhelp: js.Function1[Event, _]
HTMLSelectElement[JC] var oninput: js.Function1[Event, _]
HTMLSelectElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLSelectElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLSelectElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLSelectElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLSelectElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLSelectElement[JC] var onloadstart: js.Function1[Event, _]
HTMLSelectElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLSelectElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLSelectElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLSelectElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLSelectElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLSelectElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLSelectElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLSelectElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLSelectElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLSelectElement[JC] var onpause: js.Function1[Event, _]
HTMLSelectElement[JC] var onplay: js.Function1[Event, _]
HTMLSelectElement[JC] var onplaying: js.Function1[Event, _]
HTMLSelectElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLSelectElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLSelectElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLSelectElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLSelectElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLSelectElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLSelectElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLSelectElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLSelectElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLSelectElement[JC] var onratechange: js.Function1[Event, _]
HTMLSelectElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLSelectElement[JC] var onreset: js.Function1[Event, _]
HTMLSelectElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLSelectElement[JC] var onseeked: js.Function1[Event, _]
HTMLSelectElement[JC] var onseeking: js.Function1[Event, _]
HTMLSelectElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLSelectElement[JC] var onselectstart: js.Function1[Event, _]
HTMLSelectElement[JC] var onstalled: js.Function1[Event, _]
HTMLSelectElement[JC] var onsubmit: js.Function1[Event, _]
HTMLSelectElement[JC] var onsuspend: js.Function1[Event, _]
HTMLSelectElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLSelectElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLSelectElement[JC] var onwaiting: js.Function1[Event, _]
HTMLSelectElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLSelectElement[JC] val options: HTMLOptionsCollection
HTMLSelectElement[JC] var outerHTML: String
HTMLSelectElement[JC] def ownerDocument: Document
HTMLSelectElement[JC] override def ownerDocument: HTMLDocument
HTMLSelectElement[JC] var parentElement: HTMLElement
HTMLSelectElement[JC] def parentNode: Node
HTMLSelectElement[JC] def prefix: String
HTMLSelectElement[JC] def prepend(nodes: Node | String*): Unit
HTMLSelectElement[JC] def previousElementSibling: Element
HTMLSelectElement[JC] def previousSibling: Node
HTMLSelectElement[JC] def querySelector(selectors: String): Element
HTMLSelectElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLSelectElement[JC] var readyState: js.Any
HTMLSelectElement[JC] var recordNumber: js.Any
HTMLSelectElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLSelectElement[JC] def remove(): Unit
HTMLSelectElement[JC] def remove(index: Int?): Unit
HTMLSelectElement[JC] def removeAttribute(name: String): Unit
HTMLSelectElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLSelectElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLSelectElement[JC] def removeChild(oldChild: Node): Node
HTMLSelectElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLSelectElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLSelectElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLSelectElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLSelectElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLSelectElement[JC] def reportValidity(): Boolean
HTMLSelectElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLSelectElement[JC] def requestPointerLock(): Unit
HTMLSelectElement[JC] var required: Boolean
HTMLSelectElement[JC] def scrollHeight: Int
HTMLSelectElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLSelectElement[JC] var scrollLeft: Double
HTMLSelectElement[JC] var scrollTop: Double
HTMLSelectElement[JC] def scrollWidth: Int
HTMLSelectElement[JC] var selectedIndex: Int
HTMLSelectElement[JC] def setAttribute(name: String, value: String): Unit
HTMLSelectElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLSelectElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLSelectElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLSelectElement[JC] def setCustomValidity(error: String): Unit
HTMLSelectElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLSelectElement[JC] def shadowRoot: ShadowRoot
HTMLSelectElement[JC] var size: Int
HTMLSelectElement[JC] var spellcheck: Boolean
HTMLSelectElement[JC] def style: CSSStyleDeclaration
HTMLSelectElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLSelectElement[JC] def style_ = (value: String): Unit
HTMLSelectElement[JC] var tabIndex: Int
HTMLSelectElement[JC] def tagName: String
HTMLSelectElement[JC] var textContent: String
HTMLSelectElement[JC] var title: String
HTMLSelectElement[JC] def `type`: String
HTMLSelectElement[JC] @scala.scalajs.js.annotation.JSBracketAccess def update(name: String, v: js.Any): Unit
HTMLSelectElement[JC] def validationMessage: String
HTMLSelectElement[JC] def validity: ValidityState
HTMLSelectElement[JC] var value: String
HTMLSelectElement[JC] def willValidate: Boolean
HTMLSourceElement[JC] var accessKey: String
HTMLSourceElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLSourceElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLSourceElement[JC] def after(nodes: Node | String*): Unit
HTMLSourceElement[JC] def append(nodes: Node | String*): Unit
HTMLSourceElement[JC] def appendChild(newChild: Node): Node
HTMLSourceElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLSourceElement[JC] def attributes: NamedNodeMap
HTMLSourceElement[JC] def baseURI: String
HTMLSourceElement[JC] def before(nodes: Node | String*): Unit
HTMLSourceElement[JC] def blur(): Unit
HTMLSourceElement[JC] def childElementCount: Int
HTMLSourceElement[JC] def childNodes: NodeList[Node]
HTMLSourceElement[JC] def children: HTMLCollection[Element]
HTMLSourceElement[JC] var classList: DOMTokenList
HTMLSourceElement[JC] var className: String
HTMLSourceElement[JC] def click(): Unit
HTMLSourceElement[JC] def clientHeight: Int
HTMLSourceElement[JC] def clientLeft: Int
HTMLSourceElement[JC] def clientTop: Int
HTMLSourceElement[JC] def clientWidth: Int
HTMLSourceElement[JC] def cloneNode(deep: Boolean?): Node
HTMLSourceElement[JC] def closest(selector: String): Element
HTMLSourceElement[JC] def compareDocumentPosition(other: Node): Int
HTMLSourceElement[JC] def contains(child: HTMLElement): Boolean
HTMLSourceElement[JC] def contains(otherNode: Node): Boolean
HTMLSourceElement[JC] var contentEditable: String
HTMLSourceElement[JC] def dataset: js.Dictionary[String]
HTMLSourceElement[JC] var dir: String
HTMLSourceElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLSourceElement[JC] var draggable: Boolean
HTMLSourceElement[JC] var filters: Object
HTMLSourceElement[JC] def firstChild: Node
HTMLSourceElement[JC] def firstElementChild: Element
HTMLSourceElement[JC] def focus(): Unit
HTMLSourceElement[JC] def focus(options: FocusOptions): Unit
HTMLSourceElement[JC] def getAttribute(name: String): String
HTMLSourceElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLSourceElement[JC] def getAttributeNode(name: String): Attr
HTMLSourceElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLSourceElement[JC] def getBoundingClientRect(): DOMRect
HTMLSourceElement[JC] def getClientRects(): DOMRectList
HTMLSourceElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLSourceElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLSourceElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLSourceElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLSourceElement[JC] def hasAttribute(name: String): Boolean
HTMLSourceElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLSourceElement[JC] def hasAttributes(): Boolean
HTMLSourceElement[JC] def hasChildNodes(): Boolean
HTMLSourceElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLSourceElement[JC] var id: String
HTMLSourceElement[JC] var innerHTML: String
HTMLSourceElement[JC] var innerText: String
HTMLSourceElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLSourceElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLSourceElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLSourceElement[JC] def isConnected: Boolean
HTMLSourceElement[JC] def isContentEditable: Boolean
HTMLSourceElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLSourceElement[JC] def isEqualNode(arg: Node): Boolean
HTMLSourceElement[JC] def isSameNode(other: Node): Boolean
HTMLSourceElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLSourceElement[JC] var lang: String
HTMLSourceElement[JC] def lastChild: Node
HTMLSourceElement[JC] def lastElementChild: Element
HTMLSourceElement[JC] def localName: String
HTMLSourceElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLSourceElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLSourceElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLSourceElement[JC] def matches(selector: String): Boolean
HTMLSourceElement[JC] var media: String
HTMLSourceElement[JC] def namespaceURI: String
HTMLSourceElement[JC] def nextElementSibling: Element
HTMLSourceElement[JC] def nextSibling: Node
HTMLSourceElement[JC] def nodeName: String
HTMLSourceElement[JC] def nodeType: Int
HTMLSourceElement[JC] var nodeValue: String
HTMLSourceElement[JC] def normalize(): Unit
HTMLSourceElement[JC] def offsetHeight: Double
HTMLSourceElement[JC] def offsetLeft: Double
HTMLSourceElement[JC] def offsetParent: Element
HTMLSourceElement[JC] def offsetTop: Double
HTMLSourceElement[JC] def offsetWidth: Double
HTMLSourceElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLSourceElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLSourceElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLSourceElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLSourceElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLSourceElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLSourceElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLSourceElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLSourceElement[JC] var oncanplay: js.Function1[Event, _]
HTMLSourceElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLSourceElement[JC] var onchange: js.Function1[Event, _]
HTMLSourceElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLSourceElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLSourceElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLSourceElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLSourceElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLSourceElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLSourceElement[JC] var oncuechange: js.Function1[Event, _]
HTMLSourceElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLSourceElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLSourceElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLSourceElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLSourceElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLSourceElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLSourceElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLSourceElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLSourceElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLSourceElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLSourceElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLSourceElement[JC] var onemptied: js.Function1[Event, _]
HTMLSourceElement[JC] var onended: js.Function1[Event, _]
HTMLSourceElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLSourceElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLSourceElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLSourceElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLSourceElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLSourceElement[JC] var onhelp: js.Function1[Event, _]
HTMLSourceElement[JC] var oninput: js.Function1[Event, _]
HTMLSourceElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLSourceElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLSourceElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLSourceElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLSourceElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLSourceElement[JC] var onloadstart: js.Function1[Event, _]
HTMLSourceElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLSourceElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLSourceElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLSourceElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLSourceElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLSourceElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLSourceElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLSourceElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLSourceElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLSourceElement[JC] var onpause: js.Function1[Event, _]
HTMLSourceElement[JC] var onplay: js.Function1[Event, _]
HTMLSourceElement[JC] var onplaying: js.Function1[Event, _]
HTMLSourceElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLSourceElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLSourceElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLSourceElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLSourceElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLSourceElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLSourceElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLSourceElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLSourceElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLSourceElement[JC] var onratechange: js.Function1[Event, _]
HTMLSourceElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLSourceElement[JC] var onreset: js.Function1[Event, _]
HTMLSourceElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLSourceElement[JC] var onseeked: js.Function1[Event, _]
HTMLSourceElement[JC] var onseeking: js.Function1[Event, _]
HTMLSourceElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLSourceElement[JC] var onselectstart: js.Function1[Event, _]
HTMLSourceElement[JC] var onstalled: js.Function1[Event, _]
HTMLSourceElement[JC] var onsubmit: js.Function1[Event, _]
HTMLSourceElement[JC] var onsuspend: js.Function1[Event, _]
HTMLSourceElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLSourceElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLSourceElement[JC] var onwaiting: js.Function1[Event, _]
HTMLSourceElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLSourceElement[JC] var outerHTML: String
HTMLSourceElement[JC] def ownerDocument: Document
HTMLSourceElement[JC] override def ownerDocument: HTMLDocument
HTMLSourceElement[JC] var parentElement: HTMLElement
HTMLSourceElement[JC] def parentNode: Node
HTMLSourceElement[JC] def prefix: String
HTMLSourceElement[JC] def prepend(nodes: Node | String*): Unit
HTMLSourceElement[JC] def previousElementSibling: Element
HTMLSourceElement[JC] def previousSibling: Node
HTMLSourceElement[JC] def querySelector(selectors: String): Element
HTMLSourceElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLSourceElement[JC] var readyState: js.Any
HTMLSourceElement[JC] var recordNumber: js.Any
HTMLSourceElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLSourceElement[JC] def remove(): Unit
HTMLSourceElement[JC] def removeAttribute(name: String): Unit
HTMLSourceElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLSourceElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLSourceElement[JC] def removeChild(oldChild: Node): Node
HTMLSourceElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLSourceElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLSourceElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLSourceElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLSourceElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLSourceElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLSourceElement[JC] def requestPointerLock(): Unit
HTMLSourceElement[JC] def scrollHeight: Int
HTMLSourceElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLSourceElement[JC] var scrollLeft: Double
HTMLSourceElement[JC] var scrollTop: Double
HTMLSourceElement[JC] def scrollWidth: Int
HTMLSourceElement[JC] def setAttribute(name: String, value: String): Unit
HTMLSourceElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLSourceElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLSourceElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLSourceElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLSourceElement[JC] def shadowRoot: ShadowRoot
HTMLSourceElement[JC] var spellcheck: Boolean
HTMLSourceElement[JC] var src: String
HTMLSourceElement[JC] def style: CSSStyleDeclaration
HTMLSourceElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLSourceElement[JC] def style_ = (value: String): Unit
HTMLSourceElement[JC] var tabIndex: Int
HTMLSourceElement[JC] def tagName: String
HTMLSourceElement[JC] var textContent: String
HTMLSourceElement[JC] var title: String
HTMLSourceElement[JC] var `type`: String
HTMLSpanElement[JC] var accessKey: String
HTMLSpanElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLSpanElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLSpanElement[JC] def after(nodes: Node | String*): Unit
HTMLSpanElement[JC] def append(nodes: Node | String*): Unit
HTMLSpanElement[JC] def appendChild(newChild: Node): Node
HTMLSpanElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLSpanElement[JC] def attributes: NamedNodeMap
HTMLSpanElement[JC] def baseURI: String
HTMLSpanElement[JC] def before(nodes: Node | String*): Unit
HTMLSpanElement[JC] def blur(): Unit
HTMLSpanElement[JC] def childElementCount: Int
HTMLSpanElement[JC] def childNodes: NodeList[Node]
HTMLSpanElement[JC] def children: HTMLCollection[Element]
HTMLSpanElement[JC] var classList: DOMTokenList
HTMLSpanElement[JC] var className: String
HTMLSpanElement[JC] def click(): Unit
HTMLSpanElement[JC] def clientHeight: Int
HTMLSpanElement[JC] def clientLeft: Int
HTMLSpanElement[JC] def clientTop: Int
HTMLSpanElement[JC] def clientWidth: Int
HTMLSpanElement[JC] def cloneNode(deep: Boolean?): Node
HTMLSpanElement[JC] def closest(selector: String): Element
HTMLSpanElement[JC] def compareDocumentPosition(other: Node): Int
HTMLSpanElement[JC] def contains(child: HTMLElement): Boolean
HTMLSpanElement[JC] def contains(otherNode: Node): Boolean
HTMLSpanElement[JC] var contentEditable: String
HTMLSpanElement[JC] def dataset: js.Dictionary[String]
HTMLSpanElement[JC] var dir: String
HTMLSpanElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLSpanElement[JC] var draggable: Boolean
HTMLSpanElement[JC] var filters: Object
HTMLSpanElement[JC] def firstChild: Node
HTMLSpanElement[JC] def firstElementChild: Element
HTMLSpanElement[JC] def focus(): Unit
HTMLSpanElement[JC] def focus(options: FocusOptions): Unit
HTMLSpanElement[JC] def getAttribute(name: String): String
HTMLSpanElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLSpanElement[JC] def getAttributeNode(name: String): Attr
HTMLSpanElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLSpanElement[JC] def getBoundingClientRect(): DOMRect
HTMLSpanElement[JC] def getClientRects(): DOMRectList
HTMLSpanElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLSpanElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLSpanElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLSpanElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLSpanElement[JC] def hasAttribute(name: String): Boolean
HTMLSpanElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLSpanElement[JC] def hasAttributes(): Boolean
HTMLSpanElement[JC] def hasChildNodes(): Boolean
HTMLSpanElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLSpanElement[JC] var id: String
HTMLSpanElement[JC] var innerHTML: String
HTMLSpanElement[JC] var innerText: String
HTMLSpanElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLSpanElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLSpanElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLSpanElement[JC] def isConnected: Boolean
HTMLSpanElement[JC] def isContentEditable: Boolean
HTMLSpanElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLSpanElement[JC] def isEqualNode(arg: Node): Boolean
HTMLSpanElement[JC] def isSameNode(other: Node): Boolean
HTMLSpanElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLSpanElement[JC] var lang: String
HTMLSpanElement[JC] def lastChild: Node
HTMLSpanElement[JC] def lastElementChild: Element
HTMLSpanElement[JC] def localName: String
HTMLSpanElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLSpanElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLSpanElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLSpanElement[JC] def matches(selector: String): Boolean
HTMLSpanElement[JC] def namespaceURI: String
HTMLSpanElement[JC] def nextElementSibling: Element
HTMLSpanElement[JC] def nextSibling: Node
HTMLSpanElement[JC] def nodeName: String
HTMLSpanElement[JC] def nodeType: Int
HTMLSpanElement[JC] var nodeValue: String
HTMLSpanElement[JC] def normalize(): Unit
HTMLSpanElement[JC] def offsetHeight: Double
HTMLSpanElement[JC] def offsetLeft: Double
HTMLSpanElement[JC] def offsetParent: Element
HTMLSpanElement[JC] def offsetTop: Double
HTMLSpanElement[JC] def offsetWidth: Double
HTMLSpanElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLSpanElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLSpanElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLSpanElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLSpanElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLSpanElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLSpanElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLSpanElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLSpanElement[JC] var oncanplay: js.Function1[Event, _]
HTMLSpanElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLSpanElement[JC] var onchange: js.Function1[Event, _]
HTMLSpanElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLSpanElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLSpanElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLSpanElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLSpanElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLSpanElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLSpanElement[JC] var oncuechange: js.Function1[Event, _]
HTMLSpanElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLSpanElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLSpanElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLSpanElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLSpanElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLSpanElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLSpanElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLSpanElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLSpanElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLSpanElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLSpanElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLSpanElement[JC] var onemptied: js.Function1[Event, _]
HTMLSpanElement[JC] var onended: js.Function1[Event, _]
HTMLSpanElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLSpanElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLSpanElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLSpanElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLSpanElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLSpanElement[JC] var onhelp: js.Function1[Event, _]
HTMLSpanElement[JC] var oninput: js.Function1[Event, _]
HTMLSpanElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLSpanElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLSpanElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLSpanElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLSpanElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLSpanElement[JC] var onloadstart: js.Function1[Event, _]
HTMLSpanElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLSpanElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLSpanElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLSpanElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLSpanElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLSpanElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLSpanElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLSpanElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLSpanElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLSpanElement[JC] var onpause: js.Function1[Event, _]
HTMLSpanElement[JC] var onplay: js.Function1[Event, _]
HTMLSpanElement[JC] var onplaying: js.Function1[Event, _]
HTMLSpanElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLSpanElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLSpanElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLSpanElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLSpanElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLSpanElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLSpanElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLSpanElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLSpanElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLSpanElement[JC] var onratechange: js.Function1[Event, _]
HTMLSpanElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLSpanElement[JC] var onreset: js.Function1[Event, _]
HTMLSpanElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLSpanElement[JC] var onseeked: js.Function1[Event, _]
HTMLSpanElement[JC] var onseeking: js.Function1[Event, _]
HTMLSpanElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLSpanElement[JC] var onselectstart: js.Function1[Event, _]
HTMLSpanElement[JC] var onstalled: js.Function1[Event, _]
HTMLSpanElement[JC] var onsubmit: js.Function1[Event, _]
HTMLSpanElement[JC] var onsuspend: js.Function1[Event, _]
HTMLSpanElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLSpanElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLSpanElement[JC] var onwaiting: js.Function1[Event, _]
HTMLSpanElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLSpanElement[JC] var outerHTML: String
HTMLSpanElement[JC] def ownerDocument: Document
HTMLSpanElement[JC] override def ownerDocument: HTMLDocument
HTMLSpanElement[JC] var parentElement: HTMLElement
HTMLSpanElement[JC] def parentNode: Node
HTMLSpanElement[JC] def prefix: String
HTMLSpanElement[JC] def prepend(nodes: Node | String*): Unit
HTMLSpanElement[JC] def previousElementSibling: Element
HTMLSpanElement[JC] def previousSibling: Node
HTMLSpanElement[JC] def querySelector(selectors: String): Element
HTMLSpanElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLSpanElement[JC] var readyState: js.Any
HTMLSpanElement[JC] var recordNumber: js.Any
HTMLSpanElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLSpanElement[JC] def remove(): Unit
HTMLSpanElement[JC] def removeAttribute(name: String): Unit
HTMLSpanElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLSpanElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLSpanElement[JC] def removeChild(oldChild: Node): Node
HTMLSpanElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLSpanElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLSpanElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLSpanElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLSpanElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLSpanElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLSpanElement[JC] def requestPointerLock(): Unit
HTMLSpanElement[JC] def scrollHeight: Int
HTMLSpanElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLSpanElement[JC] var scrollLeft: Double
HTMLSpanElement[JC] var scrollTop: Double
HTMLSpanElement[JC] def scrollWidth: Int
HTMLSpanElement[JC] def setAttribute(name: String, value: String): Unit
HTMLSpanElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLSpanElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLSpanElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLSpanElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLSpanElement[JC] def shadowRoot: ShadowRoot
HTMLSpanElement[JC] var spellcheck: Boolean
HTMLSpanElement[JC] def style: CSSStyleDeclaration
HTMLSpanElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLSpanElement[JC] def style_ = (value: String): Unit
HTMLSpanElement[JC] var tabIndex: Int
HTMLSpanElement[JC] def tagName: String
HTMLSpanElement[JC] var textContent: String
HTMLSpanElement[JC] var title: String
HTMLStyleElement[JC] var accessKey: String
HTMLStyleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLStyleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLStyleElement[JC] def after(nodes: Node | String*): Unit
HTMLStyleElement[JC] def append(nodes: Node | String*): Unit
HTMLStyleElement[JC] def appendChild(newChild: Node): Node
HTMLStyleElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLStyleElement[JC] def attributes: NamedNodeMap
HTMLStyleElement[JC] def baseURI: String
HTMLStyleElement[JC] def before(nodes: Node | String*): Unit
HTMLStyleElement[JC] def blur(): Unit
HTMLStyleElement[JC] def childElementCount: Int
HTMLStyleElement[JC] def childNodes: NodeList[Node]
HTMLStyleElement[JC] def children: HTMLCollection[Element]
HTMLStyleElement[JC] var classList: DOMTokenList
HTMLStyleElement[JC] var className: String
HTMLStyleElement[JC] def click(): Unit
HTMLStyleElement[JC] def clientHeight: Int
HTMLStyleElement[JC] def clientLeft: Int
HTMLStyleElement[JC] def clientTop: Int
HTMLStyleElement[JC] def clientWidth: Int
HTMLStyleElement[JC] def cloneNode(deep: Boolean?): Node
HTMLStyleElement[JC] def closest(selector: String): Element
HTMLStyleElement[JC] def compareDocumentPosition(other: Node): Int
HTMLStyleElement[JC] def contains(child: HTMLElement): Boolean
HTMLStyleElement[JC] def contains(otherNode: Node): Boolean
HTMLStyleElement[JC] var contentEditable: String
HTMLStyleElement[JC] def dataset: js.Dictionary[String]
HTMLStyleElement[JC] var dir: String
HTMLStyleElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLStyleElement[JC] var draggable: Boolean
HTMLStyleElement[JC] var filters: Object
HTMLStyleElement[JC] def firstChild: Node
HTMLStyleElement[JC] def firstElementChild: Element
HTMLStyleElement[JC] def focus(): Unit
HTMLStyleElement[JC] def focus(options: FocusOptions): Unit
HTMLStyleElement[JC] def getAttribute(name: String): String
HTMLStyleElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLStyleElement[JC] def getAttributeNode(name: String): Attr
HTMLStyleElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLStyleElement[JC] def getBoundingClientRect(): DOMRect
HTMLStyleElement[JC] def getClientRects(): DOMRectList
HTMLStyleElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLStyleElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLStyleElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLStyleElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLStyleElement[JC] def hasAttribute(name: String): Boolean
HTMLStyleElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLStyleElement[JC] def hasAttributes(): Boolean
HTMLStyleElement[JC] def hasChildNodes(): Boolean
HTMLStyleElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLStyleElement[JC] var id: String
HTMLStyleElement[JC] var innerHTML: String
HTMLStyleElement[JC] var innerText: String
HTMLStyleElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLStyleElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLStyleElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLStyleElement[JC] def isConnected: Boolean
HTMLStyleElement[JC] def isContentEditable: Boolean
HTMLStyleElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLStyleElement[JC] def isEqualNode(arg: Node): Boolean
HTMLStyleElement[JC] def isSameNode(other: Node): Boolean
HTMLStyleElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLStyleElement[JC] var lang: String
HTMLStyleElement[JC] def lastChild: Node
HTMLStyleElement[JC] def lastElementChild: Element
HTMLStyleElement[JC] def localName: String
HTMLStyleElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLStyleElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLStyleElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLStyleElement[JC] def matches(selector: String): Boolean
HTMLStyleElement[JC] var media: String
HTMLStyleElement[JC] def namespaceURI: String
HTMLStyleElement[JC] def nextElementSibling: Element
HTMLStyleElement[JC] def nextSibling: Node
HTMLStyleElement[JC] def nodeName: String
HTMLStyleElement[JC] def nodeType: Int
HTMLStyleElement[JC] var nodeValue: String
HTMLStyleElement[JC] def normalize(): Unit
HTMLStyleElement[JC] def offsetHeight: Double
HTMLStyleElement[JC] def offsetLeft: Double
HTMLStyleElement[JC] def offsetParent: Element
HTMLStyleElement[JC] def offsetTop: Double
HTMLStyleElement[JC] def offsetWidth: Double
HTMLStyleElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLStyleElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLStyleElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLStyleElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLStyleElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLStyleElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLStyleElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLStyleElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLStyleElement[JC] var oncanplay: js.Function1[Event, _]
HTMLStyleElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLStyleElement[JC] var onchange: js.Function1[Event, _]
HTMLStyleElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLStyleElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLStyleElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLStyleElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLStyleElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLStyleElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLStyleElement[JC] var oncuechange: js.Function1[Event, _]
HTMLStyleElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLStyleElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLStyleElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLStyleElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLStyleElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLStyleElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLStyleElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLStyleElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLStyleElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLStyleElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLStyleElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLStyleElement[JC] var onemptied: js.Function1[Event, _]
HTMLStyleElement[JC] var onended: js.Function1[Event, _]
HTMLStyleElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLStyleElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLStyleElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLStyleElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLStyleElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLStyleElement[JC] var onhelp: js.Function1[Event, _]
HTMLStyleElement[JC] var oninput: js.Function1[Event, _]
HTMLStyleElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLStyleElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLStyleElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLStyleElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLStyleElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLStyleElement[JC] var onloadstart: js.Function1[Event, _]
HTMLStyleElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLStyleElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLStyleElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLStyleElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLStyleElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLStyleElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLStyleElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLStyleElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLStyleElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLStyleElement[JC] var onpause: js.Function1[Event, _]
HTMLStyleElement[JC] var onplay: js.Function1[Event, _]
HTMLStyleElement[JC] var onplaying: js.Function1[Event, _]
HTMLStyleElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLStyleElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLStyleElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLStyleElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLStyleElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLStyleElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLStyleElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLStyleElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLStyleElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLStyleElement[JC] var onratechange: js.Function1[Event, _]
HTMLStyleElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLStyleElement[JC] var onreset: js.Function1[Event, _]
HTMLStyleElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLStyleElement[JC] var onseeked: js.Function1[Event, _]
HTMLStyleElement[JC] var onseeking: js.Function1[Event, _]
HTMLStyleElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLStyleElement[JC] var onselectstart: js.Function1[Event, _]
HTMLStyleElement[JC] var onstalled: js.Function1[Event, _]
HTMLStyleElement[JC] var onsubmit: js.Function1[Event, _]
HTMLStyleElement[JC] var onsuspend: js.Function1[Event, _]
HTMLStyleElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLStyleElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLStyleElement[JC] var onwaiting: js.Function1[Event, _]
HTMLStyleElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLStyleElement[JC] var outerHTML: String
HTMLStyleElement[JC] def ownerDocument: Document
HTMLStyleElement[JC] override def ownerDocument: HTMLDocument
HTMLStyleElement[JC] var parentElement: HTMLElement
HTMLStyleElement[JC] def parentNode: Node
HTMLStyleElement[JC] def prefix: String
HTMLStyleElement[JC] def prepend(nodes: Node | String*): Unit
HTMLStyleElement[JC] def previousElementSibling: Element
HTMLStyleElement[JC] def previousSibling: Node
HTMLStyleElement[JC] def querySelector(selectors: String): Element
HTMLStyleElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLStyleElement[JC] var readyState: js.Any
HTMLStyleElement[JC] var recordNumber: js.Any
HTMLStyleElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLStyleElement[JC] def remove(): Unit
HTMLStyleElement[JC] def removeAttribute(name: String): Unit
HTMLStyleElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLStyleElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLStyleElement[JC] def removeChild(oldChild: Node): Node
HTMLStyleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLStyleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLStyleElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLStyleElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLStyleElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLStyleElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLStyleElement[JC] def requestPointerLock(): Unit
HTMLStyleElement[JC] def scrollHeight: Int
HTMLStyleElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLStyleElement[JC] var scrollLeft: Double
HTMLStyleElement[JC] var scrollTop: Double
HTMLStyleElement[JC] def scrollWidth: Int
HTMLStyleElement[JC] def setAttribute(name: String, value: String): Unit
HTMLStyleElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLStyleElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLStyleElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLStyleElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLStyleElement[JC] def shadowRoot: ShadowRoot
HTMLStyleElement[JC] def sheet: StyleSheet
HTMLStyleElement[JC] var spellcheck: Boolean
HTMLStyleElement[JC] def style: CSSStyleDeclaration
HTMLStyleElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLStyleElement[JC] def style_ = (value: String): Unit
HTMLStyleElement[JC] var tabIndex: Int
HTMLStyleElement[JC] def tagName: String
HTMLStyleElement[JC] var textContent: String
HTMLStyleElement[JC] var title: String
HTMLStyleElement[JC] var `type`: String
HTMLTableAlignment[JT]
HTMLTableCaptionElement[JC] var accessKey: String
HTMLTableCaptionElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTableCaptionElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTableCaptionElement[JC] def after(nodes: Node | String*): Unit
HTMLTableCaptionElement[JC] def append(nodes: Node | String*): Unit
HTMLTableCaptionElement[JC] def appendChild(newChild: Node): Node
HTMLTableCaptionElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLTableCaptionElement[JC] def attributes: NamedNodeMap
HTMLTableCaptionElement[JC] def baseURI: String
HTMLTableCaptionElement[JC] def before(nodes: Node | String*): Unit
HTMLTableCaptionElement[JC] def blur(): Unit
HTMLTableCaptionElement[JC] def childElementCount: Int
HTMLTableCaptionElement[JC] def childNodes: NodeList[Node]
HTMLTableCaptionElement[JC] def children: HTMLCollection[Element]
HTMLTableCaptionElement[JC] var classList: DOMTokenList
HTMLTableCaptionElement[JC] var className: String
HTMLTableCaptionElement[JC] def click(): Unit
HTMLTableCaptionElement[JC] def clientHeight: Int
HTMLTableCaptionElement[JC] def clientLeft: Int
HTMLTableCaptionElement[JC] def clientTop: Int
HTMLTableCaptionElement[JC] def clientWidth: Int
HTMLTableCaptionElement[JC] def cloneNode(deep: Boolean?): Node
HTMLTableCaptionElement[JC] def closest(selector: String): Element
HTMLTableCaptionElement[JC] def compareDocumentPosition(other: Node): Int
HTMLTableCaptionElement[JC] def contains(child: HTMLElement): Boolean
HTMLTableCaptionElement[JC] def contains(otherNode: Node): Boolean
HTMLTableCaptionElement[JC] var contentEditable: String
HTMLTableCaptionElement[JC] def dataset: js.Dictionary[String]
HTMLTableCaptionElement[JC] var dir: String
HTMLTableCaptionElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLTableCaptionElement[JC] var draggable: Boolean
HTMLTableCaptionElement[JC] var filters: Object
HTMLTableCaptionElement[JC] def firstChild: Node
HTMLTableCaptionElement[JC] def firstElementChild: Element
HTMLTableCaptionElement[JC] def focus(): Unit
HTMLTableCaptionElement[JC] def focus(options: FocusOptions): Unit
HTMLTableCaptionElement[JC] def getAttribute(name: String): String
HTMLTableCaptionElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLTableCaptionElement[JC] def getAttributeNode(name: String): Attr
HTMLTableCaptionElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLTableCaptionElement[JC] def getBoundingClientRect(): DOMRect
HTMLTableCaptionElement[JC] def getClientRects(): DOMRectList
HTMLTableCaptionElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLTableCaptionElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLTableCaptionElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLTableCaptionElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLTableCaptionElement[JC] def hasAttribute(name: String): Boolean
HTMLTableCaptionElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLTableCaptionElement[JC] def hasAttributes(): Boolean
HTMLTableCaptionElement[JC] def hasChildNodes(): Boolean
HTMLTableCaptionElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLTableCaptionElement[JC] var id: String
HTMLTableCaptionElement[JC] var innerHTML: String
HTMLTableCaptionElement[JC] var innerText: String
HTMLTableCaptionElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLTableCaptionElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLTableCaptionElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLTableCaptionElement[JC] def isConnected: Boolean
HTMLTableCaptionElement[JC] def isContentEditable: Boolean
HTMLTableCaptionElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLTableCaptionElement[JC] def isEqualNode(arg: Node): Boolean
HTMLTableCaptionElement[JC] def isSameNode(other: Node): Boolean
HTMLTableCaptionElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLTableCaptionElement[JC] var lang: String
HTMLTableCaptionElement[JC] def lastChild: Node
HTMLTableCaptionElement[JC] def lastElementChild: Element
HTMLTableCaptionElement[JC] def localName: String
HTMLTableCaptionElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLTableCaptionElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLTableCaptionElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLTableCaptionElement[JC] def matches(selector: String): Boolean
HTMLTableCaptionElement[JC] def namespaceURI: String
HTMLTableCaptionElement[JC] def nextElementSibling: Element
HTMLTableCaptionElement[JC] def nextSibling: Node
HTMLTableCaptionElement[JC] def nodeName: String
HTMLTableCaptionElement[JC] def nodeType: Int
HTMLTableCaptionElement[JC] var nodeValue: String
HTMLTableCaptionElement[JC] def normalize(): Unit
HTMLTableCaptionElement[JC] def offsetHeight: Double
HTMLTableCaptionElement[JC] def offsetLeft: Double
HTMLTableCaptionElement[JC] def offsetParent: Element
HTMLTableCaptionElement[JC] def offsetTop: Double
HTMLTableCaptionElement[JC] def offsetWidth: Double
HTMLTableCaptionElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLTableCaptionElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLTableCaptionElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLTableCaptionElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLTableCaptionElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLTableCaptionElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLTableCaptionElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLTableCaptionElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLTableCaptionElement[JC] var oncanplay: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onchange: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLTableCaptionElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLTableCaptionElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLTableCaptionElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLTableCaptionElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLTableCaptionElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLTableCaptionElement[JC] var oncuechange: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLTableCaptionElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLTableCaptionElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLTableCaptionElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLTableCaptionElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLTableCaptionElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLTableCaptionElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLTableCaptionElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLTableCaptionElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLTableCaptionElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLTableCaptionElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onemptied: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onended: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLTableCaptionElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLTableCaptionElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLTableCaptionElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onhelp: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var oninput: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLTableCaptionElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLTableCaptionElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLTableCaptionElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onloadstart: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLTableCaptionElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLTableCaptionElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLTableCaptionElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLTableCaptionElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLTableCaptionElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLTableCaptionElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLTableCaptionElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLTableCaptionElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLTableCaptionElement[JC] var onpause: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onplay: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onplaying: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLTableCaptionElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLTableCaptionElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLTableCaptionElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLTableCaptionElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLTableCaptionElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLTableCaptionElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLTableCaptionElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLTableCaptionElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLTableCaptionElement[JC] var onratechange: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onreset: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLTableCaptionElement[JC] var onseeked: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onseeking: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLTableCaptionElement[JC] var onselectstart: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onstalled: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onsubmit: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onsuspend: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onwaiting: js.Function1[Event, _]
HTMLTableCaptionElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLTableCaptionElement[JC] var outerHTML: String
HTMLTableCaptionElement[JC] def ownerDocument: Document
HTMLTableCaptionElement[JC] override def ownerDocument: HTMLDocument
HTMLTableCaptionElement[JC] var parentElement: HTMLElement
HTMLTableCaptionElement[JC] def parentNode: Node
HTMLTableCaptionElement[JC] def prefix: String
HTMLTableCaptionElement[JC] def prepend(nodes: Node | String*): Unit
HTMLTableCaptionElement[JC] def previousElementSibling: Element
HTMLTableCaptionElement[JC] def previousSibling: Node
HTMLTableCaptionElement[JC] def querySelector(selectors: String): Element
HTMLTableCaptionElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLTableCaptionElement[JC] var readyState: js.Any
HTMLTableCaptionElement[JC] var recordNumber: js.Any
HTMLTableCaptionElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLTableCaptionElement[JC] def remove(): Unit
HTMLTableCaptionElement[JC] def removeAttribute(name: String): Unit
HTMLTableCaptionElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLTableCaptionElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLTableCaptionElement[JC] def removeChild(oldChild: Node): Node
HTMLTableCaptionElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTableCaptionElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTableCaptionElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLTableCaptionElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLTableCaptionElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLTableCaptionElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLTableCaptionElement[JC] def requestPointerLock(): Unit
HTMLTableCaptionElement[JC] def scrollHeight: Int
HTMLTableCaptionElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLTableCaptionElement[JC] var scrollLeft: Double
HTMLTableCaptionElement[JC] var scrollTop: Double
HTMLTableCaptionElement[JC] def scrollWidth: Int
HTMLTableCaptionElement[JC] def setAttribute(name: String, value: String): Unit
HTMLTableCaptionElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLTableCaptionElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLTableCaptionElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLTableCaptionElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLTableCaptionElement[JC] def shadowRoot: ShadowRoot
HTMLTableCaptionElement[JC] var spellcheck: Boolean
HTMLTableCaptionElement[JC] def style: CSSStyleDeclaration
HTMLTableCaptionElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLTableCaptionElement[JC] def style_ = (value: String): Unit
HTMLTableCaptionElement[JC] var tabIndex: Int
HTMLTableCaptionElement[JC] def tagName: String
HTMLTableCaptionElement[JC] var textContent: String
HTMLTableCaptionElement[JC] var title: String
HTMLTableCellElement[JC] var accessKey: String
HTMLTableCellElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTableCellElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTableCellElement[JC] def after(nodes: Node | String*): Unit
HTMLTableCellElement[JC] def append(nodes: Node | String*): Unit
HTMLTableCellElement[JC] def appendChild(newChild: Node): Node
HTMLTableCellElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLTableCellElement[JC] def attributes: NamedNodeMap
HTMLTableCellElement[JC] def baseURI: String
HTMLTableCellElement[JC] def before(nodes: Node | String*): Unit
HTMLTableCellElement[JC] def blur(): Unit
HTMLTableCellElement[JC] def cellIndex: Int
HTMLTableCellElement[JC] def childElementCount: Int
HTMLTableCellElement[JC] def childNodes: NodeList[Node]
HTMLTableCellElement[JC] def children: HTMLCollection[Element]
HTMLTableCellElement[JC] var classList: DOMTokenList
HTMLTableCellElement[JC] var className: String
HTMLTableCellElement[JC] def click(): Unit
HTMLTableCellElement[JC] def clientHeight: Int
HTMLTableCellElement[JC] def clientLeft: Int
HTMLTableCellElement[JC] def clientTop: Int
HTMLTableCellElement[JC] def clientWidth: Int
HTMLTableCellElement[JC] def cloneNode(deep: Boolean?): Node
HTMLTableCellElement[JC] def closest(selector: String): Element
HTMLTableCellElement[JC] var colSpan: Int
HTMLTableCellElement[JC] def compareDocumentPosition(other: Node): Int
HTMLTableCellElement[JC] def contains(child: HTMLElement): Boolean
HTMLTableCellElement[JC] def contains(otherNode: Node): Boolean
HTMLTableCellElement[JC] var contentEditable: String
HTMLTableCellElement[JC] def dataset: js.Dictionary[String]
HTMLTableCellElement[JC] var dir: String
HTMLTableCellElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLTableCellElement[JC] var draggable: Boolean
HTMLTableCellElement[JC] var filters: Object
HTMLTableCellElement[JC] def firstChild: Node
HTMLTableCellElement[JC] def firstElementChild: Element
HTMLTableCellElement[JC] def focus(): Unit
HTMLTableCellElement[JC] def focus(options: FocusOptions): Unit
HTMLTableCellElement[JC] def getAttribute(name: String): String
HTMLTableCellElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLTableCellElement[JC] def getAttributeNode(name: String): Attr
HTMLTableCellElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLTableCellElement[JC] def getBoundingClientRect(): DOMRect
HTMLTableCellElement[JC] def getClientRects(): DOMRectList
HTMLTableCellElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLTableCellElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLTableCellElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLTableCellElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLTableCellElement[JC] def hasAttribute(name: String): Boolean
HTMLTableCellElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLTableCellElement[JC] def hasAttributes(): Boolean
HTMLTableCellElement[JC] def hasChildNodes(): Boolean
HTMLTableCellElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLTableCellElement[JC] def headers: String
HTMLTableCellElement[JC] var id: String
HTMLTableCellElement[JC] var innerHTML: String
HTMLTableCellElement[JC] var innerText: String
HTMLTableCellElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLTableCellElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLTableCellElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLTableCellElement[JC] def isConnected: Boolean
HTMLTableCellElement[JC] def isContentEditable: Boolean
HTMLTableCellElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLTableCellElement[JC] def isEqualNode(arg: Node): Boolean
HTMLTableCellElement[JC] def isSameNode(other: Node): Boolean
HTMLTableCellElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLTableCellElement[JC] var lang: String
HTMLTableCellElement[JC] def lastChild: Node
HTMLTableCellElement[JC] def lastElementChild: Element
HTMLTableCellElement[JC] def localName: String
HTMLTableCellElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLTableCellElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLTableCellElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLTableCellElement[JC] def matches(selector: String): Boolean
HTMLTableCellElement[JC] def namespaceURI: String
HTMLTableCellElement[JC] def nextElementSibling: Element
HTMLTableCellElement[JC] def nextSibling: Node
HTMLTableCellElement[JC] def nodeName: String
HTMLTableCellElement[JC] def nodeType: Int
HTMLTableCellElement[JC] var nodeValue: String
HTMLTableCellElement[JC] def normalize(): Unit
HTMLTableCellElement[JC] def offsetHeight: Double
HTMLTableCellElement[JC] def offsetLeft: Double
HTMLTableCellElement[JC] def offsetParent: Element
HTMLTableCellElement[JC] def offsetTop: Double
HTMLTableCellElement[JC] def offsetWidth: Double
HTMLTableCellElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLTableCellElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLTableCellElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLTableCellElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLTableCellElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLTableCellElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLTableCellElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLTableCellElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLTableCellElement[JC] var oncanplay: js.Function1[Event, _]
HTMLTableCellElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLTableCellElement[JC] var onchange: js.Function1[Event, _]
HTMLTableCellElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLTableCellElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLTableCellElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLTableCellElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLTableCellElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLTableCellElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLTableCellElement[JC] var oncuechange: js.Function1[Event, _]
HTMLTableCellElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLTableCellElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLTableCellElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLTableCellElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLTableCellElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLTableCellElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLTableCellElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLTableCellElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLTableCellElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLTableCellElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLTableCellElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLTableCellElement[JC] var onemptied: js.Function1[Event, _]
HTMLTableCellElement[JC] var onended: js.Function1[Event, _]
HTMLTableCellElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLTableCellElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLTableCellElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLTableCellElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLTableCellElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLTableCellElement[JC] var onhelp: js.Function1[Event, _]
HTMLTableCellElement[JC] var oninput: js.Function1[Event, _]
HTMLTableCellElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLTableCellElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLTableCellElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLTableCellElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLTableCellElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLTableCellElement[JC] var onloadstart: js.Function1[Event, _]
HTMLTableCellElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLTableCellElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLTableCellElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLTableCellElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLTableCellElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLTableCellElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLTableCellElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLTableCellElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLTableCellElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLTableCellElement[JC] var onpause: js.Function1[Event, _]
HTMLTableCellElement[JC] var onplay: js.Function1[Event, _]
HTMLTableCellElement[JC] var onplaying: js.Function1[Event, _]
HTMLTableCellElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLTableCellElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLTableCellElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLTableCellElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLTableCellElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLTableCellElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLTableCellElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLTableCellElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLTableCellElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLTableCellElement[JC] var onratechange: js.Function1[Event, _]
HTMLTableCellElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLTableCellElement[JC] var onreset: js.Function1[Event, _]
HTMLTableCellElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLTableCellElement[JC] var onseeked: js.Function1[Event, _]
HTMLTableCellElement[JC] var onseeking: js.Function1[Event, _]
HTMLTableCellElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLTableCellElement[JC] var onselectstart: js.Function1[Event, _]
HTMLTableCellElement[JC] var onstalled: js.Function1[Event, _]
HTMLTableCellElement[JC] var onsubmit: js.Function1[Event, _]
HTMLTableCellElement[JC] var onsuspend: js.Function1[Event, _]
HTMLTableCellElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLTableCellElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLTableCellElement[JC] var onwaiting: js.Function1[Event, _]
HTMLTableCellElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLTableCellElement[JC] var outerHTML: String
HTMLTableCellElement[JC] def ownerDocument: Document
HTMLTableCellElement[JC] override def ownerDocument: HTMLDocument
HTMLTableCellElement[JC] var parentElement: HTMLElement
HTMLTableCellElement[JC] def parentNode: Node
HTMLTableCellElement[JC] def prefix: String
HTMLTableCellElement[JC] def prepend(nodes: Node | String*): Unit
HTMLTableCellElement[JC] def previousElementSibling: Element
HTMLTableCellElement[JC] def previousSibling: Node
HTMLTableCellElement[JC] def querySelector(selectors: String): Element
HTMLTableCellElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLTableCellElement[JC] var readyState: js.Any
HTMLTableCellElement[JC] var recordNumber: js.Any
HTMLTableCellElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLTableCellElement[JC] def remove(): Unit
HTMLTableCellElement[JC] def removeAttribute(name: String): Unit
HTMLTableCellElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLTableCellElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLTableCellElement[JC] def removeChild(oldChild: Node): Node
HTMLTableCellElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTableCellElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTableCellElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLTableCellElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLTableCellElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLTableCellElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLTableCellElement[JC] def requestPointerLock(): Unit
HTMLTableCellElement[JC] var rowSpan: Int
HTMLTableCellElement[JC] def scrollHeight: Int
HTMLTableCellElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLTableCellElement[JC] var scrollLeft: Double
HTMLTableCellElement[JC] var scrollTop: Double
HTMLTableCellElement[JC] def scrollWidth: Int
HTMLTableCellElement[JC] def setAttribute(name: String, value: String): Unit
HTMLTableCellElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLTableCellElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLTableCellElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLTableCellElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLTableCellElement[JC] def shadowRoot: ShadowRoot
HTMLTableCellElement[JC] var spellcheck: Boolean
HTMLTableCellElement[JC] def style: CSSStyleDeclaration
HTMLTableCellElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLTableCellElement[JC] def style_ = (value: String): Unit
HTMLTableCellElement[JC] var tabIndex: Int
HTMLTableCellElement[JC] def tagName: String
HTMLTableCellElement[JC] var textContent: String
HTMLTableCellElement[JC] var title: String
HTMLTableColElement[JC] var accessKey: String
HTMLTableColElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTableColElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTableColElement[JC] def after(nodes: Node | String*): Unit
HTMLTableColElement[JC] def append(nodes: Node | String*): Unit
HTMLTableColElement[JC] def appendChild(newChild: Node): Node
HTMLTableColElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLTableColElement[JC] def attributes: NamedNodeMap
HTMLTableColElement[JC] def baseURI: String
HTMLTableColElement[JC] def before(nodes: Node | String*): Unit
HTMLTableColElement[JC] def blur(): Unit
HTMLTableColElement[JC] def childElementCount: Int
HTMLTableColElement[JC] def childNodes: NodeList[Node]
HTMLTableColElement[JC] def children: HTMLCollection[Element]
HTMLTableColElement[JC] var classList: DOMTokenList
HTMLTableColElement[JC] var className: String
HTMLTableColElement[JC] def click(): Unit
HTMLTableColElement[JC] def clientHeight: Int
HTMLTableColElement[JC] def clientLeft: Int
HTMLTableColElement[JC] def clientTop: Int
HTMLTableColElement[JC] def clientWidth: Int
HTMLTableColElement[JC] def cloneNode(deep: Boolean?): Node
HTMLTableColElement[JC] def closest(selector: String): Element
HTMLTableColElement[JC] def compareDocumentPosition(other: Node): Int
HTMLTableColElement[JC] def contains(child: HTMLElement): Boolean
HTMLTableColElement[JC] def contains(otherNode: Node): Boolean
HTMLTableColElement[JC] var contentEditable: String
HTMLTableColElement[JC] def dataset: js.Dictionary[String]
HTMLTableColElement[JC] var dir: String
HTMLTableColElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLTableColElement[JC] var draggable: Boolean
HTMLTableColElement[JC] var filters: Object
HTMLTableColElement[JC] def firstChild: Node
HTMLTableColElement[JC] def firstElementChild: Element
HTMLTableColElement[JC] def focus(): Unit
HTMLTableColElement[JC] def focus(options: FocusOptions): Unit
HTMLTableColElement[JC] def getAttribute(name: String): String
HTMLTableColElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLTableColElement[JC] def getAttributeNode(name: String): Attr
HTMLTableColElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLTableColElement[JC] def getBoundingClientRect(): DOMRect
HTMLTableColElement[JC] def getClientRects(): DOMRectList
HTMLTableColElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLTableColElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLTableColElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLTableColElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLTableColElement[JC] def hasAttribute(name: String): Boolean
HTMLTableColElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLTableColElement[JC] def hasAttributes(): Boolean
HTMLTableColElement[JC] def hasChildNodes(): Boolean
HTMLTableColElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLTableColElement[JC] var id: String
HTMLTableColElement[JC] var innerHTML: String
HTMLTableColElement[JC] var innerText: String
HTMLTableColElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLTableColElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLTableColElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLTableColElement[JC] def isConnected: Boolean
HTMLTableColElement[JC] def isContentEditable: Boolean
HTMLTableColElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLTableColElement[JC] def isEqualNode(arg: Node): Boolean
HTMLTableColElement[JC] def isSameNode(other: Node): Boolean
HTMLTableColElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLTableColElement[JC] var lang: String
HTMLTableColElement[JC] def lastChild: Node
HTMLTableColElement[JC] def lastElementChild: Element
HTMLTableColElement[JC] def localName: String
HTMLTableColElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLTableColElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLTableColElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLTableColElement[JC] def matches(selector: String): Boolean
HTMLTableColElement[JC] def namespaceURI: String
HTMLTableColElement[JC] def nextElementSibling: Element
HTMLTableColElement[JC] def nextSibling: Node
HTMLTableColElement[JC] def nodeName: String
HTMLTableColElement[JC] def nodeType: Int
HTMLTableColElement[JC] var nodeValue: String
HTMLTableColElement[JC] def normalize(): Unit
HTMLTableColElement[JC] def offsetHeight: Double
HTMLTableColElement[JC] def offsetLeft: Double
HTMLTableColElement[JC] def offsetParent: Element
HTMLTableColElement[JC] def offsetTop: Double
HTMLTableColElement[JC] def offsetWidth: Double
HTMLTableColElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLTableColElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLTableColElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLTableColElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLTableColElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLTableColElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLTableColElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLTableColElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLTableColElement[JC] var oncanplay: js.Function1[Event, _]
HTMLTableColElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLTableColElement[JC] var onchange: js.Function1[Event, _]
HTMLTableColElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLTableColElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLTableColElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLTableColElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLTableColElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLTableColElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLTableColElement[JC] var oncuechange: js.Function1[Event, _]
HTMLTableColElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLTableColElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLTableColElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLTableColElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLTableColElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLTableColElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLTableColElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLTableColElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLTableColElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLTableColElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLTableColElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLTableColElement[JC] var onemptied: js.Function1[Event, _]
HTMLTableColElement[JC] var onended: js.Function1[Event, _]
HTMLTableColElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLTableColElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLTableColElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLTableColElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLTableColElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLTableColElement[JC] var onhelp: js.Function1[Event, _]
HTMLTableColElement[JC] var oninput: js.Function1[Event, _]
HTMLTableColElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLTableColElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLTableColElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLTableColElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLTableColElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLTableColElement[JC] var onloadstart: js.Function1[Event, _]
HTMLTableColElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLTableColElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLTableColElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLTableColElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLTableColElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLTableColElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLTableColElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLTableColElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLTableColElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLTableColElement[JC] var onpause: js.Function1[Event, _]
HTMLTableColElement[JC] var onplay: js.Function1[Event, _]
HTMLTableColElement[JC] var onplaying: js.Function1[Event, _]
HTMLTableColElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLTableColElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLTableColElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLTableColElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLTableColElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLTableColElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLTableColElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLTableColElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLTableColElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLTableColElement[JC] var onratechange: js.Function1[Event, _]
HTMLTableColElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLTableColElement[JC] var onreset: js.Function1[Event, _]
HTMLTableColElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLTableColElement[JC] var onseeked: js.Function1[Event, _]
HTMLTableColElement[JC] var onseeking: js.Function1[Event, _]
HTMLTableColElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLTableColElement[JC] var onselectstart: js.Function1[Event, _]
HTMLTableColElement[JC] var onstalled: js.Function1[Event, _]
HTMLTableColElement[JC] var onsubmit: js.Function1[Event, _]
HTMLTableColElement[JC] var onsuspend: js.Function1[Event, _]
HTMLTableColElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLTableColElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLTableColElement[JC] var onwaiting: js.Function1[Event, _]
HTMLTableColElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLTableColElement[JC] var outerHTML: String
HTMLTableColElement[JC] def ownerDocument: Document
HTMLTableColElement[JC] override def ownerDocument: HTMLDocument
HTMLTableColElement[JC] var parentElement: HTMLElement
HTMLTableColElement[JC] def parentNode: Node
HTMLTableColElement[JC] def prefix: String
HTMLTableColElement[JC] def prepend(nodes: Node | String*): Unit
HTMLTableColElement[JC] def previousElementSibling: Element
HTMLTableColElement[JC] def previousSibling: Node
HTMLTableColElement[JC] def querySelector(selectors: String): Element
HTMLTableColElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLTableColElement[JC] var readyState: js.Any
HTMLTableColElement[JC] var recordNumber: js.Any
HTMLTableColElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLTableColElement[JC] def remove(): Unit
HTMLTableColElement[JC] def removeAttribute(name: String): Unit
HTMLTableColElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLTableColElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLTableColElement[JC] def removeChild(oldChild: Node): Node
HTMLTableColElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTableColElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTableColElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLTableColElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLTableColElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLTableColElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLTableColElement[JC] def requestPointerLock(): Unit
HTMLTableColElement[JC] def scrollHeight: Int
HTMLTableColElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLTableColElement[JC] var scrollLeft: Double
HTMLTableColElement[JC] var scrollTop: Double
HTMLTableColElement[JC] def scrollWidth: Int
HTMLTableColElement[JC] def setAttribute(name: String, value: String): Unit
HTMLTableColElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLTableColElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLTableColElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLTableColElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLTableColElement[JC] def shadowRoot: ShadowRoot
HTMLTableColElement[JC] var span: Int
HTMLTableColElement[JC] var spellcheck: Boolean
HTMLTableColElement[JC] def style: CSSStyleDeclaration
HTMLTableColElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLTableColElement[JC] def style_ = (value: String): Unit
HTMLTableColElement[JC] var tabIndex: Int
HTMLTableColElement[JC] def tagName: String
HTMLTableColElement[JC] var textContent: String
HTMLTableColElement[JC] var title: String
HTMLTableElement[JC] var accessKey: String
HTMLTableElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTableElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTableElement[JC] def after(nodes: Node | String*): Unit
HTMLTableElement[JC] def append(nodes: Node | String*): Unit
HTMLTableElement[JC] def appendChild(newChild: Node): Node
HTMLTableElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLTableElement[JC] def attributes: NamedNodeMap
HTMLTableElement[JC] def baseURI: String
HTMLTableElement[JC] def before(nodes: Node | String*): Unit
HTMLTableElement[JC] def blur(): Unit
HTMLTableElement[JC] var caption: HTMLTableCaptionElement
HTMLTableElement[JC] def childElementCount: Int
HTMLTableElement[JC] def childNodes: NodeList[Node]
HTMLTableElement[JC] def children: HTMLCollection[Element]
HTMLTableElement[JC] var classList: DOMTokenList
HTMLTableElement[JC] var className: String
HTMLTableElement[JC] def click(): Unit
HTMLTableElement[JC] def clientHeight: Int
HTMLTableElement[JC] def clientLeft: Int
HTMLTableElement[JC] def clientTop: Int
HTMLTableElement[JC] def clientWidth: Int
HTMLTableElement[JC] def cloneNode(deep: Boolean?): Node
HTMLTableElement[JC] def closest(selector: String): Element
HTMLTableElement[JC] def compareDocumentPosition(other: Node): Int
HTMLTableElement[JC] def contains(child: HTMLElement): Boolean
HTMLTableElement[JC] def contains(otherNode: Node): Boolean
HTMLTableElement[JC] var contentEditable: String
HTMLTableElement[JC] def createCaption(): HTMLElement
HTMLTableElement[JC] def createTBody(): HTMLElement
HTMLTableElement[JC] def createTFoot(): HTMLElement
HTMLTableElement[JC] def createTHead(): HTMLElement
HTMLTableElement[JC] def dataset: js.Dictionary[String]
HTMLTableElement[JC] def deleteCaption(): Unit
HTMLTableElement[JC] def deleteRow(index: Int): Unit
HTMLTableElement[JC] def deleteTFoot(): Unit
HTMLTableElement[JC] def deleteTHead(): Unit
HTMLTableElement[JC] var dir: String
HTMLTableElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLTableElement[JC] var draggable: Boolean
HTMLTableElement[JC] var filters: Object
HTMLTableElement[JC] def firstChild: Node
HTMLTableElement[JC] def firstElementChild: Element
HTMLTableElement[JC] def focus(): Unit
HTMLTableElement[JC] def focus(options: FocusOptions): Unit
HTMLTableElement[JC] def getAttribute(name: String): String
HTMLTableElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLTableElement[JC] def getAttributeNode(name: String): Attr
HTMLTableElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLTableElement[JC] def getBoundingClientRect(): DOMRect
HTMLTableElement[JC] def getClientRects(): DOMRectList
HTMLTableElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLTableElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLTableElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLTableElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLTableElement[JC] def hasAttribute(name: String): Boolean
HTMLTableElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLTableElement[JC] def hasAttributes(): Boolean
HTMLTableElement[JC] def hasChildNodes(): Boolean
HTMLTableElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLTableElement[JC] var id: String
HTMLTableElement[JC] var innerHTML: String
HTMLTableElement[JC] var innerText: String
HTMLTableElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLTableElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLTableElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLTableElement[JC] def insertRow(index: Int?): HTMLElement
HTMLTableElement[JC] def isConnected: Boolean
HTMLTableElement[JC] def isContentEditable: Boolean
HTMLTableElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLTableElement[JC] def isEqualNode(arg: Node): Boolean
HTMLTableElement[JC] def isSameNode(other: Node): Boolean
HTMLTableElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLTableElement[JC] var lang: String
HTMLTableElement[JC] def lastChild: Node
HTMLTableElement[JC] def lastElementChild: Element
HTMLTableElement[JC] def localName: String
HTMLTableElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLTableElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLTableElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLTableElement[JC] def matches(selector: String): Boolean
HTMLTableElement[JC] def moveRow(indexFrom: Int?, indexTo: Int?): Object
HTMLTableElement[JC] def namespaceURI: String
HTMLTableElement[JC] def nextElementSibling: Element
HTMLTableElement[JC] def nextSibling: Node
HTMLTableElement[JC] def nodeName: String
HTMLTableElement[JC] def nodeType: Int
HTMLTableElement[JC] var nodeValue: String
HTMLTableElement[JC] def normalize(): Unit
HTMLTableElement[JC] def offsetHeight: Double
HTMLTableElement[JC] def offsetLeft: Double
HTMLTableElement[JC] def offsetParent: Element
HTMLTableElement[JC] def offsetTop: Double
HTMLTableElement[JC] def offsetWidth: Double
HTMLTableElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLTableElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLTableElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLTableElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLTableElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLTableElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLTableElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLTableElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLTableElement[JC] var oncanplay: js.Function1[Event, _]
HTMLTableElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLTableElement[JC] var onchange: js.Function1[Event, _]
HTMLTableElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLTableElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLTableElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLTableElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLTableElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLTableElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLTableElement[JC] var oncuechange: js.Function1[Event, _]
HTMLTableElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLTableElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLTableElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLTableElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLTableElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLTableElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLTableElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLTableElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLTableElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLTableElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLTableElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLTableElement[JC] var onemptied: js.Function1[Event, _]
HTMLTableElement[JC] var onended: js.Function1[Event, _]
HTMLTableElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLTableElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLTableElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLTableElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLTableElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLTableElement[JC] var onhelp: js.Function1[Event, _]
HTMLTableElement[JC] var oninput: js.Function1[Event, _]
HTMLTableElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLTableElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLTableElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLTableElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLTableElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLTableElement[JC] var onloadstart: js.Function1[Event, _]
HTMLTableElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLTableElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLTableElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLTableElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLTableElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLTableElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLTableElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLTableElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLTableElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLTableElement[JC] var onpause: js.Function1[Event, _]
HTMLTableElement[JC] var onplay: js.Function1[Event, _]
HTMLTableElement[JC] var onplaying: js.Function1[Event, _]
HTMLTableElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLTableElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLTableElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLTableElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLTableElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLTableElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLTableElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLTableElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLTableElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLTableElement[JC] var onratechange: js.Function1[Event, _]
HTMLTableElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLTableElement[JC] var onreset: js.Function1[Event, _]
HTMLTableElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLTableElement[JC] var onseeked: js.Function1[Event, _]
HTMLTableElement[JC] var onseeking: js.Function1[Event, _]
HTMLTableElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLTableElement[JC] var onselectstart: js.Function1[Event, _]
HTMLTableElement[JC] var onstalled: js.Function1[Event, _]
HTMLTableElement[JC] var onsubmit: js.Function1[Event, _]
HTMLTableElement[JC] var onsuspend: js.Function1[Event, _]
HTMLTableElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLTableElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLTableElement[JC] var onwaiting: js.Function1[Event, _]
HTMLTableElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLTableElement[JC] var outerHTML: String
HTMLTableElement[JC] def ownerDocument: Document
HTMLTableElement[JC] override def ownerDocument: HTMLDocument
HTMLTableElement[JC] var parentElement: HTMLElement
HTMLTableElement[JC] def parentNode: Node
HTMLTableElement[JC] def prefix: String
HTMLTableElement[JC] def prepend(nodes: Node | String*): Unit
HTMLTableElement[JC] def previousElementSibling: Element
HTMLTableElement[JC] def previousSibling: Node
HTMLTableElement[JC] def querySelector(selectors: String): Element
HTMLTableElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLTableElement[JC] var readyState: js.Any
HTMLTableElement[JC] var recordNumber: js.Any
HTMLTableElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLTableElement[JC] def remove(): Unit
HTMLTableElement[JC] def removeAttribute(name: String): Unit
HTMLTableElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLTableElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLTableElement[JC] def removeChild(oldChild: Node): Node
HTMLTableElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTableElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTableElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLTableElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLTableElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLTableElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLTableElement[JC] def requestPointerLock(): Unit
HTMLTableElement[JC] def rows: HTMLCollection[Element]
HTMLTableElement[JC] def scrollHeight: Int
HTMLTableElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLTableElement[JC] var scrollLeft: Double
HTMLTableElement[JC] var scrollTop: Double
HTMLTableElement[JC] def scrollWidth: Int
HTMLTableElement[JC] def setAttribute(name: String, value: String): Unit
HTMLTableElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLTableElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLTableElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLTableElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLTableElement[JC] def shadowRoot: ShadowRoot
HTMLTableElement[JC] var spellcheck: Boolean
HTMLTableElement[JC] def style: CSSStyleDeclaration
HTMLTableElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLTableElement[JC] def style_ = (value: String): Unit
HTMLTableElement[JC] def tBodies: HTMLCollection[Element]
HTMLTableElement[JC] var tFoot: HTMLTableSectionElement
HTMLTableElement[JC] var tHead: HTMLTableSectionElement
HTMLTableElement[JC] var tabIndex: Int
HTMLTableElement[JC] def tagName: String
HTMLTableElement[JC] var textContent: String
HTMLTableElement[JC] var title: String
HTMLTableRowElement[JC] var accessKey: String
HTMLTableRowElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTableRowElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTableRowElement[JC] def after(nodes: Node | String*): Unit
HTMLTableRowElement[JC] def append(nodes: Node | String*): Unit
HTMLTableRowElement[JC] def appendChild(newChild: Node): Node
HTMLTableRowElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLTableRowElement[JC] def attributes: NamedNodeMap
HTMLTableRowElement[JC] def baseURI: String
HTMLTableRowElement[JC] def before(nodes: Node | String*): Unit
HTMLTableRowElement[JC] def blur(): Unit
HTMLTableRowElement[JC] var borderColor: js.Any
HTMLTableRowElement[JC] var borderColorDark: js.Any
HTMLTableRowElement[JC] var borderColorLight: js.Any
HTMLTableRowElement[JC] def cells: HTMLCollection[Element]
HTMLTableRowElement[JC] def childElementCount: Int
HTMLTableRowElement[JC] def childNodes: NodeList[Node]
HTMLTableRowElement[JC] def children: HTMLCollection[Element]
HTMLTableRowElement[JC] var classList: DOMTokenList
HTMLTableRowElement[JC] var className: String
HTMLTableRowElement[JC] def click(): Unit
HTMLTableRowElement[JC] def clientHeight: Int
HTMLTableRowElement[JC] def clientLeft: Int
HTMLTableRowElement[JC] def clientTop: Int
HTMLTableRowElement[JC] def clientWidth: Int
HTMLTableRowElement[JC] def cloneNode(deep: Boolean?): Node
HTMLTableRowElement[JC] def closest(selector: String): Element
HTMLTableRowElement[JC] def compareDocumentPosition(other: Node): Int
HTMLTableRowElement[JC] def contains(child: HTMLElement): Boolean
HTMLTableRowElement[JC] def contains(otherNode: Node): Boolean
HTMLTableRowElement[JC] var contentEditable: String
HTMLTableRowElement[JC] def dataset: js.Dictionary[String]
HTMLTableRowElement[JC] def deleteCell(index: Int?): Unit
HTMLTableRowElement[JC] var dir: String
HTMLTableRowElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLTableRowElement[JC] var draggable: Boolean
HTMLTableRowElement[JC] var filters: Object
HTMLTableRowElement[JC] def firstChild: Node
HTMLTableRowElement[JC] def firstElementChild: Element
HTMLTableRowElement[JC] def focus(): Unit
HTMLTableRowElement[JC] def focus(options: FocusOptions): Unit
HTMLTableRowElement[JC] def getAttribute(name: String): String
HTMLTableRowElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLTableRowElement[JC] def getAttributeNode(name: String): Attr
HTMLTableRowElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLTableRowElement[JC] def getBoundingClientRect(): DOMRect
HTMLTableRowElement[JC] def getClientRects(): DOMRectList
HTMLTableRowElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLTableRowElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLTableRowElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLTableRowElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLTableRowElement[JC] def hasAttribute(name: String): Boolean
HTMLTableRowElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLTableRowElement[JC] def hasAttributes(): Boolean
HTMLTableRowElement[JC] def hasChildNodes(): Boolean
HTMLTableRowElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLTableRowElement[JC] var height: js.Any
HTMLTableRowElement[JC] var id: String
HTMLTableRowElement[JC] var innerHTML: String
HTMLTableRowElement[JC] var innerText: String
HTMLTableRowElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLTableRowElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLTableRowElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLTableRowElement[JC] def insertCell(index: Int?): HTMLElement
HTMLTableRowElement[JC] def isConnected: Boolean
HTMLTableRowElement[JC] def isContentEditable: Boolean
HTMLTableRowElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLTableRowElement[JC] def isEqualNode(arg: Node): Boolean
HTMLTableRowElement[JC] def isSameNode(other: Node): Boolean
HTMLTableRowElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLTableRowElement[JC] var lang: String
HTMLTableRowElement[JC] def lastChild: Node
HTMLTableRowElement[JC] def lastElementChild: Element
HTMLTableRowElement[JC] def localName: String
HTMLTableRowElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLTableRowElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLTableRowElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLTableRowElement[JC] def matches(selector: String): Boolean
HTMLTableRowElement[JC] def namespaceURI: String
HTMLTableRowElement[JC] def nextElementSibling: Element
HTMLTableRowElement[JC] def nextSibling: Node
HTMLTableRowElement[JC] def nodeName: String
HTMLTableRowElement[JC] def nodeType: Int
HTMLTableRowElement[JC] var nodeValue: String
HTMLTableRowElement[JC] def normalize(): Unit
HTMLTableRowElement[JC] def offsetHeight: Double
HTMLTableRowElement[JC] def offsetLeft: Double
HTMLTableRowElement[JC] def offsetParent: Element
HTMLTableRowElement[JC] def offsetTop: Double
HTMLTableRowElement[JC] def offsetWidth: Double
HTMLTableRowElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLTableRowElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLTableRowElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLTableRowElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLTableRowElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLTableRowElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLTableRowElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLTableRowElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLTableRowElement[JC] var oncanplay: js.Function1[Event, _]
HTMLTableRowElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLTableRowElement[JC] var onchange: js.Function1[Event, _]
HTMLTableRowElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLTableRowElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLTableRowElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLTableRowElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLTableRowElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLTableRowElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLTableRowElement[JC] var oncuechange: js.Function1[Event, _]
HTMLTableRowElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLTableRowElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLTableRowElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLTableRowElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLTableRowElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLTableRowElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLTableRowElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLTableRowElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLTableRowElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLTableRowElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLTableRowElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLTableRowElement[JC] var onemptied: js.Function1[Event, _]
HTMLTableRowElement[JC] var onended: js.Function1[Event, _]
HTMLTableRowElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLTableRowElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLTableRowElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLTableRowElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLTableRowElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLTableRowElement[JC] var onhelp: js.Function1[Event, _]
HTMLTableRowElement[JC] var oninput: js.Function1[Event, _]
HTMLTableRowElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLTableRowElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLTableRowElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLTableRowElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLTableRowElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLTableRowElement[JC] var onloadstart: js.Function1[Event, _]
HTMLTableRowElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLTableRowElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLTableRowElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLTableRowElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLTableRowElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLTableRowElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLTableRowElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLTableRowElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLTableRowElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLTableRowElement[JC] var onpause: js.Function1[Event, _]
HTMLTableRowElement[JC] var onplay: js.Function1[Event, _]
HTMLTableRowElement[JC] var onplaying: js.Function1[Event, _]
HTMLTableRowElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLTableRowElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLTableRowElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLTableRowElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLTableRowElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLTableRowElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLTableRowElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLTableRowElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLTableRowElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLTableRowElement[JC] var onratechange: js.Function1[Event, _]
HTMLTableRowElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLTableRowElement[JC] var onreset: js.Function1[Event, _]
HTMLTableRowElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLTableRowElement[JC] var onseeked: js.Function1[Event, _]
HTMLTableRowElement[JC] var onseeking: js.Function1[Event, _]
HTMLTableRowElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLTableRowElement[JC] var onselectstart: js.Function1[Event, _]
HTMLTableRowElement[JC] var onstalled: js.Function1[Event, _]
HTMLTableRowElement[JC] var onsubmit: js.Function1[Event, _]
HTMLTableRowElement[JC] var onsuspend: js.Function1[Event, _]
HTMLTableRowElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLTableRowElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLTableRowElement[JC] var onwaiting: js.Function1[Event, _]
HTMLTableRowElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLTableRowElement[JC] var outerHTML: String
HTMLTableRowElement[JC] def ownerDocument: Document
HTMLTableRowElement[JC] override def ownerDocument: HTMLDocument
HTMLTableRowElement[JC] var parentElement: HTMLElement
HTMLTableRowElement[JC] def parentNode: Node
HTMLTableRowElement[JC] def prefix: String
HTMLTableRowElement[JC] def prepend(nodes: Node | String*): Unit
HTMLTableRowElement[JC] def previousElementSibling: Element
HTMLTableRowElement[JC] def previousSibling: Node
HTMLTableRowElement[JC] def querySelector(selectors: String): Element
HTMLTableRowElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLTableRowElement[JC] var readyState: js.Any
HTMLTableRowElement[JC] var recordNumber: js.Any
HTMLTableRowElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLTableRowElement[JC] def remove(): Unit
HTMLTableRowElement[JC] def removeAttribute(name: String): Unit
HTMLTableRowElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLTableRowElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLTableRowElement[JC] def removeChild(oldChild: Node): Node
HTMLTableRowElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTableRowElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTableRowElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLTableRowElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLTableRowElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLTableRowElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLTableRowElement[JC] def requestPointerLock(): Unit
HTMLTableRowElement[JC] def rowIndex: Int
HTMLTableRowElement[JC] def scrollHeight: Int
HTMLTableRowElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLTableRowElement[JC] var scrollLeft: Double
HTMLTableRowElement[JC] var scrollTop: Double
HTMLTableRowElement[JC] def scrollWidth: Int
HTMLTableRowElement[JC] def sectionRowIndex: Int
HTMLTableRowElement[JC] def setAttribute(name: String, value: String): Unit
HTMLTableRowElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLTableRowElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLTableRowElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLTableRowElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLTableRowElement[JC] def shadowRoot: ShadowRoot
HTMLTableRowElement[JC] var spellcheck: Boolean
HTMLTableRowElement[JC] def style: CSSStyleDeclaration
HTMLTableRowElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLTableRowElement[JC] def style_ = (value: String): Unit
HTMLTableRowElement[JC] var tabIndex: Int
HTMLTableRowElement[JC] def tagName: String
HTMLTableRowElement[JC] var textContent: String
HTMLTableRowElement[JC] var title: String
HTMLTableSectionElement[JC] var accessKey: String
HTMLTableSectionElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTableSectionElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTableSectionElement[JC] def after(nodes: Node | String*): Unit
HTMLTableSectionElement[JC] def append(nodes: Node | String*): Unit
HTMLTableSectionElement[JC] def appendChild(newChild: Node): Node
HTMLTableSectionElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLTableSectionElement[JC] def attributes: NamedNodeMap
HTMLTableSectionElement[JC] def baseURI: String
HTMLTableSectionElement[JC] def before(nodes: Node | String*): Unit
HTMLTableSectionElement[JC] def blur(): Unit
HTMLTableSectionElement[JC] def childElementCount: Int
HTMLTableSectionElement[JC] def childNodes: NodeList[Node]
HTMLTableSectionElement[JC] def children: HTMLCollection[Element]
HTMLTableSectionElement[JC] var classList: DOMTokenList
HTMLTableSectionElement[JC] var className: String
HTMLTableSectionElement[JC] def click(): Unit
HTMLTableSectionElement[JC] def clientHeight: Int
HTMLTableSectionElement[JC] def clientLeft: Int
HTMLTableSectionElement[JC] def clientTop: Int
HTMLTableSectionElement[JC] def clientWidth: Int
HTMLTableSectionElement[JC] def cloneNode(deep: Boolean?): Node
HTMLTableSectionElement[JC] def closest(selector: String): Element
HTMLTableSectionElement[JC] def compareDocumentPosition(other: Node): Int
HTMLTableSectionElement[JC] def contains(child: HTMLElement): Boolean
HTMLTableSectionElement[JC] def contains(otherNode: Node): Boolean
HTMLTableSectionElement[JC] var contentEditable: String
HTMLTableSectionElement[JC] def dataset: js.Dictionary[String]
HTMLTableSectionElement[JC] def deleteRow(index: Int?): Unit
HTMLTableSectionElement[JC] var dir: String
HTMLTableSectionElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLTableSectionElement[JC] var draggable: Boolean
HTMLTableSectionElement[JC] var filters: Object
HTMLTableSectionElement[JC] def firstChild: Node
HTMLTableSectionElement[JC] def firstElementChild: Element
HTMLTableSectionElement[JC] def focus(): Unit
HTMLTableSectionElement[JC] def focus(options: FocusOptions): Unit
HTMLTableSectionElement[JC] def getAttribute(name: String): String
HTMLTableSectionElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLTableSectionElement[JC] def getAttributeNode(name: String): Attr
HTMLTableSectionElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLTableSectionElement[JC] def getBoundingClientRect(): DOMRect
HTMLTableSectionElement[JC] def getClientRects(): DOMRectList
HTMLTableSectionElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLTableSectionElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLTableSectionElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLTableSectionElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLTableSectionElement[JC] def hasAttribute(name: String): Boolean
HTMLTableSectionElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLTableSectionElement[JC] def hasAttributes(): Boolean
HTMLTableSectionElement[JC] def hasChildNodes(): Boolean
HTMLTableSectionElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLTableSectionElement[JC] var id: String
HTMLTableSectionElement[JC] var innerHTML: String
HTMLTableSectionElement[JC] var innerText: String
HTMLTableSectionElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLTableSectionElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLTableSectionElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLTableSectionElement[JC] def insertRow(index: Int?): HTMLElement
HTMLTableSectionElement[JC] def isConnected: Boolean
HTMLTableSectionElement[JC] def isContentEditable: Boolean
HTMLTableSectionElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLTableSectionElement[JC] def isEqualNode(arg: Node): Boolean
HTMLTableSectionElement[JC] def isSameNode(other: Node): Boolean
HTMLTableSectionElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLTableSectionElement[JC] var lang: String
HTMLTableSectionElement[JC] def lastChild: Node
HTMLTableSectionElement[JC] def lastElementChild: Element
HTMLTableSectionElement[JC] def localName: String
HTMLTableSectionElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLTableSectionElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLTableSectionElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLTableSectionElement[JC] def matches(selector: String): Boolean
HTMLTableSectionElement[JC] def moveRow(indexFrom: Int?, indexTo: Int?): Object
HTMLTableSectionElement[JC] def namespaceURI: String
HTMLTableSectionElement[JC] def nextElementSibling: Element
HTMLTableSectionElement[JC] def nextSibling: Node
HTMLTableSectionElement[JC] def nodeName: String
HTMLTableSectionElement[JC] def nodeType: Int
HTMLTableSectionElement[JC] var nodeValue: String
HTMLTableSectionElement[JC] def normalize(): Unit
HTMLTableSectionElement[JC] def offsetHeight: Double
HTMLTableSectionElement[JC] def offsetLeft: Double
HTMLTableSectionElement[JC] def offsetParent: Element
HTMLTableSectionElement[JC] def offsetTop: Double
HTMLTableSectionElement[JC] def offsetWidth: Double
HTMLTableSectionElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLTableSectionElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLTableSectionElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLTableSectionElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLTableSectionElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLTableSectionElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLTableSectionElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLTableSectionElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLTableSectionElement[JC] var oncanplay: js.Function1[Event, _]
HTMLTableSectionElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onchange: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLTableSectionElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLTableSectionElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLTableSectionElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLTableSectionElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLTableSectionElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLTableSectionElement[JC] var oncuechange: js.Function1[Event, _]
HTMLTableSectionElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLTableSectionElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLTableSectionElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLTableSectionElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLTableSectionElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLTableSectionElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLTableSectionElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLTableSectionElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLTableSectionElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLTableSectionElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLTableSectionElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onemptied: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onended: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLTableSectionElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLTableSectionElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLTableSectionElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onhelp: js.Function1[Event, _]
HTMLTableSectionElement[JC] var oninput: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLTableSectionElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLTableSectionElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLTableSectionElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onloadstart: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLTableSectionElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLTableSectionElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLTableSectionElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLTableSectionElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLTableSectionElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLTableSectionElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLTableSectionElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLTableSectionElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLTableSectionElement[JC] var onpause: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onplay: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onplaying: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLTableSectionElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLTableSectionElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLTableSectionElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLTableSectionElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLTableSectionElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLTableSectionElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLTableSectionElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLTableSectionElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLTableSectionElement[JC] var onratechange: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onreset: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLTableSectionElement[JC] var onseeked: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onseeking: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLTableSectionElement[JC] var onselectstart: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onstalled: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onsubmit: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onsuspend: js.Function1[Event, _]
HTMLTableSectionElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onwaiting: js.Function1[Event, _]
HTMLTableSectionElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLTableSectionElement[JC] var outerHTML: String
HTMLTableSectionElement[JC] def ownerDocument: Document
HTMLTableSectionElement[JC] override def ownerDocument: HTMLDocument
HTMLTableSectionElement[JC] var parentElement: HTMLElement
HTMLTableSectionElement[JC] def parentNode: Node
HTMLTableSectionElement[JC] def prefix: String
HTMLTableSectionElement[JC] def prepend(nodes: Node | String*): Unit
HTMLTableSectionElement[JC] def previousElementSibling: Element
HTMLTableSectionElement[JC] def previousSibling: Node
HTMLTableSectionElement[JC] def querySelector(selectors: String): Element
HTMLTableSectionElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLTableSectionElement[JC] var readyState: js.Any
HTMLTableSectionElement[JC] var recordNumber: js.Any
HTMLTableSectionElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLTableSectionElement[JC] def remove(): Unit
HTMLTableSectionElement[JC] def removeAttribute(name: String): Unit
HTMLTableSectionElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLTableSectionElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLTableSectionElement[JC] def removeChild(oldChild: Node): Node
HTMLTableSectionElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTableSectionElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTableSectionElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLTableSectionElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLTableSectionElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLTableSectionElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLTableSectionElement[JC] def requestPointerLock(): Unit
HTMLTableSectionElement[JC] def rows: HTMLCollection[Element]
HTMLTableSectionElement[JC] def scrollHeight: Int
HTMLTableSectionElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLTableSectionElement[JC] var scrollLeft: Double
HTMLTableSectionElement[JC] var scrollTop: Double
HTMLTableSectionElement[JC] def scrollWidth: Int
HTMLTableSectionElement[JC] def setAttribute(name: String, value: String): Unit
HTMLTableSectionElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLTableSectionElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLTableSectionElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLTableSectionElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLTableSectionElement[JC] def shadowRoot: ShadowRoot
HTMLTableSectionElement[JC] var spellcheck: Boolean
HTMLTableSectionElement[JC] def style: CSSStyleDeclaration
HTMLTableSectionElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLTableSectionElement[JC] def style_ = (value: String): Unit
HTMLTableSectionElement[JC] var tabIndex: Int
HTMLTableSectionElement[JC] def tagName: String
HTMLTableSectionElement[JC] var textContent: String
HTMLTableSectionElement[JC] var title: String
HTMLTemplateElement[JC] var accessKey: String
HTMLTemplateElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTemplateElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTemplateElement[JC] def after(nodes: Node | String*): Unit
HTMLTemplateElement[JC] def append(nodes: Node | String*): Unit
HTMLTemplateElement[JC] def appendChild(newChild: Node): Node
HTMLTemplateElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLTemplateElement[JC] def attributes: NamedNodeMap
HTMLTemplateElement[JC] def baseURI: String
HTMLTemplateElement[JC] def before(nodes: Node | String*): Unit
HTMLTemplateElement[JC] def blur(): Unit
HTMLTemplateElement[JC] def childElementCount: Int
HTMLTemplateElement[JC] def childNodes: NodeList[Node]
HTMLTemplateElement[JC] def children: HTMLCollection[Element]
HTMLTemplateElement[JC] var classList: DOMTokenList
HTMLTemplateElement[JC] var className: String
HTMLTemplateElement[JC] def click(): Unit
HTMLTemplateElement[JC] def clientHeight: Int
HTMLTemplateElement[JC] def clientLeft: Int
HTMLTemplateElement[JC] def clientTop: Int
HTMLTemplateElement[JC] def clientWidth: Int
HTMLTemplateElement[JC] def cloneNode(deep: Boolean?): Node
HTMLTemplateElement[JC] def closest(selector: String): Element
HTMLTemplateElement[JC] def compareDocumentPosition(other: Node): Int
HTMLTemplateElement[JC] def contains(child: HTMLElement): Boolean
HTMLTemplateElement[JC] def contains(otherNode: Node): Boolean
HTMLTemplateElement[JC] def content: DocumentFragment
HTMLTemplateElement[JC] var contentEditable: String
HTMLTemplateElement[JC] def dataset: js.Dictionary[String]
HTMLTemplateElement[JC] var dir: String
HTMLTemplateElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLTemplateElement[JC] var draggable: Boolean
HTMLTemplateElement[JC] var filters: Object
HTMLTemplateElement[JC] def firstChild: Node
HTMLTemplateElement[JC] def firstElementChild: Element
HTMLTemplateElement[JC] def focus(): Unit
HTMLTemplateElement[JC] def focus(options: FocusOptions): Unit
HTMLTemplateElement[JC] def getAttribute(name: String): String
HTMLTemplateElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLTemplateElement[JC] def getAttributeNode(name: String): Attr
HTMLTemplateElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLTemplateElement[JC] def getBoundingClientRect(): DOMRect
HTMLTemplateElement[JC] def getClientRects(): DOMRectList
HTMLTemplateElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLTemplateElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLTemplateElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLTemplateElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLTemplateElement[JC] def hasAttribute(name: String): Boolean
HTMLTemplateElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLTemplateElement[JC] def hasAttributes(): Boolean
HTMLTemplateElement[JC] def hasChildNodes(): Boolean
HTMLTemplateElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLTemplateElement[JC] var id: String
HTMLTemplateElement[JC] var innerHTML: String
HTMLTemplateElement[JC] var innerText: String
HTMLTemplateElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLTemplateElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLTemplateElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLTemplateElement[JC] def isConnected: Boolean
HTMLTemplateElement[JC] def isContentEditable: Boolean
HTMLTemplateElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLTemplateElement[JC] def isEqualNode(arg: Node): Boolean
HTMLTemplateElement[JC] def isSameNode(other: Node): Boolean
HTMLTemplateElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLTemplateElement[JC] var lang: String
HTMLTemplateElement[JC] def lastChild: Node
HTMLTemplateElement[JC] def lastElementChild: Element
HTMLTemplateElement[JC] def localName: String
HTMLTemplateElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLTemplateElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLTemplateElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLTemplateElement[JC] def matches(selector: String): Boolean
HTMLTemplateElement[JC] def namespaceURI: String
HTMLTemplateElement[JC] def nextElementSibling: Element
HTMLTemplateElement[JC] def nextSibling: Node
HTMLTemplateElement[JC] def nodeName: String
HTMLTemplateElement[JC] def nodeType: Int
HTMLTemplateElement[JC] var nodeValue: String
HTMLTemplateElement[JC] def normalize(): Unit
HTMLTemplateElement[JC] def offsetHeight: Double
HTMLTemplateElement[JC] def offsetLeft: Double
HTMLTemplateElement[JC] def offsetParent: Element
HTMLTemplateElement[JC] def offsetTop: Double
HTMLTemplateElement[JC] def offsetWidth: Double
HTMLTemplateElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLTemplateElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLTemplateElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLTemplateElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLTemplateElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLTemplateElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLTemplateElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLTemplateElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLTemplateElement[JC] var oncanplay: js.Function1[Event, _]
HTMLTemplateElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLTemplateElement[JC] var onchange: js.Function1[Event, _]
HTMLTemplateElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLTemplateElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLTemplateElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLTemplateElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLTemplateElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLTemplateElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLTemplateElement[JC] var oncuechange: js.Function1[Event, _]
HTMLTemplateElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLTemplateElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLTemplateElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLTemplateElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLTemplateElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLTemplateElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLTemplateElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLTemplateElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLTemplateElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLTemplateElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLTemplateElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLTemplateElement[JC] var onemptied: js.Function1[Event, _]
HTMLTemplateElement[JC] var onended: js.Function1[Event, _]
HTMLTemplateElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLTemplateElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLTemplateElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLTemplateElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLTemplateElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLTemplateElement[JC] var onhelp: js.Function1[Event, _]
HTMLTemplateElement[JC] var oninput: js.Function1[Event, _]
HTMLTemplateElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLTemplateElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLTemplateElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLTemplateElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLTemplateElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLTemplateElement[JC] var onloadstart: js.Function1[Event, _]
HTMLTemplateElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLTemplateElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLTemplateElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLTemplateElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLTemplateElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLTemplateElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLTemplateElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLTemplateElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLTemplateElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLTemplateElement[JC] var onpause: js.Function1[Event, _]
HTMLTemplateElement[JC] var onplay: js.Function1[Event, _]
HTMLTemplateElement[JC] var onplaying: js.Function1[Event, _]
HTMLTemplateElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLTemplateElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLTemplateElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLTemplateElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLTemplateElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLTemplateElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLTemplateElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLTemplateElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLTemplateElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLTemplateElement[JC] var onratechange: js.Function1[Event, _]
HTMLTemplateElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLTemplateElement[JC] var onreset: js.Function1[Event, _]
HTMLTemplateElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLTemplateElement[JC] var onseeked: js.Function1[Event, _]
HTMLTemplateElement[JC] var onseeking: js.Function1[Event, _]
HTMLTemplateElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLTemplateElement[JC] var onselectstart: js.Function1[Event, _]
HTMLTemplateElement[JC] var onstalled: js.Function1[Event, _]
HTMLTemplateElement[JC] var onsubmit: js.Function1[Event, _]
HTMLTemplateElement[JC] var onsuspend: js.Function1[Event, _]
HTMLTemplateElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLTemplateElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLTemplateElement[JC] var onwaiting: js.Function1[Event, _]
HTMLTemplateElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLTemplateElement[JC] var outerHTML: String
HTMLTemplateElement[JC] def ownerDocument: Document
HTMLTemplateElement[JC] override def ownerDocument: HTMLDocument
HTMLTemplateElement[JC] var parentElement: HTMLElement
HTMLTemplateElement[JC] def parentNode: Node
HTMLTemplateElement[JC] def prefix: String
HTMLTemplateElement[JC] def prepend(nodes: Node | String*): Unit
HTMLTemplateElement[JC] def previousElementSibling: Element
HTMLTemplateElement[JC] def previousSibling: Node
HTMLTemplateElement[JC] def querySelector(selectors: String): Element
HTMLTemplateElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLTemplateElement[JC] var readyState: js.Any
HTMLTemplateElement[JC] var recordNumber: js.Any
HTMLTemplateElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLTemplateElement[JC] def remove(): Unit
HTMLTemplateElement[JC] def removeAttribute(name: String): Unit
HTMLTemplateElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLTemplateElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLTemplateElement[JC] def removeChild(oldChild: Node): Node
HTMLTemplateElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTemplateElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTemplateElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLTemplateElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLTemplateElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLTemplateElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLTemplateElement[JC] def requestPointerLock(): Unit
HTMLTemplateElement[JC] def scrollHeight: Int
HTMLTemplateElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLTemplateElement[JC] var scrollLeft: Double
HTMLTemplateElement[JC] var scrollTop: Double
HTMLTemplateElement[JC] def scrollWidth: Int
HTMLTemplateElement[JC] def setAttribute(name: String, value: String): Unit
HTMLTemplateElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLTemplateElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLTemplateElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLTemplateElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLTemplateElement[JC] def shadowRoot: ShadowRoot
HTMLTemplateElement[JC] var spellcheck: Boolean
HTMLTemplateElement[JC] def style: CSSStyleDeclaration
HTMLTemplateElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLTemplateElement[JC] def style_ = (value: String): Unit
HTMLTemplateElement[JC] var tabIndex: Int
HTMLTemplateElement[JC] def tagName: String
HTMLTemplateElement[JC] var textContent: String
HTMLTemplateElement[JC] var title: String
HTMLTextAreaElement[JC] var accessKey: String
HTMLTextAreaElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTextAreaElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTextAreaElement[JC] def after(nodes: Node | String*): Unit
HTMLTextAreaElement[JC] def append(nodes: Node | String*): Unit
HTMLTextAreaElement[JC] def appendChild(newChild: Node): Node
HTMLTextAreaElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLTextAreaElement[JC] def attributes: NamedNodeMap
HTMLTextAreaElement[JC] var autofocus: Boolean
HTMLTextAreaElement[JC] def baseURI: String
HTMLTextAreaElement[JC] def before(nodes: Node | String*): Unit
HTMLTextAreaElement[JC] def blur(): Unit
HTMLTextAreaElement[JC] def checkValidity(): Boolean
HTMLTextAreaElement[JC] def childElementCount: Int
HTMLTextAreaElement[JC] def childNodes: NodeList[Node]
HTMLTextAreaElement[JC] def children: HTMLCollection[Element]
HTMLTextAreaElement[JC] var classList: DOMTokenList
HTMLTextAreaElement[JC] var className: String
HTMLTextAreaElement[JC] def click(): Unit
HTMLTextAreaElement[JC] def clientHeight: Int
HTMLTextAreaElement[JC] def clientLeft: Int
HTMLTextAreaElement[JC] def clientTop: Int
HTMLTextAreaElement[JC] def clientWidth: Int
HTMLTextAreaElement[JC] def cloneNode(deep: Boolean?): Node
HTMLTextAreaElement[JC] def closest(selector: String): Element
HTMLTextAreaElement[JC] var cols: Int
HTMLTextAreaElement[JC] def compareDocumentPosition(other: Node): Int
HTMLTextAreaElement[JC] def contains(child: HTMLElement): Boolean
HTMLTextAreaElement[JC] def contains(otherNode: Node): Boolean
HTMLTextAreaElement[JC] var contentEditable: String
HTMLTextAreaElement[JC] def dataset: js.Dictionary[String]
HTMLTextAreaElement[JC] var defaultValue: String
HTMLTextAreaElement[JC] var dir: String
HTMLTextAreaElement[JC] var disabled: Boolean
HTMLTextAreaElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLTextAreaElement[JC] var draggable: Boolean
HTMLTextAreaElement[JC] var filters: Object
HTMLTextAreaElement[JC] def firstChild: Node
HTMLTextAreaElement[JC] def firstElementChild: Element
HTMLTextAreaElement[JC] def focus(): Unit
HTMLTextAreaElement[JC] def focus(options: FocusOptions): Unit
HTMLTextAreaElement[JC] def form: HTMLFormElement
HTMLTextAreaElement[JC] def getAttribute(name: String): String
HTMLTextAreaElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLTextAreaElement[JC] def getAttributeNode(name: String): Attr
HTMLTextAreaElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLTextAreaElement[JC] def getBoundingClientRect(): DOMRect
HTMLTextAreaElement[JC] def getClientRects(): DOMRectList
HTMLTextAreaElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLTextAreaElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLTextAreaElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLTextAreaElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLTextAreaElement[JC] def hasAttribute(name: String): Boolean
HTMLTextAreaElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLTextAreaElement[JC] def hasAttributes(): Boolean
HTMLTextAreaElement[JC] def hasChildNodes(): Boolean
HTMLTextAreaElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLTextAreaElement[JC] var id: String
HTMLTextAreaElement[JC] var innerHTML: String
HTMLTextAreaElement[JC] var innerText: String
HTMLTextAreaElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLTextAreaElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLTextAreaElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLTextAreaElement[JC] def isConnected: Boolean
HTMLTextAreaElement[JC] def isContentEditable: Boolean
HTMLTextAreaElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLTextAreaElement[JC] def isEqualNode(arg: Node): Boolean
HTMLTextAreaElement[JC] def isSameNode(other: Node): Boolean
HTMLTextAreaElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLTextAreaElement[JC] var lang: String
HTMLTextAreaElement[JC] def lastChild: Node
HTMLTextAreaElement[JC] def lastElementChild: Element
HTMLTextAreaElement[JC] def localName: String
HTMLTextAreaElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLTextAreaElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLTextAreaElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLTextAreaElement[JC] def matches(selector: String): Boolean
HTMLTextAreaElement[JC] var maxLength: Int
HTMLTextAreaElement[JC] var name: String
HTMLTextAreaElement[JC] def namespaceURI: String
HTMLTextAreaElement[JC] def nextElementSibling: Element
HTMLTextAreaElement[JC] def nextSibling: Node
HTMLTextAreaElement[JC] def nodeName: String
HTMLTextAreaElement[JC] def nodeType: Int
HTMLTextAreaElement[JC] var nodeValue: String
HTMLTextAreaElement[JC] def normalize(): Unit
HTMLTextAreaElement[JC] def offsetHeight: Double
HTMLTextAreaElement[JC] def offsetLeft: Double
HTMLTextAreaElement[JC] def offsetParent: Element
HTMLTextAreaElement[JC] def offsetTop: Double
HTMLTextAreaElement[JC] def offsetWidth: Double
HTMLTextAreaElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLTextAreaElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLTextAreaElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLTextAreaElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLTextAreaElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLTextAreaElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLTextAreaElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLTextAreaElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLTextAreaElement[JC] var oncanplay: js.Function1[Event, _]
HTMLTextAreaElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onchange: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLTextAreaElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLTextAreaElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLTextAreaElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLTextAreaElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLTextAreaElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLTextAreaElement[JC] var oncuechange: js.Function1[Event, _]
HTMLTextAreaElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLTextAreaElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLTextAreaElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLTextAreaElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLTextAreaElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLTextAreaElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLTextAreaElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLTextAreaElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLTextAreaElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLTextAreaElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLTextAreaElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onemptied: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onended: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLTextAreaElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLTextAreaElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLTextAreaElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onhelp: js.Function1[Event, _]
HTMLTextAreaElement[JC] var oninput: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLTextAreaElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLTextAreaElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLTextAreaElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onloadstart: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLTextAreaElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLTextAreaElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLTextAreaElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLTextAreaElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLTextAreaElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLTextAreaElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLTextAreaElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLTextAreaElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLTextAreaElement[JC] var onpause: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onplay: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onplaying: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLTextAreaElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLTextAreaElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLTextAreaElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLTextAreaElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLTextAreaElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLTextAreaElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLTextAreaElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLTextAreaElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLTextAreaElement[JC] var onratechange: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onreset: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLTextAreaElement[JC] var onseeked: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onseeking: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLTextAreaElement[JC] var onselectstart: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onstalled: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onsubmit: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onsuspend: js.Function1[Event, _]
HTMLTextAreaElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onwaiting: js.Function1[Event, _]
HTMLTextAreaElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLTextAreaElement[JC] var outerHTML: String
HTMLTextAreaElement[JC] def ownerDocument: Document
HTMLTextAreaElement[JC] override def ownerDocument: HTMLDocument
HTMLTextAreaElement[JC] var parentElement: HTMLElement
HTMLTextAreaElement[JC] def parentNode: Node
HTMLTextAreaElement[JC] var placeholder: String
HTMLTextAreaElement[JC] def prefix: String
HTMLTextAreaElement[JC] def prepend(nodes: Node | String*): Unit
HTMLTextAreaElement[JC] def previousElementSibling: Element
HTMLTextAreaElement[JC] def previousSibling: Node
HTMLTextAreaElement[JC] def querySelector(selectors: String): Element
HTMLTextAreaElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLTextAreaElement[JC] var readOnly: Boolean
HTMLTextAreaElement[JC] var readyState: js.Any
HTMLTextAreaElement[JC] var recordNumber: js.Any
HTMLTextAreaElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLTextAreaElement[JC] def remove(): Unit
HTMLTextAreaElement[JC] def removeAttribute(name: String): Unit
HTMLTextAreaElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLTextAreaElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLTextAreaElement[JC] def removeChild(oldChild: Node): Node
HTMLTextAreaElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTextAreaElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTextAreaElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLTextAreaElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLTextAreaElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLTextAreaElement[JC] def reportValidity(): Boolean
HTMLTextAreaElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLTextAreaElement[JC] def requestPointerLock(): Unit
HTMLTextAreaElement[JC] var required: Boolean
HTMLTextAreaElement[JC] var rows: Int
HTMLTextAreaElement[JC] def scrollHeight: Int
HTMLTextAreaElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLTextAreaElement[JC] var scrollLeft: Double
HTMLTextAreaElement[JC] var scrollTop: Double
HTMLTextAreaElement[JC] def scrollWidth: Int
HTMLTextAreaElement[JC] def select(): Unit
HTMLTextAreaElement[JC] var selectionEnd: Int
HTMLTextAreaElement[JC] var selectionStart: Int
HTMLTextAreaElement[JC] def setAttribute(name: String, value: String): Unit
HTMLTextAreaElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLTextAreaElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLTextAreaElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLTextAreaElement[JC] def setCustomValidity(error: String): Unit
HTMLTextAreaElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLTextAreaElement[JC] def setSelectionRange(start: Int, end: Int): Unit
HTMLTextAreaElement[JC] def shadowRoot: ShadowRoot
HTMLTextAreaElement[JC] var spellcheck: Boolean
HTMLTextAreaElement[JC] var status: js.Any
HTMLTextAreaElement[JC] def style: CSSStyleDeclaration
HTMLTextAreaElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLTextAreaElement[JC] def style_ = (value: String): Unit
HTMLTextAreaElement[JC] var tabIndex: Int
HTMLTextAreaElement[JC] def tagName: String
HTMLTextAreaElement[JC] var textContent: String
HTMLTextAreaElement[JC] var title: String
HTMLTextAreaElement[JC] def `type`: String
HTMLTextAreaElement[JC] def validationMessage: String
HTMLTextAreaElement[JC] def validity: ValidityState
HTMLTextAreaElement[JC] var value: String
HTMLTextAreaElement[JC] def willValidate: Boolean
HTMLTextAreaElement[JC] var wrap: String
HTMLTitleElement[JC] var accessKey: String
HTMLTitleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTitleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTitleElement[JC] def after(nodes: Node | String*): Unit
HTMLTitleElement[JC] def append(nodes: Node | String*): Unit
HTMLTitleElement[JC] def appendChild(newChild: Node): Node
HTMLTitleElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLTitleElement[JC] def attributes: NamedNodeMap
HTMLTitleElement[JC] def baseURI: String
HTMLTitleElement[JC] def before(nodes: Node | String*): Unit
HTMLTitleElement[JC] def blur(): Unit
HTMLTitleElement[JC] def childElementCount: Int
HTMLTitleElement[JC] def childNodes: NodeList[Node]
HTMLTitleElement[JC] def children: HTMLCollection[Element]
HTMLTitleElement[JC] var classList: DOMTokenList
HTMLTitleElement[JC] var className: String
HTMLTitleElement[JC] def click(): Unit
HTMLTitleElement[JC] def clientHeight: Int
HTMLTitleElement[JC] def clientLeft: Int
HTMLTitleElement[JC] def clientTop: Int
HTMLTitleElement[JC] def clientWidth: Int
HTMLTitleElement[JC] def cloneNode(deep: Boolean?): Node
HTMLTitleElement[JC] def closest(selector: String): Element
HTMLTitleElement[JC] def compareDocumentPosition(other: Node): Int
HTMLTitleElement[JC] def contains(child: HTMLElement): Boolean
HTMLTitleElement[JC] def contains(otherNode: Node): Boolean
HTMLTitleElement[JC] var contentEditable: String
HTMLTitleElement[JC] def dataset: js.Dictionary[String]
HTMLTitleElement[JC] var dir: String
HTMLTitleElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLTitleElement[JC] var draggable: Boolean
HTMLTitleElement[JC] var filters: Object
HTMLTitleElement[JC] def firstChild: Node
HTMLTitleElement[JC] def firstElementChild: Element
HTMLTitleElement[JC] def focus(): Unit
HTMLTitleElement[JC] def focus(options: FocusOptions): Unit
HTMLTitleElement[JC] def getAttribute(name: String): String
HTMLTitleElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLTitleElement[JC] def getAttributeNode(name: String): Attr
HTMLTitleElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLTitleElement[JC] def getBoundingClientRect(): DOMRect
HTMLTitleElement[JC] def getClientRects(): DOMRectList
HTMLTitleElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLTitleElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLTitleElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLTitleElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLTitleElement[JC] def hasAttribute(name: String): Boolean
HTMLTitleElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLTitleElement[JC] def hasAttributes(): Boolean
HTMLTitleElement[JC] def hasChildNodes(): Boolean
HTMLTitleElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLTitleElement[JC] var id: String
HTMLTitleElement[JC] var innerHTML: String
HTMLTitleElement[JC] var innerText: String
HTMLTitleElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLTitleElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLTitleElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLTitleElement[JC] def isConnected: Boolean
HTMLTitleElement[JC] def isContentEditable: Boolean
HTMLTitleElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLTitleElement[JC] def isEqualNode(arg: Node): Boolean
HTMLTitleElement[JC] def isSameNode(other: Node): Boolean
HTMLTitleElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLTitleElement[JC] var lang: String
HTMLTitleElement[JC] def lastChild: Node
HTMLTitleElement[JC] def lastElementChild: Element
HTMLTitleElement[JC] def localName: String
HTMLTitleElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLTitleElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLTitleElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLTitleElement[JC] def matches(selector: String): Boolean
HTMLTitleElement[JC] def namespaceURI: String
HTMLTitleElement[JC] def nextElementSibling: Element
HTMLTitleElement[JC] def nextSibling: Node
HTMLTitleElement[JC] def nodeName: String
HTMLTitleElement[JC] def nodeType: Int
HTMLTitleElement[JC] var nodeValue: String
HTMLTitleElement[JC] def normalize(): Unit
HTMLTitleElement[JC] def offsetHeight: Double
HTMLTitleElement[JC] def offsetLeft: Double
HTMLTitleElement[JC] def offsetParent: Element
HTMLTitleElement[JC] def offsetTop: Double
HTMLTitleElement[JC] def offsetWidth: Double
HTMLTitleElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLTitleElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLTitleElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLTitleElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLTitleElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLTitleElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLTitleElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLTitleElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLTitleElement[JC] var oncanplay: js.Function1[Event, _]
HTMLTitleElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLTitleElement[JC] var onchange: js.Function1[Event, _]
HTMLTitleElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLTitleElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLTitleElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLTitleElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLTitleElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLTitleElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLTitleElement[JC] var oncuechange: js.Function1[Event, _]
HTMLTitleElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLTitleElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLTitleElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLTitleElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLTitleElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLTitleElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLTitleElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLTitleElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLTitleElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLTitleElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLTitleElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLTitleElement[JC] var onemptied: js.Function1[Event, _]
HTMLTitleElement[JC] var onended: js.Function1[Event, _]
HTMLTitleElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLTitleElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLTitleElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLTitleElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLTitleElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLTitleElement[JC] var onhelp: js.Function1[Event, _]
HTMLTitleElement[JC] var oninput: js.Function1[Event, _]
HTMLTitleElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLTitleElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLTitleElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLTitleElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLTitleElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLTitleElement[JC] var onloadstart: js.Function1[Event, _]
HTMLTitleElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLTitleElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLTitleElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLTitleElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLTitleElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLTitleElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLTitleElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLTitleElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLTitleElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLTitleElement[JC] var onpause: js.Function1[Event, _]
HTMLTitleElement[JC] var onplay: js.Function1[Event, _]
HTMLTitleElement[JC] var onplaying: js.Function1[Event, _]
HTMLTitleElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLTitleElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLTitleElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLTitleElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLTitleElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLTitleElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLTitleElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLTitleElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLTitleElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLTitleElement[JC] var onratechange: js.Function1[Event, _]
HTMLTitleElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLTitleElement[JC] var onreset: js.Function1[Event, _]
HTMLTitleElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLTitleElement[JC] var onseeked: js.Function1[Event, _]
HTMLTitleElement[JC] var onseeking: js.Function1[Event, _]
HTMLTitleElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLTitleElement[JC] var onselectstart: js.Function1[Event, _]
HTMLTitleElement[JC] var onstalled: js.Function1[Event, _]
HTMLTitleElement[JC] var onsubmit: js.Function1[Event, _]
HTMLTitleElement[JC] var onsuspend: js.Function1[Event, _]
HTMLTitleElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLTitleElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLTitleElement[JC] var onwaiting: js.Function1[Event, _]
HTMLTitleElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLTitleElement[JC] var outerHTML: String
HTMLTitleElement[JC] def ownerDocument: Document
HTMLTitleElement[JC] override def ownerDocument: HTMLDocument
HTMLTitleElement[JC] var parentElement: HTMLElement
HTMLTitleElement[JC] def parentNode: Node
HTMLTitleElement[JC] def prefix: String
HTMLTitleElement[JC] def prepend(nodes: Node | String*): Unit
HTMLTitleElement[JC] def previousElementSibling: Element
HTMLTitleElement[JC] def previousSibling: Node
HTMLTitleElement[JC] def querySelector(selectors: String): Element
HTMLTitleElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLTitleElement[JC] var readyState: js.Any
HTMLTitleElement[JC] var recordNumber: js.Any
HTMLTitleElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLTitleElement[JC] def remove(): Unit
HTMLTitleElement[JC] def removeAttribute(name: String): Unit
HTMLTitleElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLTitleElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLTitleElement[JC] def removeChild(oldChild: Node): Node
HTMLTitleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTitleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTitleElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLTitleElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLTitleElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLTitleElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLTitleElement[JC] def requestPointerLock(): Unit
HTMLTitleElement[JC] def scrollHeight: Int
HTMLTitleElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLTitleElement[JC] var scrollLeft: Double
HTMLTitleElement[JC] var scrollTop: Double
HTMLTitleElement[JC] def scrollWidth: Int
HTMLTitleElement[JC] def setAttribute(name: String, value: String): Unit
HTMLTitleElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLTitleElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLTitleElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLTitleElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLTitleElement[JC] def shadowRoot: ShadowRoot
HTMLTitleElement[JC] var spellcheck: Boolean
HTMLTitleElement[JC] def style: CSSStyleDeclaration
HTMLTitleElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLTitleElement[JC] def style_ = (value: String): Unit
HTMLTitleElement[JC] var tabIndex: Int
HTMLTitleElement[JC] def tagName: String
HTMLTitleElement[JC] var text: String
HTMLTitleElement[JC] var textContent: String
HTMLTitleElement[JC] var title: String
HTMLTrackElement[JC] var accessKey: String
HTMLTrackElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTrackElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTrackElement[JC] def after(nodes: Node | String*): Unit
HTMLTrackElement[JC] def append(nodes: Node | String*): Unit
HTMLTrackElement[JC] def appendChild(newChild: Node): Node
HTMLTrackElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLTrackElement[JC] def attributes: NamedNodeMap
HTMLTrackElement[JC] def baseURI: String
HTMLTrackElement[JC] def before(nodes: Node | String*): Unit
HTMLTrackElement[JC] def blur(): Unit
HTMLTrackElement[JC] def childElementCount: Int
HTMLTrackElement[JC] def childNodes: NodeList[Node]
HTMLTrackElement[JC] def children: HTMLCollection[Element]
HTMLTrackElement[JC] var classList: DOMTokenList
HTMLTrackElement[JC] var className: String
HTMLTrackElement[JC] def click(): Unit
HTMLTrackElement[JC] def clientHeight: Int
HTMLTrackElement[JC] def clientLeft: Int
HTMLTrackElement[JC] def clientTop: Int
HTMLTrackElement[JC] def clientWidth: Int
HTMLTrackElement[JC] def cloneNode(deep: Boolean?): Node
HTMLTrackElement[JC] def closest(selector: String): Element
HTMLTrackElement[JC] def compareDocumentPosition(other: Node): Int
HTMLTrackElement[JC] def contains(child: HTMLElement): Boolean
HTMLTrackElement[JC] def contains(otherNode: Node): Boolean
HTMLTrackElement[JC] var contentEditable: String
HTMLTrackElement[JC] def dataset: js.Dictionary[String]
HTMLTrackElement[JC] var dir: String
HTMLTrackElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLTrackElement[JC] var draggable: Boolean
HTMLTrackElement[JC] var filters: Object
HTMLTrackElement[JC] def firstChild: Node
HTMLTrackElement[JC] def firstElementChild: Element
HTMLTrackElement[JC] def focus(): Unit
HTMLTrackElement[JC] def focus(options: FocusOptions): Unit
HTMLTrackElement[JC] def getAttribute(name: String): String
HTMLTrackElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLTrackElement[JC] def getAttributeNode(name: String): Attr
HTMLTrackElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLTrackElement[JC] def getBoundingClientRect(): DOMRect
HTMLTrackElement[JC] def getClientRects(): DOMRectList
HTMLTrackElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLTrackElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLTrackElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLTrackElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLTrackElement[JC] def hasAttribute(name: String): Boolean
HTMLTrackElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLTrackElement[JC] def hasAttributes(): Boolean
HTMLTrackElement[JC] def hasChildNodes(): Boolean
HTMLTrackElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLTrackElement[JC] var id: String
HTMLTrackElement[JC] var innerHTML: String
HTMLTrackElement[JC] var innerText: String
HTMLTrackElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLTrackElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLTrackElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLTrackElement[JC] def isConnected: Boolean
HTMLTrackElement[JC] def isContentEditable: Boolean
HTMLTrackElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLTrackElement[JC] def isEqualNode(arg: Node): Boolean
HTMLTrackElement[JC] def isSameNode(other: Node): Boolean
HTMLTrackElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLTrackElement[JC] var kind: String
HTMLTrackElement[JC] var label: String
HTMLTrackElement[JC] var lang: String
HTMLTrackElement[JC] def lastChild: Node
HTMLTrackElement[JC] def lastElementChild: Element
HTMLTrackElement[JC] def localName: String
HTMLTrackElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLTrackElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLTrackElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLTrackElement[JC] def matches(selector: String): Boolean
HTMLTrackElement[JC] def namespaceURI: String
HTMLTrackElement[JC] def nextElementSibling: Element
HTMLTrackElement[JC] def nextSibling: Node
HTMLTrackElement[JC] def nodeName: String
HTMLTrackElement[JC] def nodeType: Int
HTMLTrackElement[JC] var nodeValue: String
HTMLTrackElement[JC] def normalize(): Unit
HTMLTrackElement[JC] def offsetHeight: Double
HTMLTrackElement[JC] def offsetLeft: Double
HTMLTrackElement[JC] def offsetParent: Element
HTMLTrackElement[JC] def offsetTop: Double
HTMLTrackElement[JC] def offsetWidth: Double
HTMLTrackElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLTrackElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLTrackElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLTrackElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLTrackElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLTrackElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLTrackElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLTrackElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLTrackElement[JC] var oncanplay: js.Function1[Event, _]
HTMLTrackElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLTrackElement[JC] var onchange: js.Function1[Event, _]
HTMLTrackElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLTrackElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLTrackElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLTrackElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLTrackElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLTrackElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLTrackElement[JC] var oncuechange: js.Function1[Event, _]
HTMLTrackElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLTrackElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLTrackElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLTrackElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLTrackElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLTrackElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLTrackElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLTrackElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLTrackElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLTrackElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLTrackElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLTrackElement[JC] var onemptied: js.Function1[Event, _]
HTMLTrackElement[JC] var onended: js.Function1[Event, _]
HTMLTrackElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLTrackElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLTrackElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLTrackElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLTrackElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLTrackElement[JC] var onhelp: js.Function1[Event, _]
HTMLTrackElement[JC] var oninput: js.Function1[Event, _]
HTMLTrackElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLTrackElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLTrackElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLTrackElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLTrackElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLTrackElement[JC] var onloadstart: js.Function1[Event, _]
HTMLTrackElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLTrackElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLTrackElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLTrackElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLTrackElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLTrackElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLTrackElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLTrackElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLTrackElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLTrackElement[JC] var onpause: js.Function1[Event, _]
HTMLTrackElement[JC] var onplay: js.Function1[Event, _]
HTMLTrackElement[JC] var onplaying: js.Function1[Event, _]
HTMLTrackElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLTrackElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLTrackElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLTrackElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLTrackElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLTrackElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLTrackElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLTrackElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLTrackElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLTrackElement[JC] var onratechange: js.Function1[Event, _]
HTMLTrackElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLTrackElement[JC] var onreset: js.Function1[Event, _]
HTMLTrackElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLTrackElement[JC] var onseeked: js.Function1[Event, _]
HTMLTrackElement[JC] var onseeking: js.Function1[Event, _]
HTMLTrackElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLTrackElement[JC] var onselectstart: js.Function1[Event, _]
HTMLTrackElement[JC] var onstalled: js.Function1[Event, _]
HTMLTrackElement[JC] var onsubmit: js.Function1[Event, _]
HTMLTrackElement[JC] var onsuspend: js.Function1[Event, _]
HTMLTrackElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLTrackElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLTrackElement[JC] var onwaiting: js.Function1[Event, _]
HTMLTrackElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLTrackElement[JC] var outerHTML: String
HTMLTrackElement[JC] def ownerDocument: Document
HTMLTrackElement[JC] override def ownerDocument: HTMLDocument
HTMLTrackElement[JC] var parentElement: HTMLElement
HTMLTrackElement[JC] def parentNode: Node
HTMLTrackElement[JC] def prefix: String
HTMLTrackElement[JC] def prepend(nodes: Node | String*): Unit
HTMLTrackElement[JC] def previousElementSibling: Element
HTMLTrackElement[JC] def previousSibling: Node
HTMLTrackElement[JC] def querySelector(selectors: String): Element
HTMLTrackElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLTrackElement[JC] var readyState: js.Any
HTMLTrackElement[JC] var recordNumber: js.Any
HTMLTrackElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLTrackElement[JC] def remove(): Unit
HTMLTrackElement[JC] def removeAttribute(name: String): Unit
HTMLTrackElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLTrackElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLTrackElement[JC] def removeChild(oldChild: Node): Node
HTMLTrackElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLTrackElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLTrackElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLTrackElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLTrackElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLTrackElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLTrackElement[JC] def requestPointerLock(): Unit
HTMLTrackElement[JC] def scrollHeight: Int
HTMLTrackElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLTrackElement[JC] var scrollLeft: Double
HTMLTrackElement[JC] var scrollTop: Double
HTMLTrackElement[JC] def scrollWidth: Int
HTMLTrackElement[JC] def setAttribute(name: String, value: String): Unit
HTMLTrackElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLTrackElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLTrackElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLTrackElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLTrackElement[JC] def shadowRoot: ShadowRoot
HTMLTrackElement[JC] var spellcheck: Boolean
HTMLTrackElement[JC] var src: String
HTMLTrackElement[JC] var srclang: String
HTMLTrackElement[JC] def style: CSSStyleDeclaration
HTMLTrackElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLTrackElement[JC] def style_ = (value: String): Unit
HTMLTrackElement[JC] var tabIndex: Int
HTMLTrackElement[JC] def tagName: String
HTMLTrackElement[JC] var textContent: String
HTMLTrackElement[JC] var title: String
HTMLTrackElement[JC] def track: TextTrack
HTMLUListElement[JC] var accessKey: String
HTMLUListElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLUListElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLUListElement[JC] def after(nodes: Node | String*): Unit
HTMLUListElement[JC] def append(nodes: Node | String*): Unit
HTMLUListElement[JC] def appendChild(newChild: Node): Node
HTMLUListElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLUListElement[JC] def attributes: NamedNodeMap
HTMLUListElement[JC] def baseURI: String
HTMLUListElement[JC] def before(nodes: Node | String*): Unit
HTMLUListElement[JC] def blur(): Unit
HTMLUListElement[JC] def childElementCount: Int
HTMLUListElement[JC] def childNodes: NodeList[Node]
HTMLUListElement[JC] def children: HTMLCollection[Element]
HTMLUListElement[JC] var classList: DOMTokenList
HTMLUListElement[JC] var className: String
HTMLUListElement[JC] def click(): Unit
HTMLUListElement[JC] def clientHeight: Int
HTMLUListElement[JC] def clientLeft: Int
HTMLUListElement[JC] def clientTop: Int
HTMLUListElement[JC] def clientWidth: Int
HTMLUListElement[JC] def cloneNode(deep: Boolean?): Node
HTMLUListElement[JC] def closest(selector: String): Element
HTMLUListElement[JC] def compareDocumentPosition(other: Node): Int
HTMLUListElement[JC] def contains(child: HTMLElement): Boolean
HTMLUListElement[JC] def contains(otherNode: Node): Boolean
HTMLUListElement[JC] var contentEditable: String
HTMLUListElement[JC] def dataset: js.Dictionary[String]
HTMLUListElement[JC] var dir: String
HTMLUListElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLUListElement[JC] var draggable: Boolean
HTMLUListElement[JC] var filters: Object
HTMLUListElement[JC] def firstChild: Node
HTMLUListElement[JC] def firstElementChild: Element
HTMLUListElement[JC] def focus(): Unit
HTMLUListElement[JC] def focus(options: FocusOptions): Unit
HTMLUListElement[JC] def getAttribute(name: String): String
HTMLUListElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLUListElement[JC] def getAttributeNode(name: String): Attr
HTMLUListElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLUListElement[JC] def getBoundingClientRect(): DOMRect
HTMLUListElement[JC] def getClientRects(): DOMRectList
HTMLUListElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLUListElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLUListElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLUListElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLUListElement[JC] def hasAttribute(name: String): Boolean
HTMLUListElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLUListElement[JC] def hasAttributes(): Boolean
HTMLUListElement[JC] def hasChildNodes(): Boolean
HTMLUListElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLUListElement[JC] var id: String
HTMLUListElement[JC] var innerHTML: String
HTMLUListElement[JC] var innerText: String
HTMLUListElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLUListElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLUListElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLUListElement[JC] def isConnected: Boolean
HTMLUListElement[JC] def isContentEditable: Boolean
HTMLUListElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLUListElement[JC] def isEqualNode(arg: Node): Boolean
HTMLUListElement[JC] def isSameNode(other: Node): Boolean
HTMLUListElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLUListElement[JC] var lang: String
HTMLUListElement[JC] def lastChild: Node
HTMLUListElement[JC] def lastElementChild: Element
HTMLUListElement[JC] def localName: String
HTMLUListElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLUListElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLUListElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLUListElement[JC] def matches(selector: String): Boolean
HTMLUListElement[JC] def namespaceURI: String
HTMLUListElement[JC] def nextElementSibling: Element
HTMLUListElement[JC] def nextSibling: Node
HTMLUListElement[JC] def nodeName: String
HTMLUListElement[JC] def nodeType: Int
HTMLUListElement[JC] var nodeValue: String
HTMLUListElement[JC] def normalize(): Unit
HTMLUListElement[JC] def offsetHeight: Double
HTMLUListElement[JC] def offsetLeft: Double
HTMLUListElement[JC] def offsetParent: Element
HTMLUListElement[JC] def offsetTop: Double
HTMLUListElement[JC] def offsetWidth: Double
HTMLUListElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLUListElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLUListElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLUListElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLUListElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLUListElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLUListElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLUListElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLUListElement[JC] var oncanplay: js.Function1[Event, _]
HTMLUListElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLUListElement[JC] var onchange: js.Function1[Event, _]
HTMLUListElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLUListElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLUListElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLUListElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLUListElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLUListElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLUListElement[JC] var oncuechange: js.Function1[Event, _]
HTMLUListElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLUListElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLUListElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLUListElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLUListElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLUListElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLUListElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLUListElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLUListElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLUListElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLUListElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLUListElement[JC] var onemptied: js.Function1[Event, _]
HTMLUListElement[JC] var onended: js.Function1[Event, _]
HTMLUListElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLUListElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLUListElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLUListElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLUListElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLUListElement[JC] var onhelp: js.Function1[Event, _]
HTMLUListElement[JC] var oninput: js.Function1[Event, _]
HTMLUListElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLUListElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLUListElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLUListElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLUListElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLUListElement[JC] var onloadstart: js.Function1[Event, _]
HTMLUListElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLUListElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLUListElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLUListElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLUListElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLUListElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLUListElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLUListElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLUListElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLUListElement[JC] var onpause: js.Function1[Event, _]
HTMLUListElement[JC] var onplay: js.Function1[Event, _]
HTMLUListElement[JC] var onplaying: js.Function1[Event, _]
HTMLUListElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLUListElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLUListElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLUListElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLUListElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLUListElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLUListElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLUListElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLUListElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLUListElement[JC] var onratechange: js.Function1[Event, _]
HTMLUListElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLUListElement[JC] var onreset: js.Function1[Event, _]
HTMLUListElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLUListElement[JC] var onseeked: js.Function1[Event, _]
HTMLUListElement[JC] var onseeking: js.Function1[Event, _]
HTMLUListElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLUListElement[JC] var onselectstart: js.Function1[Event, _]
HTMLUListElement[JC] var onstalled: js.Function1[Event, _]
HTMLUListElement[JC] var onsubmit: js.Function1[Event, _]
HTMLUListElement[JC] var onsuspend: js.Function1[Event, _]
HTMLUListElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLUListElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLUListElement[JC] var onwaiting: js.Function1[Event, _]
HTMLUListElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLUListElement[JC] var outerHTML: String
HTMLUListElement[JC] def ownerDocument: Document
HTMLUListElement[JC] override def ownerDocument: HTMLDocument
HTMLUListElement[JC] var parentElement: HTMLElement
HTMLUListElement[JC] def parentNode: Node
HTMLUListElement[JC] def prefix: String
HTMLUListElement[JC] def prepend(nodes: Node | String*): Unit
HTMLUListElement[JC] def previousElementSibling: Element
HTMLUListElement[JC] def previousSibling: Node
HTMLUListElement[JC] def querySelector(selectors: String): Element
HTMLUListElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLUListElement[JC] var readyState: js.Any
HTMLUListElement[JC] var recordNumber: js.Any
HTMLUListElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLUListElement[JC] def remove(): Unit
HTMLUListElement[JC] def removeAttribute(name: String): Unit
HTMLUListElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLUListElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLUListElement[JC] def removeChild(oldChild: Node): Node
HTMLUListElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLUListElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLUListElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLUListElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLUListElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLUListElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLUListElement[JC] def requestPointerLock(): Unit
HTMLUListElement[JC] def scrollHeight: Int
HTMLUListElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLUListElement[JC] var scrollLeft: Double
HTMLUListElement[JC] var scrollTop: Double
HTMLUListElement[JC] def scrollWidth: Int
HTMLUListElement[JC] def setAttribute(name: String, value: String): Unit
HTMLUListElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLUListElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLUListElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLUListElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLUListElement[JC] def shadowRoot: ShadowRoot
HTMLUListElement[JC] var spellcheck: Boolean
HTMLUListElement[JC] def style: CSSStyleDeclaration
HTMLUListElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLUListElement[JC] def style_ = (value: String): Unit
HTMLUListElement[JC] var tabIndex: Int
HTMLUListElement[JC] def tagName: String
HTMLUListElement[JC] var textContent: String
HTMLUListElement[JC] var title: String
HTMLUnknownElement[JC] var accessKey: String
HTMLUnknownElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLUnknownElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLUnknownElement[JC] def after(nodes: Node | String*): Unit
HTMLUnknownElement[JC] def append(nodes: Node | String*): Unit
HTMLUnknownElement[JC] def appendChild(newChild: Node): Node
HTMLUnknownElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLUnknownElement[JC] def attributes: NamedNodeMap
HTMLUnknownElement[JC] def baseURI: String
HTMLUnknownElement[JC] def before(nodes: Node | String*): Unit
HTMLUnknownElement[JC] def blur(): Unit
HTMLUnknownElement[JC] def childElementCount: Int
HTMLUnknownElement[JC] def childNodes: NodeList[Node]
HTMLUnknownElement[JC] def children: HTMLCollection[Element]
HTMLUnknownElement[JC] var classList: DOMTokenList
HTMLUnknownElement[JC] var className: String
HTMLUnknownElement[JC] def click(): Unit
HTMLUnknownElement[JC] def clientHeight: Int
HTMLUnknownElement[JC] def clientLeft: Int
HTMLUnknownElement[JC] def clientTop: Int
HTMLUnknownElement[JC] def clientWidth: Int
HTMLUnknownElement[JC] def cloneNode(deep: Boolean?): Node
HTMLUnknownElement[JC] def closest(selector: String): Element
HTMLUnknownElement[JC] def compareDocumentPosition(other: Node): Int
HTMLUnknownElement[JC] def contains(child: HTMLElement): Boolean
HTMLUnknownElement[JC] def contains(otherNode: Node): Boolean
HTMLUnknownElement[JC] var contentEditable: String
HTMLUnknownElement[JC] def dataset: js.Dictionary[String]
HTMLUnknownElement[JC] var dir: String
HTMLUnknownElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLUnknownElement[JC] var draggable: Boolean
HTMLUnknownElement[JC] var filters: Object
HTMLUnknownElement[JC] def firstChild: Node
HTMLUnknownElement[JC] def firstElementChild: Element
HTMLUnknownElement[JC] def focus(): Unit
HTMLUnknownElement[JC] def focus(options: FocusOptions): Unit
HTMLUnknownElement[JC] def getAttribute(name: String): String
HTMLUnknownElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLUnknownElement[JC] def getAttributeNode(name: String): Attr
HTMLUnknownElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLUnknownElement[JC] def getBoundingClientRect(): DOMRect
HTMLUnknownElement[JC] def getClientRects(): DOMRectList
HTMLUnknownElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLUnknownElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLUnknownElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLUnknownElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLUnknownElement[JC] def hasAttribute(name: String): Boolean
HTMLUnknownElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLUnknownElement[JC] def hasAttributes(): Boolean
HTMLUnknownElement[JC] def hasChildNodes(): Boolean
HTMLUnknownElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLUnknownElement[JC] var id: String
HTMLUnknownElement[JC] var innerHTML: String
HTMLUnknownElement[JC] var innerText: String
HTMLUnknownElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLUnknownElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLUnknownElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLUnknownElement[JC] def isConnected: Boolean
HTMLUnknownElement[JC] def isContentEditable: Boolean
HTMLUnknownElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLUnknownElement[JC] def isEqualNode(arg: Node): Boolean
HTMLUnknownElement[JC] def isSameNode(other: Node): Boolean
HTMLUnknownElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLUnknownElement[JC] var lang: String
HTMLUnknownElement[JC] def lastChild: Node
HTMLUnknownElement[JC] def lastElementChild: Element
HTMLUnknownElement[JC] def localName: String
HTMLUnknownElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLUnknownElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLUnknownElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLUnknownElement[JC] def matches(selector: String): Boolean
HTMLUnknownElement[JC] def namespaceURI: String
HTMLUnknownElement[JC] def nextElementSibling: Element
HTMLUnknownElement[JC] def nextSibling: Node
HTMLUnknownElement[JC] def nodeName: String
HTMLUnknownElement[JC] def nodeType: Int
HTMLUnknownElement[JC] var nodeValue: String
HTMLUnknownElement[JC] def normalize(): Unit
HTMLUnknownElement[JC] def offsetHeight: Double
HTMLUnknownElement[JC] def offsetLeft: Double
HTMLUnknownElement[JC] def offsetParent: Element
HTMLUnknownElement[JC] def offsetTop: Double
HTMLUnknownElement[JC] def offsetWidth: Double
HTMLUnknownElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLUnknownElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLUnknownElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLUnknownElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLUnknownElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLUnknownElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLUnknownElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLUnknownElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLUnknownElement[JC] var oncanplay: js.Function1[Event, _]
HTMLUnknownElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLUnknownElement[JC] var onchange: js.Function1[Event, _]
HTMLUnknownElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLUnknownElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLUnknownElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLUnknownElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLUnknownElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLUnknownElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLUnknownElement[JC] var oncuechange: js.Function1[Event, _]
HTMLUnknownElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLUnknownElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLUnknownElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLUnknownElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLUnknownElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLUnknownElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLUnknownElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLUnknownElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLUnknownElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLUnknownElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLUnknownElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLUnknownElement[JC] var onemptied: js.Function1[Event, _]
HTMLUnknownElement[JC] var onended: js.Function1[Event, _]
HTMLUnknownElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLUnknownElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLUnknownElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLUnknownElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLUnknownElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLUnknownElement[JC] var onhelp: js.Function1[Event, _]
HTMLUnknownElement[JC] var oninput: js.Function1[Event, _]
HTMLUnknownElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLUnknownElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLUnknownElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLUnknownElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLUnknownElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLUnknownElement[JC] var onloadstart: js.Function1[Event, _]
HTMLUnknownElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLUnknownElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLUnknownElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLUnknownElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLUnknownElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLUnknownElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLUnknownElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLUnknownElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLUnknownElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLUnknownElement[JC] var onpause: js.Function1[Event, _]
HTMLUnknownElement[JC] var onplay: js.Function1[Event, _]
HTMLUnknownElement[JC] var onplaying: js.Function1[Event, _]
HTMLUnknownElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLUnknownElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLUnknownElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLUnknownElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLUnknownElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLUnknownElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLUnknownElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLUnknownElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLUnknownElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLUnknownElement[JC] var onratechange: js.Function1[Event, _]
HTMLUnknownElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLUnknownElement[JC] var onreset: js.Function1[Event, _]
HTMLUnknownElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLUnknownElement[JC] var onseeked: js.Function1[Event, _]
HTMLUnknownElement[JC] var onseeking: js.Function1[Event, _]
HTMLUnknownElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLUnknownElement[JC] var onselectstart: js.Function1[Event, _]
HTMLUnknownElement[JC] var onstalled: js.Function1[Event, _]
HTMLUnknownElement[JC] var onsubmit: js.Function1[Event, _]
HTMLUnknownElement[JC] var onsuspend: js.Function1[Event, _]
HTMLUnknownElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLUnknownElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLUnknownElement[JC] var onwaiting: js.Function1[Event, _]
HTMLUnknownElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLUnknownElement[JC] var outerHTML: String
HTMLUnknownElement[JC] def ownerDocument: Document
HTMLUnknownElement[JC] override def ownerDocument: HTMLDocument
HTMLUnknownElement[JC] var parentElement: HTMLElement
HTMLUnknownElement[JC] def parentNode: Node
HTMLUnknownElement[JC] def prefix: String
HTMLUnknownElement[JC] def prepend(nodes: Node | String*): Unit
HTMLUnknownElement[JC] def previousElementSibling: Element
HTMLUnknownElement[JC] def previousSibling: Node
HTMLUnknownElement[JC] def querySelector(selectors: String): Element
HTMLUnknownElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLUnknownElement[JC] var readyState: js.Any
HTMLUnknownElement[JC] var recordNumber: js.Any
HTMLUnknownElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLUnknownElement[JC] def remove(): Unit
HTMLUnknownElement[JC] def removeAttribute(name: String): Unit
HTMLUnknownElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLUnknownElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLUnknownElement[JC] def removeChild(oldChild: Node): Node
HTMLUnknownElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLUnknownElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLUnknownElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLUnknownElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLUnknownElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLUnknownElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLUnknownElement[JC] def requestPointerLock(): Unit
HTMLUnknownElement[JC] def scrollHeight: Int
HTMLUnknownElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLUnknownElement[JC] var scrollLeft: Double
HTMLUnknownElement[JC] var scrollTop: Double
HTMLUnknownElement[JC] def scrollWidth: Int
HTMLUnknownElement[JC] def setAttribute(name: String, value: String): Unit
HTMLUnknownElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLUnknownElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLUnknownElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLUnknownElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLUnknownElement[JC] def shadowRoot: ShadowRoot
HTMLUnknownElement[JC] var spellcheck: Boolean
HTMLUnknownElement[JC] def style: CSSStyleDeclaration
HTMLUnknownElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLUnknownElement[JC] def style_ = (value: String): Unit
HTMLUnknownElement[JC] var tabIndex: Int
HTMLUnknownElement[JC] def tagName: String
HTMLUnknownElement[JC] var textContent: String
HTMLUnknownElement[JC] var title: String
HTMLVideoElement[JC] var accessKey: String
HTMLVideoElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLVideoElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLVideoElement[JC] def after(nodes: Node | String*): Unit
HTMLVideoElement[JC] def append(nodes: Node | String*): Unit
HTMLVideoElement[JC] def appendChild(newChild: Node): Node
HTMLVideoElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
HTMLVideoElement[JC] def attributes: NamedNodeMap
HTMLVideoElement[JC] def audioTracks: AudioTrackList
HTMLVideoElement[JC] var autoplay: Boolean
HTMLVideoElement[JC] def baseURI: String
HTMLVideoElement[JC] def before(nodes: Node | String*): Unit
HTMLVideoElement[JC] def blur(): Unit
HTMLVideoElement[JC] def buffered: TimeRanges
HTMLVideoElement[JC] def canPlayType(`type`: String): String
HTMLVideoElement[JC] def childElementCount: Int
HTMLVideoElement[JC] def childNodes: NodeList[Node]
HTMLVideoElement[JC] def children: HTMLCollection[Element]
HTMLVideoElement[JC] var classList: DOMTokenList
HTMLVideoElement[JC] var className: String
HTMLVideoElement[JC] def click(): Unit
HTMLVideoElement[JC] def clientHeight: Int
HTMLVideoElement[JC] def clientLeft: Int
HTMLVideoElement[JC] def clientTop: Int
HTMLVideoElement[JC] def clientWidth: Int
HTMLVideoElement[JC] def cloneNode(deep: Boolean?): Node
HTMLVideoElement[JC] def closest(selector: String): Element
HTMLVideoElement[JC] def compareDocumentPosition(other: Node): Int
HTMLVideoElement[JC] def contains(child: HTMLElement): Boolean
HTMLVideoElement[JC] def contains(otherNode: Node): Boolean
HTMLVideoElement[JC] var contentEditable: String
HTMLVideoElement[JC] var controls: Boolean
HTMLVideoElement[JC] def currentSrc: String
HTMLVideoElement[JC] var currentTime: Double
HTMLVideoElement[JC] def dataset: js.Dictionary[String]
HTMLVideoElement[JC] var defaultPlaybackRate: Double
HTMLVideoElement[JC] var dir: String
HTMLVideoElement[JC] def dispatchEvent(evt: Event): Boolean
HTMLVideoElement[JC] var draggable: Boolean
HTMLVideoElement[JC] def duration: Double
HTMLVideoElement[JC] def ended: Boolean
HTMLVideoElement[JC] def error: MediaError
HTMLVideoElement[JC] var filters: Object
HTMLVideoElement[JC] def firstChild: Node
HTMLVideoElement[JC] def firstElementChild: Element
HTMLVideoElement[JC] def focus(): Unit
HTMLVideoElement[JC] def focus(options: FocusOptions): Unit
HTMLVideoElement[JC] def getAttribute(name: String): String
HTMLVideoElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
HTMLVideoElement[JC] def getAttributeNode(name: String): Attr
HTMLVideoElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
HTMLVideoElement[JC] def getBoundingClientRect(): DOMRect
HTMLVideoElement[JC] def getClientRects(): DOMRectList
HTMLVideoElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
HTMLVideoElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
HTMLVideoElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
HTMLVideoElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
HTMLVideoElement[JC] def hasAttribute(name: String): Boolean
HTMLVideoElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
HTMLVideoElement[JC] def hasAttributes(): Boolean
HTMLVideoElement[JC] def hasChildNodes(): Boolean
HTMLVideoElement[JC] def hasPointerCapture(pointerId: Double): Boolean
HTMLVideoElement[JC] var height: Int
HTMLVideoElement[JC] var id: String
HTMLVideoElement[JC] def initialTime: Double
HTMLVideoElement[JC] var innerHTML: String
HTMLVideoElement[JC] var innerText: String
HTMLVideoElement[JC] def insertAdjacentElement(position: String, element: Element): Element
HTMLVideoElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
HTMLVideoElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
HTMLVideoElement[JC] def isConnected: Boolean
HTMLVideoElement[JC] def isContentEditable: Boolean
HTMLVideoElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
HTMLVideoElement[JC] def isEqualNode(arg: Node): Boolean
HTMLVideoElement[JC] def isSameNode(other: Node): Boolean
HTMLVideoElement[JC] def isSupported(feature: String, version: String): Boolean
HTMLVideoElement[JC] var lang: String
HTMLVideoElement[JC] def lastChild: Node
HTMLVideoElement[JC] def lastElementChild: Element
HTMLVideoElement[JC] def load(): Unit
HTMLVideoElement[JC] def localName: String
HTMLVideoElement[JC] def lookupNamespaceURI(prefix: String): String
HTMLVideoElement[JC] def lookupPrefix(namespaceURI: String): String
HTMLVideoElement[JC] var loop: Boolean
HTMLVideoElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
HTMLVideoElement[JC] def matches(selector: String): Boolean
HTMLVideoElement[JC] var muted: Boolean
HTMLVideoElement[JC] def namespaceURI: String
HTMLVideoElement[JC] def networkState: Int
HTMLVideoElement[JC] def nextElementSibling: Element
HTMLVideoElement[JC] def nextSibling: Node
HTMLVideoElement[JC] def nodeName: String
HTMLVideoElement[JC] def nodeType: Int
HTMLVideoElement[JC] var nodeValue: String
HTMLVideoElement[JC] def normalize(): Unit
HTMLVideoElement[JC] def offsetHeight: Double
HTMLVideoElement[JC] def offsetLeft: Double
HTMLVideoElement[JC] def offsetParent: Element
HTMLVideoElement[JC] def offsetTop: Double
HTMLVideoElement[JC] def offsetWidth: Double
HTMLVideoElement[JC] var onabort: js.Function1[UIEvent, _]
HTMLVideoElement[JC] var onactivate: js.Function1[UIEvent, _]
HTMLVideoElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
HTMLVideoElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
HTMLVideoElement[JC] var onbeforecut: js.Function1[DragEvent, _]
HTMLVideoElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
HTMLVideoElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
HTMLVideoElement[JC] var onblur: js.Function1[FocusEvent, _]
HTMLVideoElement[JC] var oncanplay: js.Function1[Event, _]
HTMLVideoElement[JC] var oncanplaythrough: js.Function1[Event, _]
HTMLVideoElement[JC] var onchange: js.Function1[Event, _]
HTMLVideoElement[JC] var onclick: js.Function1[MouseEvent, _]
HTMLVideoElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
HTMLVideoElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
HTMLVideoElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
HTMLVideoElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
HTMLVideoElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
HTMLVideoElement[JC] var oncuechange: js.Function1[Event, _]
HTMLVideoElement[JC] var oncut: js.Function1[ClipboardEvent, _]
HTMLVideoElement[JC] var ondblclick: js.Function1[MouseEvent, _]
HTMLVideoElement[JC] var ondeactivate: js.Function1[UIEvent, _]
HTMLVideoElement[JC] var ondrag: js.Function1[DragEvent, _]
HTMLVideoElement[JC] var ondragend: js.Function1[DragEvent, _]
HTMLVideoElement[JC] var ondragenter: js.Function1[DragEvent, _]
HTMLVideoElement[JC] var ondragleave: js.Function1[DragEvent, _]
HTMLVideoElement[JC] var ondragover: js.Function1[DragEvent, _]
HTMLVideoElement[JC] var ondragstart: js.Function1[DragEvent, _]
HTMLVideoElement[JC] var ondrop: js.Function1[DragEvent, _]
HTMLVideoElement[JC] var ondurationchange: js.Function1[Event, _]
HTMLVideoElement[JC] var onemptied: js.Function1[Event, _]
HTMLVideoElement[JC] var onended: js.Function1[Event, _]
HTMLVideoElement[JC] var onfocus: js.Function1[FocusEvent, _]
HTMLVideoElement[JC] var onfocusin: js.Function1[FocusEvent, _]
HTMLVideoElement[JC] var onfocusout: js.Function1[FocusEvent, _]
HTMLVideoElement[JC] var onfullscreenchange: js.Function1[Event, _]
HTMLVideoElement[JC] var onfullscreenerror: js.Function1[Event, _]
HTMLVideoElement[JC] var onhelp: js.Function1[Event, _]
HTMLVideoElement[JC] var oninput: js.Function1[Event, _]
HTMLVideoElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
HTMLVideoElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
HTMLVideoElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
HTMLVideoElement[JC] var onloadeddata: js.Function1[Event, _]
HTMLVideoElement[JC] var onloadedmetadata: js.Function1[Event, _]
HTMLVideoElement[JC] var onloadstart: js.Function1[Event, _]
HTMLVideoElement[JC] var onmousedown: js.Function1[MouseEvent, _]
HTMLVideoElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
HTMLVideoElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
HTMLVideoElement[JC] var onmousemove: js.Function1[MouseEvent, _]
HTMLVideoElement[JC] var onmouseout: js.Function1[MouseEvent, _]
HTMLVideoElement[JC] var onmouseover: js.Function1[MouseEvent, _]
HTMLVideoElement[JC] var onmouseup: js.Function1[MouseEvent, _]
HTMLVideoElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
HTMLVideoElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
HTMLVideoElement[JC] var onpause: js.Function1[Event, _]
HTMLVideoElement[JC] var onplay: js.Function1[Event, _]
HTMLVideoElement[JC] var onplaying: js.Function1[Event, _]
HTMLVideoElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
HTMLVideoElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
HTMLVideoElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
HTMLVideoElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
HTMLVideoElement[JC] var onpointermove: js.Function1[PointerEvent, _]
HTMLVideoElement[JC] var onpointerout: js.Function1[PointerEvent, _]
HTMLVideoElement[JC] var onpointerover: js.Function1[PointerEvent, _]
HTMLVideoElement[JC] var onpointerup: js.Function1[PointerEvent, _]
HTMLVideoElement[JC] var onprogress: js.Function1[js.Any, _]
HTMLVideoElement[JC] var onratechange: js.Function1[Event, _]
HTMLVideoElement[JC] var onreadystatechange: js.Function1[Event, _]
HTMLVideoElement[JC] var onreset: js.Function1[Event, _]
HTMLVideoElement[JC] var onscroll: js.Function1[UIEvent, _]
HTMLVideoElement[JC] var onseeked: js.Function1[Event, _]
HTMLVideoElement[JC] var onseeking: js.Function1[Event, _]
HTMLVideoElement[JC] var onselect: js.Function1[UIEvent, _]
HTMLVideoElement[JC] var onselectstart: js.Function1[Event, _]
HTMLVideoElement[JC] var onstalled: js.Function1[Event, _]
HTMLVideoElement[JC] var onsubmit: js.Function1[Event, _]
HTMLVideoElement[JC] var onsuspend: js.Function1[Event, _]
HTMLVideoElement[JC] var ontimeupdate: js.Function1[Event, _]
HTMLVideoElement[JC] var onvolumechange: js.Function1[Event, _]
HTMLVideoElement[JC] var onwaiting: js.Function1[Event, _]
HTMLVideoElement[JC] var onwheel: js.Function1[WheelEvent, _]
HTMLVideoElement[JC] var outerHTML: String
HTMLVideoElement[JC] def ownerDocument: Document
HTMLVideoElement[JC] override def ownerDocument: HTMLDocument
HTMLVideoElement[JC] var parentElement: HTMLElement
HTMLVideoElement[JC] def parentNode: Node
HTMLVideoElement[JC] def pause(): Unit
HTMLVideoElement[JC] def paused: Boolean
HTMLVideoElement[JC] def play(): js.UndefOr[js.Promise[Unit]]
HTMLVideoElement[JC] var playbackRate: Double
HTMLVideoElement[JC] def played: TimeRanges
HTMLVideoElement[JC] var poster: String
HTMLVideoElement[JC] def prefix: String
HTMLVideoElement[JC] var preload: String
HTMLVideoElement[JC] def prepend(nodes: Node | String*): Unit
HTMLVideoElement[JC] def previousElementSibling: Element
HTMLVideoElement[JC] def previousSibling: Node
HTMLVideoElement[JC] def querySelector(selectors: String): Element
HTMLVideoElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
HTMLVideoElement[JC] var readyState: js.Any
HTMLVideoElement[JC] var recordNumber: js.Any
HTMLVideoElement[JC] def releasePointerCapture(pointerId: Double): Unit
HTMLVideoElement[JC] def remove(): Unit
HTMLVideoElement[JC] def removeAttribute(name: String): Unit
HTMLVideoElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
HTMLVideoElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
HTMLVideoElement[JC] def removeChild(oldChild: Node): Node
HTMLVideoElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
HTMLVideoElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
HTMLVideoElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
HTMLVideoElement[JC] def replaceChildren(nodes: Node | String*): Unit
HTMLVideoElement[JC] def replaceWith(nodes: Node | String*): Unit
HTMLVideoElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
HTMLVideoElement[JC] def requestPointerLock(): Unit
HTMLVideoElement[JC] def scrollHeight: Int
HTMLVideoElement[JC] def scrollIntoView(top: Boolean?): Unit
HTMLVideoElement[JC] var scrollLeft: Double
HTMLVideoElement[JC] var scrollTop: Double
HTMLVideoElement[JC] def scrollWidth: Int
HTMLVideoElement[JC] def seekable: TimeRanges
HTMLVideoElement[JC] def seeking: Boolean
HTMLVideoElement[JC] def setAttribute(name: String, value: String): Unit
HTMLVideoElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
HTMLVideoElement[JC] def setAttributeNode(newAttr: Attr): Attr
HTMLVideoElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
HTMLVideoElement[JC] def setPointerCapture(pointerId: Double): Unit
HTMLVideoElement[JC] def shadowRoot: ShadowRoot
HTMLVideoElement[JC] var spellcheck: Boolean
HTMLVideoElement[JC] var src: String
HTMLVideoElement[JC] var srcObject: js.UndefOr[MediaStream | MediaSource | Blob]
HTMLVideoElement[JC] def style: CSSStyleDeclaration
HTMLVideoElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
HTMLVideoElement[JC] def style_ = (value: String): Unit
HTMLVideoElement[JC] var tabIndex: Int
HTMLVideoElement[JC] def tagName: String
HTMLVideoElement[JC] var textContent: String
HTMLVideoElement[JC] def textTracks: TextTrackList
HTMLVideoElement[JC] var title: String
HTMLVideoElement[JC] def videoHeight: Int
HTMLVideoElement[JC] def videoWidth: Int
HTMLVideoElement[JC] var volume: Double
HTMLVideoElement[JC] var width: Int
HashAlgorithm[JT] val name: String
HashAlgorithm[SO] val `SHA-1`: HashAlgorithm
HashAlgorithm[SO] val `SHA-256`: HashAlgorithm
HashAlgorithm[SO] val `SHA-384`: HashAlgorithm
HashAlgorithm[SO] val `SHA-512`: HashAlgorithm
HashAlgorithm[SO] val name = name0
HashChangeEvent[JT] def bubbles: Boolean
HashChangeEvent[JT] def cancelBubble: Boolean
HashChangeEvent[JT] def cancelable: Boolean
HashChangeEvent[JT] def composed: Boolean
HashChangeEvent[JT] def currentTarget: EventTarget
HashChangeEvent[JT] def defaultPrevented: Boolean
HashChangeEvent[JT] def eventPhase: Int
HashChangeEvent[JT] def isTrusted: Boolean
HashChangeEvent[JT] def newURL: String
HashChangeEvent[JT] def oldURL: String
HashChangeEvent[JT] def preventDefault(): Unit
HashChangeEvent[JT] def stopImmediatePropagation(): Unit
HashChangeEvent[JT] def stopPropagation(): Unit
HashChangeEvent[JT] def target: EventTarget
HashChangeEvent[JT] def timeStamp: Double
HashChangeEvent[JT] def `type`: String
Headers[JC] def append(name: ByteString, value: ByteString): Unit
Headers[JC] def delete(name: ByteString): Unit
Headers[JC] def get(name: ByteString): ByteString
Headers[JC] def getAll(name: ByteString): Sequence[ByteString]
Headers[JC] def has(name: ByteString): Boolean
Headers[JC] @JSName(js.Symbol.iterator) def jsIterator(): js.Iterator[js.Array[ByteString]]
Headers[JC] def set(name: ByteString, value: ByteString): Unit
History[JC] def back(): Unit
History[JC] def forward(): Unit
History[JC] def go(): Unit
History[JC] def go(delta: Int): Unit
History[JC] def length: Int
History[JC] def pushState(statedata: js.Any, title: String): Unit
History[JC] def pushState(statedata: js.Any, title: String, url: String): Unit
History[JC] def replaceState(statedata: js.Any, title: String): Unit
History[JC] def replaceState(statedata: js.Any, title: String, url: String): Unit
History[JC] var scrollRestoration: ScrollRestoration
History[JC] def state: js.Any
HkdfCtrParams[JT] val context: BufferSource
HkdfCtrParams[JT] val hash: HashAlgorithmIdentifier
HkdfCtrParams[JT] val label: BufferSource
HkdfCtrParams[JT] val name: String
HkdfCtrParams[SO] def apply(name: String, hash: HashAlgorithmIdentifier, label: BufferSource, context: BufferSource): HkdfCtrParams  (@deprecated in 2.0.0)
HkdfCtrParams[SO] val context = context0
HkdfCtrParams[SO] val hash = hash0
HkdfCtrParams[SO] val label = label0
HkdfCtrParams[SO] val name = name0
HmacImportParams[JT] val hash: HashAlgorithmIdentifier
HmacImportParams[JT] val length: Double
HmacImportParams[JT] val name: String
HmacImportParams[SO] def apply(name: String, hash: HashAlgorithmIdentifier, length: Long): HmacImportParams  (@deprecated in 2.0.0)
HmacImportParams[SO] val hash = hash0
HmacImportParams[SO] val length = length0.toDouble
HmacImportParams[SO] val name = name0
HmacKeyAlgorithm[JT] val hash: HashAlgorithmIdentifier
HmacKeyAlgorithm[JT] val length: Double
HmacKeyAlgorithm[JT] val name: String
HmacKeyAlgorithm[SO] def apply(name: String, hash: HashAlgorithmIdentifier, length: Long): HmacKeyAlgorithm  (@deprecated in 2.0.0)
HmacKeyAlgorithm[SO] val hash = hash0
HmacKeyAlgorithm[SO] val length = length0.toDouble
HmacKeyAlgorithm[SO] val name = name0
HmacKeyGenParams[JT] val hash: HashAlgorithmIdentifier
HmacKeyGenParams[JT] val length: Double
HmacKeyGenParams[JT] val name: String
HmacKeyGenParams[SO] def apply(name: String, hash: HashAlgorithmIdentifier, length: Long): HmacKeyGenParams  (@deprecated in 2.0.0)
HmacKeyGenParams[SO] val hash = hash0
HmacKeyGenParams[SO] val length = length0.toDouble
HmacKeyGenParams[SO] val name = name0
HttpMethod[JT]
HttpMethod[SO] val DELETE: HttpMethod
HttpMethod[SO] val GET: HttpMethod
HttpMethod[SO] val HEAD: HttpMethod
HttpMethod[SO] val OPTIONS: HttpMethod
HttpMethod[SO] val PATCH: HttpMethod
HttpMethod[SO] val POST: HttpMethod
HttpMethod[SO] val PUT: HttpMethod
HttpMethod[SO] val QUERY: HttpMethod
IDBCreateIndexOptions[JT] val locale: js.UndefOr[String]
IDBCreateIndexOptions[JT] val multiEntry: js.UndefOr[Boolean]
IDBCreateIndexOptions[JT] val unique: js.UndefOr[Boolean]
IDBCreateObjectStoreOptions[JT] val autoIncrement: js.UndefOr[Boolean]
IDBCreateObjectStoreOptions[JT] val keyPath: IDBKeyPath
IDBCursor[JC] def advance(count: Double): Unit
IDBCursor[JC] def continue(key: IDBKey?): Unit
IDBCursor[JC] def delete(): IDBRequest[S, Unit]
IDBCursor[JC] def direction: IDBCursorDirection
IDBCursor[JC] def key: IDBKey
IDBCursor[JC] def primaryKey: IDBKey
IDBCursor[JC] def source: S
IDBCursor[JC] def update(value: IDBValue): IDBRequest[S, IDBKey]
IDBCursorDirection[JT]
IDBCursorDirection[SO] val next: IDBCursorDirection
IDBCursorDirection[SO] val nextunique: IDBCursorDirection
IDBCursorDirection[SO] val prev: IDBCursorDirection
IDBCursorDirection[SO] val prevunique: IDBCursorDirection
IDBCursorReadOnly[JC] def advance(count: Double): Unit
IDBCursorReadOnly[JC] def continue(key: IDBKey?): Unit
IDBCursorReadOnly[JC] def direction: IDBCursorDirection
IDBCursorReadOnly[JC] def key: IDBKey
IDBCursorReadOnly[JC] def primaryKey: IDBKey
IDBCursorReadOnly[JC] def source: S
IDBCursorWithValue[JC] def advance(count: Double): Unit
IDBCursorWithValue[JC] def continue(key: IDBKey?): Unit
IDBCursorWithValue[JC] def delete(): IDBRequest[S, Unit]
IDBCursorWithValue[JC] def direction: IDBCursorDirection
IDBCursorWithValue[JC] def key: IDBKey
IDBCursorWithValue[JC] def primaryKey: IDBKey
IDBCursorWithValue[JC] def source: S
IDBCursorWithValue[JC] def update(value: IDBValue): IDBRequest[S, IDBKey]
IDBCursorWithValue[JC] def value: IDBValue
IDBDatabase[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
IDBDatabase[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
IDBDatabase[JC] def close(): Unit
IDBDatabase[JC] def createObjectStore(name: String, optionalParameters: js.UndefOr[IDBCreateObjectStoreOptions]?): IDBObjectStore
IDBDatabase[JC] def deleteObjectStore(name: String): Unit
IDBDatabase[JC] def dispatchEvent(evt: Event): Boolean
IDBDatabase[JC] def name: String
IDBDatabase[JC] def objectStoreNames: DOMStringList
IDBDatabase[JC] var onabort: js.Function1[Event, _]
IDBDatabase[JC] var onclose: js.Function1[CloseEvent, _]
IDBDatabase[JC] var onerror: js.Function1[ErrorEvent, _]
IDBDatabase[JC] var onversionchange: js.Function1[IDBVersionChangeEvent, _]
IDBDatabase[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
IDBDatabase[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
IDBDatabase[JC] def transaction(storeNames: String | js.Array[String], mode: js.UndefOr[IDBTransactionMode]?, options: js.UndefOr[IDBTransactionOptions]?): IDBTransaction
IDBDatabase[JC] def version: Double
IDBDatabaseInfo[JT] val name: String
IDBDatabaseInfo[JT] val version: Double
IDBEnvironment[JT] def indexedDB: IDBFactory  (@deprecated in 1.2.0)
IDBEvent[JC] def bubbles: Boolean
IDBEvent[JC] def cancelBubble: Boolean
IDBEvent[JC] def cancelable: Boolean
IDBEvent[JC] def composed: Boolean
IDBEvent[JC] def currentTarget: EventTarget
IDBEvent[JC] def defaultPrevented: Boolean
IDBEvent[JC] def eventPhase: Int
IDBEvent[JC] def isTrusted: Boolean
IDBEvent[JC] def preventDefault(): Unit
IDBEvent[JC] def stopImmediatePropagation(): Unit
IDBEvent[JC] def stopPropagation(): Unit
IDBEvent[JC] def target: EventTarget
IDBEvent[JC] override def target: IDBEventTarget[A]
IDBEvent[JC] def timeStamp: Double
IDBEvent[JC] def `type`: String
IDBEventTarget[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
IDBEventTarget[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
IDBEventTarget[JC] def dispatchEvent(evt: Event): Boolean
IDBEventTarget[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
IDBEventTarget[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
IDBEventTarget[JC] def result: A
IDBFactory[JC] def cmp(first: IDBValue, second: IDBValue): Int
IDBFactory[JC] def databases(): js.Promise[js.Array[IDBDatabaseInfo]]
IDBFactory[JC] def deleteDatabase(name: String): IDBOpenDBRequest[Unit]
IDBFactory[JC] def open(name: String, version: Double?): IDBOpenDBRequest[IDBDatabase]
IDBIndex[JC] def count(query: IDBKey | IDBKeyRange?): IDBRequest[S, Double]
IDBIndex[JC] def get(key: IDBKey | IDBKeyRange): IDBRequest[S, IDBValue]
IDBIndex[JC] def getAll(query: js.UndefOr[IDBKeyRange | IDBKey]?, count: js.UndefOr[Double]?): IDBRequest[S, js.Array[IDBValue]]
IDBIndex[JC] def getAllKeys(query: js.UndefOr[IDBKeyRange | IDBKey]?, count: js.UndefOr[Double]?): IDBRequest[S, js.Array[IDBKey]]
IDBIndex[JC] def getKey(key: IDBKey): IDBRequest[S, js.UndefOr[IDBKey]]
IDBIndex[JC] def keyPath: IDBKeyPath
IDBIndex[JC] val multiEntry: Boolean
IDBIndex[JC] def name: String
IDBIndex[JC] def objectStore: IDBObjectStore
IDBIndex[JC] def openCursor(range: js.UndefOr[IDBKeyRange | IDBKey]?, direction: js.UndefOr[IDBCursorDirection]?): IDBRequest[S, IDBCursorWithValue[S]]
IDBIndex[JC] def openKeyCursor(range: js.UndefOr[IDBKeyRange | IDBKey]?, direction: js.UndefOr[IDBCursorDirection]?): IDBRequest[S, IDBCursor[S]]
IDBIndex[JC] def unique: Boolean
IDBKeyRange[JC] def lower: IDBKey
IDBKeyRange[JC] def lowerOpen: Boolean
IDBKeyRange[JC] def upper: IDBKey
IDBKeyRange[JC] def upperOpen: Boolean
IDBKeyRange[JO] def bound(lower: IDBKey, upper: IDBKey, lowerOpen: Boolean?, upperOpen: Boolean?): IDBKeyRange
IDBKeyRange[JO] def lowerBound(bound: IDBKey, open: Boolean?): IDBKeyRange
IDBKeyRange[JO] def only(value: IDBValue): IDBKeyRange
IDBKeyRange[JO] def upperBound(bound: IDBKey, open: Boolean?): IDBKeyRange
IDBObjectStore[JC] def add(value: IDBValue, key: IDBKey?): IDBRequest[IDBObjectStore, IDBKey]
IDBObjectStore[JC] def clear(): IDBRequest[IDBObjectStore, Unit]
IDBObjectStore[JC] def count(query: IDBKey | IDBKeyRange?): IDBRequest[S, Double]
IDBObjectStore[JC] def createIndex(name: String, keyPath: IDBKeyPath, optionalParameters: IDBCreateIndexOptions?): IDBIndex
IDBObjectStore[JC] def delete(key: IDBKey | IDBKeyRange): IDBRequest[IDBObjectStore, Unit]
IDBObjectStore[JC] def deleteIndex(indexName: String): Unit
IDBObjectStore[JC] def get(key: IDBKey | IDBKeyRange): IDBRequest[S, IDBValue]
IDBObjectStore[JC] def getAll(query: js.UndefOr[IDBKeyRange | IDBKey]?, count: js.UndefOr[Double]?): IDBRequest[S, js.Array[IDBValue]]
IDBObjectStore[JC] def getAllKeys(query: js.UndefOr[IDBKeyRange | IDBKey]?, count: js.UndefOr[Double]?): IDBRequest[S, js.Array[IDBKey]]
IDBObjectStore[JC] def getKey(key: IDBKey): IDBRequest[S, js.UndefOr[IDBKey]]
IDBObjectStore[JC] def index(name: String): IDBIndex
IDBObjectStore[JC] def indexNames: DOMStringList
IDBObjectStore[JC] def keyPath: IDBKeyPath
IDBObjectStore[JC] def name: String
IDBObjectStore[JC] def openCursor(range: js.UndefOr[IDBKeyRange | IDBKey]?, direction: js.UndefOr[IDBCursorDirection]?): IDBRequest[S, IDBCursorWithValue[S]]
IDBObjectStore[JC] def openKeyCursor(range: js.UndefOr[IDBKeyRange | IDBKey]?, direction: js.UndefOr[IDBCursorDirection]?): IDBRequest[S, IDBCursor[S]]
IDBObjectStore[JC] def put(value: IDBValue, key: IDBKey?): IDBRequest[IDBObjectStore, IDBKey]
IDBObjectStore[JC] def transaction: IDBTransaction
IDBOpenDBRequest[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
IDBOpenDBRequest[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
IDBOpenDBRequest[JC] def dispatchEvent(evt: Event): Boolean
IDBOpenDBRequest[JC] def error: DOMException
IDBOpenDBRequest[JC] var onblocked: js.Function1[IDBVersionChangeEvent, _]
IDBOpenDBRequest[JC] var onerror: js.Function1[ErrorEvent, _]
IDBOpenDBRequest[JC] var onsuccess: js.Function1[IDBEvent[A], _]
IDBOpenDBRequest[JC] var onupgradeneeded: js.Function1[IDBVersionChangeEvent, _]
IDBOpenDBRequest[JC] def readyState: IDBRequestReadyState
IDBOpenDBRequest[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
IDBOpenDBRequest[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
IDBOpenDBRequest[JC] def result: A
IDBOpenDBRequest[JC] def source: S
IDBOpenDBRequest[JC] def transaction: IDBTransaction
IDBRequest[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
IDBRequest[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
IDBRequest[JC] def dispatchEvent(evt: Event): Boolean
IDBRequest[JC] def error: DOMException
IDBRequest[JC] var onerror: js.Function1[ErrorEvent, _]
IDBRequest[JC] var onsuccess: js.Function1[IDBEvent[A], _]
IDBRequest[JC] def readyState: IDBRequestReadyState
IDBRequest[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
IDBRequest[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
IDBRequest[JC] def result: A
IDBRequest[JC] def source: S
IDBRequest[JC] def transaction: IDBTransaction
IDBRequestReadyState[JT]
IDBRequestReadyState[SO] val done: IDBRequestReadyState
IDBRequestReadyState[SO] val pending: IDBRequestReadyState
IDBStoreLike[JT] def count(query: IDBKey | IDBKeyRange?): IDBRequest[S, Double]
IDBStoreLike[JT] def get(key: IDBKey | IDBKeyRange): IDBRequest[S, IDBValue]
IDBStoreLike[JT] def getAll(query: js.UndefOr[IDBKeyRange | IDBKey]?, count: js.UndefOr[Double]?): IDBRequest[S, js.Array[IDBValue]]
IDBStoreLike[JT] def getAllKeys(query: js.UndefOr[IDBKeyRange | IDBKey]?, count: js.UndefOr[Double]?): IDBRequest[S, js.Array[IDBKey]]
IDBStoreLike[JT] def getKey(key: IDBKey): IDBRequest[S, js.UndefOr[IDBKey]]
IDBStoreLike[JT] def keyPath: IDBKeyPath
IDBStoreLike[JT] def name: String
IDBStoreLike[JT] def openCursor(range: js.UndefOr[IDBKeyRange | IDBKey]?, direction: js.UndefOr[IDBCursorDirection]?): IDBRequest[S, IDBCursorWithValue[S]]
IDBStoreLike[JT] def openKeyCursor(range: js.UndefOr[IDBKeyRange | IDBKey]?, direction: js.UndefOr[IDBCursorDirection]?): IDBRequest[S, IDBCursor[S]]
IDBTransaction[JC] def abort(): Unit
IDBTransaction[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
IDBTransaction[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
IDBTransaction[JC] def db: IDBDatabase
IDBTransaction[JC] def dispatchEvent(evt: Event): Boolean
IDBTransaction[JC] def error: DOMException
IDBTransaction[JC] def mode: IDBTransactionMode
IDBTransaction[JC] def objectStore(name: String): IDBObjectStore
IDBTransaction[JC] var onabort: js.Function1[Event, _]
IDBTransaction[JC] var oncomplete: js.Function1[Event, _]
IDBTransaction[JC] var onerror: js.Function1[ErrorEvent, _]
IDBTransaction[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
IDBTransaction[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
IDBTransactionDurability[JT]
IDBTransactionDurability[SO] val default: IDBTransactionDurability
IDBTransactionDurability[SO] val relaxed: IDBTransactionDurability
IDBTransactionDurability[SO] val strict: IDBTransactionDurability
IDBTransactionMode[JT]
IDBTransactionMode[SO] val readonly: IDBTransactionMode
IDBTransactionMode[SO] val readwrite: IDBTransactionMode
IDBTransactionMode[SO] val versionchange: IDBTransactionMode
IDBTransactionOptions[JT] val durability: js.UndefOr[IDBTransactionDurability]
IDBVersionChangeEvent[JC] def bubbles: Boolean
IDBVersionChangeEvent[JC] def cancelBubble: Boolean
IDBVersionChangeEvent[JC] def cancelable: Boolean
IDBVersionChangeEvent[JC] def composed: Boolean
IDBVersionChangeEvent[JC] def currentTarget: EventTarget
IDBVersionChangeEvent[JC] def defaultPrevented: Boolean
IDBVersionChangeEvent[JC] def eventPhase: Int
IDBVersionChangeEvent[JC] def isTrusted: Boolean
IDBVersionChangeEvent[JC] def newVersion: java.lang.Double
IDBVersionChangeEvent[JC] def oldVersion: Double
IDBVersionChangeEvent[JC] def preventDefault(): Unit
IDBVersionChangeEvent[JC] def stopImmediatePropagation(): Unit
IDBVersionChangeEvent[JC] def stopPropagation(): Unit
IDBVersionChangeEvent[JC] def target: EventTarget
IDBVersionChangeEvent[JC] override def target: IDBEventTarget[A]
IDBVersionChangeEvent[JC] def timeStamp: Double
IDBVersionChangeEvent[JC] def `type`: String
IDBVersionChangeEvent[SO] def newVersionOption: Option[Double]
IDBVersionChangeEvent.Ops[SC] def newVersionOption: Option[Double]
IDBVersionChangeEventInit[JT] var bubbles: js.UndefOr[Boolean]
IDBVersionChangeEventInit[JT] var cancelable: js.UndefOr[Boolean]
IDBVersionChangeEventInit[JT] var composed: js.UndefOr[Boolean]
IDBVersionChangeEventInit[JT] var newVersion: js.UndefOr[java.lang.Double]
IDBVersionChangeEventInit[JT] var oldVersion: js.UndefOr[Double]
IDBVersionChangeEventInit[JT] var scoped: js.UndefOr[Boolean]
Image[JC] var accessKey: String
Image[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Image[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Image[JC] def after(nodes: Node | String*): Unit
Image[JC] var alt: String
Image[JC] def append(nodes: Node | String*): Unit
Image[JC] def appendChild(newChild: Node): Node
Image[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
Image[JC] def attributes: NamedNodeMap
Image[JC] def baseURI: String
Image[JC] def before(nodes: Node | String*): Unit
Image[JC] def blur(): Unit
Image[JC] def childElementCount: Int
Image[JC] def childNodes: NodeList[Node]
Image[JC] def children: HTMLCollection[Element]
Image[JC] var classList: DOMTokenList
Image[JC] var className: String
Image[JC] def click(): Unit
Image[JC] def clientHeight: Int
Image[JC] def clientLeft: Int
Image[JC] def clientTop: Int
Image[JC] def clientWidth: Int
Image[JC] def cloneNode(deep: Boolean?): Node
Image[JC] def closest(selector: String): Element
Image[JC] def compareDocumentPosition(other: Node): Int
Image[JC] def complete: Boolean
Image[JC] def contains(child: HTMLElement): Boolean
Image[JC] def contains(otherNode: Node): Boolean
Image[JC] var contentEditable: String
Image[JC] def currentSrc: String
Image[JC] def dataset: js.Dictionary[String]
Image[JC] var dir: String
Image[JC] def dispatchEvent(evt: Event): Boolean
Image[JC] var draggable: Boolean
Image[JC] var filters: Object
Image[JC] def firstChild: Node
Image[JC] def firstElementChild: Element
Image[JC] def focus(): Unit
Image[JC] def focus(options: FocusOptions): Unit
Image[JC] def getAttribute(name: String): String
Image[JC] def getAttributeNS(namespaceURI: String, localName: String): String
Image[JC] def getAttributeNode(name: String): Attr
Image[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
Image[JC] def getBoundingClientRect(): DOMRect
Image[JC] def getClientRects(): DOMRectList
Image[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
Image[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
Image[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
Image[JC] var gotpointercapture: js.Function1[PointerEvent, _]
Image[JC] def hasAttribute(name: String): Boolean
Image[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
Image[JC] def hasAttributes(): Boolean
Image[JC] def hasChildNodes(): Boolean
Image[JC] def hasPointerCapture(pointerId: Double): Boolean
Image[JC] var height: Int
Image[JC] var href: String
Image[JC] var id: String
Image[JC] var innerHTML: String
Image[JC] var innerText: String
Image[JC] def insertAdjacentElement(position: String, element: Element): Element
Image[JC] def insertAdjacentHTML(where: String, html: String): Unit
Image[JC] def insertBefore(newChild: Node, refChild: Node): Node
Image[JC] def isConnected: Boolean
Image[JC] def isContentEditable: Boolean
Image[JC] def isDefaultNamespace(namespaceURI: String): Boolean
Image[JC] def isEqualNode(arg: Node): Boolean
Image[JC] var isMap: Boolean
Image[JC] def isSameNode(other: Node): Boolean
Image[JC] def isSupported(feature: String, version: String): Boolean
Image[JC] var lang: String
Image[JC] def lastChild: Node
Image[JC] def lastElementChild: Element
Image[JC] var loading: LazyLoadingState
Image[JC] def localName: String
Image[JC] def lookupNamespaceURI(prefix: String): String
Image[JC] def lookupPrefix(namespaceURI: String): String
Image[JC] var lostpointercapture: js.Function1[PointerEvent, _]
Image[JC] def matches(selector: String): Boolean
Image[JC] def namespaceURI: String
Image[JC] var naturalHeight: Int
Image[JC] var naturalWidth: Int
Image[JC] def nextElementSibling: Element
Image[JC] def nextSibling: Node
Image[JC] def nodeName: String
Image[JC] def nodeType: Int
Image[JC] var nodeValue: String
Image[JC] def normalize(): Unit
Image[JC] def offsetHeight: Double
Image[JC] def offsetLeft: Double
Image[JC] def offsetParent: Element
Image[JC] def offsetTop: Double
Image[JC] def offsetWidth: Double
Image[JC] var onabort: js.Function1[UIEvent, _]
Image[JC] var onactivate: js.Function1[UIEvent, _]
Image[JC] var onbeforeactivate: js.Function1[UIEvent, _]
Image[JC] var onbeforecopy: js.Function1[DragEvent, _]
Image[JC] var onbeforecut: js.Function1[DragEvent, _]
Image[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
Image[JC] var onbeforepaste: js.Function1[DragEvent, _]
Image[JC] var onblur: js.Function1[FocusEvent, _]
Image[JC] var oncanplay: js.Function1[Event, _]
Image[JC] var oncanplaythrough: js.Function1[Event, _]
Image[JC] var onchange: js.Function1[Event, _]
Image[JC] var onclick: js.Function1[MouseEvent, _]
Image[JC] var oncompositionend: js.Function1[CompositionEvent, _]
Image[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
Image[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
Image[JC] var oncontextmenu: js.Function1[MouseEvent, _]
Image[JC] var oncopy: js.Function1[ClipboardEvent, _]
Image[JC] var oncuechange: js.Function1[Event, _]
Image[JC] var oncut: js.Function1[ClipboardEvent, _]
Image[JC] var ondblclick: js.Function1[MouseEvent, _]
Image[JC] var ondeactivate: js.Function1[UIEvent, _]
Image[JC] var ondrag: js.Function1[DragEvent, _]
Image[JC] var ondragend: js.Function1[DragEvent, _]
Image[JC] var ondragenter: js.Function1[DragEvent, _]
Image[JC] var ondragleave: js.Function1[DragEvent, _]
Image[JC] var ondragover: js.Function1[DragEvent, _]
Image[JC] var ondragstart: js.Function1[DragEvent, _]
Image[JC] var ondrop: js.Function1[DragEvent, _]
Image[JC] var ondurationchange: js.Function1[Event, _]
Image[JC] var onemptied: js.Function1[Event, _]
Image[JC] var onended: js.Function1[Event, _]
Image[JC] var onfocus: js.Function1[FocusEvent, _]
Image[JC] var onfocusin: js.Function1[FocusEvent, _]
Image[JC] var onfocusout: js.Function1[FocusEvent, _]
Image[JC] var onfullscreenchange: js.Function1[Event, _]
Image[JC] var onfullscreenerror: js.Function1[Event, _]
Image[JC] var onhelp: js.Function1[Event, _]
Image[JC] var oninput: js.Function1[Event, _]
Image[JC] var onkeydown: js.Function1[KeyboardEvent, _]
Image[JC] var onkeypress: js.Function1[KeyboardEvent, _]
Image[JC] var onkeyup: js.Function1[KeyboardEvent, _]
Image[JC] var onload: js.Function1[Event, _]
Image[JC] var onloadeddata: js.Function1[Event, _]
Image[JC] var onloadedmetadata: js.Function1[Event, _]
Image[JC] var onloadstart: js.Function1[Event, _]
Image[JC] var onmousedown: js.Function1[MouseEvent, _]
Image[JC] var onmouseenter: js.Function1[MouseEvent, _]
Image[JC] var onmouseleave: js.Function1[MouseEvent, _]
Image[JC] var onmousemove: js.Function1[MouseEvent, _]
Image[JC] var onmouseout: js.Function1[MouseEvent, _]
Image[JC] var onmouseover: js.Function1[MouseEvent, _]
Image[JC] var onmouseup: js.Function1[MouseEvent, _]
Image[JC] var onmousewheel: js.Function1[WheelEvent, _]
Image[JC] var onpaste: js.Function1[ClipboardEvent, _]
Image[JC] var onpause: js.Function1[Event, _]
Image[JC] var onplay: js.Function1[Event, _]
Image[JC] var onplaying: js.Function1[Event, _]
Image[JC] var onpointercancel: js.Function1[PointerEvent, _]
Image[JC] var onpointerdown: js.Function1[PointerEvent, _]
Image[JC] var onpointerenter: js.Function1[PointerEvent, _]
Image[JC] var onpointerleave: js.Function1[PointerEvent, _]
Image[JC] var onpointermove: js.Function1[PointerEvent, _]
Image[JC] var onpointerout: js.Function1[PointerEvent, _]
Image[JC] var onpointerover: js.Function1[PointerEvent, _]
Image[JC] var onpointerup: js.Function1[PointerEvent, _]
Image[JC] var onprogress: js.Function1[js.Any, _]
Image[JC] var onratechange: js.Function1[Event, _]
Image[JC] var onreadystatechange: js.Function1[Event, _]
Image[JC] var onreset: js.Function1[Event, _]
Image[JC] var onscroll: js.Function1[UIEvent, _]
Image[JC] var onseeked: js.Function1[Event, _]
Image[JC] var onseeking: js.Function1[Event, _]
Image[JC] var onselect: js.Function1[UIEvent, _]
Image[JC] var onselectstart: js.Function1[Event, _]
Image[JC] var onstalled: js.Function1[Event, _]
Image[JC] var onsubmit: js.Function1[Event, _]
Image[JC] var onsuspend: js.Function1[Event, _]
Image[JC] var ontimeupdate: js.Function1[Event, _]
Image[JC] var onvolumechange: js.Function1[Event, _]
Image[JC] var onwaiting: js.Function1[Event, _]
Image[JC] var onwheel: js.Function1[WheelEvent, _]
Image[JC] var outerHTML: String
Image[JC] def ownerDocument: Document
Image[JC] override def ownerDocument: HTMLDocument
Image[JC] var parentElement: HTMLElement
Image[JC] def parentNode: Node
Image[JC] def prefix: String
Image[JC] def prepend(nodes: Node | String*): Unit
Image[JC] def previousElementSibling: Element
Image[JC] def previousSibling: Node
Image[JC] def querySelector(selectors: String): Element
Image[JC] def querySelectorAll(selectors: String): NodeList[Element]
Image[JC] var readyState: js.Any
Image[JC] var recordNumber: js.Any
Image[JC] def releasePointerCapture(pointerId: Double): Unit
Image[JC] def remove(): Unit
Image[JC] def removeAttribute(name: String): Unit
Image[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
Image[JC] def removeAttributeNode(oldAttr: Attr): Attr
Image[JC] def removeChild(oldChild: Node): Node
Image[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Image[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Image[JC] def replaceChild(newChild: Node, oldChild: Node): Node
Image[JC] def replaceChildren(nodes: Node | String*): Unit
Image[JC] def replaceWith(nodes: Node | String*): Unit
Image[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
Image[JC] def requestPointerLock(): Unit
Image[JC] def scrollHeight: Int
Image[JC] def scrollIntoView(top: Boolean?): Unit
Image[JC] var scrollLeft: Double
Image[JC] var scrollTop: Double
Image[JC] def scrollWidth: Int
Image[JC] def setAttribute(name: String, value: String): Unit
Image[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
Image[JC] def setAttributeNode(newAttr: Attr): Attr
Image[JC] def setAttributeNodeNS(newAttr: Attr): Attr
Image[JC] def setPointerCapture(pointerId: Double): Unit
Image[JC] def shadowRoot: ShadowRoot
Image[JC] var sizes: String
Image[JC] var spellcheck: Boolean
Image[JC] var src: String
Image[JC] var srcset: String
Image[JC] def style: CSSStyleDeclaration
Image[JC] def style_ = (value: CSSStyleDeclaration): Unit
Image[JC] def style_ = (value: String): Unit
Image[JC] var tabIndex: Int
Image[JC] def tagName: String
Image[JC] var textContent: String
Image[JC] var title: String
Image[JC] var useMap: String
Image[JC] var width: Int
Image[JC] def x: Int
Image[JC] def y: Int
ImageBitmap[JT] def close(): Unit
ImageBitmap[JT] def height: Double
ImageBitmap[JT] def width: Double
ImageCapture[JC] def grabFrame(): js.Promise[ImageBitmap]
ImageCapture[JC] def takePhoto(): js.Promise[Blob]
ImageCapture[JC] val track: MediaStreamTrack
ImageData[JC] def data: Uint8ClampedArray
ImageData[JC] def height: Int
ImageData[JC] def width: Int
ImageDataSettings[JT] var colorSpace: js.UndefOr[PredefinedColorSpace]
InputEvent[JC] def bubbles: Boolean
InputEvent[JC] def cancelBubble: Boolean
InputEvent[JC] def cancelable: Boolean
InputEvent[JC] def composed: Boolean
InputEvent[JC] def currentTarget: EventTarget
InputEvent[JC] def data: String
InputEvent[JC] def dataTransfer: DataTransfer
InputEvent[JC] def defaultPrevented: Boolean
InputEvent[JC] def detail: Int
InputEvent[JC] def eventPhase: Int
InputEvent[JC] def getTargetRanges(): js.Array[StaticRange]
InputEvent[JC] def inputType: InputType
InputEvent[JC] def isComposing: Boolean
InputEvent[JC] def isTrusted: Boolean
InputEvent[JC] def preventDefault(): Unit
InputEvent[JC] def stopImmediatePropagation(): Unit
InputEvent[JC] def stopPropagation(): Unit
InputEvent[JC] def target: EventTarget
InputEvent[JC] def timeStamp: Double
InputEvent[JC] def `type`: String
InputEvent[JC] def view: Window
InputEventInit[JT] var bubbles: js.UndefOr[Boolean]
InputEventInit[JT] var cancelable: js.UndefOr[Boolean]
InputEventInit[JT] var composed: js.UndefOr[Boolean]
InputEventInit[JT] var data: js.UndefOr[String]
InputEventInit[JT] var detail: js.UndefOr[Int]
InputEventInit[JT] var inputType: js.UndefOr[InputType]
InputEventInit[JT] var isComposing: js.UndefOr[Boolean]
InputEventInit[JT] var scoped: js.UndefOr[Boolean]
InputEventInit[JT] var view: js.UndefOr[Window]
InputType[JT]
InputType[SO] val deleteByCut: InputType
InputType[SO] val deleteByDrag: InputType
InputType[SO] val deleteContent: InputType
InputType[SO] val deleteContentBackward: InputType
InputType[SO] val deleteContentForward: InputType
InputType[SO] val deleteEntireSoftLine: InputType
InputType[SO] val deleteHardLineBackward: InputType
InputType[SO] val deleteHardLineForward: InputType
InputType[SO] val deleteSoftLineBackward: InputType
InputType[SO] val deleteSoftLineForward: InputType
InputType[SO] val deleteWordBackward: InputType
InputType[SO] val deleteWordForward: InputType
InputType[SO] val formatBackColor: InputType
InputType[SO] val formatBold: InputType
InputType[SO] val formatFontColor: InputType
InputType[SO] val formatFontName: InputType
InputType[SO] val formatIndent: InputType
InputType[SO] val formatItalic: InputType
InputType[SO] val formatJustifyCenter: InputType
InputType[SO] val formatJustifyFull: InputType
InputType[SO] val formatJustifyLeft: InputType
InputType[SO] val formatJustifyRight: InputType
InputType[SO] val formatOutdent: InputType
InputType[SO] val formatRemove: InputType
InputType[SO] val formatSetBlockTextDirection: InputType
InputType[SO] val formatSetInlineTextDirection: InputType
InputType[SO] val formatStrikeThrough: InputType
InputType[SO] val formatSubscript: InputType
InputType[SO] val formatSuperscript: InputType
InputType[SO] val formatUnderline: InputType
InputType[SO] val historyRedo: InputType
InputType[SO] val historyUndo: InputType
InputType[SO] val insertCompositionText: InputType
InputType[SO] val insertFromDrop: InputType
InputType[SO] val insertFromPaste: InputType
InputType[SO] val insertFromPasteAsQuotation: InputType
InputType[SO] val insertFromYank: InputType
InputType[SO] val insertHorizontalRule: InputType
InputType[SO] val insertLineBreak: InputType
InputType[SO] val insertLink: InputType
InputType[SO] val insertOrderedList: InputType
InputType[SO] val insertParagraph: InputType
InputType[SO] val insertReplacementText: InputType
InputType[SO] val insertText: InputType
InputType[SO] val insertTranspose: InputType
InputType[SO] val insertUnorderedList: InputType
IntersectionObserver[JC] def disconnect(): Unit
IntersectionObserver[JC] def observe(target: Element): Unit
IntersectionObserver[JC] def root: Document | Element
IntersectionObserver[JC] def rootMargin: String
IntersectionObserver[JC] def takeRecords(): js.Array[IntersectionObserverEntry]
IntersectionObserver[JC] def thresholds: FrozenArray[Double]
IntersectionObserver[JC] def unobserve(target: Element): Unit
IntersectionObserverEntry[JC] def boundingClientRect: DOMRectReadOnly
IntersectionObserverEntry[JC] def intersectionRatio: Double
IntersectionObserverEntry[JC] def intersectionRect: DOMRectReadOnly
IntersectionObserverEntry[JC] def isIntersecting: Boolean
IntersectionObserverEntry[JC] def rootBounds: DOMRectReadOnly
IntersectionObserverEntry[JC] def target: Element
IntersectionObserverEntry[JC] def time: Double
IntersectionObserverEntryInit[JT] var boundingClientRect: DOMRectInit
IntersectionObserverEntryInit[JT] var intersectionRatio: Double
IntersectionObserverEntryInit[JT] var intersectionRect: DOMRectInit
IntersectionObserverEntryInit[JT] var isIntersecting: Boolean
IntersectionObserverEntryInit[JT] var rootBounds: DOMRectInit
IntersectionObserverEntryInit[JT] var target: Element
IntersectionObserverEntryInit[JT] var time: Double
IntersectionObserverInit[JT] var root: js.UndefOr[Document | Element]
IntersectionObserverInit[JT] var rootMargin: js.UndefOr[String]
IntersectionObserverInit[JT] var threshold: js.UndefOr[Double | js.Array[Double]]
JsonWebKey[JT] var alg: js.Array[String]
JsonWebKey[JT] var crv: String
JsonWebKey[JT] var d: String
JsonWebKey[JT] var dp: String
JsonWebKey[JT] var dq: String
JsonWebKey[JT] var e: String
JsonWebKey[JT] var ext: Boolean
JsonWebKey[JT] var k: String
JsonWebKey[JT] var key_ops: js.Array[String]
JsonWebKey[JT] var kty: String
JsonWebKey[JT] var n: String
JsonWebKey[JT] var oth: js.Array[String]
JsonWebKey[JT] var p: String
JsonWebKey[JT] var q: String
JsonWebKey[JT] var qi: String
JsonWebKey[JT] var use: String
JsonWebKey[JT] var x: String
JsonWebKey[JT] var y: String
KeyAlgorithm[JT] val name: String
KeyCode[SO] final val A = 65
KeyCode[SO] final val Alt = 18
KeyCode[SO] final val B = 66
KeyCode[SO] final val Backspace = 8
KeyCode[SO] final val C = 67
KeyCode[SO] final val CapsLock = 20
KeyCode[SO] final val Ctrl = 17
KeyCode[SO] final val D = 68
KeyCode[SO] final val Delete = 46
KeyCode[SO] final val Down = 40
KeyCode[SO] final val E = 69
KeyCode[SO] final val End = 35
KeyCode[SO] final val Enter = 13
KeyCode[SO] final val Escape = 27
KeyCode[SO] final val F = 70
KeyCode[SO] final val F1 = 112
KeyCode[SO] final val F10 = 121
KeyCode[SO] final val F11 = 122
KeyCode[SO] final val F12 = 123
KeyCode[SO] final val F2 = 113
KeyCode[SO] final val F3 = 114
KeyCode[SO] final val F4 = 115
KeyCode[SO] final val F5 = 116
KeyCode[SO] final val F6 = 117
KeyCode[SO] final val F7 = 118
KeyCode[SO] final val F8 = 119
KeyCode[SO] final val F9 = 120
KeyCode[SO] final val G = 71
KeyCode[SO] final val H = 72
KeyCode[SO] final val Home = 36
KeyCode[SO] final val I = 73
KeyCode[SO] final val Insert = 45
KeyCode[SO] final val J = 74
KeyCode[SO] final val K = 75
KeyCode[SO] final val L = 76
KeyCode[SO] final val Left = 37
KeyCode[SO] final val M = 77
KeyCode[SO] final val N = 78
KeyCode[SO] final val Num0 = 48
KeyCode[SO] final val Num1 = 49
KeyCode[SO] final val Num2 = 50
KeyCode[SO] final val Num3 = 51
KeyCode[SO] final val Num4 = 52
KeyCode[SO] final val Num5 = 53
KeyCode[SO] final val Num6 = 54
KeyCode[SO] final val Num7 = 55
KeyCode[SO] final val Num8 = 56
KeyCode[SO] final val Num9 = 57
KeyCode[SO] final val O = 79
KeyCode[SO] final val P = 80
KeyCode[SO] final val PageDown = 34
KeyCode[SO] final val PageUp = 33
KeyCode[SO] final val Pause = 19
KeyCode[SO] final val Q = 81
KeyCode[SO] final val R = 82
KeyCode[SO] final val Right = 39
KeyCode[SO] final val S = 83
KeyCode[SO] final val Shift = 16
KeyCode[SO] final val Space = 32
KeyCode[SO] final val T = 84
KeyCode[SO] final val Tab = 9
KeyCode[SO] final val U = 85
KeyCode[SO] final val Up = 38
KeyCode[SO] final val V = 86
KeyCode[SO] final val W = 87
KeyCode[SO] final val X = 88
KeyCode[SO] final val Y = 89
KeyCode[SO] final val Z = 90
KeyFormat[JT]
KeyFormat[SO] val jwk: KeyFormat
KeyFormat[SO] val pkcs8: KeyFormat
KeyFormat[SO] val raw: KeyFormat
KeyFormat[SO] val spki: KeyFormat
KeyLocation[SO] final val Left = KeyboardEvent.DOM_KEY_LOCATION_LEFT
KeyLocation[SO] final val NumPad = KeyboardEvent.DOM_KEY_LOCATION_NUMPAD
KeyLocation[SO] final val Right = KeyboardEvent.DOM_KEY_LOCATION_RIGHT
KeyLocation[SO] final val Standard = KeyboardEvent.DOM_KEY_LOCATION_STANDARD
KeyType[JT]
KeyType[SO] val `private`: KeyType
KeyType[SO] val public: KeyType
KeyType[SO] val secret: KeyType
KeyUsage[JT]
KeyUsage[SO] val decrypt: KeyUsage
KeyUsage[SO] val deriveBits: KeyUsage
KeyUsage[SO] val deriveKey: KeyUsage
KeyUsage[SO] val encrypt: KeyUsage
KeyUsage[SO] val sign: KeyUsage
KeyUsage[SO] val unwrapKey: KeyUsage
KeyUsage[SO] val verify: KeyUsage
KeyUsage[SO] val wrapKey: KeyUsage
KeyValue[SO] final val Accept = "Accept"
KeyValue[SO] final val Again = "Again"
KeyValue[SO] final val AllCandidates = "AllCandidates"
KeyValue[SO] final val Alphanumeric = "Alphanumeric"
KeyValue[SO] final val Alt = "Alt"
KeyValue[SO] final val AltGraph = "AltGraph"
KeyValue[SO] final val ArrowDown = "ArrowDown"
KeyValue[SO] final val ArrowLeft = "ArrowLeft"
KeyValue[SO] final val ArrowRight = "ArrowRight"
KeyValue[SO] final val ArrowUp = "ArrowUp"
KeyValue[SO] final val Attn = "Attn"
KeyValue[SO] final val AudioBalanceLeft = "AudioBalanceLeft"
KeyValue[SO] final val AudioBalanceRight = "AudioBalanceRight"
KeyValue[SO] final val AudioBassBoostDown = "AudioBassBoostDown"
KeyValue[SO] final val AudioBassBoostUp = "AudioBassBoostUp"
KeyValue[SO] final val AudioFaderFront = "AudioFaderFront"
KeyValue[SO] final val AudioFaderRear = "AudioFaderRear"
KeyValue[SO] final val AudioSurroundModeNext = "AudioSurroundModeNext"
KeyValue[SO] final val Backspace = "Backspace"
KeyValue[SO] final val BrightnessDown = "BrightnessDown"
KeyValue[SO] final val BrightnessUp = "BrightnessUp"
KeyValue[SO] final val BrowserBack = "BrowserBack"
KeyValue[SO] final val BrowserFavorites = "BrowserFavorites"
KeyValue[SO] final val BrowserForward = "BrowserForward"
KeyValue[SO] final val BrowserHome = "BrowserHome"
KeyValue[SO] final val BrowserRefresh = "BrowserRefresh"
KeyValue[SO] final val BrowserSearch = "BrowserSearch"
KeyValue[SO] final val BrowserStop = "BrowserStop"
KeyValue[SO] final val Camera = "Camera"
KeyValue[SO] final val Cancel = "Cancel"
KeyValue[SO] final val CapsLock = "CapsLock"
KeyValue[SO] final val ChannelDown = "ChannelDown"
KeyValue[SO] final val ChannelUp = "ChannelUp"
KeyValue[SO] final val Clear = "Clear"
KeyValue[SO] final val Close = "Close"
KeyValue[SO] final val ClosedCaptionToggle = "ClosedCaptionToggle"
KeyValue[SO] final val CodeInput = "CodeInput"
KeyValue[SO] final val ColorF0Red = "ColorF0Red"
KeyValue[SO] final val ColorF1Green = "ColorF1Green"
KeyValue[SO] final val ColorF2Yellow = "ColorF2Yellow"
KeyValue[SO] final val ColorF3Blue = "ColorF3Blue"
KeyValue[SO] final val ColorF4Grey = "ColorF4Grey"
KeyValue[SO] final val ColorF5Brown = "ColorF5Brown"
KeyValue[SO] final val Compose = "Compose"
KeyValue[SO] final val ContextMenu = "ContextMenu"
KeyValue[SO] final val Control = "Control"
KeyValue[SO] final val Convert = "Convert"
KeyValue[SO] final val Copy = "Copy"
KeyValue[SO] final val CrSel = "CrSel"
KeyValue[SO] final val Cut = "Cut"
KeyValue[SO] final val Delete = "Delete"
KeyValue[SO] final val Dimmer = "Dimmer"
KeyValue[SO] final val DisplaySwap = "DisplaySwap"
KeyValue[SO] final val Eisu = "Eisu"
KeyValue[SO] final val Eject = "Eject"
KeyValue[SO] final val End = "End"
KeyValue[SO] final val Enter = "Enter"
KeyValue[SO] final val EraseEof = "EraseEof"
KeyValue[SO] final val Escape = "Escape"
KeyValue[SO] final val ExSel = "ExSel"
KeyValue[SO] final val Execute = "Execute"
KeyValue[SO] final val Exit = "Exit"
KeyValue[SO] final val F1 = "F1"
KeyValue[SO] final val F10 = "F10"
KeyValue[SO] final val F11 = "F11"
KeyValue[SO] final val F12 = "F12"
KeyValue[SO] final val F2 = "F2"
KeyValue[SO] final val F3 = "F3"
KeyValue[SO] final val F4 = "F4"
KeyValue[SO] final val F5 = "F5"
KeyValue[SO] final val F6 = "F6"
KeyValue[SO] final val F7 = "F7"
KeyValue[SO] final val F8 = "F8"
KeyValue[SO] final val F9 = "F9"
KeyValue[SO] final val FavoriteClear0 = "FavoriteClear0"
KeyValue[SO] final val FavoriteClear1 = "FavoriteClear1"
KeyValue[SO] final val FavoriteClear2 = "FavoriteClear2"
KeyValue[SO] final val FavoriteClear3 = "FavoriteClear3"
KeyValue[SO] final val FavoriteRecall0 = "FavoriteRecall0"
KeyValue[SO] final val FavoriteRecall1 = "FavoriteRecall1"
KeyValue[SO] final val FavoriteRecall2 = "FavoriteRecall2"
KeyValue[SO] final val FavoriteRecall3 = "FavoriteRecall3"
KeyValue[SO] final val FavoriteStore0 = "FavoriteStore0"
KeyValue[SO] final val FavoriteStore1 = "FavoriteStore1"
KeyValue[SO] final val FavoriteStore2 = "FavoriteStore2"
KeyValue[SO] final val FavoriteStore3 = "FavoriteStore3"
KeyValue[SO] final val FinalMode = "FinalMode"
KeyValue[SO] final val Find = "Find"
KeyValue[SO] final val Fn = "Fn"
KeyValue[SO] final val FnLock = "FnLock"
KeyValue[SO] final val GroupFirst = "GroupFirst"
KeyValue[SO] final val GroupLast = "GroupLast"
KeyValue[SO] final val GroupNext = "GroupNext"
KeyValue[SO] final val GroupPrevious = "GroupPrevious"
KeyValue[SO] final val Guide = "Guide"
KeyValue[SO] final val GuideNextDay = "GuideNextDay"
KeyValue[SO] final val GuidePreviousDay = "GuidePreviousDay"
KeyValue[SO] final val HangulMode = "HangulMode"
KeyValue[SO] final val HanjaMode = "HanjaMode"
KeyValue[SO] final val Hankaku = "Hankaku"
KeyValue[SO] final val Help = "Help"
KeyValue[SO] final val Hibernate = "Hibernate"
KeyValue[SO] final val Hiragana = "Hiragana"
KeyValue[SO] final val HiraganaKatakana = "HiraganaKatakana"
KeyValue[SO] final val Home = "Home"
KeyValue[SO] final val Hyper = "Hyper"
KeyValue[SO] final val Info = "Info"
KeyValue[SO] final val Insert = "Insert"
KeyValue[SO] final val InstantReplay = "InstantReplay"
KeyValue[SO] final val JunjaMode = "JunjaMode"
KeyValue[SO] final val KanaMode = "KanaMode"
KeyValue[SO] final val KanjiMode = "KanjiMode"
KeyValue[SO] final val Katakana = "Katakana"
KeyValue[SO] final val LaunchCalculator = "LaunchCalculator"
KeyValue[SO] final val LaunchCalendar = "LaunchCalendar"
KeyValue[SO] final val LaunchMail = "LaunchMail"
KeyValue[SO] final val LaunchMediaPlayer = "LaunchMediaPlayer"
KeyValue[SO] final val LaunchMusicPlayer = "LaunchMusicPlayer"
KeyValue[SO] final val LaunchMyComputer = "LaunchMyComputer"
KeyValue[SO] final val LaunchScreenSaver = "LaunchScreenSaver"
KeyValue[SO] final val LaunchSpreadsheet = "LaunchSpreadsheet"
KeyValue[SO] final val LaunchWebBrowser = "LaunchWebBrowser"
KeyValue[SO] final val LaunchWebCam = "LaunchWebCam"
KeyValue[SO] final val LaunchWordProcessor = "LaunchWordProcessor"
KeyValue[SO] final val Link = "Link"
KeyValue[SO] final val ListProgram = "ListProgram"
KeyValue[SO] final val LiveContent = "LiveContent"
KeyValue[SO] final val Lock = "Lock"
KeyValue[SO] final val LogOff = "LogOff"
KeyValue[SO] final val MailForward = "MailForward"
KeyValue[SO] final val MailReply = "MailReply"
KeyValue[SO] final val MailSend = "MailSend"
KeyValue[SO] final val MediaApps = "MediaApps"
KeyValue[SO] final val MediaFastForward = "MediaFastForward"
KeyValue[SO] final val MediaLast = "MediaLast"
KeyValue[SO] final val MediaPause = "MediaPause"
KeyValue[SO] final val MediaPlay = "MediaPlay"
KeyValue[SO] final val MediaPlayPause = "MediaPlayPause"
KeyValue[SO] final val MediaRecord = "MediaRecord"
KeyValue[SO] final val MediaRewind = "MediaRewind"
KeyValue[SO] final val MediaSelect = "MediaSelect"
KeyValue[SO] final val MediaSkip = "MediaSkip"
KeyValue[SO] final val MediaStop = "MediaStop"
KeyValue[SO] final val MediaTrackNext = "MediaTrackNext"
KeyValue[SO] final val MediaTrackPrevious = "MediaTrackPrevious"
KeyValue[SO] final val Meta = "Meta"
KeyValue[SO] final val ModeChange = "ModeChange"
KeyValue[SO] final val New = "New"
KeyValue[SO] final val NextCandidate = "NextCandidate"
KeyValue[SO] final val NextFavoriteChannel = "NextFavoriteChannel"
KeyValue[SO] final val NextUserProfile = "NextUserProfile"
KeyValue[SO] final val NonConvert = "NonConvert"
KeyValue[SO] final val NumLock = "NumLock"
KeyValue[SO] final val OS = "OS"
KeyValue[SO] final val OnDemand = "OnDemand"
KeyValue[SO] final val Open = "Open"
KeyValue[SO] final val PageDown = "PageDown"
KeyValue[SO] final val PageUp = "PageUp"
KeyValue[SO] final val Paste = "Paste"
KeyValue[SO] final val Pause = "Pause"
KeyValue[SO] final val PinPDown = "PinPDown"
KeyValue[SO] final val PinPMove = "PinPMove"
KeyValue[SO] final val PinPToggle = "PinPToggle"
KeyValue[SO] final val PinPUp = "PinPUp"
KeyValue[SO] final val Play = "Play"
KeyValue[SO] final val PlaySpeedDown = "PlaySpeedDown"
KeyValue[SO] final val PlaySpeedReset = "PlaySpeedReset"
KeyValue[SO] final val PlaySpeedUp = "PlaySpeedUp"
KeyValue[SO] final val Power = "Power"
KeyValue[SO] final val PowerOff = "PowerOff"
KeyValue[SO] final val PreviousCandidate = "PreviousCandidate"
KeyValue[SO] final val Print = "Print"
KeyValue[SO] final val PrintScreen = "PrintScreen"
KeyValue[SO] final val Process = "Process"
KeyValue[SO] final val Props = "Props"
KeyValue[SO] final val RandomToggle = "RandomToggle"
KeyValue[SO] final val RcLowBattery = "RcLowBattery"
KeyValue[SO] final val RecordSpeedNext = "RecordSpeedNext"
KeyValue[SO] final val Redo = "Redo"
KeyValue[SO] final val RfBypass = "RfBypass"
KeyValue[SO] final val RomanCharacters = "RomanCharacters"
KeyValue[SO] final val Save = "Save"
KeyValue[SO] final val ScanChannelsToggle = "ScanChannelsToggle"
KeyValue[SO] final val ScreenModeNext = "ScreenModeNext"
KeyValue[SO] final val ScrollLock = "ScrollLock"
KeyValue[SO] final val Separator = "Separator"
KeyValue[SO] final val Settings = "Settings"
KeyValue[SO] final val Shift = "Shift"
KeyValue[SO] final val SingleCandidate = "SingleCandidate"
KeyValue[SO] final val Soft1 = "Soft1"
KeyValue[SO] final val Soft2 = "Soft2"
KeyValue[SO] final val Soft3 = "Soft3"
KeyValue[SO] final val Soft4 = "Soft4"
KeyValue[SO] final val Spacebar = " "
KeyValue[SO] final val SpellCheck = "SpellCheck"
KeyValue[SO] final val SplitScreenToggle = "SplitScreenToggle"
KeyValue[SO] final val Standby = "Standby"
KeyValue[SO] final val Subtitle = "Subtitle"
KeyValue[SO] final val Super = "Super"
KeyValue[SO] final val Symbol = "Symbol"
KeyValue[SO] final val SymbolLock = "SymbolLock"
KeyValue[SO] final val Tab = "Tab"
KeyValue[SO] final val Teletext = "Teletext"
KeyValue[SO] final val Undo = "Undo"
KeyValue[SO] final val Unidentified = "Unidentified"
KeyValue[SO] final val VideoModeNext = "VideoModeNext"
KeyValue[SO] final val VolumeDown = "VolumeDown"
KeyValue[SO] final val VolumeMute = "VolumeMute"
KeyValue[SO] final val VolumeUp = "VolumeUp"
KeyValue[SO] final val WakeUp = "WakeUp"
KeyValue[SO] final val Wink = "Wink"
KeyValue[SO] final val Zenkaku = "Zenkaku"
KeyValue[SO] final val ZenkakuHankaku = "ZenkakuHankaku"
KeyValue[SO] final val ZoomIn = "ZoomIn"
KeyValue[SO] final val ZoomOut = "ZoomOut"
KeyValue[SO] final val ZoomToggle = "ZoomToggle"
KeyValue.Application[SO] final val LaunchCalculator = "LaunchCalculator"
KeyValue.Application[SO] final val LaunchCalendar = "LaunchCalendar"
KeyValue.Application[SO] final val LaunchMail = "LaunchMail"
KeyValue.Application[SO] final val LaunchMediaPlayer = "LaunchMediaPlayer"
KeyValue.Application[SO] final val LaunchMusicPlayer = "LaunchMusicPlayer"
KeyValue.Application[SO] final val LaunchMyComputer = "LaunchMyComputer"
KeyValue.Application[SO] final val LaunchScreenSaver = "LaunchScreenSaver"
KeyValue.Application[SO] final val LaunchSpreadsheet = "LaunchSpreadsheet"
KeyValue.Application[SO] final val LaunchWebBrowser = "LaunchWebBrowser"
KeyValue.Application[SO] final val LaunchWebCam = "LaunchWebCam"
KeyValue.Application[SO] final val LaunchWordProcessor = "LaunchWordProcessor"
KeyValue.Device[SO] final val BrightnessDown = "BrightnessDown"
KeyValue.Device[SO] final val BrightnessUp = "BrightnessUp"
KeyValue.Device[SO] final val Camera = "Camera"
KeyValue.Device[SO] final val Eject = "Eject"
KeyValue.Device[SO] final val Hibernate = "Hibernate"
KeyValue.Device[SO] final val LogOff = "LogOff"
KeyValue.Device[SO] final val Power = "Power"
KeyValue.Device[SO] final val PowerOff = "PowerOff"
KeyValue.Device[SO] final val PrintScreen = "PrintScreen"
KeyValue.Device[SO] final val Standby = "Standby"
KeyValue.Device[SO] final val WakeUp = "WakeUp"
KeyValue.IME[SO] final val AllCandidates = "AllCandidates"
KeyValue.IME[SO] final val Alphanumeric = "Alphanumeric"
KeyValue.IME[SO] final val CodeInput = "CodeInput"
KeyValue.IME[SO] final val Compose = "Compose"
KeyValue.IME[SO] final val Convert = "Convert"
KeyValue.IME[SO] final val Eisu = "Eisu"
KeyValue.IME[SO] final val FinalMode = "FinalMode"
KeyValue.IME[SO] final val GroupFirst = "GroupFirst"
KeyValue.IME[SO] final val GroupLast = "GroupLast"
KeyValue.IME[SO] final val GroupNext = "GroupNext"
KeyValue.IME[SO] final val GroupPrevious = "GroupPrevious"
KeyValue.IME[SO] final val HangulMode = "HangulMode"
KeyValue.IME[SO] final val HanjaMode = "HanjaMode"
KeyValue.IME[SO] final val Hankaku = "Hankaku"
KeyValue.IME[SO] final val Hiragana = "Hiragana"
KeyValue.IME[SO] final val HiraganaKatakana = "HiraganaKatakana"
KeyValue.IME[SO] final val JunjaMode = "JunjaMode"
KeyValue.IME[SO] final val KanaMode = "KanaMode"
KeyValue.IME[SO] final val KanjiMode = "KanjiMode"
KeyValue.IME[SO] final val Katakana = "Katakana"
KeyValue.IME[SO] final val ModeChange = "ModeChange"
KeyValue.IME[SO] final val NextCandidate = "NextCandidate"
KeyValue.IME[SO] final val NonConvert = "NonConvert"
KeyValue.IME[SO] final val PreviousCandidate = "PreviousCandidate"
KeyValue.IME[SO] final val Process = "Process"
KeyValue.IME[SO] final val RomanCharacters = "RomanCharacters"
KeyValue.IME[SO] final val SingleCandidate = "SingleCandidate"
KeyValue.IME[SO] final val Zenkaku = "Zenkaku"
KeyValue.IME[SO] final val ZenkakuHankaku = "ZenkakuHankaku"
KeyValue.MediaControl[SO] final val AudioBalanceLeft = "AudioBalanceLeft"
KeyValue.MediaControl[SO] final val AudioBalanceRight = "AudioBalanceRight"
KeyValue.MediaControl[SO] final val AudioBassBoostDown = "AudioBassBoostDown"
KeyValue.MediaControl[SO] final val AudioBassBoostUp = "AudioBassBoostUp"
KeyValue.MediaControl[SO] final val AudioFaderFront = "AudioFaderFront"
KeyValue.MediaControl[SO] final val AudioFaderRear = "AudioFaderRear"
KeyValue.MediaControl[SO] final val AudioSurroundModeNext = "AudioSurroundModeNext"
KeyValue.MediaControl[SO] final val ChannelDown = "ChannelDown"
KeyValue.MediaControl[SO] final val ChannelUp = "ChannelUp"
KeyValue.MediaControl[SO] final val ClosedCaptionToggle = "ClosedCaptionToggle"
KeyValue.MediaControl[SO] final val ColorF0Red = "ColorF0Red"
KeyValue.MediaControl[SO] final val ColorF1Green = "ColorF1Green"
KeyValue.MediaControl[SO] final val ColorF2Yellow = "ColorF2Yellow"
KeyValue.MediaControl[SO] final val ColorF3Blue = "ColorF3Blue"
KeyValue.MediaControl[SO] final val ColorF4Grey = "ColorF4Grey"
KeyValue.MediaControl[SO] final val ColorF5Brown = "ColorF5Brown"
KeyValue.MediaControl[SO] final val Dimmer = "Dimmer"
KeyValue.MediaControl[SO] final val DisplaySwap = "DisplaySwap"
KeyValue.MediaControl[SO] final val Exit = "Exit"
KeyValue.MediaControl[SO] final val FavoriteClear0 = "FavoriteClear0"
KeyValue.MediaControl[SO] final val FavoriteClear1 = "FavoriteClear1"
KeyValue.MediaControl[SO] final val FavoriteClear2 = "FavoriteClear2"
KeyValue.MediaControl[SO] final val FavoriteClear3 = "FavoriteClear3"
KeyValue.MediaControl[SO] final val FavoriteRecall0 = "FavoriteRecall0"
KeyValue.MediaControl[SO] final val FavoriteRecall1 = "FavoriteRecall1"
KeyValue.MediaControl[SO] final val FavoriteRecall2 = "FavoriteRecall2"
KeyValue.MediaControl[SO] final val FavoriteRecall3 = "FavoriteRecall3"
KeyValue.MediaControl[SO] final val FavoriteStore0 = "FavoriteStore0"
KeyValue.MediaControl[SO] final val FavoriteStore1 = "FavoriteStore1"
KeyValue.MediaControl[SO] final val FavoriteStore2 = "FavoriteStore2"
KeyValue.MediaControl[SO] final val FavoriteStore3 = "FavoriteStore3"
KeyValue.MediaControl[SO] final val Guide = "Guide"
KeyValue.MediaControl[SO] final val GuideNextDay = "GuideNextDay"
KeyValue.MediaControl[SO] final val GuidePreviousDay = "GuidePreviousDay"
KeyValue.MediaControl[SO] final val Info = "Info"
KeyValue.MediaControl[SO] final val InstantReplay = "InstantReplay"
KeyValue.MediaControl[SO] final val Link = "Link"
KeyValue.MediaControl[SO] final val ListProgram = "ListProgram"
KeyValue.MediaControl[SO] final val LiveContent = "LiveContent"
KeyValue.MediaControl[SO] final val Lock = "Lock"
KeyValue.MediaControl[SO] final val MediaApps = "MediaApps"
KeyValue.MediaControl[SO] final val MediaFastForward = "MediaFastForward"
KeyValue.MediaControl[SO] final val MediaLast = "MediaLast"
KeyValue.MediaControl[SO] final val MediaPause = "MediaPause"
KeyValue.MediaControl[SO] final val MediaPlay = "MediaPlay"
KeyValue.MediaControl[SO] final val MediaRecord = "MediaRecord"
KeyValue.MediaControl[SO] final val MediaRewind = "MediaRewind"
KeyValue.MediaControl[SO] final val MediaSkip = "MediaSkip"
KeyValue.MediaControl[SO] final val NextFavoriteChannel = "NextFavoriteChannel"
KeyValue.MediaControl[SO] final val NextUserProfile = "NextUserProfile"
KeyValue.MediaControl[SO] final val OnDemand = "OnDemand"
KeyValue.MediaControl[SO] final val PinPDown = "PinPDown"
KeyValue.MediaControl[SO] final val PinPMove = "PinPMove"
KeyValue.MediaControl[SO] final val PinPToggle = "PinPToggle"
KeyValue.MediaControl[SO] final val PinPUp = "PinPUp"
KeyValue.MediaControl[SO] final val PlaySpeedDown = "PlaySpeedDown"
KeyValue.MediaControl[SO] final val PlaySpeedReset = "PlaySpeedReset"
KeyValue.MediaControl[SO] final val PlaySpeedUp = "PlaySpeedUp"
KeyValue.MediaControl[SO] final val RandomToggle = "RandomToggle"
KeyValue.MediaControl[SO] final val RcLowBattery = "RcLowBattery"
KeyValue.MediaControl[SO] final val RecordSpeedNext = "RecordSpeedNext"
KeyValue.MediaControl[SO] final val RfBypass = "RfBypass"
KeyValue.MediaControl[SO] final val ScanChannelsToggle = "ScanChannelsToggle"
KeyValue.MediaControl[SO] final val ScreenModeNext = "ScreenModeNext"
KeyValue.MediaControl[SO] final val Settings = "Settings"
KeyValue.MediaControl[SO] final val SplitScreenToggle = "SplitScreenToggle"
KeyValue.MediaControl[SO] final val Subtitle = "Subtitle"
KeyValue.MediaControl[SO] final val Teletext = "Teletext"
KeyValue.MediaControl[SO] final val VideoModeNext = "VideoModeNext"
KeyValue.MediaControl[SO] final val Wink = "Wink"
KeyValue.MediaControl[SO] final val ZoomToggle = "ZoomToggle"
KeyValue.Multimedia[SO] final val Close = "Close"
KeyValue.Multimedia[SO] final val MailForward = "MailForward"
KeyValue.Multimedia[SO] final val MailReply = "MailReply"
KeyValue.Multimedia[SO] final val MailSend = "MailSend"
KeyValue.Multimedia[SO] final val MediaPlayPause = "MediaPlayPause"
KeyValue.Multimedia[SO] final val MediaSelect = "MediaSelect"
KeyValue.Multimedia[SO] final val MediaStop = "MediaStop"
KeyValue.Multimedia[SO] final val MediaTrackNext = "MediaTrackNext"
KeyValue.Multimedia[SO] final val MediaTrackPrevious = "MediaTrackPrevious"
KeyValue.Multimedia[SO] final val New = "New"
KeyValue.Multimedia[SO] final val Open = "Open"
KeyValue.Multimedia[SO] final val Print = "Print"
KeyValue.Multimedia[SO] final val Save = "Save"
KeyValue.Multimedia[SO] final val SpellCheck = "SpellCheck"
KeyValue.Multimedia[SO] final val VolumeDown = "VolumeDown"
KeyValue.Multimedia[SO] final val VolumeMute = "VolumeMute"
KeyValue.Multimedia[SO] final val VolumeUp = "VolumeUp"
KeyboardEvent[JC] def altKey: Boolean
KeyboardEvent[JC] def bubbles: Boolean
KeyboardEvent[JC] def cancelBubble: Boolean
KeyboardEvent[JC] def cancelable: Boolean
KeyboardEvent[JC] def charCode: Int
KeyboardEvent[JC] def code: String
KeyboardEvent[JC] def composed: Boolean
KeyboardEvent[JC] def ctrlKey: Boolean
KeyboardEvent[JC] def currentTarget: EventTarget
KeyboardEvent[JC] def defaultPrevented: Boolean
KeyboardEvent[JC] def detail: Int
KeyboardEvent[JC] def eventPhase: Int
KeyboardEvent[JC] def getModifierState(keyArg: String): Boolean
KeyboardEvent[JC] def isComposing: Boolean
KeyboardEvent[JC] def isTrusted: Boolean
KeyboardEvent[JC] def key: String
KeyboardEvent[JC] def keyCode: Int
KeyboardEvent[JC] def location: Int
KeyboardEvent[JC] def metaKey: Boolean
KeyboardEvent[JC] def preventDefault(): Unit
KeyboardEvent[JC] def repeat: Boolean
KeyboardEvent[JC] def shiftKey: Boolean
KeyboardEvent[JC] def stopImmediatePropagation(): Unit
KeyboardEvent[JC] def stopPropagation(): Unit
KeyboardEvent[JC] def target: EventTarget
KeyboardEvent[JC] def timeStamp: Double
KeyboardEvent[JC] def `type`: String
KeyboardEvent[JC] def view: Window
KeyboardEvent[JO] def DOM_KEY_LOCATION_LEFT: Int
KeyboardEvent[JO] def DOM_KEY_LOCATION_NUMPAD: Int
KeyboardEvent[JO] def DOM_KEY_LOCATION_RIGHT: Int
KeyboardEvent[JO] def DOM_KEY_LOCATION_STANDARD: Int
KeyboardEventInit[JT] var altKey: js.UndefOr[Boolean]
KeyboardEventInit[JT] var bubbles: js.UndefOr[Boolean]
KeyboardEventInit[JT] var cancelable: js.UndefOr[Boolean]
KeyboardEventInit[JT] var charCode: js.UndefOr[Int]
KeyboardEventInit[JT] var code: js.UndefOr[String]
KeyboardEventInit[JT] var composed: js.UndefOr[Boolean]
KeyboardEventInit[JT] var ctrlKey: js.UndefOr[Boolean]
KeyboardEventInit[JT] var detail: js.UndefOr[Int]
KeyboardEventInit[JT] var key: js.UndefOr[String]
KeyboardEventInit[JT] var keyCode: js.UndefOr[Int]
KeyboardEventInit[JT] var locale: js.UndefOr[String]
KeyboardEventInit[JT] var location: js.UndefOr[Int]
KeyboardEventInit[JT] var metaKey: js.UndefOr[Boolean]
KeyboardEventInit[JT] var repeat: js.UndefOr[Boolean]
KeyboardEventInit[JT] var scoped: js.UndefOr[Boolean]
KeyboardEventInit[JT] var shiftKey: js.UndefOr[Boolean]
KeyboardEventInit[JT] var view: js.UndefOr[Window]
LazyLoadingState[JT]
LazyLoadingState[SO] val eager: LazyLoadingState
LazyLoadingState[SO] val `lazy`: LazyLoadingState
LinkStyle[JT] def sheet: StyleSheet
Location[JT] def assign(url: String): Unit
Location[JT] var hash: String
Location[JT] var host: String
Location[JT] var hostname: String
Location[JT] var href: String
Location[JT] def origin: String
Location[JT] var pathname: String
Location[JT] var port: String
Location[JT] var protocol: String
Location[JT] def reload(): Unit
Location[JT] def replace(url: String): Unit
Location[JT] var search: String
Lock[JC] def mode: LockMode
Lock[JC] def name: String
LockInfo[JT] def clientId: String
LockInfo[JT] def mode: LockMode
LockInfo[JT] def name: String
LockManager[JC] def query(): js.Promise[LockManagerSnapshot]
LockManager[JC] def request(name: String, callback: js.Function1[Lock, js.Promise[Unit]]): js.Promise[Unit]
LockManager[JC] def request(name: String, options: LockOptions, callback: js.Function1[Lock, js.Promise[Unit]]): js.Promise[Unit]
LockManagerSnapshot[JT] def held: js.Array[LockInfo]
LockManagerSnapshot[JT] def pending: js.Array[LockInfo]
LockMode[JT]
LockMode[SO] val exclusive: LockMode
LockMode[SO] val shared: LockMode
LockOptions[JT] var ifAvailable: js.UndefOr[Boolean]
LockOptions[JT] var mode: js.UndefOr[LockMode]
LockOptions[JT] var signal: js.UndefOr[AbortSignal]
LockOptions[JT] var steal: js.UndefOr[Boolean]
MIMEType[JT]
MIMEType[SO] val `application/xhtml+xml` = "application/xhtml+xml".asInstanceOf[MIMEType]
MIMEType[SO] val `application/xml` = "application/xml".asInstanceOf[MIMEType]
MIMEType[SO] val `image/svg+xml` = "image/svg+xml".asInstanceOf[MIMEType]
MIMEType[SO] val `text/html` = "text/html".asInstanceOf[MIMEType]
MIMEType[SO] val `text/xml` = "text/xml".asInstanceOf[MIMEType]
MathMLElement[JC] var accessKey: String
MathMLElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MathMLElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MathMLElement[JC] def after(nodes: Node | String*): Unit
MathMLElement[JC] def append(nodes: Node | String*): Unit
MathMLElement[JC] def appendChild(newChild: Node): Node
MathMLElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
MathMLElement[JC] def attributes: NamedNodeMap
MathMLElement[JC] var autofocus: Boolean
MathMLElement[JC] def baseURI: String
MathMLElement[JC] def before(nodes: Node | String*): Unit
MathMLElement[JC] def childElementCount: Int
MathMLElement[JC] def childNodes: NodeList[Node]
MathMLElement[JC] def children: HTMLCollection[Element]
MathMLElement[JC] var classList: DOMTokenList
MathMLElement[JC] var className: String
MathMLElement[JC] def clientHeight: Int
MathMLElement[JC] def clientLeft: Int
MathMLElement[JC] def clientTop: Int
MathMLElement[JC] def clientWidth: Int
MathMLElement[JC] def cloneNode(deep: Boolean?): Node
MathMLElement[JC] def closest(selector: String): Element
MathMLElement[JC] def compareDocumentPosition(other: Node): Int
MathMLElement[JC] def contains(otherNode: Node): Boolean
MathMLElement[JC] def dispatchEvent(evt: Event): Boolean
MathMLElement[JC] def firstChild: Node
MathMLElement[JC] def firstElementChild: Element
MathMLElement[JC] def getAttribute(name: String): String
MathMLElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
MathMLElement[JC] def getAttributeNode(name: String): Attr
MathMLElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
MathMLElement[JC] def getBoundingClientRect(): DOMRect
MathMLElement[JC] def getClientRects(): DOMRectList
MathMLElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
MathMLElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
MathMLElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
MathMLElement[JC] def hasAttribute(name: String): Boolean
MathMLElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
MathMLElement[JC] def hasAttributes(): Boolean
MathMLElement[JC] def hasChildNodes(): Boolean
MathMLElement[JC] def hasPointerCapture(pointerId: Double): Boolean
MathMLElement[JC] var id: String
MathMLElement[JC] var innerHTML: String
MathMLElement[JC] var innerText: String
MathMLElement[JC] def insertAdjacentElement(position: String, element: Element): Element
MathMLElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
MathMLElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
MathMLElement[JC] def isConnected: Boolean
MathMLElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
MathMLElement[JC] def isEqualNode(arg: Node): Boolean
MathMLElement[JC] def isSameNode(other: Node): Boolean
MathMLElement[JC] def isSupported(feature: String, version: String): Boolean
MathMLElement[JC] def lastChild: Node
MathMLElement[JC] def lastElementChild: Element
MathMLElement[JC] def localName: String
MathMLElement[JC] def lookupNamespaceURI(prefix: String): String
MathMLElement[JC] def lookupPrefix(namespaceURI: String): String
MathMLElement[JC] def matches(selector: String): Boolean
MathMLElement[JC] def namespaceURI: String
MathMLElement[JC] def nextElementSibling: Element
MathMLElement[JC] def nextSibling: Node
MathMLElement[JC] def nodeName: String
MathMLElement[JC] def nodeType: Int
MathMLElement[JC] var nodeValue: String
MathMLElement[JC] def normalize(): Unit
MathMLElement[JC] var onclick: js.Function1[MouseEvent, _]
MathMLElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
MathMLElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
MathMLElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
MathMLElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
MathMLElement[JC] var oncut: js.Function1[ClipboardEvent, _]
MathMLElement[JC] var onfocusin: js.Function1[FocusEvent, _]
MathMLElement[JC] var onfocusout: js.Function1[FocusEvent, _]
MathMLElement[JC] var onfullscreenchange: js.Function1[Event, _]
MathMLElement[JC] var onfullscreenerror: js.Function1[Event, _]
MathMLElement[JC] var onload: js.Function1[Event, _]
MathMLElement[JC] var onmousedown: js.Function1[MouseEvent, _]
MathMLElement[JC] var onmousemove: js.Function1[MouseEvent, _]
MathMLElement[JC] var onmouseout: js.Function1[MouseEvent, _]
MathMLElement[JC] var onmouseover: js.Function1[MouseEvent, _]
MathMLElement[JC] var onmouseup: js.Function1[MouseEvent, _]
MathMLElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
MathMLElement[JC] var outerHTML: String
MathMLElement[JC] def ownerDocument: Document
MathMLElement[JC] def parentNode: Node
MathMLElement[JC] def prefix: String
MathMLElement[JC] def prepend(nodes: Node | String*): Unit
MathMLElement[JC] def previousElementSibling: Element
MathMLElement[JC] def previousSibling: Node
MathMLElement[JC] def querySelector(selectors: String): Element
MathMLElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
MathMLElement[JC] def releasePointerCapture(pointerId: Double): Unit
MathMLElement[JC] def remove(): Unit
MathMLElement[JC] def removeAttribute(name: String): Unit
MathMLElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
MathMLElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
MathMLElement[JC] def removeChild(oldChild: Node): Node
MathMLElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MathMLElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MathMLElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
MathMLElement[JC] def replaceChildren(nodes: Node | String*): Unit
MathMLElement[JC] def replaceWith(nodes: Node | String*): Unit
MathMLElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
MathMLElement[JC] def requestPointerLock(): Unit
MathMLElement[JC] def scrollHeight: Int
MathMLElement[JC] def scrollIntoView(top: Boolean?): Unit
MathMLElement[JC] var scrollLeft: Double
MathMLElement[JC] var scrollTop: Double
MathMLElement[JC] def scrollWidth: Int
MathMLElement[JC] def setAttribute(name: String, value: String): Unit
MathMLElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
MathMLElement[JC] def setAttributeNode(newAttr: Attr): Attr
MathMLElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
MathMLElement[JC] def setPointerCapture(pointerId: Double): Unit
MathMLElement[JC] def shadowRoot: ShadowRoot
MathMLElement[JC] var style: CSSStyleDeclaration
MathMLElement[JC] var tabIndex: Int
MathMLElement[JC] def tagName: String
MathMLElement[JC] var textContent: String
MediaDeviceInfo[JT] val deviceId: String
MediaDeviceInfo[JT] val groupId: String
MediaDeviceInfo[JT] val kind: MediaDeviceKind
MediaDeviceInfo[JT] val label: String
MediaDeviceInfo[SO] def apply(deviceId: js.UndefOr[String]?, groupId: js.UndefOr[String]?, kind: js.UndefOr[String]?, label: js.UndefOr[String]?): MediaDeviceInfo  (@deprecated in 2.0.0)
MediaDeviceKind[JT]
MediaDeviceKind[SO] val audioinput: MediaDeviceKind
MediaDeviceKind[SO] val audiooutput: MediaDeviceKind
MediaDeviceKind[SO] val videoinput: MediaDeviceKind
MediaDevices[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MediaDevices[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MediaDevices[JT] def dispatchEvent(evt: Event): Boolean
MediaDevices[JT] def enumerateDevices(): js.Promise[js.Array[MediaDeviceInfo]]
MediaDevices[JT] def getSupportedConstraints(): MediaTrackSupportedConstraints
MediaDevices[JT] def getUserMedia(constraints: MediaStreamConstraints): js.Promise[MediaStream]
MediaDevices[JT] var ondevicechange: js.Function1[Event, Any]
MediaDevices[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MediaDevices[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MediaElementAudioSourceNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MediaElementAudioSourceNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MediaElementAudioSourceNode[JT] var channelCount: Int
MediaElementAudioSourceNode[JT] var channelCountMode: AudioNodeChannelCountMode
MediaElementAudioSourceNode[JT] var channelInterpretation: AudioNodeChannelInterpretation
MediaElementAudioSourceNode[JT] def connect(audioNode: AudioNode): Unit
MediaElementAudioSourceNode[JT] def connect(audioParam: AudioParam): Unit
MediaElementAudioSourceNode[JT] val context: AudioContext
MediaElementAudioSourceNode[JT] def disconnect(output: AudioNode?): Unit
MediaElementAudioSourceNode[JT] def dispatchEvent(evt: Event): Boolean
MediaElementAudioSourceNode[JT] def mediaElement: HTMLMediaElement
MediaElementAudioSourceNode[JT] val numberOfInputs: Int
MediaElementAudioSourceNode[JT] val numberOfOutputs: Int
MediaElementAudioSourceNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MediaElementAudioSourceNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MediaElementAudioSourceNode[SO] def apply(context: BaseAudioContext, options: js.UndefOr[MediaElementAudioSourceNodeOptions]?): MediaElementAudioSourceNode
MediaElementAudioSourceNodeOptions[JT] var mediaElement: HTMLMediaElement
MediaError[JC] def code: Int
MediaError[JO] val MEDIA_ERR_ABORTED: Int
MediaError[JO] val MEDIA_ERR_DECODE: Int
MediaError[JO] val MEDIA_ERR_NETWORK: Int
MediaError[JO] val MEDIA_ERR_SRC_NOT_SUPPORTED: Int
MediaList[JC] def appendMedium(newMedium: String): Unit
MediaList[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): String
MediaList[JC] def deleteMedium(oldMedium: String): Unit
MediaList[JC] def item(index: Int): String
MediaList[JC] def length: Int
MediaList[JC] def mediaText: String
MediaList[JC] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: String): Unit
MediaQueryList[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MediaQueryList[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MediaQueryList[JT] def addListener(listener: MediaQueryListListener): Unit  (@deprecated in 2.4.0)
MediaQueryList[JT] def dispatchEvent(evt: Event): Boolean
MediaQueryList[JT] def matches: Boolean
MediaQueryList[JT] def media: String
MediaQueryList[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MediaQueryList[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MediaQueryList[JT] def removeListener(listener: MediaQueryListListener): Unit  (@deprecated in 2.4.0)
MediaQueryListListener[JT] def apply(mql: MediaQueryList): Unit  (@deprecated in 2.4.0)
MediaRecorder[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MediaRecorder[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MediaRecorder[JC] def dispatchEvent(evt: Event): Boolean
MediaRecorder[JC] var ondataavailable: js.Function1[BlobEvent, Any]
MediaRecorder[JC] var onerror: js.Function1[Event, Any]
MediaRecorder[JC] var onstop: js.Function1[Event, Any]
MediaRecorder[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MediaRecorder[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MediaRecorder[JC] def resume(): Unit
MediaRecorder[JC] def start(): Unit
MediaRecorder[JC] def stop(): Unit
MediaRecorderOptions[JT] var audioBitsPerSecond: js.UndefOr[Long]
MediaRecorderOptions[JT] var bitsPerSecond: js.UndefOr[Long]
MediaRecorderOptions[JT] var videoBitsPerSecond: js.UndefOr[Long]
MediaSource[JC] def activeSourceBuffers: SourceBufferList
MediaSource[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MediaSource[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MediaSource[JC] def addSourceBuffer(mimeType: String): SourceBuffer
MediaSource[JC] def clearLiveSeekableRange(): Unit
MediaSource[JC] def dispatchEvent(evt: Event): Boolean
MediaSource[JC] var duration: Double
MediaSource[JC] def endOfStream(error: EndOfStreamError?): Unit
MediaSource[JC] var onsourceclose: js.Function1[Event, Any]
MediaSource[JC] var onsourceended: js.Function1[Event, Any]
MediaSource[JC] var onsourceopen: js.Function1[Event, Any]
MediaSource[JC] def readyState: MediaSourceReadyState
MediaSource[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MediaSource[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MediaSource[JC] def removeSourceBuffer(sourceBuffer: SourceBuffer): Unit
MediaSource[JC] def setLiveSeekableRange(start: Double, end: Double): Unit
MediaSource[JC] def sourceBuffers: SourceBufferList
MediaSource[JO] def isTypeSupported(mediaType: String): Boolean
MediaSourceReadyState[JT]
MediaSourceReadyState[SO] val closed: MediaSourceReadyState
MediaSourceReadyState[SO] val ended: MediaSourceReadyState
MediaSourceReadyState[SO] val open: MediaSourceReadyState
MediaStream[JC] val active: Boolean
MediaStream[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MediaStream[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MediaStream[JC] def addTrack(track: MediaStreamTrack): Unit
MediaStream[JC] override def clone(): MediaStream
MediaStream[JC] def dispatchEvent(evt: Event): Boolean
MediaStream[JC] def getAudioTracks(): js.Array[MediaStreamTrack]
MediaStream[JC] def getTrackById(trackId: String): MediaStreamTrack
MediaStream[JC] def getTracks(): js.Array[MediaStreamTrack]
MediaStream[JC] def getVideoTracks(): js.Array[MediaStreamTrack]
MediaStream[JC] val id: String
MediaStream[JC] var onaddtrack: js.Function1[Event, Any]
MediaStream[JC] var onremovetrack: js.Function1[Event, Any]
MediaStream[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MediaStream[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MediaStream[JC] def removeTrack(track: MediaStreamTrack): Unit
MediaStreamAudioDestinationNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MediaStreamAudioDestinationNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MediaStreamAudioDestinationNode[JT] var channelCount: Int
MediaStreamAudioDestinationNode[JT] var channelCountMode: AudioNodeChannelCountMode
MediaStreamAudioDestinationNode[JT] var channelInterpretation: AudioNodeChannelInterpretation
MediaStreamAudioDestinationNode[JT] def connect(audioNode: AudioNode): Unit
MediaStreamAudioDestinationNode[JT] def connect(audioParam: AudioParam): Unit
MediaStreamAudioDestinationNode[JT] val context: AudioContext
MediaStreamAudioDestinationNode[JT] def disconnect(output: AudioNode?): Unit
MediaStreamAudioDestinationNode[JT] def dispatchEvent(evt: Event): Boolean
MediaStreamAudioDestinationNode[JT] val numberOfInputs: Int
MediaStreamAudioDestinationNode[JT] val numberOfOutputs: Int
MediaStreamAudioDestinationNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MediaStreamAudioDestinationNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MediaStreamAudioDestinationNode[JT] var stream: MediaStream
MediaStreamAudioSourceNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MediaStreamAudioSourceNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MediaStreamAudioSourceNode[JT] var channelCount: Int
MediaStreamAudioSourceNode[JT] var channelCountMode: AudioNodeChannelCountMode
MediaStreamAudioSourceNode[JT] var channelInterpretation: AudioNodeChannelInterpretation
MediaStreamAudioSourceNode[JT] def connect(audioNode: AudioNode): Unit
MediaStreamAudioSourceNode[JT] def connect(audioParam: AudioParam): Unit
MediaStreamAudioSourceNode[JT] val context: AudioContext
MediaStreamAudioSourceNode[JT] def disconnect(output: AudioNode?): Unit
MediaStreamAudioSourceNode[JT] def dispatchEvent(evt: Event): Boolean
MediaStreamAudioSourceNode[JT] val numberOfInputs: Int
MediaStreamAudioSourceNode[JT] val numberOfOutputs: Int
MediaStreamAudioSourceNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MediaStreamAudioSourceNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MediaStreamConstraints[JT] var audio: js.UndefOr[Boolean | MediaTrackConstraints]
MediaStreamConstraints[JT] var peerIdentity: js.UndefOr[String]
MediaStreamConstraints[JT] var video: js.UndefOr[Boolean | MediaTrackConstraints]
MediaStreamConstraints[SO] def apply(video: js.UndefOr[Boolean | MediaTrackConstraints]?, audio: js.UndefOr[Boolean | MediaTrackConstraints]?, peerIdentity: js.UndefOr[String]?): MediaStreamConstraints  (@deprecated in 2.0.0)
MediaStreamEventInit[JT] var bubbles: js.UndefOr[Boolean]
MediaStreamEventInit[JT] var cancelable: js.UndefOr[Boolean]
MediaStreamEventInit[JT] var composed: js.UndefOr[Boolean]
MediaStreamEventInit[JT] var scoped: js.UndefOr[Boolean]
MediaStreamEventInit[JT] var stream: js.UndefOr[MediaStream]
MediaStreamTrack[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MediaStreamTrack[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MediaStreamTrack[JT] def applyConstraints(constraints: MediaTrackConstraints): js.Promise[Unit]
MediaStreamTrack[JT] override def clone(): MediaStreamTrack
MediaStreamTrack[JT] def dispatchEvent(evt: Event): Boolean
MediaStreamTrack[JT] var enabled: Boolean
MediaStreamTrack[JT] def getCapabilities(): js.Any
MediaStreamTrack[JT] def getConstraints(): MediaTrackConstraints
MediaStreamTrack[JT] def getSettings(): js.Any
MediaStreamTrack[JT] val id: String
MediaStreamTrack[JT] val kind: String
MediaStreamTrack[JT] val label: String
MediaStreamTrack[JT] val muted: Boolean
MediaStreamTrack[JT] var onended: js.Function1[Event, Any]
MediaStreamTrack[JT] var onmute: js.Function1[Event, Any]
MediaStreamTrack[JT] var onoverconstrained: js.Function1[Event, Any]
MediaStreamTrack[JT] var onstarted: js.Function1[Event, Any]
MediaStreamTrack[JT] var onunmute: js.Function1[Event, Any]
MediaStreamTrack[JT] val readonly: Boolean
MediaStreamTrack[JT] val readyState: MediaStreamTrackState
MediaStreamTrack[JT] val remote: Boolean
MediaStreamTrack[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MediaStreamTrack[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MediaStreamTrack[JT] def stop(): Unit
MediaStreamTrack[SO] def apply(enabled: js.UndefOr[Boolean]?, id: js.UndefOr[String]?, kind: js.UndefOr[String]?, label: js.UndefOr[String]?, muted: js.UndefOr[Boolean]?, readonly: js.UndefOr[Boolean]?, readyState: js.UndefOr[String]?, remote: js.UndefOr[Boolean]?, onstarted: js.UndefOr[js.Function0[Any]]?, onmute: js.UndefOr[js.Function0[Any]]?, onunmute: js.UndefOr[js.Function0[Any]]?, onoverconstrained: js.UndefOr[js.Function0[Any]]?, oneended: js.UndefOr[js.Function0[Any]]?): MediaStreamTrack  (@deprecated in 2.0.0)
MediaStreamTrackEvent[JC] def bubbles: Boolean
MediaStreamTrackEvent[JC] def cancelBubble: Boolean
MediaStreamTrackEvent[JC] def cancelable: Boolean
MediaStreamTrackEvent[JC] def composed: Boolean
MediaStreamTrackEvent[JC] def currentTarget: EventTarget
MediaStreamTrackEvent[JC] def defaultPrevented: Boolean
MediaStreamTrackEvent[JC] def eventPhase: Int
MediaStreamTrackEvent[JC] def isTrusted: Boolean
MediaStreamTrackEvent[JC] def preventDefault(): Unit
MediaStreamTrackEvent[JC] def stopImmediatePropagation(): Unit
MediaStreamTrackEvent[JC] def stopPropagation(): Unit
MediaStreamTrackEvent[JC] def target: EventTarget
MediaStreamTrackEvent[JC] def timeStamp: Double
MediaStreamTrackEvent[JC] val track: MediaStreamTrack
MediaStreamTrackEvent[JC] def `type`: String
MediaStreamTrackEventInit[JT] var bubbles: js.UndefOr[Boolean]
MediaStreamTrackEventInit[JT] var cancelable: js.UndefOr[Boolean]
MediaStreamTrackEventInit[JT] var composed: js.UndefOr[Boolean]
MediaStreamTrackEventInit[JT] var scoped: js.UndefOr[Boolean]
MediaStreamTrackEventInit[JT] var track: js.UndefOr[MediaStreamTrack]
MediaStreamTrackState[JT]
MediaStreamTrackState[SO] val ended: MediaStreamTrackState
MediaStreamTrackState[SO] val live: MediaStreamTrackState
MediaTrackConstraintSet[JT] var aspectRatio: js.UndefOr[Double]
MediaTrackConstraintSet[JT] var deviceId: js.UndefOr[String]
MediaTrackConstraintSet[JT] var echoCancellation: js.UndefOr[Boolean]
MediaTrackConstraintSet[JT] var facingMode: js.UndefOr[String]
MediaTrackConstraintSet[JT] var frameRate: js.UndefOr[Double]
MediaTrackConstraintSet[JT] var groupId: js.UndefOr[String]
MediaTrackConstraintSet[JT] var height: js.UndefOr[Double]
MediaTrackConstraintSet[JT] var sampleRate: js.UndefOr[Double]
MediaTrackConstraintSet[JT] var sampleSize: js.UndefOr[Double]
MediaTrackConstraintSet[JT] var volume: js.UndefOr[Double]
MediaTrackConstraintSet[JT] var width: js.UndefOr[Double]
MediaTrackConstraintSet[SO] def apply(width: js.UndefOr[Double]?, height: js.UndefOr[Double]?, aspectRatio: js.UndefOr[Double]?, frameRate: js.UndefOr[Double]?, facingMode: js.UndefOr[String]?, volume: js.UndefOr[Double]?, sampleRate: js.UndefOr[Double]?, sampleSize: js.UndefOr[Double]?, echoCancellation: js.UndefOr[Boolean]?, deviceId: js.UndefOr[String]?, groupId: js.UndefOr[String]?): MediaTrackConstraintSet  (@deprecated in 2.0.0)
MediaTrackConstraints[JT] var advanced: js.UndefOr[js.Array[MediaTrackConstraintSet]]
MediaTrackConstraints[JT] var aspectRatio: js.UndefOr[Double]
MediaTrackConstraints[JT] var deviceId: js.UndefOr[String]
MediaTrackConstraints[JT] var echoCancellation: js.UndefOr[Boolean]
MediaTrackConstraints[JT] var facingMode: js.UndefOr[String]
MediaTrackConstraints[JT] var frameRate: js.UndefOr[Double]
MediaTrackConstraints[JT] var groupId: js.UndefOr[String]
MediaTrackConstraints[JT] var height: js.UndefOr[Double]
MediaTrackConstraints[JT] var sampleRate: js.UndefOr[Double]
MediaTrackConstraints[JT] var sampleSize: js.UndefOr[Double]
MediaTrackConstraints[JT] var volume: js.UndefOr[Double]
MediaTrackConstraints[JT] var width: js.UndefOr[Double]
MediaTrackConstraints[SO] def apply(advanced: js.UndefOr[js.Array[MediaTrackConstraintSet]]?): MediaTrackConstraints  (@deprecated in 2.0.0)
MediaTrackSettings[JT] var aspectRatio: js.UndefOr[Double]
MediaTrackSettings[JT] var channelCount: js.UndefOr[Double]
MediaTrackSettings[JT] var deviceId: js.UndefOr[String]
MediaTrackSettings[JT] var echoCancellation: js.UndefOr[Boolean]
MediaTrackSettings[JT] var facingMode: js.UndefOr[String]
MediaTrackSettings[JT] var frameRate: js.UndefOr[Double]
MediaTrackSettings[JT] var groupId: js.UndefOr[String]
MediaTrackSettings[JT] var height: js.UndefOr[Double]
MediaTrackSettings[JT] var latency: js.UndefOr[Double]
MediaTrackSettings[JT] var sampleRate: js.UndefOr[Double]
MediaTrackSettings[JT] var sampleSize: js.UndefOr[Double]
MediaTrackSettings[JT] var volume: js.UndefOr[Double]
MediaTrackSettings[JT] var width: js.UndefOr[Double]
MediaTrackSupportedConstraints[JT] var aspectRatio: js.UndefOr[Boolean]
MediaTrackSupportedConstraints[JT] var channelCount: js.UndefOr[Boolean]
MediaTrackSupportedConstraints[JT] var deviceId: js.UndefOr[Boolean]
MediaTrackSupportedConstraints[JT] var echoCancellation: js.UndefOr[Boolean]
MediaTrackSupportedConstraints[JT] var facingMode: js.UndefOr[Boolean]
MediaTrackSupportedConstraints[JT] var frameRate: js.UndefOr[Boolean]
MediaTrackSupportedConstraints[JT] var groupId: js.UndefOr[Boolean]
MediaTrackSupportedConstraints[JT] var height: js.UndefOr[Boolean]
MediaTrackSupportedConstraints[JT] var latency: js.UndefOr[Boolean]
MediaTrackSupportedConstraints[JT] var sampleRate: js.UndefOr[Boolean]
MediaTrackSupportedConstraints[JT] var sampleSize: js.UndefOr[Boolean]
MediaTrackSupportedConstraints[JT] var volume: js.UndefOr[Boolean]
MediaTrackSupportedConstraints[JT] var width: js.UndefOr[Boolean]
MessageChannel[JC] def port1: MessagePort
MessageChannel[JC] def port2: MessagePort
MessageEvent[JC] def bubbles: Boolean
MessageEvent[JC] def cancelBubble: Boolean
MessageEvent[JC] def cancelable: Boolean
MessageEvent[JC] def composed: Boolean
MessageEvent[JC] def currentTarget: EventTarget
MessageEvent[JC] def data: Any
MessageEvent[JC] def defaultPrevented: Boolean
MessageEvent[JC] def eventPhase: Int
MessageEvent[JC] def isTrusted: Boolean
MessageEvent[JC] def origin: String
MessageEvent[JC] def ports: js.Any
MessageEvent[JC] def preventDefault(): Unit
MessageEvent[JC] def source: Window
MessageEvent[JC] def stopImmediatePropagation(): Unit
MessageEvent[JC] def stopPropagation(): Unit
MessageEvent[JC] def target: EventTarget
MessageEvent[JC] def timeStamp: Double
MessageEvent[JC] def `type`: String
MessageEventInit[JT] var bubbles: js.UndefOr[Boolean]
MessageEventInit[JT] var cancelable: js.UndefOr[Boolean]
MessageEventInit[JT] var composed: js.UndefOr[Boolean]
MessageEventInit[JT] var data: js.UndefOr[Any]
MessageEventInit[JT] var origin: js.UndefOr[String]
MessageEventInit[JT] var scoped: js.UndefOr[Boolean]
MessageEventInit[JT] var source: js.UndefOr[Window]
MessagePort[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MessagePort[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MessagePort[JT] def close(): Unit
MessagePort[JT] def dispatchEvent(evt: Event): Boolean
MessagePort[JT] var onmessage: js.Function1[MessageEvent, _]
MessagePort[JT] def postMessage(message: js.Any, transferList: js.UndefOr[js.Array[Transferable]]?): Unit
MessagePort[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
MessagePort[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
MessagePort[JT] def start(): Unit
ModifierKeyEvent[JT] def altKey: Boolean
ModifierKeyEvent[JT] def ctrlKey: Boolean
ModifierKeyEvent[JT] def metaKey: Boolean
ModifierKeyEvent[JT] def shiftKey: Boolean
ModifierKeyEventInit[JT] var altKey: js.UndefOr[Boolean]
ModifierKeyEventInit[JT] var ctrlKey: js.UndefOr[Boolean]
ModifierKeyEventInit[JT] var metaKey: js.UndefOr[Boolean]
ModifierKeyEventInit[JT] var shiftKey: js.UndefOr[Boolean]
MouseEvent[JC] def altKey: Boolean
MouseEvent[JC] def bubbles: Boolean
MouseEvent[JC] def button: Int
MouseEvent[JC] def buttons: Int
MouseEvent[JC] def cancelBubble: Boolean
MouseEvent[JC] def cancelable: Boolean
MouseEvent[JC] def clientX: Double
MouseEvent[JC] def clientY: Double
MouseEvent[JC] def composed: Boolean
MouseEvent[JC] def ctrlKey: Boolean
MouseEvent[JC] def currentTarget: EventTarget
MouseEvent[JC] def defaultPrevented: Boolean
MouseEvent[JC] def detail: Int
MouseEvent[JC] def eventPhase: Int
MouseEvent[JC] def getModifierState(keyArg: String): Boolean
MouseEvent[JC] def isTrusted: Boolean
MouseEvent[JC] def metaKey: Boolean
MouseEvent[JC] def movementX: Double
MouseEvent[JC] def movementY: Double
MouseEvent[JC] def pageX: Double
MouseEvent[JC] def pageY: Double
MouseEvent[JC] def preventDefault(): Unit
MouseEvent[JC] def relatedTarget: EventTarget
MouseEvent[JC] def screenX: Double
MouseEvent[JC] def screenY: Double
MouseEvent[JC] def shiftKey: Boolean
MouseEvent[JC] def stopImmediatePropagation(): Unit
MouseEvent[JC] def stopPropagation(): Unit
MouseEvent[JC] def target: EventTarget
MouseEvent[JC] def timeStamp: Double
MouseEvent[JC] def `type`: String
MouseEvent[JC] def view: Window
MouseEventInit[JT] var altKey: js.UndefOr[Boolean]
MouseEventInit[JT] var bubbles: js.UndefOr[Boolean]
MouseEventInit[JT] var button: js.UndefOr[Int]
MouseEventInit[JT] var buttons: js.UndefOr[Int]
MouseEventInit[JT] var cancelable: js.UndefOr[Boolean]
MouseEventInit[JT] var clientX: js.UndefOr[Double]
MouseEventInit[JT] var clientY: js.UndefOr[Double]
MouseEventInit[JT] var composed: js.UndefOr[Boolean]
MouseEventInit[JT] var ctrlKey: js.UndefOr[Boolean]
MouseEventInit[JT] var detail: js.UndefOr[Int]
MouseEventInit[JT] var metaKey: js.UndefOr[Boolean]
MouseEventInit[JT] var pageX: js.UndefOr[Double]
MouseEventInit[JT] var pageY: js.UndefOr[Double]
MouseEventInit[JT] var relatedTarget: js.UndefOr[EventTarget]
MouseEventInit[JT] var scoped: js.UndefOr[Boolean]
MouseEventInit[JT] var screenX: js.UndefOr[Double]
MouseEventInit[JT] var screenY: js.UndefOr[Double]
MouseEventInit[JT] var shiftKey: js.UndefOr[Boolean]
MouseEventInit[JT] var view: js.UndefOr[Window]
MutationObserver[JC] def disconnect(): Unit
MutationObserver[JC] def observe(target: Node, options: MutationObserverInit): Unit
MutationObserver[JC] def takeRecords(): js.Array[MutationRecord]
MutationObserverInit[JT] var attributeFilter: js.UndefOr[js.Array[String]]
MutationObserverInit[JT] var attributeOldValue: js.UndefOr[Boolean]
MutationObserverInit[JT] var attributes: js.UndefOr[Boolean]
MutationObserverInit[JT] var characterData: js.UndefOr[Boolean]
MutationObserverInit[JT] var characterDataOldValue: js.UndefOr[Boolean]
MutationObserverInit[JT] var childList: js.UndefOr[Boolean]
MutationObserverInit[JT] var subtree: js.UndefOr[Boolean]
MutationObserverInit[SO] def apply(childList: Boolean = false, attributes: Boolean = false, characterData: Boolean = false, subtree: Boolean = false, attributeOldValue: Boolean = false, characterDataOldValue: Boolean = false, attributeFilter: js.UndefOr[js.Array[String]]?): MutationObserverInit  (@deprecated in 2.0.0)
MutationRecord[JT] def addedNodes: NodeList[Node]
MutationRecord[JT] def attributeName: String
MutationRecord[JT] def attributeNamespace: String
MutationRecord[JT] def nextSibling: Node
MutationRecord[JT] def oldValue: String
MutationRecord[JT] def previousSibling: Node
MutationRecord[JT] def removedNodes: NodeList[Node]
MutationRecord[JT] def target: Node
MutationRecord[JT] def `type`: String
NDEFMessage[JC] def records: FrozenArray[NDEFRecord]
NDEFReader[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
NDEFReader[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
NDEFReader[JC] def dispatchEvent(evt: Event): Boolean
NDEFReader[JC] var onreading: js.Function1[NDEFReadingEvent, Any]
NDEFReader[JC] var onreadingerror: js.Function1[Event, Any]
NDEFReader[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
NDEFReader[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
NDEFReader[JC] def scan(options: NDEFScanOptions?): js.Promise[Unit]
NDEFReader[JC] def write(message: String): js.Promise[Unit]
NDEFReader[JC] def write(message: String, options: NDEFWriteOptions): js.Promise[Unit]
NDEFReader[JC] def write(message: js.Array[NDEFRecord]): js.Promise[Unit]
NDEFReader[JC] def write(message: js.Array[NDEFRecord], options: NDEFWriteOptions): js.Promise[Unit]
NDEFReader[JC] def write(message: js.typedarray.ArrayBuffer): js.Promise[Unit]
NDEFReader[JC] def write(message: js.typedarray.ArrayBuffer, options: NDEFWriteOptions): js.Promise[Unit]
NDEFReader[JC] def write(message: js.typedarray.DataView): js.Promise[Unit]
NDEFReader[JC] def write(message: js.typedarray.DataView, options: NDEFWriteOptions): js.Promise[Unit]
NDEFReader[JC] def write(message: js.typedarray.TypedArray[_, _], options: NDEFWriteOptions?): js.Promise[Unit]
NDEFReadingEvent[JC] def bubbles: Boolean
NDEFReadingEvent[JC] def cancelBubble: Boolean
NDEFReadingEvent[JC] def cancelable: Boolean
NDEFReadingEvent[JC] def composed: Boolean
NDEFReadingEvent[JC] def currentTarget: EventTarget
NDEFReadingEvent[JC] def defaultPrevented: Boolean
NDEFReadingEvent[JC] def eventPhase: Int
NDEFReadingEvent[JC] def isTrusted: Boolean
NDEFReadingEvent[JC] def message: NDEFMessage
NDEFReadingEvent[JC] def preventDefault(): Unit
NDEFReadingEvent[JC] def serialNumber: String
NDEFReadingEvent[JC] def stopImmediatePropagation(): Unit
NDEFReadingEvent[JC] def stopPropagation(): Unit
NDEFReadingEvent[JC] def target: EventTarget
NDEFReadingEvent[JC] def timeStamp: Double
NDEFReadingEvent[JC] def `type`: String
NDEFReadingEventInit[JT] var bubbles: js.UndefOr[Boolean]
NDEFReadingEventInit[JT] var cancelable: js.UndefOr[Boolean]
NDEFReadingEventInit[JT] var composed: js.UndefOr[Boolean]
NDEFReadingEventInit[JT] var message: NDEFRecordInit
NDEFReadingEventInit[JT] var scoped: js.UndefOr[Boolean]
NDEFReadingEventInit[JT] var serialNumber: js.UndefOr[String]
NDEFRecord[JC] def data: js.typedarray.DataView
NDEFRecord[JC] def encoding: js.UndefOr[String]
NDEFRecord[JC] def id: js.UndefOr[String]
NDEFRecord[JC] def lang: js.UndefOr[String]
NDEFRecord[JC] def mediaType: js.UndefOr[String]
NDEFRecord[JC] def recordType: String
NDEFRecord[JC] def toRecords(): js.UndefOr[js.Array[NDEFRecord]]
NDEFRecordInit[JT] var data: js.UndefOr[String | js.typedarray.DataView | js.typedarray.ArrayBuffer | js.typedarray.TypedArray[_, _] | js.typedarray.DataView | js.Array[NDEFRecord]]
NDEFRecordInit[JT] var encoding: js.UndefOr[String]
NDEFRecordInit[JT] var id: js.UndefOr[String]
NDEFRecordInit[JT] var lang: js.UndefOr[String]
NDEFRecordInit[JT] var mediaType: js.UndefOr[String]
NDEFRecordInit[JT] var recordType: String
NDEFScanOptions[JT] var signal: js.UndefOr[AbortSignal]
NDEFWriteOptions[JT] var overwrite: js.UndefOr[Boolean]
NDEFWriteOptions[JT] var signal: js.UndefOr[AbortSignal]
NamedNodeMap[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): Attr
NamedNodeMap[JC] def getNamedItem(name: String): Attr
NamedNodeMap[JC] def getNamedItemNS(namespaceURI: String, localName: String): Attr
NamedNodeMap[JC] def item(index: Int): Attr
NamedNodeMap[JC] def length: Int
NamedNodeMap[JC] def removeNamedItem(name: String): Attr
NamedNodeMap[JC] def removeNamedItemNS(namespaceURI: String, localName: String): Attr
NamedNodeMap[JC] def setNamedItem(arg: Attr): Attr
NamedNodeMap[JC] def setNamedItemNS(arg: Attr): Attr
NamedNodeMap[JC] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: Attr): Unit
NamedNodeMap[SO] implicit def namedNodeMapAsMap(namedNodeMap: NamedNodeMap): mutable.Map[String, Attr]
Navigator[JC] def appName: String
Navigator[JC] def appVersion: String
Navigator[JC] def clipboard: Clipboard
Navigator[JC] def geolocation: Geolocation
Navigator[JC] def getGamepads(): js.Array[Gamepad]
Navigator[JC] def language: String
Navigator[JC] def languages: js.Array[String]
Navigator[JC] def locks: LockManager
Navigator[JC] def mediaDevices: MediaDevices
Navigator[JC] def onLine: Boolean
Navigator[JC] val permissions: Permissions
Navigator[JC] def platform: String
Navigator[JC] def registerProtocolHandler(scheme: String, url: String): Unit
Navigator[JC] def registerProtocolHandler(scheme: String, url: URL): Unit
Navigator[JC] def sendBeacon(url: String, data: BodyInit?): Boolean
Navigator[JC] val serviceWorker: ServiceWorkerContainer
Navigator[JC] def storage: StorageManager
Navigator[JC] def unregisterProtocolHandler(scheme: String, url: String): Unit
Navigator[JC] def unregisterProtocolHandler(scheme: String, url: URL): Unit
Navigator[JC] def userAgent: String
Navigator[JC] def vibrate(duration: Double): Boolean
Navigator[JC] def vibrate(pattern: js.Array[Double]): Boolean
NavigatorContentUtils[JT] def registerProtocolHandler(scheme: String, url: String): Unit
NavigatorContentUtils[JT] def registerProtocolHandler(scheme: String, url: URL): Unit
NavigatorContentUtils[JT] def unregisterProtocolHandler(scheme: String, url: String): Unit
NavigatorContentUtils[JT] def unregisterProtocolHandler(scheme: String, url: URL): Unit
NavigatorGeolocation[JT] def geolocation: Geolocation
NavigatorID[JT] def appName: String
NavigatorID[JT] def appVersion: String
NavigatorID[JT] def platform: String
NavigatorID[JT] def userAgent: String
NavigatorLanguage[JT] def language: String
NavigatorLanguage[JT] def languages: js.Array[String]
NavigatorLocks[JT] def locks: LockManager
NavigatorOnLine[JT] def onLine: Boolean
NavigatorStorageUtils[JT]
NavigatorVibration[JT] def vibrate(duration: Double): Boolean
NavigatorVibration[JT] def vibrate(pattern: js.Array[Double]): Boolean
Node[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Node[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Node[JC] def appendChild(newChild: Node): Node
Node[JC] def baseURI: String
Node[JC] def childNodes: NodeList[Node]
Node[JC] def cloneNode(deep: Boolean?): Node
Node[JC] def compareDocumentPosition(other: Node): Int
Node[JC] def contains(otherNode: Node): Boolean
Node[JC] def dispatchEvent(evt: Event): Boolean
Node[JC] def firstChild: Node
Node[JC] def hasChildNodes(): Boolean
Node[JC] var innerText: String
Node[JC] def insertBefore(newChild: Node, refChild: Node): Node
Node[JC] def isConnected: Boolean
Node[JC] def isDefaultNamespace(namespaceURI: String): Boolean
Node[JC] def isEqualNode(arg: Node): Boolean
Node[JC] def isSameNode(other: Node): Boolean
Node[JC] def isSupported(feature: String, version: String): Boolean
Node[JC] def lastChild: Node
Node[JC] def localName: String
Node[JC] def lookupNamespaceURI(prefix: String): String
Node[JC] def lookupPrefix(namespaceURI: String): String
Node[JC] def namespaceURI: String
Node[JC] def nextSibling: Node
Node[JC] def nodeName: String
Node[JC] def nodeType: Int
Node[JC] var nodeValue: String
Node[JC] def normalize(): Unit
Node[JC] def ownerDocument: Document
Node[JC] def parentNode: Node
Node[JC] def previousSibling: Node
Node[JC] def removeChild(oldChild: Node): Node
Node[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Node[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Node[JC] def replaceChild(newChild: Node, oldChild: Node): Node
Node[JC] var textContent: String
Node[JO] def ATTRIBUTE_NODE: Int
Node[JO] def CDATA_SECTION_NODE: Int
Node[JO] def COMMENT_NODE: Int
Node[JO] def DOCUMENT_FRAGMENT_NODE: Int
Node[JO] def DOCUMENT_NODE: Int
Node[JO] def DOCUMENT_POSITION_CONTAINED_BY: Int
Node[JO] def DOCUMENT_POSITION_CONTAINS: Int
Node[JO] def DOCUMENT_POSITION_DISCONNECTED: Int
Node[JO] def DOCUMENT_POSITION_FOLLOWING: Int
Node[JO] def DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Int
Node[JO] def DOCUMENT_POSITION_PRECEDING: Int
Node[JO] def DOCUMENT_TYPE_NODE: Int
Node[JO] def ELEMENT_NODE: Int
Node[JO] def ENTITY_NODE: Int
Node[JO] def ENTITY_REFERENCE_NODE: Int
Node[JO] def NOTATION_NODE: Int
Node[JO] def PROCESSING_INSTRUCTION_NODE: Int
Node[JO] def TEXT_NODE: Int
NodeFilter[JC] def acceptNode(n: Node): Int
NodeFilter[JO] val FILTER_ACCEPT: Int
NodeFilter[JO] val FILTER_REJECT: Int
NodeFilter[JO] val FILTER_SKIP: Int
NodeFilter[JO] val SHOW_ALL: Int
NodeFilter[JO] val SHOW_ATTRIBUTE: Int
NodeFilter[JO] val SHOW_CDATA_SECTION: Int
NodeFilter[JO] val SHOW_COMMENT: Int
NodeFilter[JO] val SHOW_DOCUMENT: Int
NodeFilter[JO] val SHOW_DOCUMENT_FRAGMENT: Int
NodeFilter[JO] val SHOW_DOCUMENT_TYPE: Int
NodeFilter[JO] val SHOW_ELEMENT: Int
NodeFilter[JO] val SHOW_ENTITY: Int
NodeFilter[JO] val SHOW_ENTITY_REFERENCE: Int
NodeFilter[JO] val SHOW_NOTATION: Int
NodeFilter[JO] val SHOW_PROCESSING_INSTRUCTION: Int
NodeFilter[JO] val SHOW_TEXT: Int
NodeIterator[JC] def detach(): Unit
NodeIterator[JC] def filter: NodeFilter
NodeIterator[JC] def nextNode(): Node
NodeIterator[JC] def previousNode(): Node
NodeIterator[JC] def root: Node
NodeIterator[JC] var whatToShow: Int
NodeList[JC] @JSBracketAccess def apply(index: Int): T
NodeList[JC] def item(index: Int): T
NodeList[JC] def length: Int
NodeSelector[JT] def querySelector(selectors: String): Element
NodeSelector[JT] def querySelectorAll(selectors: String): NodeList[Element]
NonDocumentTypeChildNode[JT] def nextElementSibling: Element
NonDocumentTypeChildNode[JT] def previousElementSibling: Element
Notification[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Notification[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Notification[JC] val body: String
Notification[JC] def close(): Unit
Notification[JC] val data: js.Object
Notification[JC] val dir: String
Notification[JC] def dispatchEvent(evt: Event): Boolean
Notification[JC] val icon: String
Notification[JC] val lang: String
Notification[JC] val noscreen: Boolean
Notification[JC] var onclick: js.Function1[Event, Any]
Notification[JC] var onerror: js.Function1[ErrorEvent, Any]
Notification[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Notification[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Notification[JC] val renotify: Boolean
Notification[JC] val silent: Boolean
Notification[JC] val sound: String
Notification[JC] val sticky: Boolean
Notification[JC] val tag: String
Notification[JC] val vibrate: js.Array[Double]
Notification[JO] val permission: String
Notification[JO] def requestPermission(callback: js.Function1[String, Any]): Unit
NotificationOptions[JT] var body: js.UndefOr[String]
NotificationOptions[JT] var dir: js.UndefOr[String]
NotificationOptions[JT] var icon: js.UndefOr[String]
NotificationOptions[JT] var lang: js.UndefOr[String]
NotificationOptions[JT] var noscreen: js.UndefOr[Boolean]
NotificationOptions[JT] var onclick: js.UndefOr[js.Function1[Event, Any]]
NotificationOptions[JT] var onerror: js.UndefOr[js.Function1[ErrorEvent, Any]]
NotificationOptions[JT] var renotify: js.UndefOr[Boolean]
NotificationOptions[JT] var silent: js.UndefOr[Boolean]
NotificationOptions[JT] var sound: js.UndefOr[String]
NotificationOptions[JT] var sticky: js.UndefOr[Boolean]
NotificationOptions[JT] var tag: js.UndefOr[String]
NotificationOptions[JT] var vibrate: js.UndefOr[js.Array[Double]]
NotificationOptions[SO] def apply(body: js.UndefOr[String]?, dir: js.UndefOr[String]?, icon: js.UndefOr[String]?, lang: js.UndefOr[String]?, noscreen: js.UndefOr[Boolean]?, renotify: js.UndefOr[Boolean]?, silent: js.UndefOr[Boolean]?, sound: js.UndefOr[String]?, sticky: js.UndefOr[Boolean]?, tag: js.UndefOr[String]?, onclick: js.UndefOr[js.Function1[Event, Any]]?, onerror: js.UndefOr[js.Function1[ErrorEvent, Any]]?, vibrate: js.UndefOr[js.Array[Double]]?): NotificationOptions  (@deprecated in 2.0.0)
OfflineAudioCompletionEvent[JT] def bubbles: Boolean
OfflineAudioCompletionEvent[JT] def cancelBubble: Boolean
OfflineAudioCompletionEvent[JT] def cancelable: Boolean
OfflineAudioCompletionEvent[JT] def composed: Boolean
OfflineAudioCompletionEvent[JT] def currentTarget: EventTarget
OfflineAudioCompletionEvent[JT] def defaultPrevented: Boolean
OfflineAudioCompletionEvent[JT] def eventPhase: Int
OfflineAudioCompletionEvent[JT] def isTrusted: Boolean
OfflineAudioCompletionEvent[JT] def preventDefault(): Unit
OfflineAudioCompletionEvent[JT] val renderedBuffer: AudioBuffer
OfflineAudioCompletionEvent[JT] def stopImmediatePropagation(): Unit
OfflineAudioCompletionEvent[JT] def stopPropagation(): Unit
OfflineAudioCompletionEvent[JT] def target: EventTarget
OfflineAudioCompletionEvent[JT] def timeStamp: Double
OfflineAudioCompletionEvent[JT] def `type`: String
OfflineAudioContext[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
OfflineAudioContext[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
OfflineAudioContext[JC] val audioWorklet: AudioWorklet
OfflineAudioContext[JC] def createAnalyser(): AnalyserNode
OfflineAudioContext[JC] def createBiquadFilter(): BiquadFilterNode
OfflineAudioContext[JC] def createBuffer(numOfChannels: Int, length: Int, sampleRate: Int): AudioBuffer
OfflineAudioContext[JC] def createBufferSource(): AudioBufferSourceNode
OfflineAudioContext[JC] def createChannelMerger(numberOfInputs: Int?): ChannelMergerNode
OfflineAudioContext[JC] def createChannelSplitter(numberOfOutputs: Int?): ChannelSplitterNode
OfflineAudioContext[JC] def createConvolver(): ConvolverNode
OfflineAudioContext[JC] def createDelay(maxDelayTime: Int): DelayNode
OfflineAudioContext[JC] def createDynamicsCompressor(): DynamicsCompressorNode
OfflineAudioContext[JC] def createGain(): GainNode
OfflineAudioContext[JC] def createOscillator(): OscillatorNode
OfflineAudioContext[JC] def createPanner(): PannerNode
OfflineAudioContext[JC] def createPeriodicWave(real: js.typedarray.Float32Array, imag: js.typedarray.Float32Array): PeriodicWave
OfflineAudioContext[JC] def createStereoPanner(): StereoPannerNode
OfflineAudioContext[JC] def createWaveShaper(): WaveShaperNode
OfflineAudioContext[JC] def currentTime: Double
OfflineAudioContext[JC] def decodeAudioData(audioData: js.typedarray.ArrayBuffer, successCallback: js.Function1[AudioBuffer, _]?, errorCallback: js.Function0[_]?): js.Promise[AudioBuffer]
OfflineAudioContext[JC] val destination: AudioDestinationNode
OfflineAudioContext[JC] def dispatchEvent(evt: Event): Boolean
OfflineAudioContext[JC] val listener: AudioListener
OfflineAudioContext[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
OfflineAudioContext[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
OfflineAudioContext[JC] val sampleRate: Double
OfflineAudioContext[JC] def startRendering(): js.Promise[AudioBuffer]
OfflineAudioContext[JC] def state: String
OfflineAudioContext[JC] def suspend(suspendTime: Double): js.Promise[Unit]
OffscreenCanvas[JC] def convertToBlob(options: ConvertToBlobOptions?): js.Promise[Blob]
OffscreenCanvas[JC] def getContext(contextType: String): js.Dynamic
OffscreenCanvas[JC] def getContext(contextType: String, contextAttributes: TwoDContextAttributes): js.Dynamic
OffscreenCanvas[JC] def getContext(contextType: String, contextAttributes: WebGLContextAttributes): js.Dynamic
OffscreenCanvas[JC] def transferToImageBitmap(): ImageBitmap
OscillatorNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
OscillatorNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
OscillatorNode[JT] var channelCount: Int
OscillatorNode[JT] var channelCountMode: AudioNodeChannelCountMode
OscillatorNode[JT] var channelInterpretation: AudioNodeChannelInterpretation
OscillatorNode[JT] def connect(audioNode: AudioNode): Unit
OscillatorNode[JT] def connect(audioParam: AudioParam): Unit
OscillatorNode[JT] val context: AudioContext
OscillatorNode[JT] var detune: AudioParam
OscillatorNode[JT] def disconnect(output: AudioNode?): Unit
OscillatorNode[JT] def dispatchEvent(evt: Event): Boolean
OscillatorNode[JT] var frequency: AudioParam
OscillatorNode[JT] val numberOfInputs: Int
OscillatorNode[JT] val numberOfOutputs: Int
OscillatorNode[JT] var onended: js.Function1[Event, _]
OscillatorNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
OscillatorNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
OscillatorNode[JT] def setPeriodicWave(wave: PeriodicWave): Unit
OscillatorNode[JT] def start(): Unit
OscillatorNode[JT] def start(when: Double): Unit
OscillatorNode[JT] def stop(): Unit
OscillatorNode[JT] def stop(when: Double): Unit
OscillatorNode[JT] var `type`: OscillatorNodeType
OscillatorNode[SO] def apply(context: BaseAudioContext, options: js.UndefOr[OscillatorNodeOptions]?): OscillatorNode
OscillatorNodeOptions[JT] var detune: js.UndefOr[Double]
OscillatorNodeOptions[JT] var frequency: js.UndefOr[Double]
OscillatorNodeOptions[JT] var periodicWave: js.UndefOr[PeriodicWave]
OscillatorNodeOptions[JT] var `type`: js.UndefOr[OscillatorNodeType]
OscillatorNodeType[JT]
OscillatorNodeType[SO] val custom: OscillatorNodeType
OscillatorNodeType[SO] val sawtooth: OscillatorNodeType
OscillatorNodeType[SO] val sine: OscillatorNodeType
OscillatorNodeType[SO] val square: OscillatorNodeType
OscillatorNodeType[SO] val triangle: OscillatorNodeType
PageTransitionEvent[JT] def bubbles: Boolean
PageTransitionEvent[JT] def cancelBubble: Boolean
PageTransitionEvent[JT] def cancelable: Boolean
PageTransitionEvent[JT] def composed: Boolean
PageTransitionEvent[JT] def currentTarget: EventTarget
PageTransitionEvent[JT] def defaultPrevented: Boolean
PageTransitionEvent[JT] def eventPhase: Int
PageTransitionEvent[JT] def isTrusted: Boolean
PageTransitionEvent[JT] def persisted: Boolean
PageTransitionEvent[JT] def preventDefault(): Unit
PageTransitionEvent[JT] def stopImmediatePropagation(): Unit
PageTransitionEvent[JT] def stopPropagation(): Unit
PageTransitionEvent[JT] def target: EventTarget
PageTransitionEvent[JT] def timeStamp: Double
PageTransitionEvent[JT] def `type`: String
PageVisibility[JT] def hidden: Boolean
PageVisibility[JT] def visibilityState: VisibilityState | String
PageVisibility[JT] var visibilitychange: js.Function1[Event, _]
PannerNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
PannerNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
PannerNode[JT] var channelCount: Int
PannerNode[JT] var channelCountMode: AudioNodeChannelCountMode
PannerNode[JT] var channelInterpretation: AudioNodeChannelInterpretation
PannerNode[JT] var coneInnerAngle: Double
PannerNode[JT] var coneOuterAngle: Double
PannerNode[JT] var coneOuterGain: Double
PannerNode[JT] def connect(audioNode: AudioNode): Unit
PannerNode[JT] def connect(audioParam: AudioParam): Unit
PannerNode[JT] val context: AudioContext
PannerNode[JT] def disconnect(output: AudioNode?): Unit
PannerNode[JT] def dispatchEvent(evt: Event): Boolean
PannerNode[JT] var distanceModel: String
PannerNode[JT] var maxDistance: Double
PannerNode[JT] val numberOfInputs: Int
PannerNode[JT] val numberOfOutputs: Int
PannerNode[JT] var panningModel: String
PannerNode[JT] var refDistance: Double
PannerNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
PannerNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
PannerNode[JT] var rolloffFactor: Double
PannerNode[JT] def setOrientation(x: Double?, y: Double?, z: Double?): Unit
PannerNode[JT] def setPosition(x: Double?, y: Double?, z: Double?): Unit
PannerNode[JT] def setVelocity(x: Double?, y: Double?, z: Double?): Unit
ParentNode[JT] def childElementCount: Int
ParentNode[JT] def children: HTMLCollection[Element]
ParentNode[JT] def firstElementChild: Element
ParentNode[JT] def lastElementChild: Element
ParentNode[JT] def replaceChildren(nodes: Node | String*): Unit
Path2D[JC] def addPath(path: Path2D): Unit
Path2D[JC] def arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double): Unit
Path2D[JC] def arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, counterclockwise: Boolean): Unit
Path2D[JC] def arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double): Unit
Path2D[JC] def bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double): Unit
Path2D[JC] def closePath(): Unit
Path2D[JC] def ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, counterclockwise: Boolean?): Unit
Path2D[JC] def lineTo(x: Double, y: Double): Unit
Path2D[JC] def moveTo(x: Double, y: Double): Unit
Path2D[JC] def quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double): Unit
Path2D[JC] def rect(x: Double, y: Double, w: Double, h: Double): Unit
Pbkdf2Params[JT] val hash: HashAlgorithmIdentifier
Pbkdf2Params[JT] val iterations: Double
Pbkdf2Params[JT] val name: String
Pbkdf2Params[JT] val salt: BufferSource
Pbkdf2Params[SO] def apply(name: String, salt: BufferSource, iterations: Long, hash: HashAlgorithmIdentifier): Pbkdf2Params  (@deprecated in 2.0.0)
Pbkdf2Params[SO] val hash = hash0
Pbkdf2Params[SO] val iterations = iterations0.toDouble
Pbkdf2Params[SO] val name = name0
Pbkdf2Params[SO] val salt = salt0
Performance[JC] def clearMarks(markName: String?): Unit
Performance[JC] def clearMeasures(measureName: String?): Unit
Performance[JC] def clearResourceTimings(): Unit
Performance[JC] def getEntries(): js.Array[PerformanceEntry]
Performance[JC] def getEntriesByName(name: String, `type`: String?): js.Array[PerformanceEntry]
Performance[JC] def getEntriesByType(entryType: String): js.Array[PerformanceEntry]
Performance[JC] def getMarks(markName: String?): js.Dynamic  (@deprecated in 2.8.0)
Performance[JC] def getMeasures(measureName: String?): js.Dynamic  (@deprecated in 2.8.0)
Performance[JC] def mark(markName: String): PerformanceMark
Performance[JC] def measure(measureName: String, startMarkName: String?, endMarkName: String?): PerformanceMeasure
Performance[JC] def navigation: PerformanceNavigation
Performance[JC] def now(): Double
Performance[JC] def setResourceTimingBufferSize(maxSize: Int): Unit
Performance[JC] def timing: PerformanceTiming
Performance[JC] def toJSON(): js.Object
PerformanceEntry[JC] def duration: Int
PerformanceEntry[JC] def entryType: String
PerformanceEntry[JC] def name: String
PerformanceEntry[JC] def startTime: Double
PerformanceEntry[JC] def toJSON(): js.Object
PerformanceMark[JC] def duration: Int
PerformanceMark[JC] def entryType: String
PerformanceMark[JC] def name: String
PerformanceMark[JC] def startTime: Double
PerformanceMark[JC] def toJSON(): js.Object
PerformanceMeasure[JC] def duration: Int
PerformanceMeasure[JC] def entryType: String
PerformanceMeasure[JC] def name: String
PerformanceMeasure[JC] def startTime: Double
PerformanceMeasure[JC] def toJSON(): js.Object
PerformanceNavigation[JC] def redirectCount: Int
PerformanceNavigation[JC] def toJSON(): js.Dynamic
PerformanceNavigation[JC] def `type`: Int
PerformanceNavigation[JO] val TYPE_BACK_FORWARD: Int
PerformanceNavigation[JO] val TYPE_NAVIGATE: Int
PerformanceNavigation[JO] val TYPE_RELOAD: Int
PerformanceNavigation[JO] val TYPE_RESERVED: Int
PerformanceResourceTiming[JC] def connectEnd: Int
PerformanceResourceTiming[JC] def connectStart: Int
PerformanceResourceTiming[JC] def domainLookupEnd: Int
PerformanceResourceTiming[JC] def domainLookupStart: Int
PerformanceResourceTiming[JC] def duration: Int
PerformanceResourceTiming[JC] def entryType: String
PerformanceResourceTiming[JC] def fetchStart: Int
PerformanceResourceTiming[JC] def initiatorType: String
PerformanceResourceTiming[JC] def name: String
PerformanceResourceTiming[JC] def redirectEnd: Int
PerformanceResourceTiming[JC] def redirectStart: Int
PerformanceResourceTiming[JC] def requestStart: Int
PerformanceResourceTiming[JC] var responseEnd: Int
PerformanceResourceTiming[JC] def responseStart: Int
PerformanceResourceTiming[JC] def startTime: Double
PerformanceResourceTiming[JC] def toJSON(): js.Object
PerformanceTiming[JC] def connectEnd: Double
PerformanceTiming[JC] def connectStart: Double
PerformanceTiming[JC] def domComplete: Double
PerformanceTiming[JC] def domContentLoadedEventEnd: Double
PerformanceTiming[JC] def domContentLoadedEventStart: Double
PerformanceTiming[JC] def domInteractive: Double
PerformanceTiming[JC] def domLoading: Double
PerformanceTiming[JC] def domainLookupEnd: Double
PerformanceTiming[JC] def domainLookupStart: Double
PerformanceTiming[JC] def fetchStart: Double
PerformanceTiming[JC] def loadEventEnd: Double
PerformanceTiming[JC] def loadEventStart: Double
PerformanceTiming[JC] def navigationStart: Double
PerformanceTiming[JC] def redirectEnd: Double
PerformanceTiming[JC] def redirectStart: Double
PerformanceTiming[JC] def requestStart: Double
PerformanceTiming[JC] def responseEnd: Double
PerformanceTiming[JC] def responseStart: Double
PerformanceTiming[JC] def toJSON(): js.Dynamic
PerformanceTiming[JC] def unloadEventEnd: Double
PerformanceTiming[JC] def unloadEventStart: Double
PeriodicWave[JT]
PermissionDescriptor[JT] val name: PermissionName
PermissionDescriptor[SO] def apply(permissionName: PermissionName): PermissionDescriptor  (@deprecated in 2.0.0)
PermissionDescriptor[SO] val name = permissionName  (@deprecated in 2.0.0)
PermissionName[JT]
PermissionName[SO] val geolocation: PermissionName
PermissionName[SO] val midi: PermissionName
PermissionName[SO] val notifications: PermissionName
PermissionName[SO] val `persistent-storage` = "persistent-storage".asInstanceOf[PermissionName]
PermissionName[SO] val push: PermissionName
PermissionState[JT]
PermissionState[SO] val denied: PermissionState
PermissionState[SO] val granted: PermissionState
PermissionState[SO] val prompt: PermissionState
PermissionStatus[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
PermissionStatus[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
PermissionStatus[JT] def dispatchEvent(evt: Event): Boolean
PermissionStatus[JT] var onchange: js.Function1[Event, _]
PermissionStatus[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
PermissionStatus[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
PermissionStatus[JT] val state: PermissionState
Permissions[JT] def query(permissionDescriptor: PermissionDescriptor): js.Promise[PermissionStatus]
PointerEvent[JC] def altKey: Boolean
PointerEvent[JC] def bubbles: Boolean
PointerEvent[JC] def button: Int
PointerEvent[JC] def buttons: Int
PointerEvent[JC] def cancelBubble: Boolean
PointerEvent[JC] def cancelable: Boolean
PointerEvent[JC] def clientX: Double
PointerEvent[JC] def clientY: Double
PointerEvent[JC] def composed: Boolean
PointerEvent[JC] def ctrlKey: Boolean
PointerEvent[JC] def currentTarget: EventTarget
PointerEvent[JC] def defaultPrevented: Boolean
PointerEvent[JC] def detail: Int
PointerEvent[JC] def eventPhase: Int
PointerEvent[JC] def getModifierState(keyArg: String): Boolean
PointerEvent[JC] def height: Double
PointerEvent[JC] def isPrimary: Boolean
PointerEvent[JC] def isTrusted: Boolean
PointerEvent[JC] def metaKey: Boolean
PointerEvent[JC] def movementX: Double
PointerEvent[JC] def movementY: Double
PointerEvent[JC] def pageX: Double
PointerEvent[JC] def pageY: Double
PointerEvent[JC] def pointerId: Double
PointerEvent[JC] def pointerType: String
PointerEvent[JC] def pressure: Double
PointerEvent[JC] def preventDefault(): Unit
PointerEvent[JC] def relatedTarget: EventTarget
PointerEvent[JC] def screenX: Double
PointerEvent[JC] def screenY: Double
PointerEvent[JC] def shiftKey: Boolean
PointerEvent[JC] def stopImmediatePropagation(): Unit
PointerEvent[JC] def stopPropagation(): Unit
PointerEvent[JC] def tangentialPressure: Double
PointerEvent[JC] def target: EventTarget
PointerEvent[JC] def tiltX: Double
PointerEvent[JC] def tiltY: Double
PointerEvent[JC] def timeStamp: Double
PointerEvent[JC] def twist: Double
PointerEvent[JC] def `type`: String
PointerEvent[JC] def view: Window
PointerEvent[JC] def width: Double
PointerEventInit[JT] var altKey: js.UndefOr[Boolean]
PointerEventInit[JT] var bubbles: js.UndefOr[Boolean]
PointerEventInit[JT] var button: js.UndefOr[Int]
PointerEventInit[JT] var buttons: js.UndefOr[Int]
PointerEventInit[JT] var cancelable: js.UndefOr[Boolean]
PointerEventInit[JT] var clientX: js.UndefOr[Double]
PointerEventInit[JT] var clientY: js.UndefOr[Double]
PointerEventInit[JT] var composed: js.UndefOr[Boolean]
PointerEventInit[JT] var ctrlKey: js.UndefOr[Boolean]
PointerEventInit[JT] var detail: js.UndefOr[Int]
PointerEventInit[JT] var height: js.UndefOr[Double]
PointerEventInit[JT] var isPrimary: js.UndefOr[Boolean]
PointerEventInit[JT] var metaKey: js.UndefOr[Boolean]
PointerEventInit[JT] var pageX: js.UndefOr[Double]
PointerEventInit[JT] var pageY: js.UndefOr[Double]
PointerEventInit[JT] var pointerId: js.UndefOr[Double]
PointerEventInit[JT] var pointerType: js.UndefOr[String]
PointerEventInit[JT] var pressure: js.UndefOr[Double]
PointerEventInit[JT] var relatedTarget: js.UndefOr[EventTarget]
PointerEventInit[JT] var scoped: js.UndefOr[Boolean]
PointerEventInit[JT] var screenX: js.UndefOr[Double]
PointerEventInit[JT] var screenY: js.UndefOr[Double]
PointerEventInit[JT] var shiftKey: js.UndefOr[Boolean]
PointerEventInit[JT] var tangentialPressure: js.UndefOr[Double]
PointerEventInit[JT] var tiltX: js.UndefOr[Double]
PointerEventInit[JT] var tiltY: js.UndefOr[Double]
PointerEventInit[JT] var twist: js.UndefOr[Double]
PointerEventInit[JT] var view: js.UndefOr[Window]
PointerEventInit[JT] var width: js.UndefOr[Double]
PopStateEvent[JT] def bubbles: Boolean
PopStateEvent[JT] def cancelBubble: Boolean
PopStateEvent[JT] def cancelable: Boolean
PopStateEvent[JT] def composed: Boolean
PopStateEvent[JT] def currentTarget: EventTarget
PopStateEvent[JT] def defaultPrevented: Boolean
PopStateEvent[JT] def eventPhase: Int
PopStateEvent[JT] def isTrusted: Boolean
PopStateEvent[JT] def preventDefault(): Unit
PopStateEvent[JT] def state: js.Any
PopStateEvent[JT] def stopImmediatePropagation(): Unit
PopStateEvent[JT] def stopPropagation(): Unit
PopStateEvent[JT] def target: EventTarget
PopStateEvent[JT] def timeStamp: Double
PopStateEvent[JT] def `type`: String
Position[JT] def coords: Coordinates
Position[JT] def timestamp: Double
PositionError[JO] val PERMISSION_DENIED: Int
PositionError[JO] val POSITION_UNAVAILABLE: Int
PositionError[JO] val TIMEOUT: Int
PositionError[JT] def code: Int
PositionError[JT] def message: String
PositionOptions[JC] var enableHighAccuracy: Boolean
PositionOptions[JC] var maximumAge: Int
PositionOptions[JC] var timeout: Int
PredefinedColorSpace[JT]
PredefinedColorSpace[SO] val `display-p3`: PredefinedColorSpace
PredefinedColorSpace[SO] val srgb: PredefinedColorSpace
PresentationStyle[JT]
PresentationStyle[SO] val attachment: PresentationStyle
PresentationStyle[SO] val inline: PresentationStyle
PresentationStyle[SO] val unspecified: PresentationStyle
ProcessingInstruction[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ProcessingInstruction[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ProcessingInstruction[JC] def appendChild(newChild: Node): Node
ProcessingInstruction[JC] def baseURI: String
ProcessingInstruction[JC] def childNodes: NodeList[Node]
ProcessingInstruction[JC] def cloneNode(deep: Boolean?): Node
ProcessingInstruction[JC] def compareDocumentPosition(other: Node): Int
ProcessingInstruction[JC] def contains(otherNode: Node): Boolean
ProcessingInstruction[JC] def data: String
ProcessingInstruction[JC] def dispatchEvent(evt: Event): Boolean
ProcessingInstruction[JC] def firstChild: Node
ProcessingInstruction[JC] def hasChildNodes(): Boolean
ProcessingInstruction[JC] var innerText: String
ProcessingInstruction[JC] def insertBefore(newChild: Node, refChild: Node): Node
ProcessingInstruction[JC] def isConnected: Boolean
ProcessingInstruction[JC] def isDefaultNamespace(namespaceURI: String): Boolean
ProcessingInstruction[JC] def isEqualNode(arg: Node): Boolean
ProcessingInstruction[JC] def isSameNode(other: Node): Boolean
ProcessingInstruction[JC] def isSupported(feature: String, version: String): Boolean
ProcessingInstruction[JC] def lastChild: Node
ProcessingInstruction[JC] def localName: String
ProcessingInstruction[JC] def lookupNamespaceURI(prefix: String): String
ProcessingInstruction[JC] def lookupPrefix(namespaceURI: String): String
ProcessingInstruction[JC] def namespaceURI: String
ProcessingInstruction[JC] def nextSibling: Node
ProcessingInstruction[JC] def nodeName: String
ProcessingInstruction[JC] def nodeType: Int
ProcessingInstruction[JC] var nodeValue: String
ProcessingInstruction[JC] def normalize(): Unit
ProcessingInstruction[JC] def ownerDocument: Document
ProcessingInstruction[JC] def parentNode: Node
ProcessingInstruction[JC] def previousSibling: Node
ProcessingInstruction[JC] def removeChild(oldChild: Node): Node
ProcessingInstruction[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ProcessingInstruction[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ProcessingInstruction[JC] def replaceChild(newChild: Node, oldChild: Node): Node
ProcessingInstruction[JC] def target: String
ProcessingInstruction[JC] var textContent: String
ProgressEvent[JT] def bubbles: Boolean
ProgressEvent[JT] def cancelBubble: Boolean
ProgressEvent[JT] def cancelable: Boolean
ProgressEvent[JT] def composed: Boolean
ProgressEvent[JT] def currentTarget: EventTarget
ProgressEvent[JT] def defaultPrevented: Boolean
ProgressEvent[JT] def eventPhase: Int
ProgressEvent[JT] def isTrusted: Boolean
ProgressEvent[JT] def lengthComputable: Boolean
ProgressEvent[JT] def loaded: Double
ProgressEvent[JT] def preventDefault(): Unit
ProgressEvent[JT] def stopImmediatePropagation(): Unit
ProgressEvent[JT] def stopPropagation(): Unit
ProgressEvent[JT] def target: EventTarget
ProgressEvent[JT] def timeStamp: Double
ProgressEvent[JT] def total: Double
ProgressEvent[JT] def `type`: String
PushEncryptionKeyName[JT]
PushEncryptionKeyName[SO] val auth: PushEncryptionKeyName
PushEncryptionKeyName[SO] val p256dh: PushEncryptionKeyName
PushEvent[JT] def bubbles: Boolean
PushEvent[JT] def cancelBubble: Boolean
PushEvent[JT] def cancelable: Boolean
PushEvent[JT] def composed: Boolean
PushEvent[JT] def currentTarget: EventTarget
PushEvent[JT] val data: PushMessageData
PushEvent[JT] def defaultPrevented: Boolean
PushEvent[JT] def eventPhase: Int
PushEvent[JT] def isTrusted: Boolean
PushEvent[JT] def preventDefault(): Unit
PushEvent[JT] def stopImmediatePropagation(): Unit
PushEvent[JT] def stopPropagation(): Unit
PushEvent[JT] def target: EventTarget
PushEvent[JT] def timeStamp: Double
PushEvent[JT] def `type`: String
PushEvent[JT] def waitUntil(promise: js.Promise[Any]): Unit
PushManager[JT] def getSubscription(): js.Promise[PushSubscription]
PushManager[JT] def permissionState(options: PushSubscriptionOptions?): js.Promise[PushPermissionState]
PushManager[JT] def subscribe(options: PushSubscriptionOptions?): js.Promise[PushSubscription]
PushMessageData[JT] def arrayBuffer(): ArrayBuffer
PushMessageData[JT] def blob(): Blob
PushMessageData[JT] def json(): js.Any
PushMessageData[JT] def text(): String
PushPermissionDescriptor[JT] val name: PermissionName
PushPermissionDescriptor[JT] val userVisibleOnly: Boolean
PushPermissionDescriptor[SO] def apply(permissionUserVisibleOnly: Boolean): PushPermissionDescriptor  (@deprecated in 2.0.0)
PushPermissionDescriptor[SO] val name = PermissionName.push  (@deprecated in 2.0.0)
PushPermissionDescriptor[SO] val userVisibleOnly = permissionUserVisibleOnly  (@deprecated in 2.0.0)
PushPermissionState[JT]
PushPermissionState[SO] val denied: PushPermissionState
PushPermissionState[SO] val granted: PushPermissionState
PushPermissionState[SO] val prompt: PushPermissionState
PushSubscription[JT] val endpoint: String
PushSubscription[JT] val expirationTime: java.lang.Double
PushSubscription[JT] def getKey(name: PushEncryptionKeyName): ArrayBuffer
PushSubscription[JT] val options: PushSubscriptionOptions
PushSubscription[JT] def toJSON(): PushSubscriptionJSON
PushSubscription[JT] def unsubscribe(): js.Promise[Boolean]
PushSubscriptionJSON[JT] val endpoint: String
PushSubscriptionJSON[JT] val expirationTime: java.lang.Double
PushSubscriptionJSON[JT] val keys: js.Dictionary[String]
PushSubscriptionOptions[JT] var applicationServerKey: js.UndefOr[Uint8Array]
PushSubscriptionOptions[JT] var userVisibleOnly: js.UndefOr[Boolean]
QueuingStrategy[JT] var highWaterMark: Int
QueuingStrategy[JT] var size: js.Function1[T, Int]
RTCBundlePolicy[JT]
RTCBundlePolicy[SO] val balanced: RTCBundlePolicy
RTCBundlePolicy[SO] val `max-bundle` = "max-bundle".asInstanceOf[RTCBundlePolicy]
RTCBundlePolicy[SO] val `max-compat` = "max-compat".asInstanceOf[RTCBundlePolicy]
RTCConfiguration[JT] var bundlePolicy: js.UndefOr[RTCBundlePolicy]
RTCConfiguration[JT] var iceServers: js.UndefOr[js.Array[RTCIceServer]]
RTCConfiguration[JT] var iceTransportPolicy: js.UndefOr[RTCIceTransportPolicy]
RTCConfiguration[JT] var peerIdentity: js.UndefOr[String]
RTCConfiguration[SO] def apply(iceServers: js.UndefOr[js.Array[RTCIceServer]]?, iceTransportPolicy: js.UndefOr[RTCIceTransportPolicy]?, bundlePolicy: js.UndefOr[RTCBundlePolicy]?, peerIdentity: js.UndefOr[String]?): RTCConfiguration  (@deprecated in 2.0.0)
RTCDTMFSender[JT] val canInsertDTMF: Boolean
RTCDTMFSender[JT] val duration: Double
RTCDTMFSender[JT] def insertDTMF(tones: String?, duration: Double?, interToneGap: Double?): Unit
RTCDTMFSender[JT] val interToneGap: Double
RTCDTMFSender[JT] var ontonechange: js.Function1[Event, Any]
RTCDTMFSender[JT] val toneBuffer: String
RTCDTMFSender[JT] val track: MediaStreamTrack
RTCDataChannel[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
RTCDataChannel[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
RTCDataChannel[JT] var binaryType: String
RTCDataChannel[JT] def bufferedAmount: Double
RTCDataChannel[JT] def close(): Unit
RTCDataChannel[JT] def dispatchEvent(evt: Event): Boolean
RTCDataChannel[JT] val id: Double
RTCDataChannel[JT] val label: String
RTCDataChannel[JT] val maxPacketLifeTime: Double
RTCDataChannel[JT] val maxRetransmits: Double
RTCDataChannel[JT] val negotiated: Boolean
RTCDataChannel[JT] var onclose: js.Function1[Event, Any]
RTCDataChannel[JT] var onerror: js.Function1[Event, Any]
RTCDataChannel[JT] var onmessage: js.Function1[MessageEvent, Any]
RTCDataChannel[JT] var onopen: js.Function1[Event, Any]
RTCDataChannel[JT] val ordered: Boolean
RTCDataChannel[JT] val protocol: String
RTCDataChannel[JT] def readyState: RTCDataChannelState
RTCDataChannel[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
RTCDataChannel[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
RTCDataChannel[JT] def send(data: String | Blob | ArrayBuffer | ArrayBufferView): Unit
RTCDataChannelEvent[JC] def bubbles: Boolean
RTCDataChannelEvent[JC] def cancelBubble: Boolean
RTCDataChannelEvent[JC] def cancelable: Boolean
RTCDataChannelEvent[JC] val channel: RTCDataChannel
RTCDataChannelEvent[JC] def composed: Boolean
RTCDataChannelEvent[JC] def currentTarget: EventTarget
RTCDataChannelEvent[JC] def defaultPrevented: Boolean
RTCDataChannelEvent[JC] def eventPhase: Int
RTCDataChannelEvent[JC] def isTrusted: Boolean
RTCDataChannelEvent[JC] def preventDefault(): Unit
RTCDataChannelEvent[JC] def stopImmediatePropagation(): Unit
RTCDataChannelEvent[JC] def stopPropagation(): Unit
RTCDataChannelEvent[JC] def target: EventTarget
RTCDataChannelEvent[JC] def timeStamp: Double
RTCDataChannelEvent[JC] def `type`: String
RTCDataChannelEventInit[JT] var bubbles: js.UndefOr[Boolean]
RTCDataChannelEventInit[JT] var cancelable: js.UndefOr[Boolean]
RTCDataChannelEventInit[JT] var channel: js.UndefOr[RTCDataChannel]
RTCDataChannelEventInit[JT] var composed: js.UndefOr[Boolean]
RTCDataChannelEventInit[JT] var scoped: js.UndefOr[Boolean]
RTCDataChannelInit[JT] var id: js.UndefOr[Double]
RTCDataChannelInit[JT] var maxPacketLifeTime: js.UndefOr[Double]
RTCDataChannelInit[JT] var maxRetransmits: js.UndefOr[Double]
RTCDataChannelInit[JT] var negotiated: js.UndefOr[Boolean]
RTCDataChannelInit[JT] var ordered: js.UndefOr[Boolean]
RTCDataChannelInit[JT] var protocol: js.UndefOr[String]
RTCDataChannelInit[SO] def apply(ordered: js.UndefOr[Boolean]?, maxPacketLifeTime: js.UndefOr[Double]?, maxRetransmits: js.UndefOr[Double]?, protocol: js.UndefOr[String]?, negotiated: js.UndefOr[Boolean]?, id: js.UndefOr[Double]?): RTCDataChannelInit  (@deprecated in 2.0.0)
RTCDataChannelState[JT]
RTCDataChannelState[SO] val closed: RTCDataChannelState
RTCDataChannelState[SO] val closing: RTCDataChannelState
RTCDataChannelState[SO] val connecting: RTCDataChannelState
RTCDataChannelState[SO] val open: RTCDataChannelState
RTCIceCandidate[JC] var candidate: String
RTCIceCandidate[JC] var sdpMLineIndex: Double
RTCIceCandidate[JC] var sdpMid: String
RTCIceCandidateInit[JT] var candidate: js.UndefOr[String]
RTCIceCandidateInit[JT] var sdpMLineIndex: js.UndefOr[Double]
RTCIceCandidateInit[JT] var sdpMid: js.UndefOr[String]
RTCIceCandidateInit[SO] def apply(candidate: js.UndefOr[String]?, sdpMid: js.UndefOr[String]?, sdpMLineIndex: js.UndefOr[Double]?): RTCIceCandidateInit  (@deprecated in 2.0.0)
RTCIceConnectionState[JT]
RTCIceConnectionState[SO] val checking: RTCIceConnectionState
RTCIceConnectionState[SO] val closed: RTCIceConnectionState
RTCIceConnectionState[SO] val completed: RTCIceConnectionState
RTCIceConnectionState[SO] val connected: RTCIceConnectionState
RTCIceConnectionState[SO] val disconnected: RTCIceConnectionState
RTCIceConnectionState[SO] val failed: RTCIceConnectionState
RTCIceConnectionState[SO] val `new`: RTCIceConnectionState
RTCIceGatheringState[JT]
RTCIceGatheringState[SO] val complete: RTCIceGatheringState
RTCIceGatheringState[SO] val gathering: RTCIceGatheringState
RTCIceGatheringState[SO] val `new`: RTCIceGatheringState
RTCIceServer[JT] var credential: js.UndefOr[String]
RTCIceServer[JT] var urls: js.UndefOr[String | js.Array[String]]
RTCIceServer[JT] var username: js.UndefOr[String]
RTCIceServer[SO] def apply(urls: js.UndefOr[String | js.Array[String]]?, username: js.UndefOr[String]?, credential: js.UndefOr[String]?): RTCIceServer  (@deprecated in 2.0.0)
RTCIceTransportPolicy[JT]
RTCIceTransportPolicy[SO] val all: RTCIceTransportPolicy
RTCIceTransportPolicy[SO] val none: RTCIceTransportPolicy
RTCIceTransportPolicy[SO] val relay: RTCIceTransportPolicy
RTCIdentityAssertion[JT] val idp: String
RTCIdentityAssertion[JT] val name: String
RTCIdentityAssertion[SO] def apply(idp: js.UndefOr[String]?, name: js.UndefOr[String]?): RTCIdentityAssertion  (@deprecated in 2.0.0)
RTCOfferOptions[JT] var iceRestart: js.UndefOr[Boolean]
RTCOfferOptions[JT] var offerToReceiveAudio: js.UndefOr[Double]
RTCOfferOptions[JT] var offerToReceiveVideo: js.UndefOr[Double]
RTCOfferOptions[JT] var voiceActivityDetection: js.UndefOr[Boolean]
RTCOfferOptions[SO] def apply(iceRestart: js.UndefOr[Boolean]?, offerToReceiveAudio: js.UndefOr[Double]?, offerToReceiveVideo: js.UndefOr[Double]?, voiceActivityDetection: js.UndefOr[Boolean]?): RTCOfferOptions  (@deprecated in 2.0.0)
RTCPeerConnection[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
RTCPeerConnection[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
RTCPeerConnection[JC] def addIceCandidate(candidate: RTCIceCandidate): js.Promise[Unit]
RTCPeerConnection[JC] def addStream(stream: MediaStream): Unit
RTCPeerConnection[JC] val canTrickleIceCandidates: js.Any
RTCPeerConnection[JC] def close(): Unit
RTCPeerConnection[JC] def createAnswer(): js.Promise[RTCSessionDescription]
RTCPeerConnection[JC] def createDTMFSender(track: MediaStreamTrack): RTCDTMFSender
RTCPeerConnection[JC] def createDataChannel(label: String, dataChannelDict: RTCDataChannelInit): RTCDataChannel
RTCPeerConnection[JC] def createOffer(options: RTCOfferOptions?): js.Promise[RTCSessionDescription]
RTCPeerConnection[JC] def dispatchEvent(evt: Event): Boolean
RTCPeerConnection[JC] def getConfiguration(): RTCConfiguration
RTCPeerConnection[JC] def getIdentityAssertion(): js.Promise[Unit]
RTCPeerConnection[JC] def getLocalStreams(): js.Array[MediaStream]
RTCPeerConnection[JC] def getRemoteStreams(): js.Array[MediaStream]
RTCPeerConnection[JC] def getStats(selector: MediaStreamTrack, callback: js.Function1[RTCStatsReport, Any], error: js.Function1[DOMException, Any]): RTCStatsReport
RTCPeerConnection[JC] def getStreamById(id: String): MediaStream
RTCPeerConnection[JC] def iceConnectionState: RTCIceConnectionState
RTCPeerConnection[JC] def iceGatheringState: RTCIceGatheringState
RTCPeerConnection[JC] def localDescription: RTCSessionDescription
RTCPeerConnection[JC] var ondatachannel: js.Function1[RTCDataChannelEvent, Any]
RTCPeerConnection[JC] var onicecandidate: js.Function1[RTCPeerConnectionIceEvent, Any]
RTCPeerConnection[JC] var oniceconnectionstatechange: js.Function1[Event, Any]
RTCPeerConnection[JC] var onidentityresult: js.Function1[Event, Any]
RTCPeerConnection[JC] var onidpassertionerror: js.Function1[Event, Any]
RTCPeerConnection[JC] var onidpvalidationerror: js.Function1[Event, Any]
RTCPeerConnection[JC] var onnegotiationneeded: js.Function1[Event, Any]
RTCPeerConnection[JC] var onpeeridentity: js.Function1[Event, Any]
RTCPeerConnection[JC] var onremovetrack: js.Function1[MediaStreamTrackEvent, Any]
RTCPeerConnection[JC] var onsignalingstatechange: js.Function1[Event, Any]
RTCPeerConnection[JC] var ontrack: js.Function1[MediaStreamTrackEvent, Any]
RTCPeerConnection[JC] val peerIdentity: RTCIdentityAssertion
RTCPeerConnection[JC] def remoteDescription: RTCSessionDescription
RTCPeerConnection[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
RTCPeerConnection[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
RTCPeerConnection[JC] def removeStream(stream: MediaStream): Unit
RTCPeerConnection[JC] def setIdentityProvider(provider: String, protocol: String?, usernameHint: String?): Unit
RTCPeerConnection[JC] def setLocalDescription(description: RTCSessionDescription): js.Promise[Unit]
RTCPeerConnection[JC] def setRemoteDescription(description: RTCSessionDescription): js.Promise[Unit]
RTCPeerConnection[JC] def signalingState: RTCSignalingState
RTCPeerConnection[JC] def updateIce(configuration: RTCConfiguration): Unit
RTCPeerConnectionIceEvent[JC] def bubbles: Boolean
RTCPeerConnectionIceEvent[JC] def cancelBubble: Boolean
RTCPeerConnectionIceEvent[JC] def cancelable: Boolean
RTCPeerConnectionIceEvent[JC] var candidate: RTCIceCandidate
RTCPeerConnectionIceEvent[JC] def composed: Boolean
RTCPeerConnectionIceEvent[JC] def currentTarget: EventTarget
RTCPeerConnectionIceEvent[JC] def defaultPrevented: Boolean
RTCPeerConnectionIceEvent[JC] def eventPhase: Int
RTCPeerConnectionIceEvent[JC] def isTrusted: Boolean
RTCPeerConnectionIceEvent[JC] def preventDefault(): Unit
RTCPeerConnectionIceEvent[JC] def stopImmediatePropagation(): Unit
RTCPeerConnectionIceEvent[JC] def stopPropagation(): Unit
RTCPeerConnectionIceEvent[JC] def target: EventTarget
RTCPeerConnectionIceEvent[JC] def timeStamp: Double
RTCPeerConnectionIceEvent[JC] def `type`: String
RTCPeerConnectionIceEventInit[JT] var bubbles: js.UndefOr[Boolean]
RTCPeerConnectionIceEventInit[JT] var cancelable: js.UndefOr[Boolean]
RTCPeerConnectionIceEventInit[JT] var candidate: js.UndefOr[RTCIceCandidate]
RTCPeerConnectionIceEventInit[JT] var composed: js.UndefOr[Boolean]
RTCPeerConnectionIceEventInit[JT] var scoped: js.UndefOr[Boolean]
RTCSdpType[JT]
RTCSdpType[SO] val answer: RTCSdpType
RTCSdpType[SO] val offer: RTCSdpType
RTCSdpType[SO] val pranswer: RTCSdpType
RTCSessionDescription[JC] var sdp: String
RTCSessionDescription[JC] var `type`: RTCSdpType
RTCSessionDescriptionInit[JT] var sdp: js.UndefOr[String]
RTCSessionDescriptionInit[JT] var `type`: js.UndefOr[RTCSdpType]
RTCSessionDescriptionInit[SO] def apply(`type`: js.UndefOr[RTCSdpType]?, sdp: js.UndefOr[String]?): RTCSessionDescriptionInit  (@deprecated in 2.0.0)
RTCSignalingState[JT]
RTCSignalingState[SO] val closed: RTCSignalingState
RTCSignalingState[SO] val `have-local-offer` = "have-local-offer".asInstanceOf[RTCSignalingState]
RTCSignalingState[SO] val `have-local-pranswer` = "have-local-pranswer".asInstanceOf[RTCSignalingState]
RTCSignalingState[SO] val `have-remote-offer` = "have-remote-offer".asInstanceOf[RTCSignalingState]
RTCSignalingState[SO] val `have-remote-pranswer` = "have-remote-pranswer".asInstanceOf[RTCSignalingState]
RTCSignalingState[SO] val stable: RTCSignalingState
RTCStats[JT] val id: String
RTCStats[JT] val timestamp: Double
RTCStats[JT] val `type`: RTCStatsType
RTCStatsReport[JT] @JSBracketAccess def apply(index: K): V
RTCStatsReport[JT] def entries(): js.Iterator[js.Tuple2[K, V]]
RTCStatsReport[JT] def forEach(callbackFn: js.Function2[V, K, Unit]): Unit
RTCStatsReport[JT] def has(key: K): Boolean
RTCStatsReport[JT] @JSName(js.Symbol.iterator) override def jsIterator(): js.Iterator[js.Tuple2[K, V]]
RTCStatsReport[JT] def keys(): js.Iterator[K]
RTCStatsReport[JT] def size: Int
RTCStatsReport[JT] def values(): js.Iterator[V]
RTCStatsType[JT]
RTCStatsType[SO] val `inbound-rtp` = "inbound-rtp".asInstanceOf[RTCStatsType]
RTCStatsType[SO] val `outbound-rtp` = "outbound-rtp".asInstanceOf[RTCStatsType]
RadioNodeList[JC] @JSBracketAccess def apply(index: Int): T
RadioNodeList[JC] def item(index: Int): T
RadioNodeList[JC] def length: Int
RadioNodeList[JC] def value: String
Range[JC] def cloneContents(): DocumentFragment
Range[JC] def cloneRange(): Range
Range[JC] def collapse(toStart: Boolean): Unit
Range[JC] def collapsed: Boolean
Range[JC] def commonAncestorContainer: Node
Range[JC] def compareBoundaryPoints(how: Int, sourceRange: Range): Int
Range[JC] def createContextualFragment(fragment: String): DocumentFragment
Range[JC] def deleteContents(): Unit
Range[JC] def detach(): Unit
Range[JC] def endContainer: Node
Range[JC] def endOffset: Int
Range[JC] def extractContents(): DocumentFragment
Range[JC] def getBoundingClientRect(): DOMRect
Range[JC] def getClientRects(): DOMRectList
Range[JC] def insertNode(newNode: Node): Unit
Range[JC] def selectNode(refNode: Node): Unit
Range[JC] def selectNodeContents(refNode: Node): Unit
Range[JC] def setEnd(refNode: Node, offset: Int): Unit
Range[JC] def setEndAfter(refNode: Node): Unit
Range[JC] def setEndBefore(refNode: Node): Unit
Range[JC] def setStart(refNode: Node, offset: Int): Unit
Range[JC] def setStartAfter(refNode: Node): Unit
Range[JC] def setStartBefore(refNode: Node): Unit
Range[JC] def startContainer: Node
Range[JC] def startOffset: Int
Range[JC] def surroundContents(newParent: Node): Unit
Range[JO] val END_TO_END: Int
Range[JO] val END_TO_START: Int
Range[JO] val START_TO_END: Int
Range[JO] val START_TO_START: Int
ReadOnlyMapLike[JT] @JSBracketAccess def apply(index: K): V
ReadOnlyMapLike[JT] def entries(): js.Iterator[js.Tuple2[K, V]]
ReadOnlyMapLike[JT] def forEach(callbackFn: js.Function2[V, K, Unit]): Unit
ReadOnlyMapLike[JT] def has(key: K): Boolean
ReadOnlyMapLike[JT] @JSName(js.Symbol.iterator) override def jsIterator(): js.Iterator[js.Tuple2[K, V]]
ReadOnlyMapLike[JT] def keys(): js.Iterator[K]
ReadOnlyMapLike[JT] def size: Int
ReadOnlyMapLike[JT] def values(): js.Iterator[V]
ReadableStream[JT] def cancel(reason: js.UndefOr[Any]?): js.Promise[Unit]
ReadableStream[JT] def getReader(): ReadableStreamReader[T]
ReadableStream[JT] def locked: Boolean
ReadableStream[JT] def pipeThrough[U](pair: Any, options: Any?): ReadableStream[U]
ReadableStream[JT] def pipeTo(dest: WriteableStream[T], options: Any?): js.Promise[Unit]
ReadableStream[JT] def tee(): js.Array[_ <: ReadableStream[T]]
ReadableStream[SO] def apply[T](underlyingSource: js.UndefOr[ReadableStreamUnderlyingSource[T]]?, queuingStrategy: js.UndefOr[QueuingStrategy[T]]?): ReadableStream[T]
ReadableStreamController[JC] def close(): Unit
ReadableStreamController[JC] def desiredSize: Int
ReadableStreamController[JC] def enqueue(): Unit
ReadableStreamController[JC] def enqueue(chunk: T): Unit
ReadableStreamController[JC] def error(e: Any): Unit
ReadableStreamReader[JC] def cancel(): js.Promise[Unit]
ReadableStreamReader[JC] def cancel(reason: Any): js.Promise[Unit]
ReadableStreamReader[JC] def closed: js.Promise[ReadableStreamReader[T]]
ReadableStreamReader[JC] def read(): js.Promise[Chunk[T]]
ReadableStreamReader[JC] def releaseLock(): Unit
ReadableStreamType[JT]
ReadableStreamType[SO] val bytes: ReadableStreamType
ReadableStreamUnderlyingSource[JT] var autoAllocateChunkSize: js.UndefOr[Int]
ReadableStreamUnderlyingSource[JT] var cancel: js.UndefOr[js.Function1[js.Any, js.UndefOr[js.Promise[Unit]]]]
ReadableStreamUnderlyingSource[JT] var pull: js.UndefOr[js.Function1[ReadableStreamController[T], js.UndefOr[js.Promise[Unit]]]]
ReadableStreamUnderlyingSource[JT] var start: js.UndefOr[js.Function1[ReadableStreamController[T], js.UndefOr[js.Promise[Unit]]]]
ReadableStreamUnderlyingSource[JT] var `type`: js.UndefOr[ReadableStreamType]
ReferrerPolicy[JT]
ReferrerPolicy[SO] val empty: ReferrerPolicy
ReferrerPolicy[SO] val `no-referrer` = "no-referrer".asInstanceOf[ReferrerPolicy]
ReferrerPolicy[SO] val `no-referrer-when-downgrade` = "no-referrer-when-downgrade".asInstanceOf[ReferrerPolicy]
ReferrerPolicy[SO] val `origin-only` = "origin-only".asInstanceOf[ReferrerPolicy]
ReferrerPolicy[SO] val `origin-when-cross-origin` = "origin-when-cross-origin".asInstanceOf[ReferrerPolicy]
ReferrerPolicy[SO] val `unsafe-url` = "unsafe-url".asInstanceOf[ReferrerPolicy]
Request[JC] def arrayBuffer(): js.Promise[ArrayBuffer]
Request[JC] def blob(): js.Promise[Blob]
Request[JC] def bodyUsed: Boolean
Request[JC] def cache: RequestCache
Request[JC] def credentials: RequestCredentials
Request[JC] def destination: RequestDestination
Request[JC] def formData(): js.Promise[FormData]
Request[JC] def headers: Headers
Request[JC] def integrity: String
Request[JC] def json(): js.Promise[js.Any]
Request[JC] def keepalive: Boolean
Request[JC] @JSName("type") def mediaType: RequestType
Request[JC] def method: HttpMethod
Request[JC] def mode: RequestMode
Request[JC] def redirect: RequestRedirect
Request[JC] def referrer: String
Request[JC] def referrerPolicy: ReferrerPolicy
Request[JC] def signal: AbortSignal
Request[JC] def text(): js.Promise[String]
Request[JC] def url: String
RequestCache[JT]
RequestCache[SO] val default: RequestCache
RequestCache[SO] val `force-cache` = "force-cache".asInstanceOf[RequestCache]
RequestCache[SO] val `no-cache` = "no-cache".asInstanceOf[RequestCache]
RequestCache[SO] val `no-store` = "no-store".asInstanceOf[RequestCache]
RequestCache[SO] val `only-if-cached` = "only-if-cached".asInstanceOf[RequestCache]
RequestCache[SO] val reload: RequestCache
RequestCredentials[JT]
RequestCredentials[SO] val include: RequestCredentials
RequestCredentials[SO] val omit: RequestCredentials
RequestCredentials[SO] val `same-origin` = "same-origin".asInstanceOf[RequestCredentials]
RequestDestination[JT]
RequestDestination[SO] val document: RequestDestination
RequestDestination[SO] val empty: RequestDestination
RequestDestination[SO] val sharedworker: RequestDestination
RequestDestination[SO] val subresource: RequestDestination
RequestDestination[SO] val unknown: RequestDestination
RequestDestination[SO] val worker: RequestDestination
RequestDuplex[JT]
RequestDuplex[SO] val half: RequestDuplex
RequestInit[JT] var body: js.UndefOr[BodyInit]
RequestInit[JT] var cache: js.UndefOr[RequestCache]
RequestInit[JT] var credentials: js.UndefOr[RequestCredentials]
RequestInit[JT] var duplex: js.UndefOr[RequestDuplex]
RequestInit[JT] var headers: js.UndefOr[HeadersInit]
RequestInit[JT] var integrity: js.UndefOr[String]
RequestInit[JT] var keepalive: js.UndefOr[Boolean]
RequestInit[JT] var method: js.UndefOr[HttpMethod]
RequestInit[JT] var mode: js.UndefOr[RequestMode]
RequestInit[JT] var redirect: js.UndefOr[RequestRedirect]
RequestInit[JT] var referrer: js.UndefOr[String]
RequestInit[JT] var referrerPolicy: js.UndefOr[ReferrerPolicy]
RequestInit[JT] var signal: js.UndefOr[AbortSignal]
RequestInit[JT] var window: js.UndefOr[Null]
RequestMode[JT]
RequestMode[SO] val cors: RequestMode
RequestMode[SO] val navigate: RequestMode
RequestMode[SO] val `no-cors` = "no-cors".asInstanceOf[RequestMode]
RequestMode[SO] val `same-origin` = "same-origin".asInstanceOf[RequestMode]
RequestRedirect[JT]
RequestRedirect[SO] val error: RequestRedirect
RequestRedirect[SO] val follow: RequestRedirect
RequestRedirect[SO] val manual: RequestRedirect
RequestType[JT]
RequestType[SO] val audio: RequestType
RequestType[SO] val empty: RequestType
RequestType[SO] val font: RequestType
RequestType[SO] val image: RequestType
RequestType[SO] val script: RequestType
RequestType[SO] val style: RequestType
RequestType[SO] val track: RequestType
RequestType[SO] val video: RequestType
ResizeObserver[JC] def disconnect(): Unit
ResizeObserver[JC] def observe(target: Element): Unit
ResizeObserver[JC] def observe(target: Element, options: ResizeObserverOptions): Unit
ResizeObserver[JC] def unobserve(target: Element): Unit
ResizeObserverBoxOption[JT]
ResizeObserverBoxOption[SO] val `border-box`: ResizeObserverBoxOption
ResizeObserverBoxOption[SO] val `content-box`: ResizeObserverBoxOption
ResizeObserverBoxOption[SO] val `device-pixel-content-box`: ResizeObserverBoxOption
ResizeObserverEntry[JT] def borderBoxSize: js.Array[ResizeObserverSize]
ResizeObserverEntry[JT] def contentBoxSize: js.Array[ResizeObserverSize]
ResizeObserverEntry[JT] def contentRect: DOMRectReadOnly
ResizeObserverEntry[JT] def target: Element
ResizeObserverOptions[JT] var box: js.UndefOr[ResizeObserverBoxOption]
ResizeObserverSize[JT] def blockSize: Double
ResizeObserverSize[JT] def inlineSize: Double
Response[JC] def arrayBuffer(): js.Promise[ArrayBuffer]
Response[JC] def blob(): js.Promise[Blob]
Response[JC] val body: ReadableStream[Uint8Array]
Response[JC] def bodyUsed: Boolean
Response[JC] override def clone(): Response
Response[JC] def formData(): js.Promise[FormData]
Response[JC] val headers: Headers
Response[JC] def json(): js.Promise[js.Any]
Response[JC] def ok: Boolean
Response[JC] val status: Int
Response[JC] def statusText: ByteString
Response[JC] def text(): js.Promise[String]
Response[JC] def `type`: ResponseType
Response[JC] def url: String
Response[JO] def error(): Response
Response[JO] def redirect(url: String, status: Int?): Response
ResponseInit[JT] var headers: js.UndefOr[HeadersInit]
ResponseInit[JT] var status: js.UndefOr[Int]
ResponseInit[JT] var statusText: js.UndefOr[ByteString]
ResponseType[JT]
ResponseType[SO] val basic: ResponseType
ResponseType[SO] val cors: ResponseType
ResponseType[SO] val default: ResponseType
ResponseType[SO] val error: ResponseType
ResponseType[SO] val opaque: ResponseType
ResponseType[SO] val opaqueredirect: ResponseType
RsaHashedImportParams[JT] val hash: HashAlgorithmIdentifier
RsaHashedImportParams[JT] val name: String
RsaHashedImportParams[SO] def apply(name: String, hash: HashAlgorithmIdentifier): RsaHashedImportParams  (@deprecated in 2.0.0)
RsaHashedImportParams[SO] val hash = hash0
RsaHashedImportParams[SO] val name = name0
RsaHashedKeyAlgorithm[JT] val hash: HashAlgorithmIdentifier
RsaHashedKeyAlgorithm[JT] val modulusLength: Double
RsaHashedKeyAlgorithm[JT] val name: String
RsaHashedKeyAlgorithm[JT] val publicExponent: BigInteger
RsaHashedKeyAlgorithm[SO] def `RSA-OAEP`(modulusLength: Long, publicExponent: BigInteger, hash: HashAlgorithmIdentifier): RsaHashedKeyAlgorithm  (@deprecated in 2.0.0)
RsaHashedKeyAlgorithm[SO] def `RSA-PSS`(modulusLength: Long, publicExponent: BigInteger, hash: HashAlgorithmIdentifier): RsaHashedKeyAlgorithm  (@deprecated in 2.0.0)
RsaHashedKeyAlgorithm[SO] def `RSASSA-PKCS1-v1_5`(modulusLength: Long, publicExponent: BigInteger, hash: HashAlgorithmIdentifier): RsaHashedKeyAlgorithm  (@deprecated in 2.0.0)
RsaHashedKeyAlgorithm[SO] def apply(name: String, modulusLength: Long, publicExponent: BigInteger, hash: HashAlgorithmIdentifier): RsaHashedKeyAlgorithm  (@deprecated in 2.0.0)
RsaHashedKeyAlgorithm[SO] val hash = hash0
RsaHashedKeyAlgorithm[SO] val modulusLength = modulusLength0.toDouble
RsaHashedKeyAlgorithm[SO] val name = name0
RsaHashedKeyAlgorithm[SO] val publicExponent = publicExponent0
RsaHashedKeyGenParams[JT] val hash: HashAlgorithmIdentifier
RsaHashedKeyGenParams[JT] val modulusLength: Double
RsaHashedKeyGenParams[JT] val name: String
RsaHashedKeyGenParams[JT] val publicExponent: BigInteger
RsaHashedKeyGenParams[SO] def apply(name: String, modulusLength: Long, publicExponent: BigInteger, hash: HashAlgorithmIdentifier): RsaHashedKeyGenParams  (@deprecated in 2.0.0)
RsaHashedKeyGenParams[SO] val hash = hash0
RsaHashedKeyGenParams[SO] val modulusLength = modulusLength0.toDouble
RsaHashedKeyGenParams[SO] val name = name0
RsaHashedKeyGenParams[SO] val publicExponent = publicExponent0
RsaKeyAlgorithm[JT] val modulusLength: Double
RsaKeyAlgorithm[JT] val name: String
RsaKeyAlgorithm[JT] val publicExponent: BigInteger
RsaKeyAlgorithm[SO] def apply(name: String, modulusLength: Long, publicExponent: BigInteger): RsaKeyAlgorithm  (@deprecated in 2.0.0)
RsaKeyAlgorithm[SO] val modulusLength = modulusLength0.toDouble
RsaKeyAlgorithm[SO] val name = name0
RsaKeyAlgorithm[SO] val publicExponent = publicExponent0
RsaKeyGenParams[JT] val modulusLength: Double
RsaKeyGenParams[JT] val name: String
RsaKeyGenParams[JT] val publicExponent: BigInteger
RsaKeyGenParams[SO] def apply(name: String, modulusLength: Long, publicExponent: BigInteger): RsaKeyGenParams  (@deprecated in 2.0.0)
RsaKeyGenParams[SO] val modulusLength = modulusLength0.toDouble
RsaKeyGenParams[SO] val name = name0
RsaKeyGenParams[SO] val publicExponent = publicExponent0
RsaOaepParams[JT] val label: BufferSource
RsaOaepParams[JT] val name: String
RsaOaepParams[SO] def apply(name: String, label: BufferSource): RsaOaepParams  (@deprecated in 2.0.0)
RsaOaepParams[SO] val label = label0
RsaOaepParams[SO] val name = name0
RsaOtherPrimesInfo[JT] var d: String
RsaOtherPrimesInfo[JT] var r: String
RsaOtherPrimesInfo[JT] var t: String
RsaPssParams[JT] val name: String
RsaPssParams[JT] val saltLength: Double
RsaPssParams[SO] def apply(name: String, saltLength: Long): RsaPssParams  (@deprecated in 2.0.0)
RsaPssParams[SO] val name = name0
RsaPssParams[SO] val saltLength = saltLength0.toDouble
SVGAElement[JC] var accessKey: String
SVGAElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGAElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGAElement[JC] def after(nodes: Node | String*): Unit
SVGAElement[JC] def append(nodes: Node | String*): Unit
SVGAElement[JC] def appendChild(newChild: Node): Node
SVGAElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGAElement[JC] def attributes: NamedNodeMap
SVGAElement[JC] def baseURI: String
SVGAElement[JC] def before(nodes: Node | String*): Unit
SVGAElement[JC] def childElementCount: Int
SVGAElement[JC] def childNodes: NodeList[Node]
SVGAElement[JC] def children: HTMLCollection[Element]
SVGAElement[JC] var classList: DOMTokenList
SVGAElement[JC] var className: SVGAnimatedString
SVGAElement[JC] def clientHeight: Int
SVGAElement[JC] def clientLeft: Int
SVGAElement[JC] def clientTop: Int
SVGAElement[JC] def clientWidth: Int
SVGAElement[JC] def cloneNode(deep: Boolean?): Node
SVGAElement[JC] def closest(selector: String): Element
SVGAElement[JC] def compareDocumentPosition(other: Node): Int
SVGAElement[JC] def contains(otherNode: Node): Boolean
SVGAElement[JC] def dispatchEvent(evt: Event): Boolean
SVGAElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGAElement[JC] var farthestViewportElement: SVGElement
SVGAElement[JC] def firstChild: Node
SVGAElement[JC] def firstElementChild: Element
SVGAElement[JC] def getAttribute(name: String): String
SVGAElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGAElement[JC] def getAttributeNode(name: String): Attr
SVGAElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGAElement[JC] def getBBox(): SVGRect
SVGAElement[JC] def getBoundingClientRect(): DOMRect
SVGAElement[JC] def getCTM(): SVGMatrix
SVGAElement[JC] def getClientRects(): DOMRectList
SVGAElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGAElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGAElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGAElement[JC] def getScreenCTM(): SVGMatrix
SVGAElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
SVGAElement[JC] def hasAttribute(name: String): Boolean
SVGAElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGAElement[JC] def hasAttributes(): Boolean
SVGAElement[JC] def hasChildNodes(): Boolean
SVGAElement[JC] def hasExtension(extension: String): Boolean
SVGAElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGAElement[JC] var href: SVGAnimatedString
SVGAElement[JC] var id: String
SVGAElement[JC] var innerHTML: String
SVGAElement[JC] var innerText: String
SVGAElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGAElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGAElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGAElement[JC] def isConnected: Boolean
SVGAElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGAElement[JC] def isEqualNode(arg: Node): Boolean
SVGAElement[JC] def isSameNode(other: Node): Boolean
SVGAElement[JC] def isSupported(feature: String, version: String): Boolean
SVGAElement[JC] def lastChild: Node
SVGAElement[JC] def lastElementChild: Element
SVGAElement[JC] def localName: String
SVGAElement[JC] def lookupNamespaceURI(prefix: String): String
SVGAElement[JC] def lookupPrefix(namespaceURI: String): String
SVGAElement[JC] def matches(selector: String): Boolean
SVGAElement[JC] def namespaceURI: String
SVGAElement[JC] var nearestViewportElement: SVGElement
SVGAElement[JC] def nextElementSibling: Element
SVGAElement[JC] def nextSibling: Node
SVGAElement[JC] def nodeName: String
SVGAElement[JC] def nodeType: Int
SVGAElement[JC] var nodeValue: String
SVGAElement[JC] def normalize(): Unit
SVGAElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGAElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGAElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGAElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGAElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGAElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGAElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGAElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGAElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGAElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGAElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGAElement[JC] var onload: js.Function1[Event, _]
SVGAElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGAElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGAElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGAElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGAElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGAElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGAElement[JC] var outerHTML: String
SVGAElement[JC] def ownerDocument: Document
SVGAElement[JC] def ownerSVGElement: SVGSVGElement
SVGAElement[JC] def parentNode: Node
SVGAElement[JC] def prefix: String
SVGAElement[JC] def prepend(nodes: Node | String*): Unit
SVGAElement[JC] def previousElementSibling: Element
SVGAElement[JC] def previousSibling: Node
SVGAElement[JC] def querySelector(selectors: String): Element
SVGAElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGAElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGAElement[JC] def remove(): Unit
SVGAElement[JC] def removeAttribute(name: String): Unit
SVGAElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGAElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGAElement[JC] def removeChild(oldChild: Node): Node
SVGAElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGAElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGAElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGAElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGAElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGAElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGAElement[JC] def requestPointerLock(): Unit
SVGAElement[JC] var requiredExtensions: SVGStringList
SVGAElement[JC] var requiredFeatures: SVGStringList
SVGAElement[JC] def scrollHeight: Int
SVGAElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGAElement[JC] var scrollLeft: Double
SVGAElement[JC] var scrollTop: Double
SVGAElement[JC] def scrollWidth: Int
SVGAElement[JC] def setAttribute(name: String, value: String): Unit
SVGAElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGAElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGAElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGAElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGAElement[JC] def shadowRoot: ShadowRoot
SVGAElement[JC] var style: CSSStyleDeclaration
SVGAElement[JC] var systemLanguage: SVGStringList
SVGAElement[JC] def tagName: String
SVGAElement[JC] def target: SVGAnimatedString
SVGAElement[JC] var textContent: String
SVGAElement[JC] var transform: SVGAnimatedTransformList
SVGAElement[JC] def viewportElement: SVGElement
SVGAElement[JC] var xmlbase: String
SVGAElement[JC] var xmllang: String
SVGAElement[JC] var xmlspace: String
SVGAngle[JC] def convertToSpecifiedUnits(unitType: Int): Unit
SVGAngle[JC] def newValueSpecifiedUnits(unitType: Int, valueInSpecifiedUnits: Double): Unit
SVGAngle[JC] def unitType: Int
SVGAngle[JC] var value: Double
SVGAngle[JC] var valueAsString: String
SVGAngle[JC] var valueInSpecifiedUnits: Double
SVGAngle[JO] val SVG_ANGLETYPE_DEG: Int
SVGAngle[JO] val SVG_ANGLETYPE_GRAD: Int
SVGAngle[JO] val SVG_ANGLETYPE_RAD: Int
SVGAngle[JO] val SVG_ANGLETYPE_UNKNOWN: Int
SVGAngle[JO] val SVG_ANGLETYPE_UNSPECIFIED: Int
SVGAnimatedAngle[JC] def animVal: SVGAngle
SVGAnimatedAngle[JC] var baseVal: SVGAngle
SVGAnimatedBoolean[JC] def animVal: Boolean
SVGAnimatedBoolean[JC] var baseVal: Boolean
SVGAnimatedEnumeration[JC] def animVal: Int
SVGAnimatedEnumeration[JC] var baseVal: Int
SVGAnimatedInteger[JC] def animVal: Int
SVGAnimatedInteger[JC] var baseVal: Int
SVGAnimatedLength[JC] def animVal: SVGLength
SVGAnimatedLength[JC] var baseVal: SVGLength
SVGAnimatedLengthList[JC] def animVal: SVGLengthList
SVGAnimatedLengthList[JC] var baseVal: SVGLengthList
SVGAnimatedNumber[JC] def animVal: Double
SVGAnimatedNumber[JC] var baseVal: Double
SVGAnimatedNumberList[JC] def animVal: SVGNumberList
SVGAnimatedNumberList[JC] def baseVal: SVGNumberList
SVGAnimatedPathData[JT] var pathSegList: SVGPathSegList
SVGAnimatedPoints[JT] def animatedPoints: SVGPointList
SVGAnimatedPoints[JT] var points: SVGPointList
SVGAnimatedPreserveAspectRatio[JC] def animVal: SVGPreserveAspectRatio
SVGAnimatedPreserveAspectRatio[JC] var baseVal: SVGPreserveAspectRatio
SVGAnimatedRect[JC] def animVal: SVGRect
SVGAnimatedRect[JC] def baseVal: SVGRect
SVGAnimatedString[JC] def animVal: String
SVGAnimatedString[JC] var baseVal: String
SVGAnimatedTransformList[JC] def animVal: SVGTransformList
SVGAnimatedTransformList[JC] var baseVal: SVGTransformList
SVGCircleElement[JC] var accessKey: String
SVGCircleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGCircleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGCircleElement[JC] def after(nodes: Node | String*): Unit
SVGCircleElement[JC] def append(nodes: Node | String*): Unit
SVGCircleElement[JC] def appendChild(newChild: Node): Node
SVGCircleElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGCircleElement[JC] def attributes: NamedNodeMap
SVGCircleElement[JC] def baseURI: String
SVGCircleElement[JC] def before(nodes: Node | String*): Unit
SVGCircleElement[JC] def childElementCount: Int
SVGCircleElement[JC] def childNodes: NodeList[Node]
SVGCircleElement[JC] def children: HTMLCollection[Element]
SVGCircleElement[JC] var classList: DOMTokenList
SVGCircleElement[JC] var className: SVGAnimatedString
SVGCircleElement[JC] def clientHeight: Int
SVGCircleElement[JC] def clientLeft: Int
SVGCircleElement[JC] def clientTop: Int
SVGCircleElement[JC] def clientWidth: Int
SVGCircleElement[JC] def cloneNode(deep: Boolean?): Node
SVGCircleElement[JC] def closest(selector: String): Element
SVGCircleElement[JC] def compareDocumentPosition(other: Node): Int
SVGCircleElement[JC] def contains(otherNode: Node): Boolean
SVGCircleElement[JC] def cx: SVGAnimatedLength
SVGCircleElement[JC] def cy: SVGAnimatedLength
SVGCircleElement[JC] def dispatchEvent(evt: Event): Boolean
SVGCircleElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGCircleElement[JC] var farthestViewportElement: SVGElement
SVGCircleElement[JC] def firstChild: Node
SVGCircleElement[JC] def firstElementChild: Element
SVGCircleElement[JC] def getAttribute(name: String): String
SVGCircleElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGCircleElement[JC] def getAttributeNode(name: String): Attr
SVGCircleElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGCircleElement[JC] def getBBox(): SVGRect
SVGCircleElement[JC] def getBoundingClientRect(): DOMRect
SVGCircleElement[JC] def getCTM(): SVGMatrix
SVGCircleElement[JC] def getClientRects(): DOMRectList
SVGCircleElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGCircleElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGCircleElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGCircleElement[JC] def getScreenCTM(): SVGMatrix
SVGCircleElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
SVGCircleElement[JC] def hasAttribute(name: String): Boolean
SVGCircleElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGCircleElement[JC] def hasAttributes(): Boolean
SVGCircleElement[JC] def hasChildNodes(): Boolean
SVGCircleElement[JC] def hasExtension(extension: String): Boolean
SVGCircleElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGCircleElement[JC] var id: String
SVGCircleElement[JC] var innerHTML: String
SVGCircleElement[JC] var innerText: String
SVGCircleElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGCircleElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGCircleElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGCircleElement[JC] def isConnected: Boolean
SVGCircleElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGCircleElement[JC] def isEqualNode(arg: Node): Boolean
SVGCircleElement[JC] def isSameNode(other: Node): Boolean
SVGCircleElement[JC] def isSupported(feature: String, version: String): Boolean
SVGCircleElement[JC] def lastChild: Node
SVGCircleElement[JC] def lastElementChild: Element
SVGCircleElement[JC] def localName: String
SVGCircleElement[JC] def lookupNamespaceURI(prefix: String): String
SVGCircleElement[JC] def lookupPrefix(namespaceURI: String): String
SVGCircleElement[JC] def matches(selector: String): Boolean
SVGCircleElement[JC] def namespaceURI: String
SVGCircleElement[JC] var nearestViewportElement: SVGElement
SVGCircleElement[JC] def nextElementSibling: Element
SVGCircleElement[JC] def nextSibling: Node
SVGCircleElement[JC] def nodeName: String
SVGCircleElement[JC] def nodeType: Int
SVGCircleElement[JC] var nodeValue: String
SVGCircleElement[JC] def normalize(): Unit
SVGCircleElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGCircleElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGCircleElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGCircleElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGCircleElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGCircleElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGCircleElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGCircleElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGCircleElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGCircleElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGCircleElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGCircleElement[JC] var onload: js.Function1[Event, _]
SVGCircleElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGCircleElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGCircleElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGCircleElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGCircleElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGCircleElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGCircleElement[JC] var outerHTML: String
SVGCircleElement[JC] def ownerDocument: Document
SVGCircleElement[JC] def ownerSVGElement: SVGSVGElement
SVGCircleElement[JC] def parentNode: Node
SVGCircleElement[JC] def prefix: String
SVGCircleElement[JC] def prepend(nodes: Node | String*): Unit
SVGCircleElement[JC] def previousElementSibling: Element
SVGCircleElement[JC] def previousSibling: Node
SVGCircleElement[JC] def querySelector(selectors: String): Element
SVGCircleElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGCircleElement[JC] def r: SVGAnimatedLength
SVGCircleElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGCircleElement[JC] def remove(): Unit
SVGCircleElement[JC] def removeAttribute(name: String): Unit
SVGCircleElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGCircleElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGCircleElement[JC] def removeChild(oldChild: Node): Node
SVGCircleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGCircleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGCircleElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGCircleElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGCircleElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGCircleElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGCircleElement[JC] def requestPointerLock(): Unit
SVGCircleElement[JC] var requiredExtensions: SVGStringList
SVGCircleElement[JC] var requiredFeatures: SVGStringList
SVGCircleElement[JC] def scrollHeight: Int
SVGCircleElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGCircleElement[JC] var scrollLeft: Double
SVGCircleElement[JC] var scrollTop: Double
SVGCircleElement[JC] def scrollWidth: Int
SVGCircleElement[JC] def setAttribute(name: String, value: String): Unit
SVGCircleElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGCircleElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGCircleElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGCircleElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGCircleElement[JC] def shadowRoot: ShadowRoot
SVGCircleElement[JC] var style: CSSStyleDeclaration
SVGCircleElement[JC] var systemLanguage: SVGStringList
SVGCircleElement[JC] def tagName: String
SVGCircleElement[JC] var textContent: String
SVGCircleElement[JC] var transform: SVGAnimatedTransformList
SVGCircleElement[JC] def viewportElement: SVGElement
SVGCircleElement[JC] var xmlbase: String
SVGCircleElement[JC] var xmllang: String
SVGCircleElement[JC] var xmlspace: String
SVGClipPathElement[JC] val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Int
SVGClipPathElement[JC] val SVG_UNIT_TYPE_UNKNOWN: Int
SVGClipPathElement[JC] val SVG_UNIT_TYPE_USERSPACEONUSE: Int
SVGClipPathElement[JC] var accessKey: String
SVGClipPathElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGClipPathElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGClipPathElement[JC] def after(nodes: Node | String*): Unit
SVGClipPathElement[JC] def append(nodes: Node | String*): Unit
SVGClipPathElement[JC] def appendChild(newChild: Node): Node
SVGClipPathElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGClipPathElement[JC] def attributes: NamedNodeMap
SVGClipPathElement[JC] def baseURI: String
SVGClipPathElement[JC] def before(nodes: Node | String*): Unit
SVGClipPathElement[JC] def childElementCount: Int
SVGClipPathElement[JC] def childNodes: NodeList[Node]
SVGClipPathElement[JC] def children: HTMLCollection[Element]
SVGClipPathElement[JC] var classList: DOMTokenList
SVGClipPathElement[JC] var className: SVGAnimatedString
SVGClipPathElement[JC] def clientHeight: Int
SVGClipPathElement[JC] def clientLeft: Int
SVGClipPathElement[JC] def clientTop: Int
SVGClipPathElement[JC] def clientWidth: Int
SVGClipPathElement[JC] def clipPathUnits: SVGAnimatedEnumeration
SVGClipPathElement[JC] def cloneNode(deep: Boolean?): Node
SVGClipPathElement[JC] def closest(selector: String): Element
SVGClipPathElement[JC] def compareDocumentPosition(other: Node): Int
SVGClipPathElement[JC] def contains(otherNode: Node): Boolean
SVGClipPathElement[JC] def dispatchEvent(evt: Event): Boolean
SVGClipPathElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGClipPathElement[JC] var farthestViewportElement: SVGElement
SVGClipPathElement[JC] def firstChild: Node
SVGClipPathElement[JC] def firstElementChild: Element
SVGClipPathElement[JC] def getAttribute(name: String): String
SVGClipPathElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGClipPathElement[JC] def getAttributeNode(name: String): Attr
SVGClipPathElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGClipPathElement[JC] def getBBox(): SVGRect
SVGClipPathElement[JC] def getBoundingClientRect(): DOMRect
SVGClipPathElement[JC] def getCTM(): SVGMatrix
SVGClipPathElement[JC] def getClientRects(): DOMRectList
SVGClipPathElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGClipPathElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGClipPathElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGClipPathElement[JC] def getScreenCTM(): SVGMatrix
SVGClipPathElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
SVGClipPathElement[JC] def hasAttribute(name: String): Boolean
SVGClipPathElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGClipPathElement[JC] def hasAttributes(): Boolean
SVGClipPathElement[JC] def hasChildNodes(): Boolean
SVGClipPathElement[JC] def hasExtension(extension: String): Boolean
SVGClipPathElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGClipPathElement[JC] var id: String
SVGClipPathElement[JC] var innerHTML: String
SVGClipPathElement[JC] var innerText: String
SVGClipPathElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGClipPathElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGClipPathElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGClipPathElement[JC] def isConnected: Boolean
SVGClipPathElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGClipPathElement[JC] def isEqualNode(arg: Node): Boolean
SVGClipPathElement[JC] def isSameNode(other: Node): Boolean
SVGClipPathElement[JC] def isSupported(feature: String, version: String): Boolean
SVGClipPathElement[JC] def lastChild: Node
SVGClipPathElement[JC] def lastElementChild: Element
SVGClipPathElement[JC] def localName: String
SVGClipPathElement[JC] def lookupNamespaceURI(prefix: String): String
SVGClipPathElement[JC] def lookupPrefix(namespaceURI: String): String
SVGClipPathElement[JC] def matches(selector: String): Boolean
SVGClipPathElement[JC] def namespaceURI: String
SVGClipPathElement[JC] var nearestViewportElement: SVGElement
SVGClipPathElement[JC] def nextElementSibling: Element
SVGClipPathElement[JC] def nextSibling: Node
SVGClipPathElement[JC] def nodeName: String
SVGClipPathElement[JC] def nodeType: Int
SVGClipPathElement[JC] var nodeValue: String
SVGClipPathElement[JC] def normalize(): Unit
SVGClipPathElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGClipPathElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGClipPathElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGClipPathElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGClipPathElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGClipPathElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGClipPathElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGClipPathElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGClipPathElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGClipPathElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGClipPathElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGClipPathElement[JC] var onload: js.Function1[Event, _]
SVGClipPathElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGClipPathElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGClipPathElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGClipPathElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGClipPathElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGClipPathElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGClipPathElement[JC] var outerHTML: String
SVGClipPathElement[JC] def ownerDocument: Document
SVGClipPathElement[JC] def ownerSVGElement: SVGSVGElement
SVGClipPathElement[JC] def parentNode: Node
SVGClipPathElement[JC] def prefix: String
SVGClipPathElement[JC] def prepend(nodes: Node | String*): Unit
SVGClipPathElement[JC] def previousElementSibling: Element
SVGClipPathElement[JC] def previousSibling: Node
SVGClipPathElement[JC] def querySelector(selectors: String): Element
SVGClipPathElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGClipPathElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGClipPathElement[JC] def remove(): Unit
SVGClipPathElement[JC] def removeAttribute(name: String): Unit
SVGClipPathElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGClipPathElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGClipPathElement[JC] def removeChild(oldChild: Node): Node
SVGClipPathElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGClipPathElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGClipPathElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGClipPathElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGClipPathElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGClipPathElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGClipPathElement[JC] def requestPointerLock(): Unit
SVGClipPathElement[JC] var requiredExtensions: SVGStringList
SVGClipPathElement[JC] var requiredFeatures: SVGStringList
SVGClipPathElement[JC] def scrollHeight: Int
SVGClipPathElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGClipPathElement[JC] var scrollLeft: Double
SVGClipPathElement[JC] var scrollTop: Double
SVGClipPathElement[JC] def scrollWidth: Int
SVGClipPathElement[JC] def setAttribute(name: String, value: String): Unit
SVGClipPathElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGClipPathElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGClipPathElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGClipPathElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGClipPathElement[JC] def shadowRoot: ShadowRoot
SVGClipPathElement[JC] var style: CSSStyleDeclaration
SVGClipPathElement[JC] var systemLanguage: SVGStringList
SVGClipPathElement[JC] def tagName: String
SVGClipPathElement[JC] var textContent: String
SVGClipPathElement[JC] var transform: SVGAnimatedTransformList
SVGClipPathElement[JC] def viewportElement: SVGElement
SVGClipPathElement[JC] var xmlbase: String
SVGClipPathElement[JC] var xmllang: String
SVGClipPathElement[JC] var xmlspace: String
SVGComponentTransferFunctionElement[JC] var accessKey: String
SVGComponentTransferFunctionElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGComponentTransferFunctionElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGComponentTransferFunctionElement[JC] def after(nodes: Node | String*): Unit
SVGComponentTransferFunctionElement[JC] def amplitude: SVGAnimatedNumber
SVGComponentTransferFunctionElement[JC] def append(nodes: Node | String*): Unit
SVGComponentTransferFunctionElement[JC] def appendChild(newChild: Node): Node
SVGComponentTransferFunctionElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGComponentTransferFunctionElement[JC] def attributes: NamedNodeMap
SVGComponentTransferFunctionElement[JC] def baseURI: String
SVGComponentTransferFunctionElement[JC] def before(nodes: Node | String*): Unit
SVGComponentTransferFunctionElement[JC] def childElementCount: Int
SVGComponentTransferFunctionElement[JC] def childNodes: NodeList[Node]
SVGComponentTransferFunctionElement[JC] def children: HTMLCollection[Element]
SVGComponentTransferFunctionElement[JC] var classList: DOMTokenList
SVGComponentTransferFunctionElement[JC] def clientHeight: Int
SVGComponentTransferFunctionElement[JC] def clientLeft: Int
SVGComponentTransferFunctionElement[JC] def clientTop: Int
SVGComponentTransferFunctionElement[JC] def clientWidth: Int
SVGComponentTransferFunctionElement[JC] def cloneNode(deep: Boolean?): Node
SVGComponentTransferFunctionElement[JC] def closest(selector: String): Element
SVGComponentTransferFunctionElement[JC] def compareDocumentPosition(other: Node): Int
SVGComponentTransferFunctionElement[JC] def contains(otherNode: Node): Boolean
SVGComponentTransferFunctionElement[JC] def dispatchEvent(evt: Event): Boolean
SVGComponentTransferFunctionElement[JC] def exponent: SVGAnimatedNumber
SVGComponentTransferFunctionElement[JC] def firstChild: Node
SVGComponentTransferFunctionElement[JC] def firstElementChild: Element
SVGComponentTransferFunctionElement[JC] def getAttribute(name: String): String
SVGComponentTransferFunctionElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGComponentTransferFunctionElement[JC] def getAttributeNode(name: String): Attr
SVGComponentTransferFunctionElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGComponentTransferFunctionElement[JC] def getBoundingClientRect(): DOMRect
SVGComponentTransferFunctionElement[JC] def getClientRects(): DOMRectList
SVGComponentTransferFunctionElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGComponentTransferFunctionElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGComponentTransferFunctionElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGComponentTransferFunctionElement[JC] def hasAttribute(name: String): Boolean
SVGComponentTransferFunctionElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGComponentTransferFunctionElement[JC] def hasAttributes(): Boolean
SVGComponentTransferFunctionElement[JC] def hasChildNodes(): Boolean
SVGComponentTransferFunctionElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGComponentTransferFunctionElement[JC] var id: String
SVGComponentTransferFunctionElement[JC] var innerHTML: String
SVGComponentTransferFunctionElement[JC] var innerText: String
SVGComponentTransferFunctionElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGComponentTransferFunctionElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGComponentTransferFunctionElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGComponentTransferFunctionElement[JC] def intercept: SVGAnimatedNumber
SVGComponentTransferFunctionElement[JC] def isConnected: Boolean
SVGComponentTransferFunctionElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGComponentTransferFunctionElement[JC] def isEqualNode(arg: Node): Boolean
SVGComponentTransferFunctionElement[JC] def isSameNode(other: Node): Boolean
SVGComponentTransferFunctionElement[JC] def isSupported(feature: String, version: String): Boolean
SVGComponentTransferFunctionElement[JC] def lastChild: Node
SVGComponentTransferFunctionElement[JC] def lastElementChild: Element
SVGComponentTransferFunctionElement[JC] def localName: String
SVGComponentTransferFunctionElement[JC] def lookupNamespaceURI(prefix: String): String
SVGComponentTransferFunctionElement[JC] def lookupPrefix(namespaceURI: String): String
SVGComponentTransferFunctionElement[JC] def matches(selector: String): Boolean
SVGComponentTransferFunctionElement[JC] def namespaceURI: String
SVGComponentTransferFunctionElement[JC] def nextElementSibling: Element
SVGComponentTransferFunctionElement[JC] def nextSibling: Node
SVGComponentTransferFunctionElement[JC] def nodeName: String
SVGComponentTransferFunctionElement[JC] def nodeType: Int
SVGComponentTransferFunctionElement[JC] var nodeValue: String
SVGComponentTransferFunctionElement[JC] def normalize(): Unit
SVGComponentTransferFunctionElement[JC] def offset: SVGAnimatedNumber
SVGComponentTransferFunctionElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGComponentTransferFunctionElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGComponentTransferFunctionElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGComponentTransferFunctionElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGComponentTransferFunctionElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGComponentTransferFunctionElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGComponentTransferFunctionElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGComponentTransferFunctionElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGComponentTransferFunctionElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGComponentTransferFunctionElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGComponentTransferFunctionElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGComponentTransferFunctionElement[JC] var onload: js.Function1[Event, _]
SVGComponentTransferFunctionElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGComponentTransferFunctionElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGComponentTransferFunctionElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGComponentTransferFunctionElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGComponentTransferFunctionElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGComponentTransferFunctionElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGComponentTransferFunctionElement[JC] var outerHTML: String
SVGComponentTransferFunctionElement[JC] def ownerDocument: Document
SVGComponentTransferFunctionElement[JC] def ownerSVGElement: SVGSVGElement
SVGComponentTransferFunctionElement[JC] def parentNode: Node
SVGComponentTransferFunctionElement[JC] def prefix: String
SVGComponentTransferFunctionElement[JC] def prepend(nodes: Node | String*): Unit
SVGComponentTransferFunctionElement[JC] def previousElementSibling: Element
SVGComponentTransferFunctionElement[JC] def previousSibling: Node
SVGComponentTransferFunctionElement[JC] def querySelector(selectors: String): Element
SVGComponentTransferFunctionElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGComponentTransferFunctionElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGComponentTransferFunctionElement[JC] def remove(): Unit
SVGComponentTransferFunctionElement[JC] def removeAttribute(name: String): Unit
SVGComponentTransferFunctionElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGComponentTransferFunctionElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGComponentTransferFunctionElement[JC] def removeChild(oldChild: Node): Node
SVGComponentTransferFunctionElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGComponentTransferFunctionElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGComponentTransferFunctionElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGComponentTransferFunctionElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGComponentTransferFunctionElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGComponentTransferFunctionElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGComponentTransferFunctionElement[JC] def requestPointerLock(): Unit
SVGComponentTransferFunctionElement[JC] def scrollHeight: Int
SVGComponentTransferFunctionElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGComponentTransferFunctionElement[JC] var scrollLeft: Double
SVGComponentTransferFunctionElement[JC] var scrollTop: Double
SVGComponentTransferFunctionElement[JC] def scrollWidth: Int
SVGComponentTransferFunctionElement[JC] def setAttribute(name: String, value: String): Unit
SVGComponentTransferFunctionElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGComponentTransferFunctionElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGComponentTransferFunctionElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGComponentTransferFunctionElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGComponentTransferFunctionElement[JC] def shadowRoot: ShadowRoot
SVGComponentTransferFunctionElement[JC] def slope: SVGAnimatedNumber
SVGComponentTransferFunctionElement[JC] def tableValues: SVGAnimatedNumberList
SVGComponentTransferFunctionElement[JC] def tagName: String
SVGComponentTransferFunctionElement[JC] var textContent: String
SVGComponentTransferFunctionElement[JC] def `type`: SVGAnimatedEnumeration
SVGComponentTransferFunctionElement[JC] def viewportElement: SVGElement
SVGComponentTransferFunctionElement[JC] var xmlbase: String
SVGComponentTransferFunctionElement[JO] val SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: Int
SVGComponentTransferFunctionElement[JO] val SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: Int
SVGComponentTransferFunctionElement[JO] val SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: Int
SVGComponentTransferFunctionElement[JO] val SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: Int
SVGComponentTransferFunctionElement[JO] val SVG_FECOMPONENTTRANSFER_TYPE_TABLE: Int
SVGComponentTransferFunctionElement[JO] val SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: Int
SVGDefsElement[JC] var accessKey: String
SVGDefsElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGDefsElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGDefsElement[JC] def after(nodes: Node | String*): Unit
SVGDefsElement[JC] def append(nodes: Node | String*): Unit
SVGDefsElement[JC] def appendChild(newChild: Node): Node
SVGDefsElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGDefsElement[JC] def attributes: NamedNodeMap
SVGDefsElement[JC] def baseURI: String
SVGDefsElement[JC] def before(nodes: Node | String*): Unit
SVGDefsElement[JC] def childElementCount: Int
SVGDefsElement[JC] def childNodes: NodeList[Node]
SVGDefsElement[JC] def children: HTMLCollection[Element]
SVGDefsElement[JC] var classList: DOMTokenList
SVGDefsElement[JC] var className: SVGAnimatedString
SVGDefsElement[JC] def clientHeight: Int
SVGDefsElement[JC] def clientLeft: Int
SVGDefsElement[JC] def clientTop: Int
SVGDefsElement[JC] def clientWidth: Int
SVGDefsElement[JC] def cloneNode(deep: Boolean?): Node
SVGDefsElement[JC] def closest(selector: String): Element
SVGDefsElement[JC] def compareDocumentPosition(other: Node): Int
SVGDefsElement[JC] def contains(otherNode: Node): Boolean
SVGDefsElement[JC] def dispatchEvent(evt: Event): Boolean
SVGDefsElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGDefsElement[JC] var farthestViewportElement: SVGElement
SVGDefsElement[JC] def firstChild: Node
SVGDefsElement[JC] def firstElementChild: Element
SVGDefsElement[JC] def getAttribute(name: String): String
SVGDefsElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGDefsElement[JC] def getAttributeNode(name: String): Attr
SVGDefsElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGDefsElement[JC] def getBBox(): SVGRect
SVGDefsElement[JC] def getBoundingClientRect(): DOMRect
SVGDefsElement[JC] def getCTM(): SVGMatrix
SVGDefsElement[JC] def getClientRects(): DOMRectList
SVGDefsElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGDefsElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGDefsElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGDefsElement[JC] def getScreenCTM(): SVGMatrix
SVGDefsElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
SVGDefsElement[JC] def hasAttribute(name: String): Boolean
SVGDefsElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGDefsElement[JC] def hasAttributes(): Boolean
SVGDefsElement[JC] def hasChildNodes(): Boolean
SVGDefsElement[JC] def hasExtension(extension: String): Boolean
SVGDefsElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGDefsElement[JC] var id: String
SVGDefsElement[JC] var innerHTML: String
SVGDefsElement[JC] var innerText: String
SVGDefsElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGDefsElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGDefsElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGDefsElement[JC] def isConnected: Boolean
SVGDefsElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGDefsElement[JC] def isEqualNode(arg: Node): Boolean
SVGDefsElement[JC] def isSameNode(other: Node): Boolean
SVGDefsElement[JC] def isSupported(feature: String, version: String): Boolean
SVGDefsElement[JC] def lastChild: Node
SVGDefsElement[JC] def lastElementChild: Element
SVGDefsElement[JC] def localName: String
SVGDefsElement[JC] def lookupNamespaceURI(prefix: String): String
SVGDefsElement[JC] def lookupPrefix(namespaceURI: String): String
SVGDefsElement[JC] def matches(selector: String): Boolean
SVGDefsElement[JC] def namespaceURI: String
SVGDefsElement[JC] var nearestViewportElement: SVGElement
SVGDefsElement[JC] def nextElementSibling: Element
SVGDefsElement[JC] def nextSibling: Node
SVGDefsElement[JC] def nodeName: String
SVGDefsElement[JC] def nodeType: Int
SVGDefsElement[JC] var nodeValue: String
SVGDefsElement[JC] def normalize(): Unit
SVGDefsElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGDefsElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGDefsElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGDefsElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGDefsElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGDefsElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGDefsElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGDefsElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGDefsElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGDefsElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGDefsElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGDefsElement[JC] var onload: js.Function1[Event, _]
SVGDefsElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGDefsElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGDefsElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGDefsElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGDefsElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGDefsElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGDefsElement[JC] var outerHTML: String
SVGDefsElement[JC] def ownerDocument: Document
SVGDefsElement[JC] def ownerSVGElement: SVGSVGElement
SVGDefsElement[JC] def parentNode: Node
SVGDefsElement[JC] def prefix: String
SVGDefsElement[JC] def prepend(nodes: Node | String*): Unit
SVGDefsElement[JC] def previousElementSibling: Element
SVGDefsElement[JC] def previousSibling: Node
SVGDefsElement[JC] def querySelector(selectors: String): Element
SVGDefsElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGDefsElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGDefsElement[JC] def remove(): Unit
SVGDefsElement[JC] def removeAttribute(name: String): Unit
SVGDefsElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGDefsElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGDefsElement[JC] def removeChild(oldChild: Node): Node
SVGDefsElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGDefsElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGDefsElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGDefsElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGDefsElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGDefsElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGDefsElement[JC] def requestPointerLock(): Unit
SVGDefsElement[JC] var requiredExtensions: SVGStringList
SVGDefsElement[JC] var requiredFeatures: SVGStringList
SVGDefsElement[JC] def scrollHeight: Int
SVGDefsElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGDefsElement[JC] var scrollLeft: Double
SVGDefsElement[JC] var scrollTop: Double
SVGDefsElement[JC] def scrollWidth: Int
SVGDefsElement[JC] def setAttribute(name: String, value: String): Unit
SVGDefsElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGDefsElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGDefsElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGDefsElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGDefsElement[JC] def shadowRoot: ShadowRoot
SVGDefsElement[JC] var style: CSSStyleDeclaration
SVGDefsElement[JC] var systemLanguage: SVGStringList
SVGDefsElement[JC] def tagName: String
SVGDefsElement[JC] var textContent: String
SVGDefsElement[JC] var transform: SVGAnimatedTransformList
SVGDefsElement[JC] def viewportElement: SVGElement
SVGDefsElement[JC] var xmlbase: String
SVGDefsElement[JC] var xmllang: String
SVGDefsElement[JC] var xmlspace: String
SVGDescElement[JC] var accessKey: String
SVGDescElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGDescElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGDescElement[JC] def after(nodes: Node | String*): Unit
SVGDescElement[JC] def append(nodes: Node | String*): Unit
SVGDescElement[JC] def appendChild(newChild: Node): Node
SVGDescElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGDescElement[JC] def attributes: NamedNodeMap
SVGDescElement[JC] def baseURI: String
SVGDescElement[JC] def before(nodes: Node | String*): Unit
SVGDescElement[JC] def childElementCount: Int
SVGDescElement[JC] def childNodes: NodeList[Node]
SVGDescElement[JC] def children: HTMLCollection[Element]
SVGDescElement[JC] var classList: DOMTokenList
SVGDescElement[JC] var className: SVGAnimatedString
SVGDescElement[JC] def clientHeight: Int
SVGDescElement[JC] def clientLeft: Int
SVGDescElement[JC] def clientTop: Int
SVGDescElement[JC] def clientWidth: Int
SVGDescElement[JC] def cloneNode(deep: Boolean?): Node
SVGDescElement[JC] def closest(selector: String): Element
SVGDescElement[JC] def compareDocumentPosition(other: Node): Int
SVGDescElement[JC] def contains(otherNode: Node): Boolean
SVGDescElement[JC] def dispatchEvent(evt: Event): Boolean
SVGDescElement[JC] def firstChild: Node
SVGDescElement[JC] def firstElementChild: Element
SVGDescElement[JC] def getAttribute(name: String): String
SVGDescElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGDescElement[JC] def getAttributeNode(name: String): Attr
SVGDescElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGDescElement[JC] def getBoundingClientRect(): DOMRect
SVGDescElement[JC] def getClientRects(): DOMRectList
SVGDescElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGDescElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGDescElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGDescElement[JC] def hasAttribute(name: String): Boolean
SVGDescElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGDescElement[JC] def hasAttributes(): Boolean
SVGDescElement[JC] def hasChildNodes(): Boolean
SVGDescElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGDescElement[JC] var id: String
SVGDescElement[JC] var innerHTML: String
SVGDescElement[JC] var innerText: String
SVGDescElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGDescElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGDescElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGDescElement[JC] def isConnected: Boolean
SVGDescElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGDescElement[JC] def isEqualNode(arg: Node): Boolean
SVGDescElement[JC] def isSameNode(other: Node): Boolean
SVGDescElement[JC] def isSupported(feature: String, version: String): Boolean
SVGDescElement[JC] def lastChild: Node
SVGDescElement[JC] def lastElementChild: Element
SVGDescElement[JC] def localName: String
SVGDescElement[JC] def lookupNamespaceURI(prefix: String): String
SVGDescElement[JC] def lookupPrefix(namespaceURI: String): String
SVGDescElement[JC] def matches(selector: String): Boolean
SVGDescElement[JC] def namespaceURI: String
SVGDescElement[JC] def nextElementSibling: Element
SVGDescElement[JC] def nextSibling: Node
SVGDescElement[JC] def nodeName: String
SVGDescElement[JC] def nodeType: Int
SVGDescElement[JC] var nodeValue: String
SVGDescElement[JC] def normalize(): Unit
SVGDescElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGDescElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGDescElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGDescElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGDescElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGDescElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGDescElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGDescElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGDescElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGDescElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGDescElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGDescElement[JC] var onload: js.Function1[Event, _]
SVGDescElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGDescElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGDescElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGDescElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGDescElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGDescElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGDescElement[JC] var outerHTML: String
SVGDescElement[JC] def ownerDocument: Document
SVGDescElement[JC] def ownerSVGElement: SVGSVGElement
SVGDescElement[JC] def parentNode: Node
SVGDescElement[JC] def prefix: String
SVGDescElement[JC] def prepend(nodes: Node | String*): Unit
SVGDescElement[JC] def previousElementSibling: Element
SVGDescElement[JC] def previousSibling: Node
SVGDescElement[JC] def querySelector(selectors: String): Element
SVGDescElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGDescElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGDescElement[JC] def remove(): Unit
SVGDescElement[JC] def removeAttribute(name: String): Unit
SVGDescElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGDescElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGDescElement[JC] def removeChild(oldChild: Node): Node
SVGDescElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGDescElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGDescElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGDescElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGDescElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGDescElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGDescElement[JC] def requestPointerLock(): Unit
SVGDescElement[JC] def scrollHeight: Int
SVGDescElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGDescElement[JC] var scrollLeft: Double
SVGDescElement[JC] var scrollTop: Double
SVGDescElement[JC] def scrollWidth: Int
SVGDescElement[JC] def setAttribute(name: String, value: String): Unit
SVGDescElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGDescElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGDescElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGDescElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGDescElement[JC] def shadowRoot: ShadowRoot
SVGDescElement[JC] var style: CSSStyleDeclaration
SVGDescElement[JC] def tagName: String
SVGDescElement[JC] var textContent: String
SVGDescElement[JC] def viewportElement: SVGElement
SVGDescElement[JC] var xmlbase: String
SVGDescElement[JC] var xmllang: String
SVGDescElement[JC] var xmlspace: String
SVGElement[JC] var accessKey: String
SVGElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGElement[JC] def after(nodes: Node | String*): Unit
SVGElement[JC] def append(nodes: Node | String*): Unit
SVGElement[JC] def appendChild(newChild: Node): Node
SVGElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGElement[JC] def attributes: NamedNodeMap
SVGElement[JC] def baseURI: String
SVGElement[JC] def before(nodes: Node | String*): Unit
SVGElement[JC] def childElementCount: Int
SVGElement[JC] def childNodes: NodeList[Node]
SVGElement[JC] def children: HTMLCollection[Element]
SVGElement[JC] var classList: DOMTokenList
SVGElement[JC] def clientHeight: Int
SVGElement[JC] def clientLeft: Int
SVGElement[JC] def clientTop: Int
SVGElement[JC] def clientWidth: Int
SVGElement[JC] def cloneNode(deep: Boolean?): Node
SVGElement[JC] def closest(selector: String): Element
SVGElement[JC] def compareDocumentPosition(other: Node): Int
SVGElement[JC] def contains(otherNode: Node): Boolean
SVGElement[JC] def dispatchEvent(evt: Event): Boolean
SVGElement[JC] def firstChild: Node
SVGElement[JC] def firstElementChild: Element
SVGElement[JC] def getAttribute(name: String): String
SVGElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGElement[JC] def getAttributeNode(name: String): Attr
SVGElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGElement[JC] def getBoundingClientRect(): DOMRect
SVGElement[JC] def getClientRects(): DOMRectList
SVGElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGElement[JC] def hasAttribute(name: String): Boolean
SVGElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGElement[JC] def hasAttributes(): Boolean
SVGElement[JC] def hasChildNodes(): Boolean
SVGElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGElement[JC] var id: String
SVGElement[JC] var innerHTML: String
SVGElement[JC] var innerText: String
SVGElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGElement[JC] def isConnected: Boolean
SVGElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGElement[JC] def isEqualNode(arg: Node): Boolean
SVGElement[JC] def isSameNode(other: Node): Boolean
SVGElement[JC] def isSupported(feature: String, version: String): Boolean
SVGElement[JC] def lastChild: Node
SVGElement[JC] def lastElementChild: Element
SVGElement[JC] def localName: String
SVGElement[JC] def lookupNamespaceURI(prefix: String): String
SVGElement[JC] def lookupPrefix(namespaceURI: String): String
SVGElement[JC] def matches(selector: String): Boolean
SVGElement[JC] def namespaceURI: String
SVGElement[JC] def nextElementSibling: Element
SVGElement[JC] def nextSibling: Node
SVGElement[JC] def nodeName: String
SVGElement[JC] def nodeType: Int
SVGElement[JC] var nodeValue: String
SVGElement[JC] def normalize(): Unit
SVGElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGElement[JC] var onload: js.Function1[Event, _]
SVGElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGElement[JC] var outerHTML: String
SVGElement[JC] def ownerDocument: Document
SVGElement[JC] def ownerSVGElement: SVGSVGElement
SVGElement[JC] def parentNode: Node
SVGElement[JC] def prefix: String
SVGElement[JC] def prepend(nodes: Node | String*): Unit
SVGElement[JC] def previousElementSibling: Element
SVGElement[JC] def previousSibling: Node
SVGElement[JC] def querySelector(selectors: String): Element
SVGElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGElement[JC] def remove(): Unit
SVGElement[JC] def removeAttribute(name: String): Unit
SVGElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGElement[JC] def removeChild(oldChild: Node): Node
SVGElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGElement[JC] def requestPointerLock(): Unit
SVGElement[JC] def scrollHeight: Int
SVGElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGElement[JC] var scrollLeft: Double
SVGElement[JC] var scrollTop: Double
SVGElement[JC] def scrollWidth: Int
SVGElement[JC] def setAttribute(name: String, value: String): Unit
SVGElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGElement[JC] def shadowRoot: ShadowRoot
SVGElement[JC] def tagName: String
SVGElement[JC] var textContent: String
SVGElement[JC] def viewportElement: SVGElement
SVGElement[JC] var xmlbase: String
SVGElementInstance[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGElementInstance[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGElementInstance[JC] def childNodes: SVGElementInstanceList
SVGElementInstance[JC] def correspondingElement: SVGElement
SVGElementInstance[JC] def correspondingUseElement: SVGUseElement
SVGElementInstance[JC] def dispatchEvent(evt: Event): Boolean
SVGElementInstance[JC] def firstChild: SVGElementInstance
SVGElementInstance[JC] def lastChild: SVGElementInstance
SVGElementInstance[JC] def nextSibling: SVGElementInstance
SVGElementInstance[JC] def parentNode: SVGElementInstance
SVGElementInstance[JC] def previousSibling: SVGElementInstance
SVGElementInstance[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGElementInstance[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGElementInstanceList[JC] def item(index: Int): SVGElementInstance
SVGElementInstanceList[JC] def length: Int
SVGEllipseElement[JC] var accessKey: String
SVGEllipseElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGEllipseElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGEllipseElement[JC] def after(nodes: Node | String*): Unit
SVGEllipseElement[JC] def append(nodes: Node | String*): Unit
SVGEllipseElement[JC] def appendChild(newChild: Node): Node
SVGEllipseElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGEllipseElement[JC] def attributes: NamedNodeMap
SVGEllipseElement[JC] def baseURI: String
SVGEllipseElement[JC] def before(nodes: Node | String*): Unit
SVGEllipseElement[JC] def childElementCount: Int
SVGEllipseElement[JC] def childNodes: NodeList[Node]
SVGEllipseElement[JC] def children: HTMLCollection[Element]
SVGEllipseElement[JC] var classList: DOMTokenList
SVGEllipseElement[JC] var className: SVGAnimatedString
SVGEllipseElement[JC] def clientHeight: Int
SVGEllipseElement[JC] def clientLeft: Int
SVGEllipseElement[JC] def clientTop: Int
SVGEllipseElement[JC] def clientWidth: Int
SVGEllipseElement[JC] def cloneNode(deep: Boolean?): Node
SVGEllipseElement[JC] def closest(selector: String): Element
SVGEllipseElement[JC] def compareDocumentPosition(other: Node): Int
SVGEllipseElement[JC] def contains(otherNode: Node): Boolean
SVGEllipseElement[JC] def cx: SVGAnimatedLength
SVGEllipseElement[JC] def cy: SVGAnimatedLength
SVGEllipseElement[JC] def dispatchEvent(evt: Event): Boolean
SVGEllipseElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGEllipseElement[JC] var farthestViewportElement: SVGElement
SVGEllipseElement[JC] def firstChild: Node
SVGEllipseElement[JC] def firstElementChild: Element
SVGEllipseElement[JC] def getAttribute(name: String): String
SVGEllipseElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGEllipseElement[JC] def getAttributeNode(name: String): Attr
SVGEllipseElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGEllipseElement[JC] def getBBox(): SVGRect
SVGEllipseElement[JC] def getBoundingClientRect(): DOMRect
SVGEllipseElement[JC] def getCTM(): SVGMatrix
SVGEllipseElement[JC] def getClientRects(): DOMRectList
SVGEllipseElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGEllipseElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGEllipseElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGEllipseElement[JC] def getScreenCTM(): SVGMatrix
SVGEllipseElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
SVGEllipseElement[JC] def hasAttribute(name: String): Boolean
SVGEllipseElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGEllipseElement[JC] def hasAttributes(): Boolean
SVGEllipseElement[JC] def hasChildNodes(): Boolean
SVGEllipseElement[JC] def hasExtension(extension: String): Boolean
SVGEllipseElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGEllipseElement[JC] var id: String
SVGEllipseElement[JC] var innerHTML: String
SVGEllipseElement[JC] var innerText: String
SVGEllipseElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGEllipseElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGEllipseElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGEllipseElement[JC] def isConnected: Boolean
SVGEllipseElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGEllipseElement[JC] def isEqualNode(arg: Node): Boolean
SVGEllipseElement[JC] def isSameNode(other: Node): Boolean
SVGEllipseElement[JC] def isSupported(feature: String, version: String): Boolean
SVGEllipseElement[JC] def lastChild: Node
SVGEllipseElement[JC] def lastElementChild: Element
SVGEllipseElement[JC] def localName: String
SVGEllipseElement[JC] def lookupNamespaceURI(prefix: String): String
SVGEllipseElement[JC] def lookupPrefix(namespaceURI: String): String
SVGEllipseElement[JC] def matches(selector: String): Boolean
SVGEllipseElement[JC] def namespaceURI: String
SVGEllipseElement[JC] var nearestViewportElement: SVGElement
SVGEllipseElement[JC] def nextElementSibling: Element
SVGEllipseElement[JC] def nextSibling: Node
SVGEllipseElement[JC] def nodeName: String
SVGEllipseElement[JC] def nodeType: Int
SVGEllipseElement[JC] var nodeValue: String
SVGEllipseElement[JC] def normalize(): Unit
SVGEllipseElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGEllipseElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGEllipseElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGEllipseElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGEllipseElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGEllipseElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGEllipseElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGEllipseElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGEllipseElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGEllipseElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGEllipseElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGEllipseElement[JC] var onload: js.Function1[Event, _]
SVGEllipseElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGEllipseElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGEllipseElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGEllipseElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGEllipseElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGEllipseElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGEllipseElement[JC] var outerHTML: String
SVGEllipseElement[JC] def ownerDocument: Document
SVGEllipseElement[JC] def ownerSVGElement: SVGSVGElement
SVGEllipseElement[JC] def parentNode: Node
SVGEllipseElement[JC] def prefix: String
SVGEllipseElement[JC] def prepend(nodes: Node | String*): Unit
SVGEllipseElement[JC] def previousElementSibling: Element
SVGEllipseElement[JC] def previousSibling: Node
SVGEllipseElement[JC] def querySelector(selectors: String): Element
SVGEllipseElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGEllipseElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGEllipseElement[JC] def remove(): Unit
SVGEllipseElement[JC] def removeAttribute(name: String): Unit
SVGEllipseElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGEllipseElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGEllipseElement[JC] def removeChild(oldChild: Node): Node
SVGEllipseElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGEllipseElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGEllipseElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGEllipseElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGEllipseElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGEllipseElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGEllipseElement[JC] def requestPointerLock(): Unit
SVGEllipseElement[JC] var requiredExtensions: SVGStringList
SVGEllipseElement[JC] var requiredFeatures: SVGStringList
SVGEllipseElement[JC] def rx: SVGAnimatedLength
SVGEllipseElement[JC] def ry: SVGAnimatedLength
SVGEllipseElement[JC] def scrollHeight: Int
SVGEllipseElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGEllipseElement[JC] var scrollLeft: Double
SVGEllipseElement[JC] var scrollTop: Double
SVGEllipseElement[JC] def scrollWidth: Int
SVGEllipseElement[JC] def setAttribute(name: String, value: String): Unit
SVGEllipseElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGEllipseElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGEllipseElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGEllipseElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGEllipseElement[JC] def shadowRoot: ShadowRoot
SVGEllipseElement[JC] var style: CSSStyleDeclaration
SVGEllipseElement[JC] var systemLanguage: SVGStringList
SVGEllipseElement[JC] def tagName: String
SVGEllipseElement[JC] var textContent: String
SVGEllipseElement[JC] var transform: SVGAnimatedTransformList
SVGEllipseElement[JC] def viewportElement: SVGElement
SVGEllipseElement[JC] var xmlbase: String
SVGEllipseElement[JC] var xmllang: String
SVGEllipseElement[JC] var xmlspace: String
SVGException[JO] val SVG_INVALID_VALUE_ERR: Int
SVGException[JO] val SVG_MATRIX_NOT_INVERTABLE: Int
SVGException[JO] val SVG_WRONG_TYPE_ERR: Int
SVGException[JT] def code: Int
SVGException[JT] def message: String
SVGException[JT] def name: String
SVGExternalResourcesRequired[JT] var externalResourcesRequired: SVGAnimatedBoolean
SVGFEBlendElement[JC] var accessKey: String
SVGFEBlendElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEBlendElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEBlendElement[JC] def after(nodes: Node | String*): Unit
SVGFEBlendElement[JC] def append(nodes: Node | String*): Unit
SVGFEBlendElement[JC] def appendChild(newChild: Node): Node
SVGFEBlendElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEBlendElement[JC] def attributes: NamedNodeMap
SVGFEBlendElement[JC] def baseURI: String
SVGFEBlendElement[JC] def before(nodes: Node | String*): Unit
SVGFEBlendElement[JC] def childElementCount: Int
SVGFEBlendElement[JC] def childNodes: NodeList[Node]
SVGFEBlendElement[JC] def children: HTMLCollection[Element]
SVGFEBlendElement[JC] var classList: DOMTokenList
SVGFEBlendElement[JC] var className: SVGAnimatedString
SVGFEBlendElement[JC] def clientHeight: Int
SVGFEBlendElement[JC] def clientLeft: Int
SVGFEBlendElement[JC] def clientTop: Int
SVGFEBlendElement[JC] def clientWidth: Int
SVGFEBlendElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEBlendElement[JC] def closest(selector: String): Element
SVGFEBlendElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEBlendElement[JC] def contains(otherNode: Node): Boolean
SVGFEBlendElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEBlendElement[JC] def firstChild: Node
SVGFEBlendElement[JC] def firstElementChild: Element
SVGFEBlendElement[JC] def getAttribute(name: String): String
SVGFEBlendElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEBlendElement[JC] def getAttributeNode(name: String): Attr
SVGFEBlendElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEBlendElement[JC] def getBoundingClientRect(): DOMRect
SVGFEBlendElement[JC] def getClientRects(): DOMRectList
SVGFEBlendElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEBlendElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEBlendElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEBlendElement[JC] def hasAttribute(name: String): Boolean
SVGFEBlendElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEBlendElement[JC] def hasAttributes(): Boolean
SVGFEBlendElement[JC] def hasChildNodes(): Boolean
SVGFEBlendElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEBlendElement[JC] def height: SVGAnimatedLength
SVGFEBlendElement[JC] var id: String
SVGFEBlendElement[JC] def in1: SVGAnimatedString
SVGFEBlendElement[JC] def in2: SVGAnimatedString
SVGFEBlendElement[JC] var innerHTML: String
SVGFEBlendElement[JC] var innerText: String
SVGFEBlendElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEBlendElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEBlendElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEBlendElement[JC] def isConnected: Boolean
SVGFEBlendElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEBlendElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEBlendElement[JC] def isSameNode(other: Node): Boolean
SVGFEBlendElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEBlendElement[JC] def lastChild: Node
SVGFEBlendElement[JC] def lastElementChild: Element
SVGFEBlendElement[JC] def localName: String
SVGFEBlendElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEBlendElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEBlendElement[JC] def matches(selector: String): Boolean
SVGFEBlendElement[JC] def mode: SVGAnimatedEnumeration
SVGFEBlendElement[JC] def namespaceURI: String
SVGFEBlendElement[JC] def nextElementSibling: Element
SVGFEBlendElement[JC] def nextSibling: Node
SVGFEBlendElement[JC] def nodeName: String
SVGFEBlendElement[JC] def nodeType: Int
SVGFEBlendElement[JC] var nodeValue: String
SVGFEBlendElement[JC] def normalize(): Unit
SVGFEBlendElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEBlendElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEBlendElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEBlendElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEBlendElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEBlendElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEBlendElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEBlendElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEBlendElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEBlendElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEBlendElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEBlendElement[JC] var onload: js.Function1[Event, _]
SVGFEBlendElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEBlendElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEBlendElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEBlendElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEBlendElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEBlendElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEBlendElement[JC] var outerHTML: String
SVGFEBlendElement[JC] def ownerDocument: Document
SVGFEBlendElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEBlendElement[JC] def parentNode: Node
SVGFEBlendElement[JC] def prefix: String
SVGFEBlendElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEBlendElement[JC] def previousElementSibling: Element
SVGFEBlendElement[JC] def previousSibling: Node
SVGFEBlendElement[JC] def querySelector(selectors: String): Element
SVGFEBlendElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEBlendElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEBlendElement[JC] def remove(): Unit
SVGFEBlendElement[JC] def removeAttribute(name: String): Unit
SVGFEBlendElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEBlendElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEBlendElement[JC] def removeChild(oldChild: Node): Node
SVGFEBlendElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEBlendElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEBlendElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEBlendElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEBlendElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEBlendElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEBlendElement[JC] def requestPointerLock(): Unit
SVGFEBlendElement[JC] def result: SVGAnimatedString
SVGFEBlendElement[JC] def scrollHeight: Int
SVGFEBlendElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEBlendElement[JC] var scrollLeft: Double
SVGFEBlendElement[JC] var scrollTop: Double
SVGFEBlendElement[JC] def scrollWidth: Int
SVGFEBlendElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEBlendElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEBlendElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEBlendElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEBlendElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEBlendElement[JC] def shadowRoot: ShadowRoot
SVGFEBlendElement[JC] var style: CSSStyleDeclaration
SVGFEBlendElement[JC] def tagName: String
SVGFEBlendElement[JC] var textContent: String
SVGFEBlendElement[JC] def viewportElement: SVGElement
SVGFEBlendElement[JC] def width: SVGAnimatedLength
SVGFEBlendElement[JC] def x: SVGAnimatedLength
SVGFEBlendElement[JC] var xmlbase: String
SVGFEBlendElement[JC] def y: SVGAnimatedLength
SVGFEBlendElement[JO] val SVG_FEBLEND_MODE_DARKEN: Int
SVGFEBlendElement[JO] val SVG_FEBLEND_MODE_LIGHTEN: Int
SVGFEBlendElement[JO] val SVG_FEBLEND_MODE_MULTIPLY: Int
SVGFEBlendElement[JO] val SVG_FEBLEND_MODE_NORMAL: Int
SVGFEBlendElement[JO] val SVG_FEBLEND_MODE_SCREEN: Int
SVGFEBlendElement[JO] val SVG_FEBLEND_MODE_UNKNOWN: Int
SVGFEColorMatrixElement[JC] var accessKey: String
SVGFEColorMatrixElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEColorMatrixElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEColorMatrixElement[JC] def after(nodes: Node | String*): Unit
SVGFEColorMatrixElement[JC] def append(nodes: Node | String*): Unit
SVGFEColorMatrixElement[JC] def appendChild(newChild: Node): Node
SVGFEColorMatrixElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEColorMatrixElement[JC] def attributes: NamedNodeMap
SVGFEColorMatrixElement[JC] def baseURI: String
SVGFEColorMatrixElement[JC] def before(nodes: Node | String*): Unit
SVGFEColorMatrixElement[JC] def childElementCount: Int
SVGFEColorMatrixElement[JC] def childNodes: NodeList[Node]
SVGFEColorMatrixElement[JC] def children: HTMLCollection[Element]
SVGFEColorMatrixElement[JC] var classList: DOMTokenList
SVGFEColorMatrixElement[JC] var className: SVGAnimatedString
SVGFEColorMatrixElement[JC] def clientHeight: Int
SVGFEColorMatrixElement[JC] def clientLeft: Int
SVGFEColorMatrixElement[JC] def clientTop: Int
SVGFEColorMatrixElement[JC] def clientWidth: Int
SVGFEColorMatrixElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEColorMatrixElement[JC] def closest(selector: String): Element
SVGFEColorMatrixElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEColorMatrixElement[JC] def contains(otherNode: Node): Boolean
SVGFEColorMatrixElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEColorMatrixElement[JC] def firstChild: Node
SVGFEColorMatrixElement[JC] def firstElementChild: Element
SVGFEColorMatrixElement[JC] def getAttribute(name: String): String
SVGFEColorMatrixElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEColorMatrixElement[JC] def getAttributeNode(name: String): Attr
SVGFEColorMatrixElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEColorMatrixElement[JC] def getBoundingClientRect(): DOMRect
SVGFEColorMatrixElement[JC] def getClientRects(): DOMRectList
SVGFEColorMatrixElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEColorMatrixElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEColorMatrixElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEColorMatrixElement[JC] def hasAttribute(name: String): Boolean
SVGFEColorMatrixElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEColorMatrixElement[JC] def hasAttributes(): Boolean
SVGFEColorMatrixElement[JC] def hasChildNodes(): Boolean
SVGFEColorMatrixElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEColorMatrixElement[JC] def height: SVGAnimatedLength
SVGFEColorMatrixElement[JC] var id: String
SVGFEColorMatrixElement[JC] def in1: SVGAnimatedString
SVGFEColorMatrixElement[JC] var innerHTML: String
SVGFEColorMatrixElement[JC] var innerText: String
SVGFEColorMatrixElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEColorMatrixElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEColorMatrixElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEColorMatrixElement[JC] def isConnected: Boolean
SVGFEColorMatrixElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEColorMatrixElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEColorMatrixElement[JC] def isSameNode(other: Node): Boolean
SVGFEColorMatrixElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEColorMatrixElement[JC] def lastChild: Node
SVGFEColorMatrixElement[JC] def lastElementChild: Element
SVGFEColorMatrixElement[JC] def localName: String
SVGFEColorMatrixElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEColorMatrixElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEColorMatrixElement[JC] def matches(selector: String): Boolean
SVGFEColorMatrixElement[JC] def namespaceURI: String
SVGFEColorMatrixElement[JC] def nextElementSibling: Element
SVGFEColorMatrixElement[JC] def nextSibling: Node
SVGFEColorMatrixElement[JC] def nodeName: String
SVGFEColorMatrixElement[JC] def nodeType: Int
SVGFEColorMatrixElement[JC] var nodeValue: String
SVGFEColorMatrixElement[JC] def normalize(): Unit
SVGFEColorMatrixElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEColorMatrixElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEColorMatrixElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEColorMatrixElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEColorMatrixElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEColorMatrixElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEColorMatrixElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEColorMatrixElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEColorMatrixElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEColorMatrixElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEColorMatrixElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEColorMatrixElement[JC] var onload: js.Function1[Event, _]
SVGFEColorMatrixElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEColorMatrixElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEColorMatrixElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEColorMatrixElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEColorMatrixElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEColorMatrixElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEColorMatrixElement[JC] var outerHTML: String
SVGFEColorMatrixElement[JC] def ownerDocument: Document
SVGFEColorMatrixElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEColorMatrixElement[JC] def parentNode: Node
SVGFEColorMatrixElement[JC] def prefix: String
SVGFEColorMatrixElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEColorMatrixElement[JC] def previousElementSibling: Element
SVGFEColorMatrixElement[JC] def previousSibling: Node
SVGFEColorMatrixElement[JC] def querySelector(selectors: String): Element
SVGFEColorMatrixElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEColorMatrixElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEColorMatrixElement[JC] def remove(): Unit
SVGFEColorMatrixElement[JC] def removeAttribute(name: String): Unit
SVGFEColorMatrixElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEColorMatrixElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEColorMatrixElement[JC] def removeChild(oldChild: Node): Node
SVGFEColorMatrixElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEColorMatrixElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEColorMatrixElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEColorMatrixElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEColorMatrixElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEColorMatrixElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEColorMatrixElement[JC] def requestPointerLock(): Unit
SVGFEColorMatrixElement[JC] def result: SVGAnimatedString
SVGFEColorMatrixElement[JC] def scrollHeight: Int
SVGFEColorMatrixElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEColorMatrixElement[JC] var scrollLeft: Double
SVGFEColorMatrixElement[JC] var scrollTop: Double
SVGFEColorMatrixElement[JC] def scrollWidth: Int
SVGFEColorMatrixElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEColorMatrixElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEColorMatrixElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEColorMatrixElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEColorMatrixElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEColorMatrixElement[JC] def shadowRoot: ShadowRoot
SVGFEColorMatrixElement[JC] var style: CSSStyleDeclaration
SVGFEColorMatrixElement[JC] def tagName: String
SVGFEColorMatrixElement[JC] var textContent: String
SVGFEColorMatrixElement[JC] def `type`: SVGAnimatedEnumeration
SVGFEColorMatrixElement[JC] def values: SVGAnimatedNumberList
SVGFEColorMatrixElement[JC] def viewportElement: SVGElement
SVGFEColorMatrixElement[JC] def width: SVGAnimatedLength
SVGFEColorMatrixElement[JC] def x: SVGAnimatedLength
SVGFEColorMatrixElement[JC] var xmlbase: String
SVGFEColorMatrixElement[JC] def y: SVGAnimatedLength
SVGFEColorMatrixElement[JO] val SVG_FECOLORMATRIX_TYPE_HUEROTATE: Int
SVGFEColorMatrixElement[JO] val SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: Int
SVGFEColorMatrixElement[JO] val SVG_FECOLORMATRIX_TYPE_MATRIX: Int
SVGFEColorMatrixElement[JO] val SVG_FECOLORMATRIX_TYPE_SATURATE: Int
SVGFEColorMatrixElement[JO] val SVG_FECOLORMATRIX_TYPE_UNKNOWN: Int
SVGFEComponentTransferElement[JC] var accessKey: String
SVGFEComponentTransferElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEComponentTransferElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEComponentTransferElement[JC] def after(nodes: Node | String*): Unit
SVGFEComponentTransferElement[JC] def append(nodes: Node | String*): Unit
SVGFEComponentTransferElement[JC] def appendChild(newChild: Node): Node
SVGFEComponentTransferElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEComponentTransferElement[JC] def attributes: NamedNodeMap
SVGFEComponentTransferElement[JC] def baseURI: String
SVGFEComponentTransferElement[JC] def before(nodes: Node | String*): Unit
SVGFEComponentTransferElement[JC] def childElementCount: Int
SVGFEComponentTransferElement[JC] def childNodes: NodeList[Node]
SVGFEComponentTransferElement[JC] def children: HTMLCollection[Element]
SVGFEComponentTransferElement[JC] var classList: DOMTokenList
SVGFEComponentTransferElement[JC] var className: SVGAnimatedString
SVGFEComponentTransferElement[JC] def clientHeight: Int
SVGFEComponentTransferElement[JC] def clientLeft: Int
SVGFEComponentTransferElement[JC] def clientTop: Int
SVGFEComponentTransferElement[JC] def clientWidth: Int
SVGFEComponentTransferElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEComponentTransferElement[JC] def closest(selector: String): Element
SVGFEComponentTransferElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEComponentTransferElement[JC] def contains(otherNode: Node): Boolean
SVGFEComponentTransferElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEComponentTransferElement[JC] def firstChild: Node
SVGFEComponentTransferElement[JC] def firstElementChild: Element
SVGFEComponentTransferElement[JC] def getAttribute(name: String): String
SVGFEComponentTransferElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEComponentTransferElement[JC] def getAttributeNode(name: String): Attr
SVGFEComponentTransferElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEComponentTransferElement[JC] def getBoundingClientRect(): DOMRect
SVGFEComponentTransferElement[JC] def getClientRects(): DOMRectList
SVGFEComponentTransferElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEComponentTransferElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEComponentTransferElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEComponentTransferElement[JC] def hasAttribute(name: String): Boolean
SVGFEComponentTransferElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEComponentTransferElement[JC] def hasAttributes(): Boolean
SVGFEComponentTransferElement[JC] def hasChildNodes(): Boolean
SVGFEComponentTransferElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEComponentTransferElement[JC] def height: SVGAnimatedLength
SVGFEComponentTransferElement[JC] var id: String
SVGFEComponentTransferElement[JC] def in1: SVGAnimatedString
SVGFEComponentTransferElement[JC] var innerHTML: String
SVGFEComponentTransferElement[JC] var innerText: String
SVGFEComponentTransferElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEComponentTransferElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEComponentTransferElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEComponentTransferElement[JC] def isConnected: Boolean
SVGFEComponentTransferElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEComponentTransferElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEComponentTransferElement[JC] def isSameNode(other: Node): Boolean
SVGFEComponentTransferElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEComponentTransferElement[JC] def lastChild: Node
SVGFEComponentTransferElement[JC] def lastElementChild: Element
SVGFEComponentTransferElement[JC] def localName: String
SVGFEComponentTransferElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEComponentTransferElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEComponentTransferElement[JC] def matches(selector: String): Boolean
SVGFEComponentTransferElement[JC] def namespaceURI: String
SVGFEComponentTransferElement[JC] def nextElementSibling: Element
SVGFEComponentTransferElement[JC] def nextSibling: Node
SVGFEComponentTransferElement[JC] def nodeName: String
SVGFEComponentTransferElement[JC] def nodeType: Int
SVGFEComponentTransferElement[JC] var nodeValue: String
SVGFEComponentTransferElement[JC] def normalize(): Unit
SVGFEComponentTransferElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEComponentTransferElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEComponentTransferElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEComponentTransferElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEComponentTransferElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEComponentTransferElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEComponentTransferElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEComponentTransferElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEComponentTransferElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEComponentTransferElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEComponentTransferElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEComponentTransferElement[JC] var onload: js.Function1[Event, _]
SVGFEComponentTransferElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEComponentTransferElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEComponentTransferElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEComponentTransferElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEComponentTransferElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEComponentTransferElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEComponentTransferElement[JC] var outerHTML: String
SVGFEComponentTransferElement[JC] def ownerDocument: Document
SVGFEComponentTransferElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEComponentTransferElement[JC] def parentNode: Node
SVGFEComponentTransferElement[JC] def prefix: String
SVGFEComponentTransferElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEComponentTransferElement[JC] def previousElementSibling: Element
SVGFEComponentTransferElement[JC] def previousSibling: Node
SVGFEComponentTransferElement[JC] def querySelector(selectors: String): Element
SVGFEComponentTransferElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEComponentTransferElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEComponentTransferElement[JC] def remove(): Unit
SVGFEComponentTransferElement[JC] def removeAttribute(name: String): Unit
SVGFEComponentTransferElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEComponentTransferElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEComponentTransferElement[JC] def removeChild(oldChild: Node): Node
SVGFEComponentTransferElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEComponentTransferElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEComponentTransferElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEComponentTransferElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEComponentTransferElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEComponentTransferElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEComponentTransferElement[JC] def requestPointerLock(): Unit
SVGFEComponentTransferElement[JC] def result: SVGAnimatedString
SVGFEComponentTransferElement[JC] def scrollHeight: Int
SVGFEComponentTransferElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEComponentTransferElement[JC] var scrollLeft: Double
SVGFEComponentTransferElement[JC] var scrollTop: Double
SVGFEComponentTransferElement[JC] def scrollWidth: Int
SVGFEComponentTransferElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEComponentTransferElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEComponentTransferElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEComponentTransferElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEComponentTransferElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEComponentTransferElement[JC] def shadowRoot: ShadowRoot
SVGFEComponentTransferElement[JC] var style: CSSStyleDeclaration
SVGFEComponentTransferElement[JC] def tagName: String
SVGFEComponentTransferElement[JC] var textContent: String
SVGFEComponentTransferElement[JC] def viewportElement: SVGElement
SVGFEComponentTransferElement[JC] def width: SVGAnimatedLength
SVGFEComponentTransferElement[JC] def x: SVGAnimatedLength
SVGFEComponentTransferElement[JC] var xmlbase: String
SVGFEComponentTransferElement[JC] def y: SVGAnimatedLength
SVGFECompositeElement[JC] var accessKey: String
SVGFECompositeElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFECompositeElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFECompositeElement[JC] def after(nodes: Node | String*): Unit
SVGFECompositeElement[JC] def append(nodes: Node | String*): Unit
SVGFECompositeElement[JC] def appendChild(newChild: Node): Node
SVGFECompositeElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFECompositeElement[JC] def attributes: NamedNodeMap
SVGFECompositeElement[JC] def baseURI: String
SVGFECompositeElement[JC] def before(nodes: Node | String*): Unit
SVGFECompositeElement[JC] def childElementCount: Int
SVGFECompositeElement[JC] def childNodes: NodeList[Node]
SVGFECompositeElement[JC] def children: HTMLCollection[Element]
SVGFECompositeElement[JC] var classList: DOMTokenList
SVGFECompositeElement[JC] var className: SVGAnimatedString
SVGFECompositeElement[JC] def clientHeight: Int
SVGFECompositeElement[JC] def clientLeft: Int
SVGFECompositeElement[JC] def clientTop: Int
SVGFECompositeElement[JC] def clientWidth: Int
SVGFECompositeElement[JC] def cloneNode(deep: Boolean?): Node
SVGFECompositeElement[JC] def closest(selector: String): Element
SVGFECompositeElement[JC] def compareDocumentPosition(other: Node): Int
SVGFECompositeElement[JC] def contains(otherNode: Node): Boolean
SVGFECompositeElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFECompositeElement[JC] def firstChild: Node
SVGFECompositeElement[JC] def firstElementChild: Element
SVGFECompositeElement[JC] def getAttribute(name: String): String
SVGFECompositeElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFECompositeElement[JC] def getAttributeNode(name: String): Attr
SVGFECompositeElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFECompositeElement[JC] def getBoundingClientRect(): DOMRect
SVGFECompositeElement[JC] def getClientRects(): DOMRectList
SVGFECompositeElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFECompositeElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFECompositeElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFECompositeElement[JC] def hasAttribute(name: String): Boolean
SVGFECompositeElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFECompositeElement[JC] def hasAttributes(): Boolean
SVGFECompositeElement[JC] def hasChildNodes(): Boolean
SVGFECompositeElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFECompositeElement[JC] def height: SVGAnimatedLength
SVGFECompositeElement[JC] var id: String
SVGFECompositeElement[JC] def in1: SVGAnimatedString
SVGFECompositeElement[JC] def in2: SVGAnimatedString
SVGFECompositeElement[JC] var innerHTML: String
SVGFECompositeElement[JC] var innerText: String
SVGFECompositeElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFECompositeElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFECompositeElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFECompositeElement[JC] def isConnected: Boolean
SVGFECompositeElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFECompositeElement[JC] def isEqualNode(arg: Node): Boolean
SVGFECompositeElement[JC] def isSameNode(other: Node): Boolean
SVGFECompositeElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFECompositeElement[JC] def k1: SVGAnimatedNumber
SVGFECompositeElement[JC] def k2: SVGAnimatedNumber
SVGFECompositeElement[JC] def k3: SVGAnimatedNumber
SVGFECompositeElement[JC] def k4: SVGAnimatedNumber
SVGFECompositeElement[JC] def lastChild: Node
SVGFECompositeElement[JC] def lastElementChild: Element
SVGFECompositeElement[JC] def localName: String
SVGFECompositeElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFECompositeElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFECompositeElement[JC] def matches(selector: String): Boolean
SVGFECompositeElement[JC] def namespaceURI: String
SVGFECompositeElement[JC] def nextElementSibling: Element
SVGFECompositeElement[JC] def nextSibling: Node
SVGFECompositeElement[JC] def nodeName: String
SVGFECompositeElement[JC] def nodeType: Int
SVGFECompositeElement[JC] var nodeValue: String
SVGFECompositeElement[JC] def normalize(): Unit
SVGFECompositeElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFECompositeElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFECompositeElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFECompositeElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFECompositeElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFECompositeElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFECompositeElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFECompositeElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFECompositeElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFECompositeElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFECompositeElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFECompositeElement[JC] var onload: js.Function1[Event, _]
SVGFECompositeElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFECompositeElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFECompositeElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFECompositeElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFECompositeElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFECompositeElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFECompositeElement[JC] def operator: SVGAnimatedEnumeration
SVGFECompositeElement[JC] var outerHTML: String
SVGFECompositeElement[JC] def ownerDocument: Document
SVGFECompositeElement[JC] def ownerSVGElement: SVGSVGElement
SVGFECompositeElement[JC] def parentNode: Node
SVGFECompositeElement[JC] def prefix: String
SVGFECompositeElement[JC] def prepend(nodes: Node | String*): Unit
SVGFECompositeElement[JC] def previousElementSibling: Element
SVGFECompositeElement[JC] def previousSibling: Node
SVGFECompositeElement[JC] def querySelector(selectors: String): Element
SVGFECompositeElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFECompositeElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFECompositeElement[JC] def remove(): Unit
SVGFECompositeElement[JC] def removeAttribute(name: String): Unit
SVGFECompositeElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFECompositeElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFECompositeElement[JC] def removeChild(oldChild: Node): Node
SVGFECompositeElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFECompositeElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFECompositeElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFECompositeElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFECompositeElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFECompositeElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFECompositeElement[JC] def requestPointerLock(): Unit
SVGFECompositeElement[JC] def result: SVGAnimatedString
SVGFECompositeElement[JC] def scrollHeight: Int
SVGFECompositeElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFECompositeElement[JC] var scrollLeft: Double
SVGFECompositeElement[JC] var scrollTop: Double
SVGFECompositeElement[JC] def scrollWidth: Int
SVGFECompositeElement[JC] def setAttribute(name: String, value: String): Unit
SVGFECompositeElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFECompositeElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFECompositeElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFECompositeElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFECompositeElement[JC] def shadowRoot: ShadowRoot
SVGFECompositeElement[JC] var style: CSSStyleDeclaration
SVGFECompositeElement[JC] def tagName: String
SVGFECompositeElement[JC] var textContent: String
SVGFECompositeElement[JC] def viewportElement: SVGElement
SVGFECompositeElement[JC] def width: SVGAnimatedLength
SVGFECompositeElement[JC] def x: SVGAnimatedLength
SVGFECompositeElement[JC] var xmlbase: String
SVGFECompositeElement[JC] def y: SVGAnimatedLength
SVGFECompositeElement[JO] val SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: Int
SVGFECompositeElement[JO] val SVG_FECOMPOSITE_OPERATOR_ATOP: Int
SVGFECompositeElement[JO] val SVG_FECOMPOSITE_OPERATOR_IN: Int
SVGFECompositeElement[JO] val SVG_FECOMPOSITE_OPERATOR_OUT: Int
SVGFECompositeElement[JO] val SVG_FECOMPOSITE_OPERATOR_OVER: Int
SVGFECompositeElement[JO] val SVG_FECOMPOSITE_OPERATOR_UNKNOWN: Int
SVGFECompositeElement[JO] val SVG_FECOMPOSITE_OPERATOR_XOR: Int
SVGFEConvolveMatrixElement[JC] var accessKey: String
SVGFEConvolveMatrixElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEConvolveMatrixElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEConvolveMatrixElement[JC] def after(nodes: Node | String*): Unit
SVGFEConvolveMatrixElement[JC] def append(nodes: Node | String*): Unit
SVGFEConvolveMatrixElement[JC] def appendChild(newChild: Node): Node
SVGFEConvolveMatrixElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEConvolveMatrixElement[JC] def attributes: NamedNodeMap
SVGFEConvolveMatrixElement[JC] def baseURI: String
SVGFEConvolveMatrixElement[JC] def before(nodes: Node | String*): Unit
SVGFEConvolveMatrixElement[JC] def bias: SVGAnimatedNumber
SVGFEConvolveMatrixElement[JC] def childElementCount: Int
SVGFEConvolveMatrixElement[JC] def childNodes: NodeList[Node]
SVGFEConvolveMatrixElement[JC] def children: HTMLCollection[Element]
SVGFEConvolveMatrixElement[JC] var classList: DOMTokenList
SVGFEConvolveMatrixElement[JC] var className: SVGAnimatedString
SVGFEConvolveMatrixElement[JC] def clientHeight: Int
SVGFEConvolveMatrixElement[JC] def clientLeft: Int
SVGFEConvolveMatrixElement[JC] def clientTop: Int
SVGFEConvolveMatrixElement[JC] def clientWidth: Int
SVGFEConvolveMatrixElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEConvolveMatrixElement[JC] def closest(selector: String): Element
SVGFEConvolveMatrixElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEConvolveMatrixElement[JC] def contains(otherNode: Node): Boolean
SVGFEConvolveMatrixElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEConvolveMatrixElement[JC] def divisor: SVGAnimatedNumber
SVGFEConvolveMatrixElement[JC] def edgeMode: SVGAnimatedEnumeration
SVGFEConvolveMatrixElement[JC] def firstChild: Node
SVGFEConvolveMatrixElement[JC] def firstElementChild: Element
SVGFEConvolveMatrixElement[JC] def getAttribute(name: String): String
SVGFEConvolveMatrixElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEConvolveMatrixElement[JC] def getAttributeNode(name: String): Attr
SVGFEConvolveMatrixElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEConvolveMatrixElement[JC] def getBoundingClientRect(): DOMRect
SVGFEConvolveMatrixElement[JC] def getClientRects(): DOMRectList
SVGFEConvolveMatrixElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEConvolveMatrixElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEConvolveMatrixElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEConvolveMatrixElement[JC] def hasAttribute(name: String): Boolean
SVGFEConvolveMatrixElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEConvolveMatrixElement[JC] def hasAttributes(): Boolean
SVGFEConvolveMatrixElement[JC] def hasChildNodes(): Boolean
SVGFEConvolveMatrixElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEConvolveMatrixElement[JC] def height: SVGAnimatedLength
SVGFEConvolveMatrixElement[JC] var id: String
SVGFEConvolveMatrixElement[JC] def in1: SVGAnimatedString
SVGFEConvolveMatrixElement[JC] var innerHTML: String
SVGFEConvolveMatrixElement[JC] var innerText: String
SVGFEConvolveMatrixElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEConvolveMatrixElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEConvolveMatrixElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEConvolveMatrixElement[JC] def isConnected: Boolean
SVGFEConvolveMatrixElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEConvolveMatrixElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEConvolveMatrixElement[JC] def isSameNode(other: Node): Boolean
SVGFEConvolveMatrixElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEConvolveMatrixElement[JC] def kernelMatrix: SVGAnimatedNumberList
SVGFEConvolveMatrixElement[JC] def kernelUnitLengthX: SVGAnimatedNumber
SVGFEConvolveMatrixElement[JC] def kernelUnitLengthY: SVGAnimatedNumber
SVGFEConvolveMatrixElement[JC] def lastChild: Node
SVGFEConvolveMatrixElement[JC] def lastElementChild: Element
SVGFEConvolveMatrixElement[JC] def localName: String
SVGFEConvolveMatrixElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEConvolveMatrixElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEConvolveMatrixElement[JC] def matches(selector: String): Boolean
SVGFEConvolveMatrixElement[JC] def namespaceURI: String
SVGFEConvolveMatrixElement[JC] def nextElementSibling: Element
SVGFEConvolveMatrixElement[JC] def nextSibling: Node
SVGFEConvolveMatrixElement[JC] def nodeName: String
SVGFEConvolveMatrixElement[JC] def nodeType: Int
SVGFEConvolveMatrixElement[JC] var nodeValue: String
SVGFEConvolveMatrixElement[JC] def normalize(): Unit
SVGFEConvolveMatrixElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEConvolveMatrixElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEConvolveMatrixElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEConvolveMatrixElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEConvolveMatrixElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEConvolveMatrixElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEConvolveMatrixElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEConvolveMatrixElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEConvolveMatrixElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEConvolveMatrixElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEConvolveMatrixElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEConvolveMatrixElement[JC] var onload: js.Function1[Event, _]
SVGFEConvolveMatrixElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEConvolveMatrixElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEConvolveMatrixElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEConvolveMatrixElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEConvolveMatrixElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEConvolveMatrixElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEConvolveMatrixElement[JC] def orderX: SVGAnimatedInteger
SVGFEConvolveMatrixElement[JC] def orderY: SVGAnimatedInteger
SVGFEConvolveMatrixElement[JC] var outerHTML: String
SVGFEConvolveMatrixElement[JC] def ownerDocument: Document
SVGFEConvolveMatrixElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEConvolveMatrixElement[JC] def parentNode: Node
SVGFEConvolveMatrixElement[JC] def prefix: String
SVGFEConvolveMatrixElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEConvolveMatrixElement[JC] def preserveAlpha: SVGAnimatedBoolean
SVGFEConvolveMatrixElement[JC] def previousElementSibling: Element
SVGFEConvolveMatrixElement[JC] def previousSibling: Node
SVGFEConvolveMatrixElement[JC] def querySelector(selectors: String): Element
SVGFEConvolveMatrixElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEConvolveMatrixElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEConvolveMatrixElement[JC] def remove(): Unit
SVGFEConvolveMatrixElement[JC] def removeAttribute(name: String): Unit
SVGFEConvolveMatrixElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEConvolveMatrixElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEConvolveMatrixElement[JC] def removeChild(oldChild: Node): Node
SVGFEConvolveMatrixElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEConvolveMatrixElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEConvolveMatrixElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEConvolveMatrixElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEConvolveMatrixElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEConvolveMatrixElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEConvolveMatrixElement[JC] def requestPointerLock(): Unit
SVGFEConvolveMatrixElement[JC] def result: SVGAnimatedString
SVGFEConvolveMatrixElement[JC] def scrollHeight: Int
SVGFEConvolveMatrixElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEConvolveMatrixElement[JC] var scrollLeft: Double
SVGFEConvolveMatrixElement[JC] var scrollTop: Double
SVGFEConvolveMatrixElement[JC] def scrollWidth: Int
SVGFEConvolveMatrixElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEConvolveMatrixElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEConvolveMatrixElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEConvolveMatrixElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEConvolveMatrixElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEConvolveMatrixElement[JC] def shadowRoot: ShadowRoot
SVGFEConvolveMatrixElement[JC] var style: CSSStyleDeclaration
SVGFEConvolveMatrixElement[JC] def tagName: String
SVGFEConvolveMatrixElement[JC] def targetX: SVGAnimatedInteger
SVGFEConvolveMatrixElement[JC] def targetY: SVGAnimatedInteger
SVGFEConvolveMatrixElement[JC] var textContent: String
SVGFEConvolveMatrixElement[JC] def viewportElement: SVGElement
SVGFEConvolveMatrixElement[JC] def width: SVGAnimatedLength
SVGFEConvolveMatrixElement[JC] def x: SVGAnimatedLength
SVGFEConvolveMatrixElement[JC] var xmlbase: String
SVGFEConvolveMatrixElement[JC] def y: SVGAnimatedLength
SVGFEConvolveMatrixElement[JO] val SVG_EDGEMODE_DUPLICATE: Int
SVGFEConvolveMatrixElement[JO] val SVG_EDGEMODE_NONE: Int
SVGFEConvolveMatrixElement[JO] val SVG_EDGEMODE_UNKNOWN: Int
SVGFEConvolveMatrixElement[JO] val SVG_EDGEMODE_WRAP: Int
SVGFEDiffuseLightingElement[JC] var accessKey: String
SVGFEDiffuseLightingElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEDiffuseLightingElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEDiffuseLightingElement[JC] def after(nodes: Node | String*): Unit
SVGFEDiffuseLightingElement[JC] def append(nodes: Node | String*): Unit
SVGFEDiffuseLightingElement[JC] def appendChild(newChild: Node): Node
SVGFEDiffuseLightingElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEDiffuseLightingElement[JC] def attributes: NamedNodeMap
SVGFEDiffuseLightingElement[JC] def baseURI: String
SVGFEDiffuseLightingElement[JC] def before(nodes: Node | String*): Unit
SVGFEDiffuseLightingElement[JC] def childElementCount: Int
SVGFEDiffuseLightingElement[JC] def childNodes: NodeList[Node]
SVGFEDiffuseLightingElement[JC] def children: HTMLCollection[Element]
SVGFEDiffuseLightingElement[JC] var classList: DOMTokenList
SVGFEDiffuseLightingElement[JC] var className: SVGAnimatedString
SVGFEDiffuseLightingElement[JC] def clientHeight: Int
SVGFEDiffuseLightingElement[JC] def clientLeft: Int
SVGFEDiffuseLightingElement[JC] def clientTop: Int
SVGFEDiffuseLightingElement[JC] def clientWidth: Int
SVGFEDiffuseLightingElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEDiffuseLightingElement[JC] def closest(selector: String): Element
SVGFEDiffuseLightingElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEDiffuseLightingElement[JC] def contains(otherNode: Node): Boolean
SVGFEDiffuseLightingElement[JC] def diffuseConstant: SVGAnimatedNumber
SVGFEDiffuseLightingElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEDiffuseLightingElement[JC] def firstChild: Node
SVGFEDiffuseLightingElement[JC] def firstElementChild: Element
SVGFEDiffuseLightingElement[JC] def getAttribute(name: String): String
SVGFEDiffuseLightingElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEDiffuseLightingElement[JC] def getAttributeNode(name: String): Attr
SVGFEDiffuseLightingElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEDiffuseLightingElement[JC] def getBoundingClientRect(): DOMRect
SVGFEDiffuseLightingElement[JC] def getClientRects(): DOMRectList
SVGFEDiffuseLightingElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEDiffuseLightingElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEDiffuseLightingElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEDiffuseLightingElement[JC] def hasAttribute(name: String): Boolean
SVGFEDiffuseLightingElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEDiffuseLightingElement[JC] def hasAttributes(): Boolean
SVGFEDiffuseLightingElement[JC] def hasChildNodes(): Boolean
SVGFEDiffuseLightingElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEDiffuseLightingElement[JC] def height: SVGAnimatedLength
SVGFEDiffuseLightingElement[JC] var id: String
SVGFEDiffuseLightingElement[JC] def in1: SVGAnimatedString
SVGFEDiffuseLightingElement[JC] var innerHTML: String
SVGFEDiffuseLightingElement[JC] var innerText: String
SVGFEDiffuseLightingElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEDiffuseLightingElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEDiffuseLightingElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEDiffuseLightingElement[JC] def isConnected: Boolean
SVGFEDiffuseLightingElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEDiffuseLightingElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEDiffuseLightingElement[JC] def isSameNode(other: Node): Boolean
SVGFEDiffuseLightingElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEDiffuseLightingElement[JC] def kernelUnitLengthX: SVGAnimatedNumber
SVGFEDiffuseLightingElement[JC] def kernelUnitLengthY: SVGAnimatedNumber
SVGFEDiffuseLightingElement[JC] def lastChild: Node
SVGFEDiffuseLightingElement[JC] def lastElementChild: Element
SVGFEDiffuseLightingElement[JC] def localName: String
SVGFEDiffuseLightingElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEDiffuseLightingElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEDiffuseLightingElement[JC] def matches(selector: String): Boolean
SVGFEDiffuseLightingElement[JC] def namespaceURI: String
SVGFEDiffuseLightingElement[JC] def nextElementSibling: Element
SVGFEDiffuseLightingElement[JC] def nextSibling: Node
SVGFEDiffuseLightingElement[JC] def nodeName: String
SVGFEDiffuseLightingElement[JC] def nodeType: Int
SVGFEDiffuseLightingElement[JC] var nodeValue: String
SVGFEDiffuseLightingElement[JC] def normalize(): Unit
SVGFEDiffuseLightingElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEDiffuseLightingElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEDiffuseLightingElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEDiffuseLightingElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEDiffuseLightingElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEDiffuseLightingElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEDiffuseLightingElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEDiffuseLightingElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEDiffuseLightingElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEDiffuseLightingElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEDiffuseLightingElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEDiffuseLightingElement[JC] var onload: js.Function1[Event, _]
SVGFEDiffuseLightingElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEDiffuseLightingElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEDiffuseLightingElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEDiffuseLightingElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEDiffuseLightingElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEDiffuseLightingElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEDiffuseLightingElement[JC] var outerHTML: String
SVGFEDiffuseLightingElement[JC] def ownerDocument: Document
SVGFEDiffuseLightingElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEDiffuseLightingElement[JC] def parentNode: Node
SVGFEDiffuseLightingElement[JC] def prefix: String
SVGFEDiffuseLightingElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEDiffuseLightingElement[JC] def previousElementSibling: Element
SVGFEDiffuseLightingElement[JC] def previousSibling: Node
SVGFEDiffuseLightingElement[JC] def querySelector(selectors: String): Element
SVGFEDiffuseLightingElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEDiffuseLightingElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEDiffuseLightingElement[JC] def remove(): Unit
SVGFEDiffuseLightingElement[JC] def removeAttribute(name: String): Unit
SVGFEDiffuseLightingElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEDiffuseLightingElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEDiffuseLightingElement[JC] def removeChild(oldChild: Node): Node
SVGFEDiffuseLightingElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEDiffuseLightingElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEDiffuseLightingElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEDiffuseLightingElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEDiffuseLightingElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEDiffuseLightingElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEDiffuseLightingElement[JC] def requestPointerLock(): Unit
SVGFEDiffuseLightingElement[JC] def result: SVGAnimatedString
SVGFEDiffuseLightingElement[JC] def scrollHeight: Int
SVGFEDiffuseLightingElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEDiffuseLightingElement[JC] var scrollLeft: Double
SVGFEDiffuseLightingElement[JC] var scrollTop: Double
SVGFEDiffuseLightingElement[JC] def scrollWidth: Int
SVGFEDiffuseLightingElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEDiffuseLightingElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEDiffuseLightingElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEDiffuseLightingElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEDiffuseLightingElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEDiffuseLightingElement[JC] def shadowRoot: ShadowRoot
SVGFEDiffuseLightingElement[JC] var style: CSSStyleDeclaration
SVGFEDiffuseLightingElement[JC] def surfaceScale: SVGAnimatedNumber
SVGFEDiffuseLightingElement[JC] def tagName: String
SVGFEDiffuseLightingElement[JC] var textContent: String
SVGFEDiffuseLightingElement[JC] def viewportElement: SVGElement
SVGFEDiffuseLightingElement[JC] def width: SVGAnimatedLength
SVGFEDiffuseLightingElement[JC] def x: SVGAnimatedLength
SVGFEDiffuseLightingElement[JC] var xmlbase: String
SVGFEDiffuseLightingElement[JC] def y: SVGAnimatedLength
SVGFEDisplacementMapElement[JC] var accessKey: String
SVGFEDisplacementMapElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEDisplacementMapElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEDisplacementMapElement[JC] def after(nodes: Node | String*): Unit
SVGFEDisplacementMapElement[JC] def append(nodes: Node | String*): Unit
SVGFEDisplacementMapElement[JC] def appendChild(newChild: Node): Node
SVGFEDisplacementMapElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEDisplacementMapElement[JC] def attributes: NamedNodeMap
SVGFEDisplacementMapElement[JC] def baseURI: String
SVGFEDisplacementMapElement[JC] def before(nodes: Node | String*): Unit
SVGFEDisplacementMapElement[JC] def childElementCount: Int
SVGFEDisplacementMapElement[JC] def childNodes: NodeList[Node]
SVGFEDisplacementMapElement[JC] def children: HTMLCollection[Element]
SVGFEDisplacementMapElement[JC] var classList: DOMTokenList
SVGFEDisplacementMapElement[JC] var className: SVGAnimatedString
SVGFEDisplacementMapElement[JC] def clientHeight: Int
SVGFEDisplacementMapElement[JC] def clientLeft: Int
SVGFEDisplacementMapElement[JC] def clientTop: Int
SVGFEDisplacementMapElement[JC] def clientWidth: Int
SVGFEDisplacementMapElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEDisplacementMapElement[JC] def closest(selector: String): Element
SVGFEDisplacementMapElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEDisplacementMapElement[JC] def contains(otherNode: Node): Boolean
SVGFEDisplacementMapElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEDisplacementMapElement[JC] def firstChild: Node
SVGFEDisplacementMapElement[JC] def firstElementChild: Element
SVGFEDisplacementMapElement[JC] def getAttribute(name: String): String
SVGFEDisplacementMapElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEDisplacementMapElement[JC] def getAttributeNode(name: String): Attr
SVGFEDisplacementMapElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEDisplacementMapElement[JC] def getBoundingClientRect(): DOMRect
SVGFEDisplacementMapElement[JC] def getClientRects(): DOMRectList
SVGFEDisplacementMapElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEDisplacementMapElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEDisplacementMapElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEDisplacementMapElement[JC] def hasAttribute(name: String): Boolean
SVGFEDisplacementMapElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEDisplacementMapElement[JC] def hasAttributes(): Boolean
SVGFEDisplacementMapElement[JC] def hasChildNodes(): Boolean
SVGFEDisplacementMapElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEDisplacementMapElement[JC] def height: SVGAnimatedLength
SVGFEDisplacementMapElement[JC] var id: String
SVGFEDisplacementMapElement[JC] def in1: SVGAnimatedString
SVGFEDisplacementMapElement[JC] def in2: SVGAnimatedString
SVGFEDisplacementMapElement[JC] var innerHTML: String
SVGFEDisplacementMapElement[JC] var innerText: String
SVGFEDisplacementMapElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEDisplacementMapElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEDisplacementMapElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEDisplacementMapElement[JC] def isConnected: Boolean
SVGFEDisplacementMapElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEDisplacementMapElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEDisplacementMapElement[JC] def isSameNode(other: Node): Boolean
SVGFEDisplacementMapElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEDisplacementMapElement[JC] def lastChild: Node
SVGFEDisplacementMapElement[JC] def lastElementChild: Element
SVGFEDisplacementMapElement[JC] def localName: String
SVGFEDisplacementMapElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEDisplacementMapElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEDisplacementMapElement[JC] def matches(selector: String): Boolean
SVGFEDisplacementMapElement[JC] def namespaceURI: String
SVGFEDisplacementMapElement[JC] def nextElementSibling: Element
SVGFEDisplacementMapElement[JC] def nextSibling: Node
SVGFEDisplacementMapElement[JC] def nodeName: String
SVGFEDisplacementMapElement[JC] def nodeType: Int
SVGFEDisplacementMapElement[JC] var nodeValue: String
SVGFEDisplacementMapElement[JC] def normalize(): Unit
SVGFEDisplacementMapElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEDisplacementMapElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEDisplacementMapElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEDisplacementMapElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEDisplacementMapElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEDisplacementMapElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEDisplacementMapElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEDisplacementMapElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEDisplacementMapElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEDisplacementMapElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEDisplacementMapElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEDisplacementMapElement[JC] var onload: js.Function1[Event, _]
SVGFEDisplacementMapElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEDisplacementMapElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEDisplacementMapElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEDisplacementMapElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEDisplacementMapElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEDisplacementMapElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEDisplacementMapElement[JC] var outerHTML: String
SVGFEDisplacementMapElement[JC] def ownerDocument: Document
SVGFEDisplacementMapElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEDisplacementMapElement[JC] def parentNode: Node
SVGFEDisplacementMapElement[JC] def prefix: String
SVGFEDisplacementMapElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEDisplacementMapElement[JC] def previousElementSibling: Element
SVGFEDisplacementMapElement[JC] def previousSibling: Node
SVGFEDisplacementMapElement[JC] def querySelector(selectors: String): Element
SVGFEDisplacementMapElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEDisplacementMapElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEDisplacementMapElement[JC] def remove(): Unit
SVGFEDisplacementMapElement[JC] def removeAttribute(name: String): Unit
SVGFEDisplacementMapElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEDisplacementMapElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEDisplacementMapElement[JC] def removeChild(oldChild: Node): Node
SVGFEDisplacementMapElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEDisplacementMapElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEDisplacementMapElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEDisplacementMapElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEDisplacementMapElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEDisplacementMapElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEDisplacementMapElement[JC] def requestPointerLock(): Unit
SVGFEDisplacementMapElement[JC] def result: SVGAnimatedString
SVGFEDisplacementMapElement[JC] def scale: SVGAnimatedNumber
SVGFEDisplacementMapElement[JC] def scrollHeight: Int
SVGFEDisplacementMapElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEDisplacementMapElement[JC] var scrollLeft: Double
SVGFEDisplacementMapElement[JC] var scrollTop: Double
SVGFEDisplacementMapElement[JC] def scrollWidth: Int
SVGFEDisplacementMapElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEDisplacementMapElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEDisplacementMapElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEDisplacementMapElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEDisplacementMapElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEDisplacementMapElement[JC] def shadowRoot: ShadowRoot
SVGFEDisplacementMapElement[JC] var style: CSSStyleDeclaration
SVGFEDisplacementMapElement[JC] def tagName: String
SVGFEDisplacementMapElement[JC] var textContent: String
SVGFEDisplacementMapElement[JC] def viewportElement: SVGElement
SVGFEDisplacementMapElement[JC] def width: SVGAnimatedLength
SVGFEDisplacementMapElement[JC] def x: SVGAnimatedLength
SVGFEDisplacementMapElement[JC] def xChannelSelector: SVGAnimatedEnumeration
SVGFEDisplacementMapElement[JC] var xmlbase: String
SVGFEDisplacementMapElement[JC] def y: SVGAnimatedLength
SVGFEDisplacementMapElement[JC] def yChannelSelector: SVGAnimatedEnumeration
SVGFEDisplacementMapElement[JO] val SVG_CHANNEL_A: Int
SVGFEDisplacementMapElement[JO] val SVG_CHANNEL_B: Int
SVGFEDisplacementMapElement[JO] val SVG_CHANNEL_G: Int
SVGFEDisplacementMapElement[JO] val SVG_CHANNEL_R: Int
SVGFEDisplacementMapElement[JO] val SVG_CHANNEL_UNKNOWN: Int
SVGFEDistantLightElement[JC] var accessKey: String
SVGFEDistantLightElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEDistantLightElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEDistantLightElement[JC] def after(nodes: Node | String*): Unit
SVGFEDistantLightElement[JC] def append(nodes: Node | String*): Unit
SVGFEDistantLightElement[JC] def appendChild(newChild: Node): Node
SVGFEDistantLightElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEDistantLightElement[JC] def attributes: NamedNodeMap
SVGFEDistantLightElement[JC] def azimuth: SVGAnimatedNumber
SVGFEDistantLightElement[JC] def baseURI: String
SVGFEDistantLightElement[JC] def before(nodes: Node | String*): Unit
SVGFEDistantLightElement[JC] def childElementCount: Int
SVGFEDistantLightElement[JC] def childNodes: NodeList[Node]
SVGFEDistantLightElement[JC] def children: HTMLCollection[Element]
SVGFEDistantLightElement[JC] var classList: DOMTokenList
SVGFEDistantLightElement[JC] def clientHeight: Int
SVGFEDistantLightElement[JC] def clientLeft: Int
SVGFEDistantLightElement[JC] def clientTop: Int
SVGFEDistantLightElement[JC] def clientWidth: Int
SVGFEDistantLightElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEDistantLightElement[JC] def closest(selector: String): Element
SVGFEDistantLightElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEDistantLightElement[JC] def contains(otherNode: Node): Boolean
SVGFEDistantLightElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEDistantLightElement[JC] def elevation: SVGAnimatedNumber
SVGFEDistantLightElement[JC] def firstChild: Node
SVGFEDistantLightElement[JC] def firstElementChild: Element
SVGFEDistantLightElement[JC] def getAttribute(name: String): String
SVGFEDistantLightElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEDistantLightElement[JC] def getAttributeNode(name: String): Attr
SVGFEDistantLightElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEDistantLightElement[JC] def getBoundingClientRect(): DOMRect
SVGFEDistantLightElement[JC] def getClientRects(): DOMRectList
SVGFEDistantLightElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEDistantLightElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEDistantLightElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEDistantLightElement[JC] def hasAttribute(name: String): Boolean
SVGFEDistantLightElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEDistantLightElement[JC] def hasAttributes(): Boolean
SVGFEDistantLightElement[JC] def hasChildNodes(): Boolean
SVGFEDistantLightElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEDistantLightElement[JC] var id: String
SVGFEDistantLightElement[JC] var innerHTML: String
SVGFEDistantLightElement[JC] var innerText: String
SVGFEDistantLightElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEDistantLightElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEDistantLightElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEDistantLightElement[JC] def isConnected: Boolean
SVGFEDistantLightElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEDistantLightElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEDistantLightElement[JC] def isSameNode(other: Node): Boolean
SVGFEDistantLightElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEDistantLightElement[JC] def lastChild: Node
SVGFEDistantLightElement[JC] def lastElementChild: Element
SVGFEDistantLightElement[JC] def localName: String
SVGFEDistantLightElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEDistantLightElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEDistantLightElement[JC] def matches(selector: String): Boolean
SVGFEDistantLightElement[JC] def namespaceURI: String
SVGFEDistantLightElement[JC] def nextElementSibling: Element
SVGFEDistantLightElement[JC] def nextSibling: Node
SVGFEDistantLightElement[JC] def nodeName: String
SVGFEDistantLightElement[JC] def nodeType: Int
SVGFEDistantLightElement[JC] var nodeValue: String
SVGFEDistantLightElement[JC] def normalize(): Unit
SVGFEDistantLightElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEDistantLightElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEDistantLightElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEDistantLightElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEDistantLightElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEDistantLightElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEDistantLightElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEDistantLightElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEDistantLightElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEDistantLightElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEDistantLightElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEDistantLightElement[JC] var onload: js.Function1[Event, _]
SVGFEDistantLightElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEDistantLightElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEDistantLightElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEDistantLightElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEDistantLightElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEDistantLightElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEDistantLightElement[JC] var outerHTML: String
SVGFEDistantLightElement[JC] def ownerDocument: Document
SVGFEDistantLightElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEDistantLightElement[JC] def parentNode: Node
SVGFEDistantLightElement[JC] def prefix: String
SVGFEDistantLightElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEDistantLightElement[JC] def previousElementSibling: Element
SVGFEDistantLightElement[JC] def previousSibling: Node
SVGFEDistantLightElement[JC] def querySelector(selectors: String): Element
SVGFEDistantLightElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEDistantLightElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEDistantLightElement[JC] def remove(): Unit
SVGFEDistantLightElement[JC] def removeAttribute(name: String): Unit
SVGFEDistantLightElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEDistantLightElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEDistantLightElement[JC] def removeChild(oldChild: Node): Node
SVGFEDistantLightElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEDistantLightElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEDistantLightElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEDistantLightElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEDistantLightElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEDistantLightElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEDistantLightElement[JC] def requestPointerLock(): Unit
SVGFEDistantLightElement[JC] def scrollHeight: Int
SVGFEDistantLightElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEDistantLightElement[JC] var scrollLeft: Double
SVGFEDistantLightElement[JC] var scrollTop: Double
SVGFEDistantLightElement[JC] def scrollWidth: Int
SVGFEDistantLightElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEDistantLightElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEDistantLightElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEDistantLightElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEDistantLightElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEDistantLightElement[JC] def shadowRoot: ShadowRoot
SVGFEDistantLightElement[JC] def tagName: String
SVGFEDistantLightElement[JC] var textContent: String
SVGFEDistantLightElement[JC] def viewportElement: SVGElement
SVGFEDistantLightElement[JC] var xmlbase: String
SVGFEFloodElement[JC] var accessKey: String
SVGFEFloodElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEFloodElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEFloodElement[JC] def after(nodes: Node | String*): Unit
SVGFEFloodElement[JC] def append(nodes: Node | String*): Unit
SVGFEFloodElement[JC] def appendChild(newChild: Node): Node
SVGFEFloodElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEFloodElement[JC] def attributes: NamedNodeMap
SVGFEFloodElement[JC] def baseURI: String
SVGFEFloodElement[JC] def before(nodes: Node | String*): Unit
SVGFEFloodElement[JC] def childElementCount: Int
SVGFEFloodElement[JC] def childNodes: NodeList[Node]
SVGFEFloodElement[JC] def children: HTMLCollection[Element]
SVGFEFloodElement[JC] var classList: DOMTokenList
SVGFEFloodElement[JC] var className: SVGAnimatedString
SVGFEFloodElement[JC] def clientHeight: Int
SVGFEFloodElement[JC] def clientLeft: Int
SVGFEFloodElement[JC] def clientTop: Int
SVGFEFloodElement[JC] def clientWidth: Int
SVGFEFloodElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEFloodElement[JC] def closest(selector: String): Element
SVGFEFloodElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEFloodElement[JC] def contains(otherNode: Node): Boolean
SVGFEFloodElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEFloodElement[JC] def firstChild: Node
SVGFEFloodElement[JC] def firstElementChild: Element
SVGFEFloodElement[JC] def getAttribute(name: String): String
SVGFEFloodElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEFloodElement[JC] def getAttributeNode(name: String): Attr
SVGFEFloodElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEFloodElement[JC] def getBoundingClientRect(): DOMRect
SVGFEFloodElement[JC] def getClientRects(): DOMRectList
SVGFEFloodElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEFloodElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEFloodElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEFloodElement[JC] def hasAttribute(name: String): Boolean
SVGFEFloodElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEFloodElement[JC] def hasAttributes(): Boolean
SVGFEFloodElement[JC] def hasChildNodes(): Boolean
SVGFEFloodElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEFloodElement[JC] def height: SVGAnimatedLength
SVGFEFloodElement[JC] var id: String
SVGFEFloodElement[JC] var innerHTML: String
SVGFEFloodElement[JC] var innerText: String
SVGFEFloodElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEFloodElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEFloodElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEFloodElement[JC] def isConnected: Boolean
SVGFEFloodElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEFloodElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEFloodElement[JC] def isSameNode(other: Node): Boolean
SVGFEFloodElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEFloodElement[JC] def lastChild: Node
SVGFEFloodElement[JC] def lastElementChild: Element
SVGFEFloodElement[JC] def localName: String
SVGFEFloodElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEFloodElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEFloodElement[JC] def matches(selector: String): Boolean
SVGFEFloodElement[JC] def namespaceURI: String
SVGFEFloodElement[JC] def nextElementSibling: Element
SVGFEFloodElement[JC] def nextSibling: Node
SVGFEFloodElement[JC] def nodeName: String
SVGFEFloodElement[JC] def nodeType: Int
SVGFEFloodElement[JC] var nodeValue: String
SVGFEFloodElement[JC] def normalize(): Unit
SVGFEFloodElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEFloodElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEFloodElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEFloodElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEFloodElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEFloodElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEFloodElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEFloodElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEFloodElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEFloodElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEFloodElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEFloodElement[JC] var onload: js.Function1[Event, _]
SVGFEFloodElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEFloodElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEFloodElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEFloodElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEFloodElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEFloodElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEFloodElement[JC] var outerHTML: String
SVGFEFloodElement[JC] def ownerDocument: Document
SVGFEFloodElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEFloodElement[JC] def parentNode: Node
SVGFEFloodElement[JC] def prefix: String
SVGFEFloodElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEFloodElement[JC] def previousElementSibling: Element
SVGFEFloodElement[JC] def previousSibling: Node
SVGFEFloodElement[JC] def querySelector(selectors: String): Element
SVGFEFloodElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEFloodElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEFloodElement[JC] def remove(): Unit
SVGFEFloodElement[JC] def removeAttribute(name: String): Unit
SVGFEFloodElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEFloodElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEFloodElement[JC] def removeChild(oldChild: Node): Node
SVGFEFloodElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEFloodElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEFloodElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEFloodElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEFloodElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEFloodElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEFloodElement[JC] def requestPointerLock(): Unit
SVGFEFloodElement[JC] def result: SVGAnimatedString
SVGFEFloodElement[JC] def scrollHeight: Int
SVGFEFloodElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEFloodElement[JC] var scrollLeft: Double
SVGFEFloodElement[JC] var scrollTop: Double
SVGFEFloodElement[JC] def scrollWidth: Int
SVGFEFloodElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEFloodElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEFloodElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEFloodElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEFloodElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEFloodElement[JC] def shadowRoot: ShadowRoot
SVGFEFloodElement[JC] var style: CSSStyleDeclaration
SVGFEFloodElement[JC] def tagName: String
SVGFEFloodElement[JC] var textContent: String
SVGFEFloodElement[JC] def viewportElement: SVGElement
SVGFEFloodElement[JC] def width: SVGAnimatedLength
SVGFEFloodElement[JC] def x: SVGAnimatedLength
SVGFEFloodElement[JC] var xmlbase: String
SVGFEFloodElement[JC] def y: SVGAnimatedLength
SVGFEFuncAElement[JC] var accessKey: String
SVGFEFuncAElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEFuncAElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEFuncAElement[JC] def after(nodes: Node | String*): Unit
SVGFEFuncAElement[JC] def amplitude: SVGAnimatedNumber
SVGFEFuncAElement[JC] def append(nodes: Node | String*): Unit
SVGFEFuncAElement[JC] def appendChild(newChild: Node): Node
SVGFEFuncAElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEFuncAElement[JC] def attributes: NamedNodeMap
SVGFEFuncAElement[JC] def baseURI: String
SVGFEFuncAElement[JC] def before(nodes: Node | String*): Unit
SVGFEFuncAElement[JC] def childElementCount: Int
SVGFEFuncAElement[JC] def childNodes: NodeList[Node]
SVGFEFuncAElement[JC] def children: HTMLCollection[Element]
SVGFEFuncAElement[JC] var classList: DOMTokenList
SVGFEFuncAElement[JC] def clientHeight: Int
SVGFEFuncAElement[JC] def clientLeft: Int
SVGFEFuncAElement[JC] def clientTop: Int
SVGFEFuncAElement[JC] def clientWidth: Int
SVGFEFuncAElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEFuncAElement[JC] def closest(selector: String): Element
SVGFEFuncAElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEFuncAElement[JC] def contains(otherNode: Node): Boolean
SVGFEFuncAElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEFuncAElement[JC] def exponent: SVGAnimatedNumber
SVGFEFuncAElement[JC] def firstChild: Node
SVGFEFuncAElement[JC] def firstElementChild: Element
SVGFEFuncAElement[JC] def getAttribute(name: String): String
SVGFEFuncAElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEFuncAElement[JC] def getAttributeNode(name: String): Attr
SVGFEFuncAElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEFuncAElement[JC] def getBoundingClientRect(): DOMRect
SVGFEFuncAElement[JC] def getClientRects(): DOMRectList
SVGFEFuncAElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEFuncAElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEFuncAElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEFuncAElement[JC] def hasAttribute(name: String): Boolean
SVGFEFuncAElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEFuncAElement[JC] def hasAttributes(): Boolean
SVGFEFuncAElement[JC] def hasChildNodes(): Boolean
SVGFEFuncAElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEFuncAElement[JC] var id: String
SVGFEFuncAElement[JC] var innerHTML: String
SVGFEFuncAElement[JC] var innerText: String
SVGFEFuncAElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEFuncAElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEFuncAElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEFuncAElement[JC] def intercept: SVGAnimatedNumber
SVGFEFuncAElement[JC] def isConnected: Boolean
SVGFEFuncAElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEFuncAElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEFuncAElement[JC] def isSameNode(other: Node): Boolean
SVGFEFuncAElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEFuncAElement[JC] def lastChild: Node
SVGFEFuncAElement[JC] def lastElementChild: Element
SVGFEFuncAElement[JC] def localName: String
SVGFEFuncAElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEFuncAElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEFuncAElement[JC] def matches(selector: String): Boolean
SVGFEFuncAElement[JC] def namespaceURI: String
SVGFEFuncAElement[JC] def nextElementSibling: Element
SVGFEFuncAElement[JC] def nextSibling: Node
SVGFEFuncAElement[JC] def nodeName: String
SVGFEFuncAElement[JC] def nodeType: Int
SVGFEFuncAElement[JC] var nodeValue: String
SVGFEFuncAElement[JC] def normalize(): Unit
SVGFEFuncAElement[JC] def offset: SVGAnimatedNumber
SVGFEFuncAElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEFuncAElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEFuncAElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEFuncAElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEFuncAElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEFuncAElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEFuncAElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEFuncAElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEFuncAElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEFuncAElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEFuncAElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEFuncAElement[JC] var onload: js.Function1[Event, _]
SVGFEFuncAElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEFuncAElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEFuncAElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEFuncAElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEFuncAElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEFuncAElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEFuncAElement[JC] var outerHTML: String
SVGFEFuncAElement[JC] def ownerDocument: Document
SVGFEFuncAElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEFuncAElement[JC] def parentNode: Node
SVGFEFuncAElement[JC] def prefix: String
SVGFEFuncAElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEFuncAElement[JC] def previousElementSibling: Element
SVGFEFuncAElement[JC] def previousSibling: Node
SVGFEFuncAElement[JC] def querySelector(selectors: String): Element
SVGFEFuncAElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEFuncAElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEFuncAElement[JC] def remove(): Unit
SVGFEFuncAElement[JC] def removeAttribute(name: String): Unit
SVGFEFuncAElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEFuncAElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEFuncAElement[JC] def removeChild(oldChild: Node): Node
SVGFEFuncAElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEFuncAElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEFuncAElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEFuncAElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEFuncAElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEFuncAElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEFuncAElement[JC] def requestPointerLock(): Unit
SVGFEFuncAElement[JC] def scrollHeight: Int
SVGFEFuncAElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEFuncAElement[JC] var scrollLeft: Double
SVGFEFuncAElement[JC] var scrollTop: Double
SVGFEFuncAElement[JC] def scrollWidth: Int
SVGFEFuncAElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEFuncAElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEFuncAElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEFuncAElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEFuncAElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEFuncAElement[JC] def shadowRoot: ShadowRoot
SVGFEFuncAElement[JC] def slope: SVGAnimatedNumber
SVGFEFuncAElement[JC] def tableValues: SVGAnimatedNumberList
SVGFEFuncAElement[JC] def tagName: String
SVGFEFuncAElement[JC] var textContent: String
SVGFEFuncAElement[JC] def `type`: SVGAnimatedEnumeration
SVGFEFuncAElement[JC] def viewportElement: SVGElement
SVGFEFuncAElement[JC] var xmlbase: String
SVGFEFuncBElement[JC] var accessKey: String
SVGFEFuncBElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEFuncBElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEFuncBElement[JC] def after(nodes: Node | String*): Unit
SVGFEFuncBElement[JC] def amplitude: SVGAnimatedNumber
SVGFEFuncBElement[JC] def append(nodes: Node | String*): Unit
SVGFEFuncBElement[JC] def appendChild(newChild: Node): Node
SVGFEFuncBElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEFuncBElement[JC] def attributes: NamedNodeMap
SVGFEFuncBElement[JC] def baseURI: String
SVGFEFuncBElement[JC] def before(nodes: Node | String*): Unit
SVGFEFuncBElement[JC] def childElementCount: Int
SVGFEFuncBElement[JC] def childNodes: NodeList[Node]
SVGFEFuncBElement[JC] def children: HTMLCollection[Element]
SVGFEFuncBElement[JC] var classList: DOMTokenList
SVGFEFuncBElement[JC] def clientHeight: Int
SVGFEFuncBElement[JC] def clientLeft: Int
SVGFEFuncBElement[JC] def clientTop: Int
SVGFEFuncBElement[JC] def clientWidth: Int
SVGFEFuncBElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEFuncBElement[JC] def closest(selector: String): Element
SVGFEFuncBElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEFuncBElement[JC] def contains(otherNode: Node): Boolean
SVGFEFuncBElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEFuncBElement[JC] def exponent: SVGAnimatedNumber
SVGFEFuncBElement[JC] def firstChild: Node
SVGFEFuncBElement[JC] def firstElementChild: Element
SVGFEFuncBElement[JC] def getAttribute(name: String): String
SVGFEFuncBElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEFuncBElement[JC] def getAttributeNode(name: String): Attr
SVGFEFuncBElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEFuncBElement[JC] def getBoundingClientRect(): DOMRect
SVGFEFuncBElement[JC] def getClientRects(): DOMRectList
SVGFEFuncBElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEFuncBElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEFuncBElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEFuncBElement[JC] def hasAttribute(name: String): Boolean
SVGFEFuncBElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEFuncBElement[JC] def hasAttributes(): Boolean
SVGFEFuncBElement[JC] def hasChildNodes(): Boolean
SVGFEFuncBElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEFuncBElement[JC] var id: String
SVGFEFuncBElement[JC] var innerHTML: String
SVGFEFuncBElement[JC] var innerText: String
SVGFEFuncBElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEFuncBElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEFuncBElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEFuncBElement[JC] def intercept: SVGAnimatedNumber
SVGFEFuncBElement[JC] def isConnected: Boolean
SVGFEFuncBElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEFuncBElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEFuncBElement[JC] def isSameNode(other: Node): Boolean
SVGFEFuncBElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEFuncBElement[JC] def lastChild: Node
SVGFEFuncBElement[JC] def lastElementChild: Element
SVGFEFuncBElement[JC] def localName: String
SVGFEFuncBElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEFuncBElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEFuncBElement[JC] def matches(selector: String): Boolean
SVGFEFuncBElement[JC] def namespaceURI: String
SVGFEFuncBElement[JC] def nextElementSibling: Element
SVGFEFuncBElement[JC] def nextSibling: Node
SVGFEFuncBElement[JC] def nodeName: String
SVGFEFuncBElement[JC] def nodeType: Int
SVGFEFuncBElement[JC] var nodeValue: String
SVGFEFuncBElement[JC] def normalize(): Unit
SVGFEFuncBElement[JC] def offset: SVGAnimatedNumber
SVGFEFuncBElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEFuncBElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEFuncBElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEFuncBElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEFuncBElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEFuncBElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEFuncBElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEFuncBElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEFuncBElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEFuncBElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEFuncBElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEFuncBElement[JC] var onload: js.Function1[Event, _]
SVGFEFuncBElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEFuncBElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEFuncBElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEFuncBElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEFuncBElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEFuncBElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEFuncBElement[JC] var outerHTML: String
SVGFEFuncBElement[JC] def ownerDocument: Document
SVGFEFuncBElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEFuncBElement[JC] def parentNode: Node
SVGFEFuncBElement[JC] def prefix: String
SVGFEFuncBElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEFuncBElement[JC] def previousElementSibling: Element
SVGFEFuncBElement[JC] def previousSibling: Node
SVGFEFuncBElement[JC] def querySelector(selectors: String): Element
SVGFEFuncBElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEFuncBElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEFuncBElement[JC] def remove(): Unit
SVGFEFuncBElement[JC] def removeAttribute(name: String): Unit
SVGFEFuncBElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEFuncBElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEFuncBElement[JC] def removeChild(oldChild: Node): Node
SVGFEFuncBElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEFuncBElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEFuncBElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEFuncBElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEFuncBElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEFuncBElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEFuncBElement[JC] def requestPointerLock(): Unit
SVGFEFuncBElement[JC] def scrollHeight: Int
SVGFEFuncBElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEFuncBElement[JC] var scrollLeft: Double
SVGFEFuncBElement[JC] var scrollTop: Double
SVGFEFuncBElement[JC] def scrollWidth: Int
SVGFEFuncBElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEFuncBElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEFuncBElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEFuncBElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEFuncBElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEFuncBElement[JC] def shadowRoot: ShadowRoot
SVGFEFuncBElement[JC] def slope: SVGAnimatedNumber
SVGFEFuncBElement[JC] def tableValues: SVGAnimatedNumberList
SVGFEFuncBElement[JC] def tagName: String
SVGFEFuncBElement[JC] var textContent: String
SVGFEFuncBElement[JC] def `type`: SVGAnimatedEnumeration
SVGFEFuncBElement[JC] def viewportElement: SVGElement
SVGFEFuncBElement[JC] var xmlbase: String
SVGFEFuncGElement[JC] var accessKey: String
SVGFEFuncGElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEFuncGElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEFuncGElement[JC] def after(nodes: Node | String*): Unit
SVGFEFuncGElement[JC] def amplitude: SVGAnimatedNumber
SVGFEFuncGElement[JC] def append(nodes: Node | String*): Unit
SVGFEFuncGElement[JC] def appendChild(newChild: Node): Node
SVGFEFuncGElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEFuncGElement[JC] def attributes: NamedNodeMap
SVGFEFuncGElement[JC] def baseURI: String
SVGFEFuncGElement[JC] def before(nodes: Node | String*): Unit
SVGFEFuncGElement[JC] def childElementCount: Int
SVGFEFuncGElement[JC] def childNodes: NodeList[Node]
SVGFEFuncGElement[JC] def children: HTMLCollection[Element]
SVGFEFuncGElement[JC] var classList: DOMTokenList
SVGFEFuncGElement[JC] def clientHeight: Int
SVGFEFuncGElement[JC] def clientLeft: Int
SVGFEFuncGElement[JC] def clientTop: Int
SVGFEFuncGElement[JC] def clientWidth: Int
SVGFEFuncGElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEFuncGElement[JC] def closest(selector: String): Element
SVGFEFuncGElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEFuncGElement[JC] def contains(otherNode: Node): Boolean
SVGFEFuncGElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEFuncGElement[JC] def exponent: SVGAnimatedNumber
SVGFEFuncGElement[JC] def firstChild: Node
SVGFEFuncGElement[JC] def firstElementChild: Element
SVGFEFuncGElement[JC] def getAttribute(name: String): String
SVGFEFuncGElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEFuncGElement[JC] def getAttributeNode(name: String): Attr
SVGFEFuncGElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEFuncGElement[JC] def getBoundingClientRect(): DOMRect
SVGFEFuncGElement[JC] def getClientRects(): DOMRectList
SVGFEFuncGElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEFuncGElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEFuncGElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEFuncGElement[JC] def hasAttribute(name: String): Boolean
SVGFEFuncGElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEFuncGElement[JC] def hasAttributes(): Boolean
SVGFEFuncGElement[JC] def hasChildNodes(): Boolean
SVGFEFuncGElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEFuncGElement[JC] var id: String
SVGFEFuncGElement[JC] var innerHTML: String
SVGFEFuncGElement[JC] var innerText: String
SVGFEFuncGElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEFuncGElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEFuncGElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEFuncGElement[JC] def intercept: SVGAnimatedNumber
SVGFEFuncGElement[JC] def isConnected: Boolean
SVGFEFuncGElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEFuncGElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEFuncGElement[JC] def isSameNode(other: Node): Boolean
SVGFEFuncGElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEFuncGElement[JC] def lastChild: Node
SVGFEFuncGElement[JC] def lastElementChild: Element
SVGFEFuncGElement[JC] def localName: String
SVGFEFuncGElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEFuncGElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEFuncGElement[JC] def matches(selector: String): Boolean
SVGFEFuncGElement[JC] def namespaceURI: String
SVGFEFuncGElement[JC] def nextElementSibling: Element
SVGFEFuncGElement[JC] def nextSibling: Node
SVGFEFuncGElement[JC] def nodeName: String
SVGFEFuncGElement[JC] def nodeType: Int
SVGFEFuncGElement[JC] var nodeValue: String
SVGFEFuncGElement[JC] def normalize(): Unit
SVGFEFuncGElement[JC] def offset: SVGAnimatedNumber
SVGFEFuncGElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEFuncGElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEFuncGElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEFuncGElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEFuncGElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEFuncGElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEFuncGElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEFuncGElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEFuncGElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEFuncGElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEFuncGElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEFuncGElement[JC] var onload: js.Function1[Event, _]
SVGFEFuncGElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEFuncGElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEFuncGElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEFuncGElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEFuncGElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEFuncGElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEFuncGElement[JC] var outerHTML: String
SVGFEFuncGElement[JC] def ownerDocument: Document
SVGFEFuncGElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEFuncGElement[JC] def parentNode: Node
SVGFEFuncGElement[JC] def prefix: String
SVGFEFuncGElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEFuncGElement[JC] def previousElementSibling: Element
SVGFEFuncGElement[JC] def previousSibling: Node
SVGFEFuncGElement[JC] def querySelector(selectors: String): Element
SVGFEFuncGElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEFuncGElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEFuncGElement[JC] def remove(): Unit
SVGFEFuncGElement[JC] def removeAttribute(name: String): Unit
SVGFEFuncGElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEFuncGElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEFuncGElement[JC] def removeChild(oldChild: Node): Node
SVGFEFuncGElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEFuncGElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEFuncGElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEFuncGElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEFuncGElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEFuncGElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEFuncGElement[JC] def requestPointerLock(): Unit
SVGFEFuncGElement[JC] def scrollHeight: Int
SVGFEFuncGElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEFuncGElement[JC] var scrollLeft: Double
SVGFEFuncGElement[JC] var scrollTop: Double
SVGFEFuncGElement[JC] def scrollWidth: Int
SVGFEFuncGElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEFuncGElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEFuncGElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEFuncGElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEFuncGElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEFuncGElement[JC] def shadowRoot: ShadowRoot
SVGFEFuncGElement[JC] def slope: SVGAnimatedNumber
SVGFEFuncGElement[JC] def tableValues: SVGAnimatedNumberList
SVGFEFuncGElement[JC] def tagName: String
SVGFEFuncGElement[JC] var textContent: String
SVGFEFuncGElement[JC] def `type`: SVGAnimatedEnumeration
SVGFEFuncGElement[JC] def viewportElement: SVGElement
SVGFEFuncGElement[JC] var xmlbase: String
SVGFEFuncRElement[JC] var accessKey: String
SVGFEFuncRElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEFuncRElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEFuncRElement[JC] def after(nodes: Node | String*): Unit
SVGFEFuncRElement[JC] def amplitude: SVGAnimatedNumber
SVGFEFuncRElement[JC] def append(nodes: Node | String*): Unit
SVGFEFuncRElement[JC] def appendChild(newChild: Node): Node
SVGFEFuncRElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEFuncRElement[JC] def attributes: NamedNodeMap
SVGFEFuncRElement[JC] def baseURI: String
SVGFEFuncRElement[JC] def before(nodes: Node | String*): Unit
SVGFEFuncRElement[JC] def childElementCount: Int
SVGFEFuncRElement[JC] def childNodes: NodeList[Node]
SVGFEFuncRElement[JC] def children: HTMLCollection[Element]
SVGFEFuncRElement[JC] var classList: DOMTokenList
SVGFEFuncRElement[JC] def clientHeight: Int
SVGFEFuncRElement[JC] def clientLeft: Int
SVGFEFuncRElement[JC] def clientTop: Int
SVGFEFuncRElement[JC] def clientWidth: Int
SVGFEFuncRElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEFuncRElement[JC] def closest(selector: String): Element
SVGFEFuncRElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEFuncRElement[JC] def contains(otherNode: Node): Boolean
SVGFEFuncRElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEFuncRElement[JC] def exponent: SVGAnimatedNumber
SVGFEFuncRElement[JC] def firstChild: Node
SVGFEFuncRElement[JC] def firstElementChild: Element
SVGFEFuncRElement[JC] def getAttribute(name: String): String
SVGFEFuncRElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEFuncRElement[JC] def getAttributeNode(name: String): Attr
SVGFEFuncRElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEFuncRElement[JC] def getBoundingClientRect(): DOMRect
SVGFEFuncRElement[JC] def getClientRects(): DOMRectList
SVGFEFuncRElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEFuncRElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEFuncRElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEFuncRElement[JC] def hasAttribute(name: String): Boolean
SVGFEFuncRElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEFuncRElement[JC] def hasAttributes(): Boolean
SVGFEFuncRElement[JC] def hasChildNodes(): Boolean
SVGFEFuncRElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEFuncRElement[JC] var id: String
SVGFEFuncRElement[JC] var innerHTML: String
SVGFEFuncRElement[JC] var innerText: String
SVGFEFuncRElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEFuncRElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEFuncRElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEFuncRElement[JC] def intercept: SVGAnimatedNumber
SVGFEFuncRElement[JC] def isConnected: Boolean
SVGFEFuncRElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEFuncRElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEFuncRElement[JC] def isSameNode(other: Node): Boolean
SVGFEFuncRElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEFuncRElement[JC] def lastChild: Node
SVGFEFuncRElement[JC] def lastElementChild: Element
SVGFEFuncRElement[JC] def localName: String
SVGFEFuncRElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEFuncRElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEFuncRElement[JC] def matches(selector: String): Boolean
SVGFEFuncRElement[JC] def namespaceURI: String
SVGFEFuncRElement[JC] def nextElementSibling: Element
SVGFEFuncRElement[JC] def nextSibling: Node
SVGFEFuncRElement[JC] def nodeName: String
SVGFEFuncRElement[JC] def nodeType: Int
SVGFEFuncRElement[JC] var nodeValue: String
SVGFEFuncRElement[JC] def normalize(): Unit
SVGFEFuncRElement[JC] def offset: SVGAnimatedNumber
SVGFEFuncRElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEFuncRElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEFuncRElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEFuncRElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEFuncRElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEFuncRElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEFuncRElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEFuncRElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEFuncRElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEFuncRElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEFuncRElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEFuncRElement[JC] var onload: js.Function1[Event, _]
SVGFEFuncRElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEFuncRElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEFuncRElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEFuncRElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEFuncRElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEFuncRElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEFuncRElement[JC] var outerHTML: String
SVGFEFuncRElement[JC] def ownerDocument: Document
SVGFEFuncRElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEFuncRElement[JC] def parentNode: Node
SVGFEFuncRElement[JC] def prefix: String
SVGFEFuncRElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEFuncRElement[JC] def previousElementSibling: Element
SVGFEFuncRElement[JC] def previousSibling: Node
SVGFEFuncRElement[JC] def querySelector(selectors: String): Element
SVGFEFuncRElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEFuncRElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEFuncRElement[JC] def remove(): Unit
SVGFEFuncRElement[JC] def removeAttribute(name: String): Unit
SVGFEFuncRElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEFuncRElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEFuncRElement[JC] def removeChild(oldChild: Node): Node
SVGFEFuncRElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEFuncRElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEFuncRElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEFuncRElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEFuncRElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEFuncRElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEFuncRElement[JC] def requestPointerLock(): Unit
SVGFEFuncRElement[JC] def scrollHeight: Int
SVGFEFuncRElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEFuncRElement[JC] var scrollLeft: Double
SVGFEFuncRElement[JC] var scrollTop: Double
SVGFEFuncRElement[JC] def scrollWidth: Int
SVGFEFuncRElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEFuncRElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEFuncRElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEFuncRElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEFuncRElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEFuncRElement[JC] def shadowRoot: ShadowRoot
SVGFEFuncRElement[JC] def slope: SVGAnimatedNumber
SVGFEFuncRElement[JC] def tableValues: SVGAnimatedNumberList
SVGFEFuncRElement[JC] def tagName: String
SVGFEFuncRElement[JC] var textContent: String
SVGFEFuncRElement[JC] def `type`: SVGAnimatedEnumeration
SVGFEFuncRElement[JC] def viewportElement: SVGElement
SVGFEFuncRElement[JC] var xmlbase: String
SVGFEGaussianBlurElement[JC] var accessKey: String
SVGFEGaussianBlurElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEGaussianBlurElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEGaussianBlurElement[JC] def after(nodes: Node | String*): Unit
SVGFEGaussianBlurElement[JC] def append(nodes: Node | String*): Unit
SVGFEGaussianBlurElement[JC] def appendChild(newChild: Node): Node
SVGFEGaussianBlurElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEGaussianBlurElement[JC] def attributes: NamedNodeMap
SVGFEGaussianBlurElement[JC] def baseURI: String
SVGFEGaussianBlurElement[JC] def before(nodes: Node | String*): Unit
SVGFEGaussianBlurElement[JC] def childElementCount: Int
SVGFEGaussianBlurElement[JC] def childNodes: NodeList[Node]
SVGFEGaussianBlurElement[JC] def children: HTMLCollection[Element]
SVGFEGaussianBlurElement[JC] var classList: DOMTokenList
SVGFEGaussianBlurElement[JC] var className: SVGAnimatedString
SVGFEGaussianBlurElement[JC] def clientHeight: Int
SVGFEGaussianBlurElement[JC] def clientLeft: Int
SVGFEGaussianBlurElement[JC] def clientTop: Int
SVGFEGaussianBlurElement[JC] def clientWidth: Int
SVGFEGaussianBlurElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEGaussianBlurElement[JC] def closest(selector: String): Element
SVGFEGaussianBlurElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEGaussianBlurElement[JC] def contains(otherNode: Node): Boolean
SVGFEGaussianBlurElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEGaussianBlurElement[JC] def firstChild: Node
SVGFEGaussianBlurElement[JC] def firstElementChild: Element
SVGFEGaussianBlurElement[JC] def getAttribute(name: String): String
SVGFEGaussianBlurElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEGaussianBlurElement[JC] def getAttributeNode(name: String): Attr
SVGFEGaussianBlurElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEGaussianBlurElement[JC] def getBoundingClientRect(): DOMRect
SVGFEGaussianBlurElement[JC] def getClientRects(): DOMRectList
SVGFEGaussianBlurElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEGaussianBlurElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEGaussianBlurElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEGaussianBlurElement[JC] def hasAttribute(name: String): Boolean
SVGFEGaussianBlurElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEGaussianBlurElement[JC] def hasAttributes(): Boolean
SVGFEGaussianBlurElement[JC] def hasChildNodes(): Boolean
SVGFEGaussianBlurElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEGaussianBlurElement[JC] def height: SVGAnimatedLength
SVGFEGaussianBlurElement[JC] var id: String
SVGFEGaussianBlurElement[JC] def in1: SVGAnimatedString
SVGFEGaussianBlurElement[JC] var innerHTML: String
SVGFEGaussianBlurElement[JC] var innerText: String
SVGFEGaussianBlurElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEGaussianBlurElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEGaussianBlurElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEGaussianBlurElement[JC] def isConnected: Boolean
SVGFEGaussianBlurElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEGaussianBlurElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEGaussianBlurElement[JC] def isSameNode(other: Node): Boolean
SVGFEGaussianBlurElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEGaussianBlurElement[JC] def lastChild: Node
SVGFEGaussianBlurElement[JC] def lastElementChild: Element
SVGFEGaussianBlurElement[JC] def localName: String
SVGFEGaussianBlurElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEGaussianBlurElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEGaussianBlurElement[JC] def matches(selector: String): Boolean
SVGFEGaussianBlurElement[JC] def namespaceURI: String
SVGFEGaussianBlurElement[JC] def nextElementSibling: Element
SVGFEGaussianBlurElement[JC] def nextSibling: Node
SVGFEGaussianBlurElement[JC] def nodeName: String
SVGFEGaussianBlurElement[JC] def nodeType: Int
SVGFEGaussianBlurElement[JC] var nodeValue: String
SVGFEGaussianBlurElement[JC] def normalize(): Unit
SVGFEGaussianBlurElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEGaussianBlurElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEGaussianBlurElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEGaussianBlurElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEGaussianBlurElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEGaussianBlurElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEGaussianBlurElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEGaussianBlurElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEGaussianBlurElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEGaussianBlurElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEGaussianBlurElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEGaussianBlurElement[JC] var onload: js.Function1[Event, _]
SVGFEGaussianBlurElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEGaussianBlurElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEGaussianBlurElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEGaussianBlurElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEGaussianBlurElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEGaussianBlurElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEGaussianBlurElement[JC] var outerHTML: String
SVGFEGaussianBlurElement[JC] def ownerDocument: Document
SVGFEGaussianBlurElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEGaussianBlurElement[JC] def parentNode: Node
SVGFEGaussianBlurElement[JC] def prefix: String
SVGFEGaussianBlurElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEGaussianBlurElement[JC] def previousElementSibling: Element
SVGFEGaussianBlurElement[JC] def previousSibling: Node
SVGFEGaussianBlurElement[JC] def querySelector(selectors: String): Element
SVGFEGaussianBlurElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEGaussianBlurElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEGaussianBlurElement[JC] def remove(): Unit
SVGFEGaussianBlurElement[JC] def removeAttribute(name: String): Unit
SVGFEGaussianBlurElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEGaussianBlurElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEGaussianBlurElement[JC] def removeChild(oldChild: Node): Node
SVGFEGaussianBlurElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEGaussianBlurElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEGaussianBlurElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEGaussianBlurElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEGaussianBlurElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEGaussianBlurElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEGaussianBlurElement[JC] def requestPointerLock(): Unit
SVGFEGaussianBlurElement[JC] def result: SVGAnimatedString
SVGFEGaussianBlurElement[JC] def scrollHeight: Int
SVGFEGaussianBlurElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEGaussianBlurElement[JC] var scrollLeft: Double
SVGFEGaussianBlurElement[JC] var scrollTop: Double
SVGFEGaussianBlurElement[JC] def scrollWidth: Int
SVGFEGaussianBlurElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEGaussianBlurElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEGaussianBlurElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEGaussianBlurElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEGaussianBlurElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEGaussianBlurElement[JC] def setStdDeviation(stdDeviationX: Double, stdDeviationY: Double): Unit
SVGFEGaussianBlurElement[JC] def shadowRoot: ShadowRoot
SVGFEGaussianBlurElement[JC] def stdDeviationX: SVGAnimatedNumber
SVGFEGaussianBlurElement[JC] def stdDeviationY: SVGAnimatedNumber
SVGFEGaussianBlurElement[JC] var style: CSSStyleDeclaration
SVGFEGaussianBlurElement[JC] def tagName: String
SVGFEGaussianBlurElement[JC] var textContent: String
SVGFEGaussianBlurElement[JC] def viewportElement: SVGElement
SVGFEGaussianBlurElement[JC] def width: SVGAnimatedLength
SVGFEGaussianBlurElement[JC] def x: SVGAnimatedLength
SVGFEGaussianBlurElement[JC] var xmlbase: String
SVGFEGaussianBlurElement[JC] def y: SVGAnimatedLength
SVGFEImageElement[JC] var accessKey: String
SVGFEImageElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEImageElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEImageElement[JC] def after(nodes: Node | String*): Unit
SVGFEImageElement[JC] def append(nodes: Node | String*): Unit
SVGFEImageElement[JC] def appendChild(newChild: Node): Node
SVGFEImageElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEImageElement[JC] def attributes: NamedNodeMap
SVGFEImageElement[JC] def baseURI: String
SVGFEImageElement[JC] def before(nodes: Node | String*): Unit
SVGFEImageElement[JC] def childElementCount: Int
SVGFEImageElement[JC] def childNodes: NodeList[Node]
SVGFEImageElement[JC] def children: HTMLCollection[Element]
SVGFEImageElement[JC] var classList: DOMTokenList
SVGFEImageElement[JC] var className: SVGAnimatedString
SVGFEImageElement[JC] def clientHeight: Int
SVGFEImageElement[JC] def clientLeft: Int
SVGFEImageElement[JC] def clientTop: Int
SVGFEImageElement[JC] def clientWidth: Int
SVGFEImageElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEImageElement[JC] def closest(selector: String): Element
SVGFEImageElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEImageElement[JC] def contains(otherNode: Node): Boolean
SVGFEImageElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEImageElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGFEImageElement[JC] def firstChild: Node
SVGFEImageElement[JC] def firstElementChild: Element
SVGFEImageElement[JC] def getAttribute(name: String): String
SVGFEImageElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEImageElement[JC] def getAttributeNode(name: String): Attr
SVGFEImageElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEImageElement[JC] def getBoundingClientRect(): DOMRect
SVGFEImageElement[JC] def getClientRects(): DOMRectList
SVGFEImageElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEImageElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEImageElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEImageElement[JC] def hasAttribute(name: String): Boolean
SVGFEImageElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEImageElement[JC] def hasAttributes(): Boolean
SVGFEImageElement[JC] def hasChildNodes(): Boolean
SVGFEImageElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEImageElement[JC] def height: SVGAnimatedLength
SVGFEImageElement[JC] var href: SVGAnimatedString
SVGFEImageElement[JC] var id: String
SVGFEImageElement[JC] var innerHTML: String
SVGFEImageElement[JC] var innerText: String
SVGFEImageElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEImageElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEImageElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEImageElement[JC] def isConnected: Boolean
SVGFEImageElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEImageElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEImageElement[JC] def isSameNode(other: Node): Boolean
SVGFEImageElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEImageElement[JC] def lastChild: Node
SVGFEImageElement[JC] def lastElementChild: Element
SVGFEImageElement[JC] def localName: String
SVGFEImageElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEImageElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEImageElement[JC] def matches(selector: String): Boolean
SVGFEImageElement[JC] def namespaceURI: String
SVGFEImageElement[JC] def nextElementSibling: Element
SVGFEImageElement[JC] def nextSibling: Node
SVGFEImageElement[JC] def nodeName: String
SVGFEImageElement[JC] def nodeType: Int
SVGFEImageElement[JC] var nodeValue: String
SVGFEImageElement[JC] def normalize(): Unit
SVGFEImageElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEImageElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEImageElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEImageElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEImageElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEImageElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEImageElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEImageElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEImageElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEImageElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEImageElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEImageElement[JC] var onload: js.Function1[Event, _]
SVGFEImageElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEImageElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEImageElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEImageElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEImageElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEImageElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEImageElement[JC] var outerHTML: String
SVGFEImageElement[JC] def ownerDocument: Document
SVGFEImageElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEImageElement[JC] def parentNode: Node
SVGFEImageElement[JC] def prefix: String
SVGFEImageElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEImageElement[JC] def preserveAspectRatio: SVGAnimatedPreserveAspectRatio
SVGFEImageElement[JC] def previousElementSibling: Element
SVGFEImageElement[JC] def previousSibling: Node
SVGFEImageElement[JC] def querySelector(selectors: String): Element
SVGFEImageElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEImageElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEImageElement[JC] def remove(): Unit
SVGFEImageElement[JC] def removeAttribute(name: String): Unit
SVGFEImageElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEImageElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEImageElement[JC] def removeChild(oldChild: Node): Node
SVGFEImageElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEImageElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEImageElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEImageElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEImageElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEImageElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEImageElement[JC] def requestPointerLock(): Unit
SVGFEImageElement[JC] def result: SVGAnimatedString
SVGFEImageElement[JC] def scrollHeight: Int
SVGFEImageElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEImageElement[JC] var scrollLeft: Double
SVGFEImageElement[JC] var scrollTop: Double
SVGFEImageElement[JC] def scrollWidth: Int
SVGFEImageElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEImageElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEImageElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEImageElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEImageElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEImageElement[JC] def shadowRoot: ShadowRoot
SVGFEImageElement[JC] var style: CSSStyleDeclaration
SVGFEImageElement[JC] def tagName: String
SVGFEImageElement[JC] var textContent: String
SVGFEImageElement[JC] def viewportElement: SVGElement
SVGFEImageElement[JC] def width: SVGAnimatedLength
SVGFEImageElement[JC] def x: SVGAnimatedLength
SVGFEImageElement[JC] var xmlbase: String
SVGFEImageElement[JC] var xmllang: String
SVGFEImageElement[JC] var xmlspace: String
SVGFEImageElement[JC] def y: SVGAnimatedLength
SVGFEMergeElement[JC] var accessKey: String
SVGFEMergeElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEMergeElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEMergeElement[JC] def after(nodes: Node | String*): Unit
SVGFEMergeElement[JC] def append(nodes: Node | String*): Unit
SVGFEMergeElement[JC] def appendChild(newChild: Node): Node
SVGFEMergeElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEMergeElement[JC] def attributes: NamedNodeMap
SVGFEMergeElement[JC] def baseURI: String
SVGFEMergeElement[JC] def before(nodes: Node | String*): Unit
SVGFEMergeElement[JC] def childElementCount: Int
SVGFEMergeElement[JC] def childNodes: NodeList[Node]
SVGFEMergeElement[JC] def children: HTMLCollection[Element]
SVGFEMergeElement[JC] var classList: DOMTokenList
SVGFEMergeElement[JC] var className: SVGAnimatedString
SVGFEMergeElement[JC] def clientHeight: Int
SVGFEMergeElement[JC] def clientLeft: Int
SVGFEMergeElement[JC] def clientTop: Int
SVGFEMergeElement[JC] def clientWidth: Int
SVGFEMergeElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEMergeElement[JC] def closest(selector: String): Element
SVGFEMergeElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEMergeElement[JC] def contains(otherNode: Node): Boolean
SVGFEMergeElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEMergeElement[JC] def firstChild: Node
SVGFEMergeElement[JC] def firstElementChild: Element
SVGFEMergeElement[JC] def getAttribute(name: String): String
SVGFEMergeElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEMergeElement[JC] def getAttributeNode(name: String): Attr
SVGFEMergeElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEMergeElement[JC] def getBoundingClientRect(): DOMRect
SVGFEMergeElement[JC] def getClientRects(): DOMRectList
SVGFEMergeElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEMergeElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEMergeElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEMergeElement[JC] def hasAttribute(name: String): Boolean
SVGFEMergeElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEMergeElement[JC] def hasAttributes(): Boolean
SVGFEMergeElement[JC] def hasChildNodes(): Boolean
SVGFEMergeElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEMergeElement[JC] def height: SVGAnimatedLength
SVGFEMergeElement[JC] var id: String
SVGFEMergeElement[JC] var innerHTML: String
SVGFEMergeElement[JC] var innerText: String
SVGFEMergeElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEMergeElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEMergeElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEMergeElement[JC] def isConnected: Boolean
SVGFEMergeElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEMergeElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEMergeElement[JC] def isSameNode(other: Node): Boolean
SVGFEMergeElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEMergeElement[JC] def lastChild: Node
SVGFEMergeElement[JC] def lastElementChild: Element
SVGFEMergeElement[JC] def localName: String
SVGFEMergeElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEMergeElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEMergeElement[JC] def matches(selector: String): Boolean
SVGFEMergeElement[JC] def namespaceURI: String
SVGFEMergeElement[JC] def nextElementSibling: Element
SVGFEMergeElement[JC] def nextSibling: Node
SVGFEMergeElement[JC] def nodeName: String
SVGFEMergeElement[JC] def nodeType: Int
SVGFEMergeElement[JC] var nodeValue: String
SVGFEMergeElement[JC] def normalize(): Unit
SVGFEMergeElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEMergeElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEMergeElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEMergeElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEMergeElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEMergeElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEMergeElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEMergeElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEMergeElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEMergeElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEMergeElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEMergeElement[JC] var onload: js.Function1[Event, _]
SVGFEMergeElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEMergeElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEMergeElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEMergeElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEMergeElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEMergeElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEMergeElement[JC] var outerHTML: String
SVGFEMergeElement[JC] def ownerDocument: Document
SVGFEMergeElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEMergeElement[JC] def parentNode: Node
SVGFEMergeElement[JC] def prefix: String
SVGFEMergeElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEMergeElement[JC] def previousElementSibling: Element
SVGFEMergeElement[JC] def previousSibling: Node
SVGFEMergeElement[JC] def querySelector(selectors: String): Element
SVGFEMergeElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEMergeElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEMergeElement[JC] def remove(): Unit
SVGFEMergeElement[JC] def removeAttribute(name: String): Unit
SVGFEMergeElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEMergeElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEMergeElement[JC] def removeChild(oldChild: Node): Node
SVGFEMergeElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEMergeElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEMergeElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEMergeElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEMergeElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEMergeElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEMergeElement[JC] def requestPointerLock(): Unit
SVGFEMergeElement[JC] def result: SVGAnimatedString
SVGFEMergeElement[JC] def scrollHeight: Int
SVGFEMergeElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEMergeElement[JC] var scrollLeft: Double
SVGFEMergeElement[JC] var scrollTop: Double
SVGFEMergeElement[JC] def scrollWidth: Int
SVGFEMergeElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEMergeElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEMergeElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEMergeElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEMergeElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEMergeElement[JC] def shadowRoot: ShadowRoot
SVGFEMergeElement[JC] var style: CSSStyleDeclaration
SVGFEMergeElement[JC] def tagName: String
SVGFEMergeElement[JC] var textContent: String
SVGFEMergeElement[JC] def viewportElement: SVGElement
SVGFEMergeElement[JC] def width: SVGAnimatedLength
SVGFEMergeElement[JC] def x: SVGAnimatedLength
SVGFEMergeElement[JC] var xmlbase: String
SVGFEMergeElement[JC] def y: SVGAnimatedLength
SVGFEMergeNodeElement[JC] var accessKey: String
SVGFEMergeNodeElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEMergeNodeElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEMergeNodeElement[JC] def after(nodes: Node | String*): Unit
SVGFEMergeNodeElement[JC] def append(nodes: Node | String*): Unit
SVGFEMergeNodeElement[JC] def appendChild(newChild: Node): Node
SVGFEMergeNodeElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEMergeNodeElement[JC] def attributes: NamedNodeMap
SVGFEMergeNodeElement[JC] def baseURI: String
SVGFEMergeNodeElement[JC] def before(nodes: Node | String*): Unit
SVGFEMergeNodeElement[JC] def childElementCount: Int
SVGFEMergeNodeElement[JC] def childNodes: NodeList[Node]
SVGFEMergeNodeElement[JC] def children: HTMLCollection[Element]
SVGFEMergeNodeElement[JC] var classList: DOMTokenList
SVGFEMergeNodeElement[JC] def clientHeight: Int
SVGFEMergeNodeElement[JC] def clientLeft: Int
SVGFEMergeNodeElement[JC] def clientTop: Int
SVGFEMergeNodeElement[JC] def clientWidth: Int
SVGFEMergeNodeElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEMergeNodeElement[JC] def closest(selector: String): Element
SVGFEMergeNodeElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEMergeNodeElement[JC] def contains(otherNode: Node): Boolean
SVGFEMergeNodeElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEMergeNodeElement[JC] def firstChild: Node
SVGFEMergeNodeElement[JC] def firstElementChild: Element
SVGFEMergeNodeElement[JC] def getAttribute(name: String): String
SVGFEMergeNodeElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEMergeNodeElement[JC] def getAttributeNode(name: String): Attr
SVGFEMergeNodeElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEMergeNodeElement[JC] def getBoundingClientRect(): DOMRect
SVGFEMergeNodeElement[JC] def getClientRects(): DOMRectList
SVGFEMergeNodeElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEMergeNodeElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEMergeNodeElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEMergeNodeElement[JC] def hasAttribute(name: String): Boolean
SVGFEMergeNodeElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEMergeNodeElement[JC] def hasAttributes(): Boolean
SVGFEMergeNodeElement[JC] def hasChildNodes(): Boolean
SVGFEMergeNodeElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEMergeNodeElement[JC] var id: String
SVGFEMergeNodeElement[JC] def in1: SVGAnimatedString
SVGFEMergeNodeElement[JC] var innerHTML: String
SVGFEMergeNodeElement[JC] var innerText: String
SVGFEMergeNodeElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEMergeNodeElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEMergeNodeElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEMergeNodeElement[JC] def isConnected: Boolean
SVGFEMergeNodeElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEMergeNodeElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEMergeNodeElement[JC] def isSameNode(other: Node): Boolean
SVGFEMergeNodeElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEMergeNodeElement[JC] def lastChild: Node
SVGFEMergeNodeElement[JC] def lastElementChild: Element
SVGFEMergeNodeElement[JC] def localName: String
SVGFEMergeNodeElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEMergeNodeElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEMergeNodeElement[JC] def matches(selector: String): Boolean
SVGFEMergeNodeElement[JC] def namespaceURI: String
SVGFEMergeNodeElement[JC] def nextElementSibling: Element
SVGFEMergeNodeElement[JC] def nextSibling: Node
SVGFEMergeNodeElement[JC] def nodeName: String
SVGFEMergeNodeElement[JC] def nodeType: Int
SVGFEMergeNodeElement[JC] var nodeValue: String
SVGFEMergeNodeElement[JC] def normalize(): Unit
SVGFEMergeNodeElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEMergeNodeElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEMergeNodeElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEMergeNodeElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEMergeNodeElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEMergeNodeElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEMergeNodeElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEMergeNodeElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEMergeNodeElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEMergeNodeElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEMergeNodeElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEMergeNodeElement[JC] var onload: js.Function1[Event, _]
SVGFEMergeNodeElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEMergeNodeElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEMergeNodeElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEMergeNodeElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEMergeNodeElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEMergeNodeElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEMergeNodeElement[JC] var outerHTML: String
SVGFEMergeNodeElement[JC] def ownerDocument: Document
SVGFEMergeNodeElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEMergeNodeElement[JC] def parentNode: Node
SVGFEMergeNodeElement[JC] def prefix: String
SVGFEMergeNodeElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEMergeNodeElement[JC] def previousElementSibling: Element
SVGFEMergeNodeElement[JC] def previousSibling: Node
SVGFEMergeNodeElement[JC] def querySelector(selectors: String): Element
SVGFEMergeNodeElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEMergeNodeElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEMergeNodeElement[JC] def remove(): Unit
SVGFEMergeNodeElement[JC] def removeAttribute(name: String): Unit
SVGFEMergeNodeElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEMergeNodeElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEMergeNodeElement[JC] def removeChild(oldChild: Node): Node
SVGFEMergeNodeElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEMergeNodeElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEMergeNodeElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEMergeNodeElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEMergeNodeElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEMergeNodeElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEMergeNodeElement[JC] def requestPointerLock(): Unit
SVGFEMergeNodeElement[JC] def scrollHeight: Int
SVGFEMergeNodeElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEMergeNodeElement[JC] var scrollLeft: Double
SVGFEMergeNodeElement[JC] var scrollTop: Double
SVGFEMergeNodeElement[JC] def scrollWidth: Int
SVGFEMergeNodeElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEMergeNodeElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEMergeNodeElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEMergeNodeElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEMergeNodeElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEMergeNodeElement[JC] def shadowRoot: ShadowRoot
SVGFEMergeNodeElement[JC] def tagName: String
SVGFEMergeNodeElement[JC] var textContent: String
SVGFEMergeNodeElement[JC] def viewportElement: SVGElement
SVGFEMergeNodeElement[JC] var xmlbase: String
SVGFEMorphologyElement[JC] var accessKey: String
SVGFEMorphologyElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEMorphologyElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEMorphologyElement[JC] def after(nodes: Node | String*): Unit
SVGFEMorphologyElement[JC] def append(nodes: Node | String*): Unit
SVGFEMorphologyElement[JC] def appendChild(newChild: Node): Node
SVGFEMorphologyElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEMorphologyElement[JC] def attributes: NamedNodeMap
SVGFEMorphologyElement[JC] def baseURI: String
SVGFEMorphologyElement[JC] def before(nodes: Node | String*): Unit
SVGFEMorphologyElement[JC] def childElementCount: Int
SVGFEMorphologyElement[JC] def childNodes: NodeList[Node]
SVGFEMorphologyElement[JC] def children: HTMLCollection[Element]
SVGFEMorphologyElement[JC] var classList: DOMTokenList
SVGFEMorphologyElement[JC] var className: SVGAnimatedString
SVGFEMorphologyElement[JC] def clientHeight: Int
SVGFEMorphologyElement[JC] def clientLeft: Int
SVGFEMorphologyElement[JC] def clientTop: Int
SVGFEMorphologyElement[JC] def clientWidth: Int
SVGFEMorphologyElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEMorphologyElement[JC] def closest(selector: String): Element
SVGFEMorphologyElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEMorphologyElement[JC] def contains(otherNode: Node): Boolean
SVGFEMorphologyElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEMorphologyElement[JC] def firstChild: Node
SVGFEMorphologyElement[JC] def firstElementChild: Element
SVGFEMorphologyElement[JC] def getAttribute(name: String): String
SVGFEMorphologyElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEMorphologyElement[JC] def getAttributeNode(name: String): Attr
SVGFEMorphologyElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEMorphologyElement[JC] def getBoundingClientRect(): DOMRect
SVGFEMorphologyElement[JC] def getClientRects(): DOMRectList
SVGFEMorphologyElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEMorphologyElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEMorphologyElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEMorphologyElement[JC] def hasAttribute(name: String): Boolean
SVGFEMorphologyElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEMorphologyElement[JC] def hasAttributes(): Boolean
SVGFEMorphologyElement[JC] def hasChildNodes(): Boolean
SVGFEMorphologyElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEMorphologyElement[JC] def height: SVGAnimatedLength
SVGFEMorphologyElement[JC] var id: String
SVGFEMorphologyElement[JC] def in1: SVGAnimatedString
SVGFEMorphologyElement[JC] var innerHTML: String
SVGFEMorphologyElement[JC] var innerText: String
SVGFEMorphologyElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEMorphologyElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEMorphologyElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEMorphologyElement[JC] def isConnected: Boolean
SVGFEMorphologyElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEMorphologyElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEMorphologyElement[JC] def isSameNode(other: Node): Boolean
SVGFEMorphologyElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEMorphologyElement[JC] def lastChild: Node
SVGFEMorphologyElement[JC] def lastElementChild: Element
SVGFEMorphologyElement[JC] def localName: String
SVGFEMorphologyElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEMorphologyElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEMorphologyElement[JC] def matches(selector: String): Boolean
SVGFEMorphologyElement[JC] def namespaceURI: String
SVGFEMorphologyElement[JC] def nextElementSibling: Element
SVGFEMorphologyElement[JC] def nextSibling: Node
SVGFEMorphologyElement[JC] def nodeName: String
SVGFEMorphologyElement[JC] def nodeType: Int
SVGFEMorphologyElement[JC] var nodeValue: String
SVGFEMorphologyElement[JC] def normalize(): Unit
SVGFEMorphologyElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEMorphologyElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEMorphologyElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEMorphologyElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEMorphologyElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEMorphologyElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEMorphologyElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEMorphologyElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEMorphologyElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEMorphologyElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEMorphologyElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEMorphologyElement[JC] var onload: js.Function1[Event, _]
SVGFEMorphologyElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEMorphologyElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEMorphologyElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEMorphologyElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEMorphologyElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEMorphologyElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEMorphologyElement[JC] def operator: SVGAnimatedEnumeration
SVGFEMorphologyElement[JC] var outerHTML: String
SVGFEMorphologyElement[JC] def ownerDocument: Document
SVGFEMorphologyElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEMorphologyElement[JC] def parentNode: Node
SVGFEMorphologyElement[JC] def prefix: String
SVGFEMorphologyElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEMorphologyElement[JC] def previousElementSibling: Element
SVGFEMorphologyElement[JC] def previousSibling: Node
SVGFEMorphologyElement[JC] def querySelector(selectors: String): Element
SVGFEMorphologyElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEMorphologyElement[JC] def radiusX: SVGAnimatedNumber
SVGFEMorphologyElement[JC] def radiusY: SVGAnimatedNumber
SVGFEMorphologyElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEMorphologyElement[JC] def remove(): Unit
SVGFEMorphologyElement[JC] def removeAttribute(name: String): Unit
SVGFEMorphologyElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEMorphologyElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEMorphologyElement[JC] def removeChild(oldChild: Node): Node
SVGFEMorphologyElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEMorphologyElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEMorphologyElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEMorphologyElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEMorphologyElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEMorphologyElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEMorphologyElement[JC] def requestPointerLock(): Unit
SVGFEMorphologyElement[JC] def result: SVGAnimatedString
SVGFEMorphologyElement[JC] def scrollHeight: Int
SVGFEMorphologyElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEMorphologyElement[JC] var scrollLeft: Double
SVGFEMorphologyElement[JC] var scrollTop: Double
SVGFEMorphologyElement[JC] def scrollWidth: Int
SVGFEMorphologyElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEMorphologyElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEMorphologyElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEMorphologyElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEMorphologyElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEMorphologyElement[JC] def shadowRoot: ShadowRoot
SVGFEMorphologyElement[JC] var style: CSSStyleDeclaration
SVGFEMorphologyElement[JC] def tagName: String
SVGFEMorphologyElement[JC] var textContent: String
SVGFEMorphologyElement[JC] def viewportElement: SVGElement
SVGFEMorphologyElement[JC] def width: SVGAnimatedLength
SVGFEMorphologyElement[JC] def x: SVGAnimatedLength
SVGFEMorphologyElement[JC] var xmlbase: String
SVGFEMorphologyElement[JC] def y: SVGAnimatedLength
SVGFEMorphologyElement[JO] val SVG_MORPHOLOGY_OPERATOR_DILATE: Int
SVGFEMorphologyElement[JO] val SVG_MORPHOLOGY_OPERATOR_ERODE: Int
SVGFEMorphologyElement[JO] val SVG_MORPHOLOGY_OPERATOR_UNKNOWN: Int
SVGFEOffsetElement[JC] var accessKey: String
SVGFEOffsetElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEOffsetElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEOffsetElement[JC] def after(nodes: Node | String*): Unit
SVGFEOffsetElement[JC] def append(nodes: Node | String*): Unit
SVGFEOffsetElement[JC] def appendChild(newChild: Node): Node
SVGFEOffsetElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEOffsetElement[JC] def attributes: NamedNodeMap
SVGFEOffsetElement[JC] def baseURI: String
SVGFEOffsetElement[JC] def before(nodes: Node | String*): Unit
SVGFEOffsetElement[JC] def childElementCount: Int
SVGFEOffsetElement[JC] def childNodes: NodeList[Node]
SVGFEOffsetElement[JC] def children: HTMLCollection[Element]
SVGFEOffsetElement[JC] var classList: DOMTokenList
SVGFEOffsetElement[JC] var className: SVGAnimatedString
SVGFEOffsetElement[JC] def clientHeight: Int
SVGFEOffsetElement[JC] def clientLeft: Int
SVGFEOffsetElement[JC] def clientTop: Int
SVGFEOffsetElement[JC] def clientWidth: Int
SVGFEOffsetElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEOffsetElement[JC] def closest(selector: String): Element
SVGFEOffsetElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEOffsetElement[JC] def contains(otherNode: Node): Boolean
SVGFEOffsetElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEOffsetElement[JC] def dx: SVGAnimatedNumber
SVGFEOffsetElement[JC] def dy: SVGAnimatedNumber
SVGFEOffsetElement[JC] def firstChild: Node
SVGFEOffsetElement[JC] def firstElementChild: Element
SVGFEOffsetElement[JC] def getAttribute(name: String): String
SVGFEOffsetElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEOffsetElement[JC] def getAttributeNode(name: String): Attr
SVGFEOffsetElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEOffsetElement[JC] def getBoundingClientRect(): DOMRect
SVGFEOffsetElement[JC] def getClientRects(): DOMRectList
SVGFEOffsetElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEOffsetElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEOffsetElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEOffsetElement[JC] def hasAttribute(name: String): Boolean
SVGFEOffsetElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEOffsetElement[JC] def hasAttributes(): Boolean
SVGFEOffsetElement[JC] def hasChildNodes(): Boolean
SVGFEOffsetElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEOffsetElement[JC] def height: SVGAnimatedLength
SVGFEOffsetElement[JC] var id: String
SVGFEOffsetElement[JC] def in1: SVGAnimatedString
SVGFEOffsetElement[JC] var innerHTML: String
SVGFEOffsetElement[JC] var innerText: String
SVGFEOffsetElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEOffsetElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEOffsetElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEOffsetElement[JC] def isConnected: Boolean
SVGFEOffsetElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEOffsetElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEOffsetElement[JC] def isSameNode(other: Node): Boolean
SVGFEOffsetElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEOffsetElement[JC] def lastChild: Node
SVGFEOffsetElement[JC] def lastElementChild: Element
SVGFEOffsetElement[JC] def localName: String
SVGFEOffsetElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEOffsetElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEOffsetElement[JC] def matches(selector: String): Boolean
SVGFEOffsetElement[JC] def namespaceURI: String
SVGFEOffsetElement[JC] def nextElementSibling: Element
SVGFEOffsetElement[JC] def nextSibling: Node
SVGFEOffsetElement[JC] def nodeName: String
SVGFEOffsetElement[JC] def nodeType: Int
SVGFEOffsetElement[JC] var nodeValue: String
SVGFEOffsetElement[JC] def normalize(): Unit
SVGFEOffsetElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEOffsetElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEOffsetElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEOffsetElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEOffsetElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEOffsetElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEOffsetElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEOffsetElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEOffsetElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEOffsetElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEOffsetElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEOffsetElement[JC] var onload: js.Function1[Event, _]
SVGFEOffsetElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEOffsetElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEOffsetElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEOffsetElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEOffsetElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEOffsetElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEOffsetElement[JC] var outerHTML: String
SVGFEOffsetElement[JC] def ownerDocument: Document
SVGFEOffsetElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEOffsetElement[JC] def parentNode: Node
SVGFEOffsetElement[JC] def prefix: String
SVGFEOffsetElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEOffsetElement[JC] def previousElementSibling: Element
SVGFEOffsetElement[JC] def previousSibling: Node
SVGFEOffsetElement[JC] def querySelector(selectors: String): Element
SVGFEOffsetElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEOffsetElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEOffsetElement[JC] def remove(): Unit
SVGFEOffsetElement[JC] def removeAttribute(name: String): Unit
SVGFEOffsetElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEOffsetElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEOffsetElement[JC] def removeChild(oldChild: Node): Node
SVGFEOffsetElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEOffsetElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEOffsetElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEOffsetElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEOffsetElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEOffsetElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEOffsetElement[JC] def requestPointerLock(): Unit
SVGFEOffsetElement[JC] def result: SVGAnimatedString
SVGFEOffsetElement[JC] def scrollHeight: Int
SVGFEOffsetElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEOffsetElement[JC] var scrollLeft: Double
SVGFEOffsetElement[JC] var scrollTop: Double
SVGFEOffsetElement[JC] def scrollWidth: Int
SVGFEOffsetElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEOffsetElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEOffsetElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEOffsetElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEOffsetElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEOffsetElement[JC] def shadowRoot: ShadowRoot
SVGFEOffsetElement[JC] var style: CSSStyleDeclaration
SVGFEOffsetElement[JC] def tagName: String
SVGFEOffsetElement[JC] var textContent: String
SVGFEOffsetElement[JC] def viewportElement: SVGElement
SVGFEOffsetElement[JC] def width: SVGAnimatedLength
SVGFEOffsetElement[JC] def x: SVGAnimatedLength
SVGFEOffsetElement[JC] var xmlbase: String
SVGFEOffsetElement[JC] def y: SVGAnimatedLength
SVGFEPointLightElement[JC] var accessKey: String
SVGFEPointLightElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEPointLightElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEPointLightElement[JC] def after(nodes: Node | String*): Unit
SVGFEPointLightElement[JC] def append(nodes: Node | String*): Unit
SVGFEPointLightElement[JC] def appendChild(newChild: Node): Node
SVGFEPointLightElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFEPointLightElement[JC] def attributes: NamedNodeMap
SVGFEPointLightElement[JC] def baseURI: String
SVGFEPointLightElement[JC] def before(nodes: Node | String*): Unit
SVGFEPointLightElement[JC] def childElementCount: Int
SVGFEPointLightElement[JC] def childNodes: NodeList[Node]
SVGFEPointLightElement[JC] def children: HTMLCollection[Element]
SVGFEPointLightElement[JC] var classList: DOMTokenList
SVGFEPointLightElement[JC] def clientHeight: Int
SVGFEPointLightElement[JC] def clientLeft: Int
SVGFEPointLightElement[JC] def clientTop: Int
SVGFEPointLightElement[JC] def clientWidth: Int
SVGFEPointLightElement[JC] def cloneNode(deep: Boolean?): Node
SVGFEPointLightElement[JC] def closest(selector: String): Element
SVGFEPointLightElement[JC] def compareDocumentPosition(other: Node): Int
SVGFEPointLightElement[JC] def contains(otherNode: Node): Boolean
SVGFEPointLightElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFEPointLightElement[JC] def firstChild: Node
SVGFEPointLightElement[JC] def firstElementChild: Element
SVGFEPointLightElement[JC] def getAttribute(name: String): String
SVGFEPointLightElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFEPointLightElement[JC] def getAttributeNode(name: String): Attr
SVGFEPointLightElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFEPointLightElement[JC] def getBoundingClientRect(): DOMRect
SVGFEPointLightElement[JC] def getClientRects(): DOMRectList
SVGFEPointLightElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFEPointLightElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFEPointLightElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFEPointLightElement[JC] def hasAttribute(name: String): Boolean
SVGFEPointLightElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFEPointLightElement[JC] def hasAttributes(): Boolean
SVGFEPointLightElement[JC] def hasChildNodes(): Boolean
SVGFEPointLightElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFEPointLightElement[JC] var id: String
SVGFEPointLightElement[JC] var innerHTML: String
SVGFEPointLightElement[JC] var innerText: String
SVGFEPointLightElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFEPointLightElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFEPointLightElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFEPointLightElement[JC] def isConnected: Boolean
SVGFEPointLightElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFEPointLightElement[JC] def isEqualNode(arg: Node): Boolean
SVGFEPointLightElement[JC] def isSameNode(other: Node): Boolean
SVGFEPointLightElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFEPointLightElement[JC] def lastChild: Node
SVGFEPointLightElement[JC] def lastElementChild: Element
SVGFEPointLightElement[JC] def localName: String
SVGFEPointLightElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFEPointLightElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFEPointLightElement[JC] def matches(selector: String): Boolean
SVGFEPointLightElement[JC] def namespaceURI: String
SVGFEPointLightElement[JC] def nextElementSibling: Element
SVGFEPointLightElement[JC] def nextSibling: Node
SVGFEPointLightElement[JC] def nodeName: String
SVGFEPointLightElement[JC] def nodeType: Int
SVGFEPointLightElement[JC] var nodeValue: String
SVGFEPointLightElement[JC] def normalize(): Unit
SVGFEPointLightElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFEPointLightElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFEPointLightElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFEPointLightElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFEPointLightElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFEPointLightElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFEPointLightElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFEPointLightElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFEPointLightElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFEPointLightElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFEPointLightElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFEPointLightElement[JC] var onload: js.Function1[Event, _]
SVGFEPointLightElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFEPointLightElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFEPointLightElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFEPointLightElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFEPointLightElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFEPointLightElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFEPointLightElement[JC] var outerHTML: String
SVGFEPointLightElement[JC] def ownerDocument: Document
SVGFEPointLightElement[JC] def ownerSVGElement: SVGSVGElement
SVGFEPointLightElement[JC] def parentNode: Node
SVGFEPointLightElement[JC] def prefix: String
SVGFEPointLightElement[JC] def prepend(nodes: Node | String*): Unit
SVGFEPointLightElement[JC] def previousElementSibling: Element
SVGFEPointLightElement[JC] def previousSibling: Node
SVGFEPointLightElement[JC] def querySelector(selectors: String): Element
SVGFEPointLightElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFEPointLightElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFEPointLightElement[JC] def remove(): Unit
SVGFEPointLightElement[JC] def removeAttribute(name: String): Unit
SVGFEPointLightElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFEPointLightElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFEPointLightElement[JC] def removeChild(oldChild: Node): Node
SVGFEPointLightElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFEPointLightElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFEPointLightElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFEPointLightElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFEPointLightElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFEPointLightElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFEPointLightElement[JC] def requestPointerLock(): Unit
SVGFEPointLightElement[JC] def scrollHeight: Int
SVGFEPointLightElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFEPointLightElement[JC] var scrollLeft: Double
SVGFEPointLightElement[JC] var scrollTop: Double
SVGFEPointLightElement[JC] def scrollWidth: Int
SVGFEPointLightElement[JC] def setAttribute(name: String, value: String): Unit
SVGFEPointLightElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFEPointLightElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFEPointLightElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFEPointLightElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFEPointLightElement[JC] def shadowRoot: ShadowRoot
SVGFEPointLightElement[JC] def tagName: String
SVGFEPointLightElement[JC] var textContent: String
SVGFEPointLightElement[JC] def viewportElement: SVGElement
SVGFEPointLightElement[JC] def x: SVGAnimatedNumber
SVGFEPointLightElement[JC] var xmlbase: String
SVGFEPointLightElement[JC] def y: SVGAnimatedNumber
SVGFEPointLightElement[JC] def z: SVGAnimatedNumber
SVGFESpecularLightingElement[JC] var accessKey: String
SVGFESpecularLightingElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFESpecularLightingElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFESpecularLightingElement[JC] def after(nodes: Node | String*): Unit
SVGFESpecularLightingElement[JC] def append(nodes: Node | String*): Unit
SVGFESpecularLightingElement[JC] def appendChild(newChild: Node): Node
SVGFESpecularLightingElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFESpecularLightingElement[JC] def attributes: NamedNodeMap
SVGFESpecularLightingElement[JC] def baseURI: String
SVGFESpecularLightingElement[JC] def before(nodes: Node | String*): Unit
SVGFESpecularLightingElement[JC] def childElementCount: Int
SVGFESpecularLightingElement[JC] def childNodes: NodeList[Node]
SVGFESpecularLightingElement[JC] def children: HTMLCollection[Element]
SVGFESpecularLightingElement[JC] var classList: DOMTokenList
SVGFESpecularLightingElement[JC] var className: SVGAnimatedString
SVGFESpecularLightingElement[JC] def clientHeight: Int
SVGFESpecularLightingElement[JC] def clientLeft: Int
SVGFESpecularLightingElement[JC] def clientTop: Int
SVGFESpecularLightingElement[JC] def clientWidth: Int
SVGFESpecularLightingElement[JC] def cloneNode(deep: Boolean?): Node
SVGFESpecularLightingElement[JC] def closest(selector: String): Element
SVGFESpecularLightingElement[JC] def compareDocumentPosition(other: Node): Int
SVGFESpecularLightingElement[JC] def contains(otherNode: Node): Boolean
SVGFESpecularLightingElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFESpecularLightingElement[JC] def firstChild: Node
SVGFESpecularLightingElement[JC] def firstElementChild: Element
SVGFESpecularLightingElement[JC] def getAttribute(name: String): String
SVGFESpecularLightingElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFESpecularLightingElement[JC] def getAttributeNode(name: String): Attr
SVGFESpecularLightingElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFESpecularLightingElement[JC] def getBoundingClientRect(): DOMRect
SVGFESpecularLightingElement[JC] def getClientRects(): DOMRectList
SVGFESpecularLightingElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFESpecularLightingElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFESpecularLightingElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFESpecularLightingElement[JC] def hasAttribute(name: String): Boolean
SVGFESpecularLightingElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFESpecularLightingElement[JC] def hasAttributes(): Boolean
SVGFESpecularLightingElement[JC] def hasChildNodes(): Boolean
SVGFESpecularLightingElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFESpecularLightingElement[JC] def height: SVGAnimatedLength
SVGFESpecularLightingElement[JC] var id: String
SVGFESpecularLightingElement[JC] def in1: SVGAnimatedString
SVGFESpecularLightingElement[JC] var innerHTML: String
SVGFESpecularLightingElement[JC] var innerText: String
SVGFESpecularLightingElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFESpecularLightingElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFESpecularLightingElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFESpecularLightingElement[JC] def isConnected: Boolean
SVGFESpecularLightingElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFESpecularLightingElement[JC] def isEqualNode(arg: Node): Boolean
SVGFESpecularLightingElement[JC] def isSameNode(other: Node): Boolean
SVGFESpecularLightingElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFESpecularLightingElement[JC] def kernelUnitLengthX: SVGAnimatedNumber
SVGFESpecularLightingElement[JC] def kernelUnitLengthY: SVGAnimatedNumber
SVGFESpecularLightingElement[JC] def lastChild: Node
SVGFESpecularLightingElement[JC] def lastElementChild: Element
SVGFESpecularLightingElement[JC] def localName: String
SVGFESpecularLightingElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFESpecularLightingElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFESpecularLightingElement[JC] def matches(selector: String): Boolean
SVGFESpecularLightingElement[JC] def namespaceURI: String
SVGFESpecularLightingElement[JC] def nextElementSibling: Element
SVGFESpecularLightingElement[JC] def nextSibling: Node
SVGFESpecularLightingElement[JC] def nodeName: String
SVGFESpecularLightingElement[JC] def nodeType: Int
SVGFESpecularLightingElement[JC] var nodeValue: String
SVGFESpecularLightingElement[JC] def normalize(): Unit
SVGFESpecularLightingElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFESpecularLightingElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFESpecularLightingElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFESpecularLightingElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFESpecularLightingElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFESpecularLightingElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFESpecularLightingElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFESpecularLightingElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFESpecularLightingElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFESpecularLightingElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFESpecularLightingElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFESpecularLightingElement[JC] var onload: js.Function1[Event, _]
SVGFESpecularLightingElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFESpecularLightingElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFESpecularLightingElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFESpecularLightingElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFESpecularLightingElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFESpecularLightingElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFESpecularLightingElement[JC] var outerHTML: String
SVGFESpecularLightingElement[JC] def ownerDocument: Document
SVGFESpecularLightingElement[JC] def ownerSVGElement: SVGSVGElement
SVGFESpecularLightingElement[JC] def parentNode: Node
SVGFESpecularLightingElement[JC] def prefix: String
SVGFESpecularLightingElement[JC] def prepend(nodes: Node | String*): Unit
SVGFESpecularLightingElement[JC] def previousElementSibling: Element
SVGFESpecularLightingElement[JC] def previousSibling: Node
SVGFESpecularLightingElement[JC] def querySelector(selectors: String): Element
SVGFESpecularLightingElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFESpecularLightingElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFESpecularLightingElement[JC] def remove(): Unit
SVGFESpecularLightingElement[JC] def removeAttribute(name: String): Unit
SVGFESpecularLightingElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFESpecularLightingElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFESpecularLightingElement[JC] def removeChild(oldChild: Node): Node
SVGFESpecularLightingElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFESpecularLightingElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFESpecularLightingElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFESpecularLightingElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFESpecularLightingElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFESpecularLightingElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFESpecularLightingElement[JC] def requestPointerLock(): Unit
SVGFESpecularLightingElement[JC] def result: SVGAnimatedString
SVGFESpecularLightingElement[JC] def scrollHeight: Int
SVGFESpecularLightingElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFESpecularLightingElement[JC] var scrollLeft: Double
SVGFESpecularLightingElement[JC] var scrollTop: Double
SVGFESpecularLightingElement[JC] def scrollWidth: Int
SVGFESpecularLightingElement[JC] def setAttribute(name: String, value: String): Unit
SVGFESpecularLightingElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFESpecularLightingElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFESpecularLightingElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFESpecularLightingElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFESpecularLightingElement[JC] def shadowRoot: ShadowRoot
SVGFESpecularLightingElement[JC] def specularConstant: SVGAnimatedNumber
SVGFESpecularLightingElement[JC] def specularExponent: SVGAnimatedNumber
SVGFESpecularLightingElement[JC] var style: CSSStyleDeclaration
SVGFESpecularLightingElement[JC] def surfaceScale: SVGAnimatedNumber
SVGFESpecularLightingElement[JC] def tagName: String
SVGFESpecularLightingElement[JC] var textContent: String
SVGFESpecularLightingElement[JC] def viewportElement: SVGElement
SVGFESpecularLightingElement[JC] def width: SVGAnimatedLength
SVGFESpecularLightingElement[JC] def x: SVGAnimatedLength
SVGFESpecularLightingElement[JC] var xmlbase: String
SVGFESpecularLightingElement[JC] def y: SVGAnimatedLength
SVGFESpotLightElement[JC] var accessKey: String
SVGFESpotLightElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFESpotLightElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFESpotLightElement[JC] def after(nodes: Node | String*): Unit
SVGFESpotLightElement[JC] def append(nodes: Node | String*): Unit
SVGFESpotLightElement[JC] def appendChild(newChild: Node): Node
SVGFESpotLightElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFESpotLightElement[JC] def attributes: NamedNodeMap
SVGFESpotLightElement[JC] def baseURI: String
SVGFESpotLightElement[JC] def before(nodes: Node | String*): Unit
SVGFESpotLightElement[JC] def childElementCount: Int
SVGFESpotLightElement[JC] def childNodes: NodeList[Node]
SVGFESpotLightElement[JC] def children: HTMLCollection[Element]
SVGFESpotLightElement[JC] var classList: DOMTokenList
SVGFESpotLightElement[JC] def clientHeight: Int
SVGFESpotLightElement[JC] def clientLeft: Int
SVGFESpotLightElement[JC] def clientTop: Int
SVGFESpotLightElement[JC] def clientWidth: Int
SVGFESpotLightElement[JC] def cloneNode(deep: Boolean?): Node
SVGFESpotLightElement[JC] def closest(selector: String): Element
SVGFESpotLightElement[JC] def compareDocumentPosition(other: Node): Int
SVGFESpotLightElement[JC] def contains(otherNode: Node): Boolean
SVGFESpotLightElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFESpotLightElement[JC] def firstChild: Node
SVGFESpotLightElement[JC] def firstElementChild: Element
SVGFESpotLightElement[JC] def getAttribute(name: String): String
SVGFESpotLightElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFESpotLightElement[JC] def getAttributeNode(name: String): Attr
SVGFESpotLightElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFESpotLightElement[JC] def getBoundingClientRect(): DOMRect
SVGFESpotLightElement[JC] def getClientRects(): DOMRectList
SVGFESpotLightElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFESpotLightElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFESpotLightElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFESpotLightElement[JC] def hasAttribute(name: String): Boolean
SVGFESpotLightElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFESpotLightElement[JC] def hasAttributes(): Boolean
SVGFESpotLightElement[JC] def hasChildNodes(): Boolean
SVGFESpotLightElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFESpotLightElement[JC] var id: String
SVGFESpotLightElement[JC] var innerHTML: String
SVGFESpotLightElement[JC] var innerText: String
SVGFESpotLightElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFESpotLightElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFESpotLightElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFESpotLightElement[JC] def isConnected: Boolean
SVGFESpotLightElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFESpotLightElement[JC] def isEqualNode(arg: Node): Boolean
SVGFESpotLightElement[JC] def isSameNode(other: Node): Boolean
SVGFESpotLightElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFESpotLightElement[JC] def lastChild: Node
SVGFESpotLightElement[JC] def lastElementChild: Element
SVGFESpotLightElement[JC] def limitingConeAngle: SVGAnimatedNumber
SVGFESpotLightElement[JC] def localName: String
SVGFESpotLightElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFESpotLightElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFESpotLightElement[JC] def matches(selector: String): Boolean
SVGFESpotLightElement[JC] def namespaceURI: String
SVGFESpotLightElement[JC] def nextElementSibling: Element
SVGFESpotLightElement[JC] def nextSibling: Node
SVGFESpotLightElement[JC] def nodeName: String
SVGFESpotLightElement[JC] def nodeType: Int
SVGFESpotLightElement[JC] var nodeValue: String
SVGFESpotLightElement[JC] def normalize(): Unit
SVGFESpotLightElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFESpotLightElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFESpotLightElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFESpotLightElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFESpotLightElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFESpotLightElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFESpotLightElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFESpotLightElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFESpotLightElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFESpotLightElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFESpotLightElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFESpotLightElement[JC] var onload: js.Function1[Event, _]
SVGFESpotLightElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFESpotLightElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFESpotLightElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFESpotLightElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFESpotLightElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFESpotLightElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFESpotLightElement[JC] var outerHTML: String
SVGFESpotLightElement[JC] def ownerDocument: Document
SVGFESpotLightElement[JC] def ownerSVGElement: SVGSVGElement
SVGFESpotLightElement[JC] def parentNode: Node
SVGFESpotLightElement[JC] def pointsAtX: SVGAnimatedNumber
SVGFESpotLightElement[JC] def pointsAtY: SVGAnimatedNumber
SVGFESpotLightElement[JC] def pointsAtZ: SVGAnimatedNumber
SVGFESpotLightElement[JC] def prefix: String
SVGFESpotLightElement[JC] def prepend(nodes: Node | String*): Unit
SVGFESpotLightElement[JC] def previousElementSibling: Element
SVGFESpotLightElement[JC] def previousSibling: Node
SVGFESpotLightElement[JC] def querySelector(selectors: String): Element
SVGFESpotLightElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFESpotLightElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFESpotLightElement[JC] def remove(): Unit
SVGFESpotLightElement[JC] def removeAttribute(name: String): Unit
SVGFESpotLightElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFESpotLightElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFESpotLightElement[JC] def removeChild(oldChild: Node): Node
SVGFESpotLightElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFESpotLightElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFESpotLightElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFESpotLightElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFESpotLightElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFESpotLightElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFESpotLightElement[JC] def requestPointerLock(): Unit
SVGFESpotLightElement[JC] def scrollHeight: Int
SVGFESpotLightElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFESpotLightElement[JC] var scrollLeft: Double
SVGFESpotLightElement[JC] var scrollTop: Double
SVGFESpotLightElement[JC] def scrollWidth: Int
SVGFESpotLightElement[JC] def setAttribute(name: String, value: String): Unit
SVGFESpotLightElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFESpotLightElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFESpotLightElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFESpotLightElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFESpotLightElement[JC] def shadowRoot: ShadowRoot
SVGFESpotLightElement[JC] def specularExponent: SVGAnimatedNumber
SVGFESpotLightElement[JC] def tagName: String
SVGFESpotLightElement[JC] var textContent: String
SVGFESpotLightElement[JC] def viewportElement: SVGElement
SVGFESpotLightElement[JC] def x: SVGAnimatedNumber
SVGFESpotLightElement[JC] var xmlbase: String
SVGFESpotLightElement[JC] def y: SVGAnimatedNumber
SVGFESpotLightElement[JC] def z: SVGAnimatedNumber
SVGFETileElement[JC] var accessKey: String
SVGFETileElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFETileElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFETileElement[JC] def after(nodes: Node | String*): Unit
SVGFETileElement[JC] def append(nodes: Node | String*): Unit
SVGFETileElement[JC] def appendChild(newChild: Node): Node
SVGFETileElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFETileElement[JC] def attributes: NamedNodeMap
SVGFETileElement[JC] def baseURI: String
SVGFETileElement[JC] def before(nodes: Node | String*): Unit
SVGFETileElement[JC] def childElementCount: Int
SVGFETileElement[JC] def childNodes: NodeList[Node]
SVGFETileElement[JC] def children: HTMLCollection[Element]
SVGFETileElement[JC] var classList: DOMTokenList
SVGFETileElement[JC] var className: SVGAnimatedString
SVGFETileElement[JC] def clientHeight: Int
SVGFETileElement[JC] def clientLeft: Int
SVGFETileElement[JC] def clientTop: Int
SVGFETileElement[JC] def clientWidth: Int
SVGFETileElement[JC] def cloneNode(deep: Boolean?): Node
SVGFETileElement[JC] def closest(selector: String): Element
SVGFETileElement[JC] def compareDocumentPosition(other: Node): Int
SVGFETileElement[JC] def contains(otherNode: Node): Boolean
SVGFETileElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFETileElement[JC] def firstChild: Node
SVGFETileElement[JC] def firstElementChild: Element
SVGFETileElement[JC] def getAttribute(name: String): String
SVGFETileElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFETileElement[JC] def getAttributeNode(name: String): Attr
SVGFETileElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFETileElement[JC] def getBoundingClientRect(): DOMRect
SVGFETileElement[JC] def getClientRects(): DOMRectList
SVGFETileElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFETileElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFETileElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFETileElement[JC] def hasAttribute(name: String): Boolean
SVGFETileElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFETileElement[JC] def hasAttributes(): Boolean
SVGFETileElement[JC] def hasChildNodes(): Boolean
SVGFETileElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFETileElement[JC] def height: SVGAnimatedLength
SVGFETileElement[JC] var id: String
SVGFETileElement[JC] def in1: SVGAnimatedString
SVGFETileElement[JC] var innerHTML: String
SVGFETileElement[JC] var innerText: String
SVGFETileElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFETileElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFETileElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFETileElement[JC] def isConnected: Boolean
SVGFETileElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFETileElement[JC] def isEqualNode(arg: Node): Boolean
SVGFETileElement[JC] def isSameNode(other: Node): Boolean
SVGFETileElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFETileElement[JC] def lastChild: Node
SVGFETileElement[JC] def lastElementChild: Element
SVGFETileElement[JC] def localName: String
SVGFETileElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFETileElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFETileElement[JC] def matches(selector: String): Boolean
SVGFETileElement[JC] def namespaceURI: String
SVGFETileElement[JC] def nextElementSibling: Element
SVGFETileElement[JC] def nextSibling: Node
SVGFETileElement[JC] def nodeName: String
SVGFETileElement[JC] def nodeType: Int
SVGFETileElement[JC] var nodeValue: String
SVGFETileElement[JC] def normalize(): Unit
SVGFETileElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFETileElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFETileElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFETileElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFETileElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFETileElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFETileElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFETileElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFETileElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFETileElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFETileElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFETileElement[JC] var onload: js.Function1[Event, _]
SVGFETileElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFETileElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFETileElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFETileElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFETileElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFETileElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFETileElement[JC] var outerHTML: String
SVGFETileElement[JC] def ownerDocument: Document
SVGFETileElement[JC] def ownerSVGElement: SVGSVGElement
SVGFETileElement[JC] def parentNode: Node
SVGFETileElement[JC] def prefix: String
SVGFETileElement[JC] def prepend(nodes: Node | String*): Unit
SVGFETileElement[JC] def previousElementSibling: Element
SVGFETileElement[JC] def previousSibling: Node
SVGFETileElement[JC] def querySelector(selectors: String): Element
SVGFETileElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFETileElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFETileElement[JC] def remove(): Unit
SVGFETileElement[JC] def removeAttribute(name: String): Unit
SVGFETileElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFETileElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFETileElement[JC] def removeChild(oldChild: Node): Node
SVGFETileElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFETileElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFETileElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFETileElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFETileElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFETileElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFETileElement[JC] def requestPointerLock(): Unit
SVGFETileElement[JC] def result: SVGAnimatedString
SVGFETileElement[JC] def scrollHeight: Int
SVGFETileElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFETileElement[JC] var scrollLeft: Double
SVGFETileElement[JC] var scrollTop: Double
SVGFETileElement[JC] def scrollWidth: Int
SVGFETileElement[JC] def setAttribute(name: String, value: String): Unit
SVGFETileElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFETileElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFETileElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFETileElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFETileElement[JC] def shadowRoot: ShadowRoot
SVGFETileElement[JC] var style: CSSStyleDeclaration
SVGFETileElement[JC] def tagName: String
SVGFETileElement[JC] var textContent: String
SVGFETileElement[JC] def viewportElement: SVGElement
SVGFETileElement[JC] def width: SVGAnimatedLength
SVGFETileElement[JC] def x: SVGAnimatedLength
SVGFETileElement[JC] var xmlbase: String
SVGFETileElement[JC] def y: SVGAnimatedLength
SVGFETurbulenceElement[JC] var accessKey: String
SVGFETurbulenceElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFETurbulenceElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFETurbulenceElement[JC] def after(nodes: Node | String*): Unit
SVGFETurbulenceElement[JC] def append(nodes: Node | String*): Unit
SVGFETurbulenceElement[JC] def appendChild(newChild: Node): Node
SVGFETurbulenceElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFETurbulenceElement[JC] def attributes: NamedNodeMap
SVGFETurbulenceElement[JC] def baseFrequencyX: SVGAnimatedNumber
SVGFETurbulenceElement[JC] def baseFrequencyY: SVGAnimatedNumber
SVGFETurbulenceElement[JC] def baseURI: String
SVGFETurbulenceElement[JC] def before(nodes: Node | String*): Unit
SVGFETurbulenceElement[JC] def childElementCount: Int
SVGFETurbulenceElement[JC] def childNodes: NodeList[Node]
SVGFETurbulenceElement[JC] def children: HTMLCollection[Element]
SVGFETurbulenceElement[JC] var classList: DOMTokenList
SVGFETurbulenceElement[JC] var className: SVGAnimatedString
SVGFETurbulenceElement[JC] def clientHeight: Int
SVGFETurbulenceElement[JC] def clientLeft: Int
SVGFETurbulenceElement[JC] def clientTop: Int
SVGFETurbulenceElement[JC] def clientWidth: Int
SVGFETurbulenceElement[JC] def cloneNode(deep: Boolean?): Node
SVGFETurbulenceElement[JC] def closest(selector: String): Element
SVGFETurbulenceElement[JC] def compareDocumentPosition(other: Node): Int
SVGFETurbulenceElement[JC] def contains(otherNode: Node): Boolean
SVGFETurbulenceElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFETurbulenceElement[JC] def firstChild: Node
SVGFETurbulenceElement[JC] def firstElementChild: Element
SVGFETurbulenceElement[JC] def getAttribute(name: String): String
SVGFETurbulenceElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFETurbulenceElement[JC] def getAttributeNode(name: String): Attr
SVGFETurbulenceElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFETurbulenceElement[JC] def getBoundingClientRect(): DOMRect
SVGFETurbulenceElement[JC] def getClientRects(): DOMRectList
SVGFETurbulenceElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFETurbulenceElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFETurbulenceElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFETurbulenceElement[JC] def hasAttribute(name: String): Boolean
SVGFETurbulenceElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFETurbulenceElement[JC] def hasAttributes(): Boolean
SVGFETurbulenceElement[JC] def hasChildNodes(): Boolean
SVGFETurbulenceElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFETurbulenceElement[JC] def height: SVGAnimatedLength
SVGFETurbulenceElement[JC] var id: String
SVGFETurbulenceElement[JC] var innerHTML: String
SVGFETurbulenceElement[JC] var innerText: String
SVGFETurbulenceElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFETurbulenceElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFETurbulenceElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFETurbulenceElement[JC] def isConnected: Boolean
SVGFETurbulenceElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFETurbulenceElement[JC] def isEqualNode(arg: Node): Boolean
SVGFETurbulenceElement[JC] def isSameNode(other: Node): Boolean
SVGFETurbulenceElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFETurbulenceElement[JC] def lastChild: Node
SVGFETurbulenceElement[JC] def lastElementChild: Element
SVGFETurbulenceElement[JC] def localName: String
SVGFETurbulenceElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFETurbulenceElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFETurbulenceElement[JC] def matches(selector: String): Boolean
SVGFETurbulenceElement[JC] def namespaceURI: String
SVGFETurbulenceElement[JC] def nextElementSibling: Element
SVGFETurbulenceElement[JC] def nextSibling: Node
SVGFETurbulenceElement[JC] def nodeName: String
SVGFETurbulenceElement[JC] def nodeType: Int
SVGFETurbulenceElement[JC] var nodeValue: String
SVGFETurbulenceElement[JC] def normalize(): Unit
SVGFETurbulenceElement[JC] def numOctaves: SVGAnimatedInteger
SVGFETurbulenceElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFETurbulenceElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFETurbulenceElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFETurbulenceElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFETurbulenceElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFETurbulenceElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFETurbulenceElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFETurbulenceElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFETurbulenceElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFETurbulenceElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFETurbulenceElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFETurbulenceElement[JC] var onload: js.Function1[Event, _]
SVGFETurbulenceElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFETurbulenceElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFETurbulenceElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFETurbulenceElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFETurbulenceElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFETurbulenceElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFETurbulenceElement[JC] var outerHTML: String
SVGFETurbulenceElement[JC] def ownerDocument: Document
SVGFETurbulenceElement[JC] def ownerSVGElement: SVGSVGElement
SVGFETurbulenceElement[JC] def parentNode: Node
SVGFETurbulenceElement[JC] def prefix: String
SVGFETurbulenceElement[JC] def prepend(nodes: Node | String*): Unit
SVGFETurbulenceElement[JC] def previousElementSibling: Element
SVGFETurbulenceElement[JC] def previousSibling: Node
SVGFETurbulenceElement[JC] def querySelector(selectors: String): Element
SVGFETurbulenceElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFETurbulenceElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFETurbulenceElement[JC] def remove(): Unit
SVGFETurbulenceElement[JC] def removeAttribute(name: String): Unit
SVGFETurbulenceElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFETurbulenceElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFETurbulenceElement[JC] def removeChild(oldChild: Node): Node
SVGFETurbulenceElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFETurbulenceElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFETurbulenceElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFETurbulenceElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFETurbulenceElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFETurbulenceElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFETurbulenceElement[JC] def requestPointerLock(): Unit
SVGFETurbulenceElement[JC] def result: SVGAnimatedString
SVGFETurbulenceElement[JC] def scrollHeight: Int
SVGFETurbulenceElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFETurbulenceElement[JC] var scrollLeft: Double
SVGFETurbulenceElement[JC] var scrollTop: Double
SVGFETurbulenceElement[JC] def scrollWidth: Int
SVGFETurbulenceElement[JC] def seed: SVGAnimatedNumber
SVGFETurbulenceElement[JC] def setAttribute(name: String, value: String): Unit
SVGFETurbulenceElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFETurbulenceElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFETurbulenceElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFETurbulenceElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFETurbulenceElement[JC] def shadowRoot: ShadowRoot
SVGFETurbulenceElement[JC] def stitchTiles: SVGAnimatedEnumeration
SVGFETurbulenceElement[JC] var style: CSSStyleDeclaration
SVGFETurbulenceElement[JC] def tagName: String
SVGFETurbulenceElement[JC] var textContent: String
SVGFETurbulenceElement[JC] def `type`: SVGAnimatedEnumeration
SVGFETurbulenceElement[JC] def viewportElement: SVGElement
SVGFETurbulenceElement[JC] def width: SVGAnimatedLength
SVGFETurbulenceElement[JC] def x: SVGAnimatedLength
SVGFETurbulenceElement[JC] var xmlbase: String
SVGFETurbulenceElement[JC] def y: SVGAnimatedLength
SVGFETurbulenceElement[JO] val SVG_STITCHTYPE_NOSTITCH: Int
SVGFETurbulenceElement[JO] val SVG_STITCHTYPE_STITCH: Int
SVGFETurbulenceElement[JO] val SVG_STITCHTYPE_UNKNOWN: Int
SVGFETurbulenceElement[JO] val SVG_TURBULENCE_TYPE_FRACTALNOISE: Int
SVGFETurbulenceElement[JO] val SVG_TURBULENCE_TYPE_TURBULENCE: Int
SVGFETurbulenceElement[JO] val SVG_TURBULENCE_TYPE_UNKNOWN: Int
SVGFilterElement[JC] val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Int
SVGFilterElement[JC] val SVG_UNIT_TYPE_UNKNOWN: Int
SVGFilterElement[JC] val SVG_UNIT_TYPE_USERSPACEONUSE: Int
SVGFilterElement[JC] var accessKey: String
SVGFilterElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFilterElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFilterElement[JC] def after(nodes: Node | String*): Unit
SVGFilterElement[JC] def append(nodes: Node | String*): Unit
SVGFilterElement[JC] def appendChild(newChild: Node): Node
SVGFilterElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGFilterElement[JC] def attributes: NamedNodeMap
SVGFilterElement[JC] def baseURI: String
SVGFilterElement[JC] def before(nodes: Node | String*): Unit
SVGFilterElement[JC] def childElementCount: Int
SVGFilterElement[JC] def childNodes: NodeList[Node]
SVGFilterElement[JC] def children: HTMLCollection[Element]
SVGFilterElement[JC] var classList: DOMTokenList
SVGFilterElement[JC] var className: SVGAnimatedString
SVGFilterElement[JC] def clientHeight: Int
SVGFilterElement[JC] def clientLeft: Int
SVGFilterElement[JC] def clientTop: Int
SVGFilterElement[JC] def clientWidth: Int
SVGFilterElement[JC] def cloneNode(deep: Boolean?): Node
SVGFilterElement[JC] def closest(selector: String): Element
SVGFilterElement[JC] def compareDocumentPosition(other: Node): Int
SVGFilterElement[JC] def contains(otherNode: Node): Boolean
SVGFilterElement[JC] def dispatchEvent(evt: Event): Boolean
SVGFilterElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGFilterElement[JC] def filterResX: SVGAnimatedInteger
SVGFilterElement[JC] def filterResY: SVGAnimatedInteger
SVGFilterElement[JC] def filterUnits: SVGAnimatedEnumeration
SVGFilterElement[JC] def firstChild: Node
SVGFilterElement[JC] def firstElementChild: Element
SVGFilterElement[JC] def getAttribute(name: String): String
SVGFilterElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGFilterElement[JC] def getAttributeNode(name: String): Attr
SVGFilterElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGFilterElement[JC] def getBoundingClientRect(): DOMRect
SVGFilterElement[JC] def getClientRects(): DOMRectList
SVGFilterElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGFilterElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGFilterElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGFilterElement[JC] def hasAttribute(name: String): Boolean
SVGFilterElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGFilterElement[JC] def hasAttributes(): Boolean
SVGFilterElement[JC] def hasChildNodes(): Boolean
SVGFilterElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGFilterElement[JC] def height: SVGAnimatedLength
SVGFilterElement[JC] var href: SVGAnimatedString
SVGFilterElement[JC] var id: String
SVGFilterElement[JC] var innerHTML: String
SVGFilterElement[JC] var innerText: String
SVGFilterElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGFilterElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGFilterElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGFilterElement[JC] def isConnected: Boolean
SVGFilterElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGFilterElement[JC] def isEqualNode(arg: Node): Boolean
SVGFilterElement[JC] def isSameNode(other: Node): Boolean
SVGFilterElement[JC] def isSupported(feature: String, version: String): Boolean
SVGFilterElement[JC] def lastChild: Node
SVGFilterElement[JC] def lastElementChild: Element
SVGFilterElement[JC] def localName: String
SVGFilterElement[JC] def lookupNamespaceURI(prefix: String): String
SVGFilterElement[JC] def lookupPrefix(namespaceURI: String): String
SVGFilterElement[JC] def matches(selector: String): Boolean
SVGFilterElement[JC] def namespaceURI: String
SVGFilterElement[JC] def nextElementSibling: Element
SVGFilterElement[JC] def nextSibling: Node
SVGFilterElement[JC] def nodeName: String
SVGFilterElement[JC] def nodeType: Int
SVGFilterElement[JC] var nodeValue: String
SVGFilterElement[JC] def normalize(): Unit
SVGFilterElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGFilterElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGFilterElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGFilterElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGFilterElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGFilterElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGFilterElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGFilterElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGFilterElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGFilterElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGFilterElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGFilterElement[JC] var onload: js.Function1[Event, _]
SVGFilterElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGFilterElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGFilterElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGFilterElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGFilterElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGFilterElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGFilterElement[JC] var outerHTML: String
SVGFilterElement[JC] def ownerDocument: Document
SVGFilterElement[JC] def ownerSVGElement: SVGSVGElement
SVGFilterElement[JC] def parentNode: Node
SVGFilterElement[JC] def prefix: String
SVGFilterElement[JC] def prepend(nodes: Node | String*): Unit
SVGFilterElement[JC] def previousElementSibling: Element
SVGFilterElement[JC] def previousSibling: Node
SVGFilterElement[JC] def primitiveUnits: SVGAnimatedEnumeration
SVGFilterElement[JC] def querySelector(selectors: String): Element
SVGFilterElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGFilterElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGFilterElement[JC] def remove(): Unit
SVGFilterElement[JC] def removeAttribute(name: String): Unit
SVGFilterElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGFilterElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGFilterElement[JC] def removeChild(oldChild: Node): Node
SVGFilterElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGFilterElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGFilterElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGFilterElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGFilterElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGFilterElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGFilterElement[JC] def requestPointerLock(): Unit
SVGFilterElement[JC] def scrollHeight: Int
SVGFilterElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGFilterElement[JC] var scrollLeft: Double
SVGFilterElement[JC] var scrollTop: Double
SVGFilterElement[JC] def scrollWidth: Int
SVGFilterElement[JC] def setAttribute(name: String, value: String): Unit
SVGFilterElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGFilterElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGFilterElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGFilterElement[JC] def setFilterRes(filterResX: Double, filterResY: Double): Unit
SVGFilterElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGFilterElement[JC] def shadowRoot: ShadowRoot
SVGFilterElement[JC] var style: CSSStyleDeclaration
SVGFilterElement[JC] def tagName: String
SVGFilterElement[JC] var textContent: String
SVGFilterElement[JC] def viewportElement: SVGElement
SVGFilterElement[JC] def width: SVGAnimatedLength
SVGFilterElement[JC] def x: SVGAnimatedLength
SVGFilterElement[JC] var xmlbase: String
SVGFilterElement[JC] var xmllang: String
SVGFilterElement[JC] var xmlspace: String
SVGFilterElement[JC] def y: SVGAnimatedLength
SVGFilterPrimitiveStandardAttributes[JT] var className: SVGAnimatedString
SVGFilterPrimitiveStandardAttributes[JT] def height: SVGAnimatedLength
SVGFilterPrimitiveStandardAttributes[JT] def result: SVGAnimatedString
SVGFilterPrimitiveStandardAttributes[JT] var style: CSSStyleDeclaration
SVGFilterPrimitiveStandardAttributes[JT] def width: SVGAnimatedLength
SVGFilterPrimitiveStandardAttributes[JT] def x: SVGAnimatedLength
SVGFilterPrimitiveStandardAttributes[JT] def y: SVGAnimatedLength
SVGFitToViewBox[JT] var preserveAspectRatio: SVGAnimatedPreserveAspectRatio
SVGFitToViewBox[JT] var viewBox: SVGAnimatedRect
SVGGElement[JC] var accessKey: String
SVGGElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGGElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGGElement[JC] def after(nodes: Node | String*): Unit
SVGGElement[JC] def append(nodes: Node | String*): Unit
SVGGElement[JC] def appendChild(newChild: Node): Node
SVGGElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGGElement[JC] def attributes: NamedNodeMap
SVGGElement[JC] def baseURI: String
SVGGElement[JC] def before(nodes: Node | String*): Unit
SVGGElement[JC] def childElementCount: Int
SVGGElement[JC] def childNodes: NodeList[Node]
SVGGElement[JC] def children: HTMLCollection[Element]
SVGGElement[JC] var classList: DOMTokenList
SVGGElement[JC] var className: SVGAnimatedString
SVGGElement[JC] def clientHeight: Int
SVGGElement[JC] def clientLeft: Int
SVGGElement[JC] def clientTop: Int
SVGGElement[JC] def clientWidth: Int
SVGGElement[JC] def cloneNode(deep: Boolean?): Node
SVGGElement[JC] def closest(selector: String): Element
SVGGElement[JC] def compareDocumentPosition(other: Node): Int
SVGGElement[JC] def contains(otherNode: Node): Boolean
SVGGElement[JC] def dispatchEvent(evt: Event): Boolean
SVGGElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGGElement[JC] var farthestViewportElement: SVGElement
SVGGElement[JC] def firstChild: Node
SVGGElement[JC] def firstElementChild: Element
SVGGElement[JC] def getAttribute(name: String): String
SVGGElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGGElement[JC] def getAttributeNode(name: String): Attr
SVGGElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGGElement[JC] def getBBox(): SVGRect
SVGGElement[JC] def getBoundingClientRect(): DOMRect
SVGGElement[JC] def getCTM(): SVGMatrix
SVGGElement[JC] def getClientRects(): DOMRectList
SVGGElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGGElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGGElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGGElement[JC] def getScreenCTM(): SVGMatrix
SVGGElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
SVGGElement[JC] def hasAttribute(name: String): Boolean
SVGGElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGGElement[JC] def hasAttributes(): Boolean
SVGGElement[JC] def hasChildNodes(): Boolean
SVGGElement[JC] def hasExtension(extension: String): Boolean
SVGGElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGGElement[JC] var id: String
SVGGElement[JC] var innerHTML: String
SVGGElement[JC] var innerText: String
SVGGElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGGElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGGElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGGElement[JC] def isConnected: Boolean
SVGGElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGGElement[JC] def isEqualNode(arg: Node): Boolean
SVGGElement[JC] def isSameNode(other: Node): Boolean
SVGGElement[JC] def isSupported(feature: String, version: String): Boolean
SVGGElement[JC] def lastChild: Node
SVGGElement[JC] def lastElementChild: Element
SVGGElement[JC] def localName: String
SVGGElement[JC] def lookupNamespaceURI(prefix: String): String
SVGGElement[JC] def lookupPrefix(namespaceURI: String): String
SVGGElement[JC] def matches(selector: String): Boolean
SVGGElement[JC] def namespaceURI: String
SVGGElement[JC] var nearestViewportElement: SVGElement
SVGGElement[JC] def nextElementSibling: Element
SVGGElement[JC] def nextSibling: Node
SVGGElement[JC] def nodeName: String
SVGGElement[JC] def nodeType: Int
SVGGElement[JC] var nodeValue: String
SVGGElement[JC] def normalize(): Unit
SVGGElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGGElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGGElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGGElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGGElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGGElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGGElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGGElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGGElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGGElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGGElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGGElement[JC] var onload: js.Function1[Event, _]
SVGGElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGGElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGGElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGGElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGGElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGGElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGGElement[JC] var outerHTML: String
SVGGElement[JC] def ownerDocument: Document
SVGGElement[JC] def ownerSVGElement: SVGSVGElement
SVGGElement[JC] def parentNode: Node
SVGGElement[JC] def prefix: String
SVGGElement[JC] def prepend(nodes: Node | String*): Unit
SVGGElement[JC] def previousElementSibling: Element
SVGGElement[JC] def previousSibling: Node
SVGGElement[JC] def querySelector(selectors: String): Element
SVGGElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGGElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGGElement[JC] def remove(): Unit
SVGGElement[JC] def removeAttribute(name: String): Unit
SVGGElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGGElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGGElement[JC] def removeChild(oldChild: Node): Node
SVGGElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGGElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGGElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGGElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGGElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGGElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGGElement[JC] def requestPointerLock(): Unit
SVGGElement[JC] var requiredExtensions: SVGStringList
SVGGElement[JC] var requiredFeatures: SVGStringList
SVGGElement[JC] def scrollHeight: Int
SVGGElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGGElement[JC] var scrollLeft: Double
SVGGElement[JC] var scrollTop: Double
SVGGElement[JC] def scrollWidth: Int
SVGGElement[JC] def setAttribute(name: String, value: String): Unit
SVGGElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGGElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGGElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGGElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGGElement[JC] def shadowRoot: ShadowRoot
SVGGElement[JC] var style: CSSStyleDeclaration
SVGGElement[JC] var systemLanguage: SVGStringList
SVGGElement[JC] def tagName: String
SVGGElement[JC] var textContent: String
SVGGElement[JC] var transform: SVGAnimatedTransformList
SVGGElement[JC] def viewportElement: SVGElement
SVGGElement[JC] var xmlbase: String
SVGGElement[JC] var xmllang: String
SVGGElement[JC] var xmlspace: String
SVGGradientElement[JC] val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Int
SVGGradientElement[JC] val SVG_UNIT_TYPE_UNKNOWN: Int
SVGGradientElement[JC] val SVG_UNIT_TYPE_USERSPACEONUSE: Int
SVGGradientElement[JC] var accessKey: String
SVGGradientElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGGradientElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGGradientElement[JC] def after(nodes: Node | String*): Unit
SVGGradientElement[JC] def append(nodes: Node | String*): Unit
SVGGradientElement[JC] def appendChild(newChild: Node): Node
SVGGradientElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGGradientElement[JC] def attributes: NamedNodeMap
SVGGradientElement[JC] def baseURI: String
SVGGradientElement[JC] def before(nodes: Node | String*): Unit
SVGGradientElement[JC] def childElementCount: Int
SVGGradientElement[JC] def childNodes: NodeList[Node]
SVGGradientElement[JC] def children: HTMLCollection[Element]
SVGGradientElement[JC] var classList: DOMTokenList
SVGGradientElement[JC] var className: SVGAnimatedString
SVGGradientElement[JC] def clientHeight: Int
SVGGradientElement[JC] def clientLeft: Int
SVGGradientElement[JC] def clientTop: Int
SVGGradientElement[JC] def clientWidth: Int
SVGGradientElement[JC] def cloneNode(deep: Boolean?): Node
SVGGradientElement[JC] def closest(selector: String): Element
SVGGradientElement[JC] def compareDocumentPosition(other: Node): Int
SVGGradientElement[JC] def contains(otherNode: Node): Boolean
SVGGradientElement[JC] def dispatchEvent(evt: Event): Boolean
SVGGradientElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGGradientElement[JC] def firstChild: Node
SVGGradientElement[JC] def firstElementChild: Element
SVGGradientElement[JC] def getAttribute(name: String): String
SVGGradientElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGGradientElement[JC] def getAttributeNode(name: String): Attr
SVGGradientElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGGradientElement[JC] def getBoundingClientRect(): DOMRect
SVGGradientElement[JC] def getClientRects(): DOMRectList
SVGGradientElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGGradientElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGGradientElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGGradientElement[JC] def gradientTransform: SVGAnimatedTransformList
SVGGradientElement[JC] def gradientUnits: SVGAnimatedEnumeration
SVGGradientElement[JC] def hasAttribute(name: String): Boolean
SVGGradientElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGGradientElement[JC] def hasAttributes(): Boolean
SVGGradientElement[JC] def hasChildNodes(): Boolean
SVGGradientElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGGradientElement[JC] var href: SVGAnimatedString
SVGGradientElement[JC] var id: String
SVGGradientElement[JC] var innerHTML: String
SVGGradientElement[JC] var innerText: String
SVGGradientElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGGradientElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGGradientElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGGradientElement[JC] def isConnected: Boolean
SVGGradientElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGGradientElement[JC] def isEqualNode(arg: Node): Boolean
SVGGradientElement[JC] def isSameNode(other: Node): Boolean
SVGGradientElement[JC] def isSupported(feature: String, version: String): Boolean
SVGGradientElement[JC] def lastChild: Node
SVGGradientElement[JC] def lastElementChild: Element
SVGGradientElement[JC] def localName: String
SVGGradientElement[JC] def lookupNamespaceURI(prefix: String): String
SVGGradientElement[JC] def lookupPrefix(namespaceURI: String): String
SVGGradientElement[JC] def matches(selector: String): Boolean
SVGGradientElement[JC] def namespaceURI: String
SVGGradientElement[JC] def nextElementSibling: Element
SVGGradientElement[JC] def nextSibling: Node
SVGGradientElement[JC] def nodeName: String
SVGGradientElement[JC] def nodeType: Int
SVGGradientElement[JC] var nodeValue: String
SVGGradientElement[JC] def normalize(): Unit
SVGGradientElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGGradientElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGGradientElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGGradientElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGGradientElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGGradientElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGGradientElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGGradientElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGGradientElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGGradientElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGGradientElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGGradientElement[JC] var onload: js.Function1[Event, _]
SVGGradientElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGGradientElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGGradientElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGGradientElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGGradientElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGGradientElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGGradientElement[JC] var outerHTML: String
SVGGradientElement[JC] def ownerDocument: Document
SVGGradientElement[JC] def ownerSVGElement: SVGSVGElement
SVGGradientElement[JC] def parentNode: Node
SVGGradientElement[JC] def prefix: String
SVGGradientElement[JC] def prepend(nodes: Node | String*): Unit
SVGGradientElement[JC] def previousElementSibling: Element
SVGGradientElement[JC] def previousSibling: Node
SVGGradientElement[JC] def querySelector(selectors: String): Element
SVGGradientElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGGradientElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGGradientElement[JC] def remove(): Unit
SVGGradientElement[JC] def removeAttribute(name: String): Unit
SVGGradientElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGGradientElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGGradientElement[JC] def removeChild(oldChild: Node): Node
SVGGradientElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGGradientElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGGradientElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGGradientElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGGradientElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGGradientElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGGradientElement[JC] def requestPointerLock(): Unit
SVGGradientElement[JC] def scrollHeight: Int
SVGGradientElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGGradientElement[JC] var scrollLeft: Double
SVGGradientElement[JC] var scrollTop: Double
SVGGradientElement[JC] def scrollWidth: Int
SVGGradientElement[JC] def setAttribute(name: String, value: String): Unit
SVGGradientElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGGradientElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGGradientElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGGradientElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGGradientElement[JC] def shadowRoot: ShadowRoot
SVGGradientElement[JC] def spreadMethod: SVGAnimatedEnumeration
SVGGradientElement[JC] var style: CSSStyleDeclaration
SVGGradientElement[JC] def tagName: String
SVGGradientElement[JC] var textContent: String
SVGGradientElement[JC] def viewportElement: SVGElement
SVGGradientElement[JC] var xmlbase: String
SVGGradientElement[JO] val SVG_SPREADMETHOD_PAD: Int
SVGGradientElement[JO] val SVG_SPREADMETHOD_REFLECT: Int
SVGGradientElement[JO] val SVG_SPREADMETHOD_REPEAT: Int
SVGGradientElement[JO] val SVG_SPREADMETHOD_UNKNOWN: Int
SVGImageElement[JC] var accessKey: String
SVGImageElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGImageElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGImageElement[JC] def after(nodes: Node | String*): Unit
SVGImageElement[JC] def append(nodes: Node | String*): Unit
SVGImageElement[JC] def appendChild(newChild: Node): Node
SVGImageElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGImageElement[JC] def attributes: NamedNodeMap
SVGImageElement[JC] def baseURI: String
SVGImageElement[JC] def before(nodes: Node | String*): Unit
SVGImageElement[JC] def childElementCount: Int
SVGImageElement[JC] def childNodes: NodeList[Node]
SVGImageElement[JC] def children: HTMLCollection[Element]
SVGImageElement[JC] var classList: DOMTokenList
SVGImageElement[JC] var className: SVGAnimatedString
SVGImageElement[JC] def clientHeight: Int
SVGImageElement[JC] def clientLeft: Int
SVGImageElement[JC] def clientTop: Int
SVGImageElement[JC] def clientWidth: Int
SVGImageElement[JC] def cloneNode(deep: Boolean?): Node
SVGImageElement[JC] def closest(selector: String): Element
SVGImageElement[JC] def compareDocumentPosition(other: Node): Int
SVGImageElement[JC] def contains(otherNode: Node): Boolean
SVGImageElement[JC] def dispatchEvent(evt: Event): Boolean
SVGImageElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGImageElement[JC] var farthestViewportElement: SVGElement
SVGImageElement[JC] def firstChild: Node
SVGImageElement[JC] def firstElementChild: Element
SVGImageElement[JC] def getAttribute(name: String): String
SVGImageElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGImageElement[JC] def getAttributeNode(name: String): Attr
SVGImageElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGImageElement[JC] def getBBox(): SVGRect
SVGImageElement[JC] def getBoundingClientRect(): DOMRect
SVGImageElement[JC] def getCTM(): SVGMatrix
SVGImageElement[JC] def getClientRects(): DOMRectList
SVGImageElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGImageElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGImageElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGImageElement[JC] def getScreenCTM(): SVGMatrix
SVGImageElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
SVGImageElement[JC] def hasAttribute(name: String): Boolean
SVGImageElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGImageElement[JC] def hasAttributes(): Boolean
SVGImageElement[JC] def hasChildNodes(): Boolean
SVGImageElement[JC] def hasExtension(extension: String): Boolean
SVGImageElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGImageElement[JC] def height: SVGAnimatedLength
SVGImageElement[JC] var href: SVGAnimatedString
SVGImageElement[JC] var id: String
SVGImageElement[JC] var innerHTML: String
SVGImageElement[JC] var innerText: String
SVGImageElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGImageElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGImageElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGImageElement[JC] def isConnected: Boolean
SVGImageElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGImageElement[JC] def isEqualNode(arg: Node): Boolean
SVGImageElement[JC] def isSameNode(other: Node): Boolean
SVGImageElement[JC] def isSupported(feature: String, version: String): Boolean
SVGImageElement[JC] def lastChild: Node
SVGImageElement[JC] def lastElementChild: Element
SVGImageElement[JC] def localName: String
SVGImageElement[JC] def lookupNamespaceURI(prefix: String): String
SVGImageElement[JC] def lookupPrefix(namespaceURI: String): String
SVGImageElement[JC] def matches(selector: String): Boolean
SVGImageElement[JC] def namespaceURI: String
SVGImageElement[JC] var nearestViewportElement: SVGElement
SVGImageElement[JC] def nextElementSibling: Element
SVGImageElement[JC] def nextSibling: Node
SVGImageElement[JC] def nodeName: String
SVGImageElement[JC] def nodeType: Int
SVGImageElement[JC] var nodeValue: String
SVGImageElement[JC] def normalize(): Unit
SVGImageElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGImageElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGImageElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGImageElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGImageElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGImageElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGImageElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGImageElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGImageElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGImageElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGImageElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGImageElement[JC] var onload: js.Function1[Event, _]
SVGImageElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGImageElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGImageElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGImageElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGImageElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGImageElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGImageElement[JC] var outerHTML: String
SVGImageElement[JC] def ownerDocument: Document
SVGImageElement[JC] def ownerSVGElement: SVGSVGElement
SVGImageElement[JC] def parentNode: Node
SVGImageElement[JC] def prefix: String
SVGImageElement[JC] def prepend(nodes: Node | String*): Unit
SVGImageElement[JC] def preserveAspectRatio: SVGAnimatedPreserveAspectRatio
SVGImageElement[JC] def previousElementSibling: Element
SVGImageElement[JC] def previousSibling: Node
SVGImageElement[JC] def querySelector(selectors: String): Element
SVGImageElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGImageElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGImageElement[JC] def remove(): Unit
SVGImageElement[JC] def removeAttribute(name: String): Unit
SVGImageElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGImageElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGImageElement[JC] def removeChild(oldChild: Node): Node
SVGImageElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGImageElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGImageElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGImageElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGImageElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGImageElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGImageElement[JC] def requestPointerLock(): Unit
SVGImageElement[JC] var requiredExtensions: SVGStringList
SVGImageElement[JC] var requiredFeatures: SVGStringList
SVGImageElement[JC] def scrollHeight: Int
SVGImageElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGImageElement[JC] var scrollLeft: Double
SVGImageElement[JC] var scrollTop: Double
SVGImageElement[JC] def scrollWidth: Int
SVGImageElement[JC] def setAttribute(name: String, value: String): Unit
SVGImageElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGImageElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGImageElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGImageElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGImageElement[JC] def shadowRoot: ShadowRoot
SVGImageElement[JC] var style: CSSStyleDeclaration
SVGImageElement[JC] var systemLanguage: SVGStringList
SVGImageElement[JC] def tagName: String
SVGImageElement[JC] var textContent: String
SVGImageElement[JC] var transform: SVGAnimatedTransformList
SVGImageElement[JC] def viewportElement: SVGElement
SVGImageElement[JC] def width: SVGAnimatedLength
SVGImageElement[JC] def x: SVGAnimatedLength
SVGImageElement[JC] var xmlbase: String
SVGImageElement[JC] var xmllang: String
SVGImageElement[JC] var xmlspace: String
SVGImageElement[JC] def y: SVGAnimatedLength
SVGLangSpace[JT] var xmllang: String
SVGLangSpace[JT] var xmlspace: String
SVGLength[JC] def convertToSpecifiedUnits(unitType: Int): Unit
SVGLength[JC] def newValueSpecifiedUnits(unitType: Int, valueInSpecifiedUnits: Double): Unit
SVGLength[JC] def unitType: Int
SVGLength[JC] var value: Double
SVGLength[JC] var valueAsString: String
SVGLength[JC] var valueInSpecifiedUnits: Double
SVGLength[JO] val SVG_LENGTHTYPE_CM: Int
SVGLength[JO] val SVG_LENGTHTYPE_EMS: Int
SVGLength[JO] val SVG_LENGTHTYPE_EXS: Int
SVGLength[JO] val SVG_LENGTHTYPE_IN: Int
SVGLength[JO] val SVG_LENGTHTYPE_MM: Int
SVGLength[JO] val SVG_LENGTHTYPE_NUMBER: Int
SVGLength[JO] val SVG_LENGTHTYPE_PC: Int
SVGLength[JO] val SVG_LENGTHTYPE_PERCENTAGE: Int
SVGLength[JO] val SVG_LENGTHTYPE_PT: Int
SVGLength[JO] val SVG_LENGTHTYPE_PX: Int
SVGLength[JO] val SVG_LENGTHTYPE_UNKNOWN: Int
SVGLengthList[JC] def appendItem(newItem: SVGLength): SVGLength
SVGLengthList[JC] def clear(): Unit
SVGLengthList[JC] def getItem(index: Int): SVGLength
SVGLengthList[JC] def initialize(newItem: SVGLength): SVGLength
SVGLengthList[JC] def insertItemBefore(newItem: SVGLength, index: Int): SVGLength
SVGLengthList[JC] def numberOfItems: Int
SVGLengthList[JC] def removeItem(index: Int): SVGLength
SVGLengthList[JC] def replaceItem(newItem: SVGLength, index: Int): SVGLength
SVGLineElement[JC] var accessKey: String
SVGLineElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGLineElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGLineElement[JC] def after(nodes: Node | String*): Unit
SVGLineElement[JC] def append(nodes: Node | String*): Unit
SVGLineElement[JC] def appendChild(newChild: Node): Node
SVGLineElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGLineElement[JC] def attributes: NamedNodeMap
SVGLineElement[JC] def baseURI: String
SVGLineElement[JC] def before(nodes: Node | String*): Unit
SVGLineElement[JC] def childElementCount: Int
SVGLineElement[JC] def childNodes: NodeList[Node]
SVGLineElement[JC] def children: HTMLCollection[Element]
SVGLineElement[JC] var classList: DOMTokenList
SVGLineElement[JC] var className: SVGAnimatedString
SVGLineElement[JC] def clientHeight: Int
SVGLineElement[JC] def clientLeft: Int
SVGLineElement[JC] def clientTop: Int
SVGLineElement[JC] def clientWidth: Int
SVGLineElement[JC] def cloneNode(deep: Boolean?): Node
SVGLineElement[JC] def closest(selector: String): Element
SVGLineElement[JC] def compareDocumentPosition(other: Node): Int
SVGLineElement[JC] def contains(otherNode: Node): Boolean
SVGLineElement[JC] def dispatchEvent(evt: Event): Boolean
SVGLineElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGLineElement[JC] var farthestViewportElement: SVGElement
SVGLineElement[JC] def firstChild: Node
SVGLineElement[JC] def firstElementChild: Element
SVGLineElement[JC] def getAttribute(name: String): String
SVGLineElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGLineElement[JC] def getAttributeNode(name: String): Attr
SVGLineElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGLineElement[JC] def getBBox(): SVGRect
SVGLineElement[JC] def getBoundingClientRect(): DOMRect
SVGLineElement[JC] def getCTM(): SVGMatrix
SVGLineElement[JC] def getClientRects(): DOMRectList
SVGLineElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGLineElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGLineElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGLineElement[JC] def getScreenCTM(): SVGMatrix
SVGLineElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
SVGLineElement[JC] def hasAttribute(name: String): Boolean
SVGLineElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGLineElement[JC] def hasAttributes(): Boolean
SVGLineElement[JC] def hasChildNodes(): Boolean
SVGLineElement[JC] def hasExtension(extension: String): Boolean
SVGLineElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGLineElement[JC] var id: String
SVGLineElement[JC] var innerHTML: String
SVGLineElement[JC] var innerText: String
SVGLineElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGLineElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGLineElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGLineElement[JC] def isConnected: Boolean
SVGLineElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGLineElement[JC] def isEqualNode(arg: Node): Boolean
SVGLineElement[JC] def isSameNode(other: Node): Boolean
SVGLineElement[JC] def isSupported(feature: String, version: String): Boolean
SVGLineElement[JC] def lastChild: Node
SVGLineElement[JC] def lastElementChild: Element
SVGLineElement[JC] def localName: String
SVGLineElement[JC] def lookupNamespaceURI(prefix: String): String
SVGLineElement[JC] def lookupPrefix(namespaceURI: String): String
SVGLineElement[JC] def matches(selector: String): Boolean
SVGLineElement[JC] def namespaceURI: String
SVGLineElement[JC] var nearestViewportElement: SVGElement
SVGLineElement[JC] def nextElementSibling: Element
SVGLineElement[JC] def nextSibling: Node
SVGLineElement[JC] def nodeName: String
SVGLineElement[JC] def nodeType: Int
SVGLineElement[JC] var nodeValue: String
SVGLineElement[JC] def normalize(): Unit
SVGLineElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGLineElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGLineElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGLineElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGLineElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGLineElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGLineElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGLineElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGLineElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGLineElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGLineElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGLineElement[JC] var onload: js.Function1[Event, _]
SVGLineElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGLineElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGLineElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGLineElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGLineElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGLineElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGLineElement[JC] var outerHTML: String
SVGLineElement[JC] def ownerDocument: Document
SVGLineElement[JC] def ownerSVGElement: SVGSVGElement
SVGLineElement[JC] def parentNode: Node
SVGLineElement[JC] def prefix: String
SVGLineElement[JC] def prepend(nodes: Node | String*): Unit
SVGLineElement[JC] def previousElementSibling: Element
SVGLineElement[JC] def previousSibling: Node
SVGLineElement[JC] def querySelector(selectors: String): Element
SVGLineElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGLineElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGLineElement[JC] def remove(): Unit
SVGLineElement[JC] def removeAttribute(name: String): Unit
SVGLineElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGLineElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGLineElement[JC] def removeChild(oldChild: Node): Node
SVGLineElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGLineElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGLineElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGLineElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGLineElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGLineElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGLineElement[JC] def requestPointerLock(): Unit
SVGLineElement[JC] var requiredExtensions: SVGStringList
SVGLineElement[JC] var requiredFeatures: SVGStringList
SVGLineElement[JC] def scrollHeight: Int
SVGLineElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGLineElement[JC] var scrollLeft: Double
SVGLineElement[JC] var scrollTop: Double
SVGLineElement[JC] def scrollWidth: Int
SVGLineElement[JC] def setAttribute(name: String, value: String): Unit
SVGLineElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGLineElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGLineElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGLineElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGLineElement[JC] def shadowRoot: ShadowRoot
SVGLineElement[JC] var style: CSSStyleDeclaration
SVGLineElement[JC] var systemLanguage: SVGStringList
SVGLineElement[JC] def tagName: String
SVGLineElement[JC] var textContent: String
SVGLineElement[JC] var transform: SVGAnimatedTransformList
SVGLineElement[JC] def viewportElement: SVGElement
SVGLineElement[JC] def x1: SVGAnimatedLength
SVGLineElement[JC] def x2: SVGAnimatedLength
SVGLineElement[JC] var xmlbase: String
SVGLineElement[JC] var xmllang: String
SVGLineElement[JC] var xmlspace: String
SVGLineElement[JC] def y1: SVGAnimatedLength
SVGLineElement[JC] def y2: SVGAnimatedLength
SVGLinearGradientElement[JC] val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Int
SVGLinearGradientElement[JC] val SVG_UNIT_TYPE_UNKNOWN: Int
SVGLinearGradientElement[JC] val SVG_UNIT_TYPE_USERSPACEONUSE: Int
SVGLinearGradientElement[JC] var accessKey: String
SVGLinearGradientElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGLinearGradientElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGLinearGradientElement[JC] def after(nodes: Node | String*): Unit
SVGLinearGradientElement[JC] def append(nodes: Node | String*): Unit
SVGLinearGradientElement[JC] def appendChild(newChild: Node): Node
SVGLinearGradientElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGLinearGradientElement[JC] def attributes: NamedNodeMap
SVGLinearGradientElement[JC] def baseURI: String
SVGLinearGradientElement[JC] def before(nodes: Node | String*): Unit
SVGLinearGradientElement[JC] def childElementCount: Int
SVGLinearGradientElement[JC] def childNodes: NodeList[Node]
SVGLinearGradientElement[JC] def children: HTMLCollection[Element]
SVGLinearGradientElement[JC] var classList: DOMTokenList
SVGLinearGradientElement[JC] var className: SVGAnimatedString
SVGLinearGradientElement[JC] def clientHeight: Int
SVGLinearGradientElement[JC] def clientLeft: Int
SVGLinearGradientElement[JC] def clientTop: Int
SVGLinearGradientElement[JC] def clientWidth: Int
SVGLinearGradientElement[JC] def cloneNode(deep: Boolean?): Node
SVGLinearGradientElement[JC] def closest(selector: String): Element
SVGLinearGradientElement[JC] def compareDocumentPosition(other: Node): Int
SVGLinearGradientElement[JC] def contains(otherNode: Node): Boolean
SVGLinearGradientElement[JC] def dispatchEvent(evt: Event): Boolean
SVGLinearGradientElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGLinearGradientElement[JC] def firstChild: Node
SVGLinearGradientElement[JC] def firstElementChild: Element
SVGLinearGradientElement[JC] def getAttribute(name: String): String
SVGLinearGradientElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGLinearGradientElement[JC] def getAttributeNode(name: String): Attr
SVGLinearGradientElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGLinearGradientElement[JC] def getBoundingClientRect(): DOMRect
SVGLinearGradientElement[JC] def getClientRects(): DOMRectList
SVGLinearGradientElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGLinearGradientElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGLinearGradientElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGLinearGradientElement[JC] def gradientTransform: SVGAnimatedTransformList
SVGLinearGradientElement[JC] def gradientUnits: SVGAnimatedEnumeration
SVGLinearGradientElement[JC] def hasAttribute(name: String): Boolean
SVGLinearGradientElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGLinearGradientElement[JC] def hasAttributes(): Boolean
SVGLinearGradientElement[JC] def hasChildNodes(): Boolean
SVGLinearGradientElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGLinearGradientElement[JC] var href: SVGAnimatedString
SVGLinearGradientElement[JC] var id: String
SVGLinearGradientElement[JC] var innerHTML: String
SVGLinearGradientElement[JC] var innerText: String
SVGLinearGradientElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGLinearGradientElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGLinearGradientElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGLinearGradientElement[JC] def isConnected: Boolean
SVGLinearGradientElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGLinearGradientElement[JC] def isEqualNode(arg: Node): Boolean
SVGLinearGradientElement[JC] def isSameNode(other: Node): Boolean
SVGLinearGradientElement[JC] def isSupported(feature: String, version: String): Boolean
SVGLinearGradientElement[JC] def lastChild: Node
SVGLinearGradientElement[JC] def lastElementChild: Element
SVGLinearGradientElement[JC] def localName: String
SVGLinearGradientElement[JC] def lookupNamespaceURI(prefix: String): String
SVGLinearGradientElement[JC] def lookupPrefix(namespaceURI: String): String
SVGLinearGradientElement[JC] def matches(selector: String): Boolean
SVGLinearGradientElement[JC] def namespaceURI: String
SVGLinearGradientElement[JC] def nextElementSibling: Element
SVGLinearGradientElement[JC] def nextSibling: Node
SVGLinearGradientElement[JC] def nodeName: String
SVGLinearGradientElement[JC] def nodeType: Int
SVGLinearGradientElement[JC] var nodeValue: String
SVGLinearGradientElement[JC] def normalize(): Unit
SVGLinearGradientElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGLinearGradientElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGLinearGradientElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGLinearGradientElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGLinearGradientElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGLinearGradientElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGLinearGradientElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGLinearGradientElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGLinearGradientElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGLinearGradientElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGLinearGradientElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGLinearGradientElement[JC] var onload: js.Function1[Event, _]
SVGLinearGradientElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGLinearGradientElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGLinearGradientElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGLinearGradientElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGLinearGradientElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGLinearGradientElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGLinearGradientElement[JC] var outerHTML: String
SVGLinearGradientElement[JC] def ownerDocument: Document
SVGLinearGradientElement[JC] def ownerSVGElement: SVGSVGElement
SVGLinearGradientElement[JC] def parentNode: Node
SVGLinearGradientElement[JC] def prefix: String
SVGLinearGradientElement[JC] def prepend(nodes: Node | String*): Unit
SVGLinearGradientElement[JC] def previousElementSibling: Element
SVGLinearGradientElement[JC] def previousSibling: Node
SVGLinearGradientElement[JC] def querySelector(selectors: String): Element
SVGLinearGradientElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGLinearGradientElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGLinearGradientElement[JC] def remove(): Unit
SVGLinearGradientElement[JC] def removeAttribute(name: String): Unit
SVGLinearGradientElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGLinearGradientElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGLinearGradientElement[JC] def removeChild(oldChild: Node): Node
SVGLinearGradientElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGLinearGradientElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGLinearGradientElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGLinearGradientElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGLinearGradientElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGLinearGradientElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGLinearGradientElement[JC] def requestPointerLock(): Unit
SVGLinearGradientElement[JC] def scrollHeight: Int
SVGLinearGradientElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGLinearGradientElement[JC] var scrollLeft: Double
SVGLinearGradientElement[JC] var scrollTop: Double
SVGLinearGradientElement[JC] def scrollWidth: Int
SVGLinearGradientElement[JC] def setAttribute(name: String, value: String): Unit
SVGLinearGradientElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGLinearGradientElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGLinearGradientElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGLinearGradientElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGLinearGradientElement[JC] def shadowRoot: ShadowRoot
SVGLinearGradientElement[JC] def spreadMethod: SVGAnimatedEnumeration
SVGLinearGradientElement[JC] var style: CSSStyleDeclaration
SVGLinearGradientElement[JC] def tagName: String
SVGLinearGradientElement[JC] var textContent: String
SVGLinearGradientElement[JC] def viewportElement: SVGElement
SVGLinearGradientElement[JC] def x1: SVGAnimatedLength
SVGLinearGradientElement[JC] def x2: SVGAnimatedLength
SVGLinearGradientElement[JC] var xmlbase: String
SVGLinearGradientElement[JC] def y1: SVGAnimatedLength
SVGLinearGradientElement[JC] def y2: SVGAnimatedLength
SVGLocatable[JT] var farthestViewportElement: SVGElement
SVGLocatable[JT] def getBBox(): SVGRect
SVGLocatable[JT] def getCTM(): SVGMatrix
SVGLocatable[JT] def getScreenCTM(): SVGMatrix
SVGLocatable[JT] def getTransformToElement(element: SVGElement): SVGMatrix
SVGLocatable[JT] var nearestViewportElement: SVGElement
SVGMarkerElement[JC] var accessKey: String
SVGMarkerElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGMarkerElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGMarkerElement[JC] def after(nodes: Node | String*): Unit
SVGMarkerElement[JC] def append(nodes: Node | String*): Unit
SVGMarkerElement[JC] def appendChild(newChild: Node): Node
SVGMarkerElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGMarkerElement[JC] def attributes: NamedNodeMap
SVGMarkerElement[JC] def baseURI: String
SVGMarkerElement[JC] def before(nodes: Node | String*): Unit
SVGMarkerElement[JC] def childElementCount: Int
SVGMarkerElement[JC] def childNodes: NodeList[Node]
SVGMarkerElement[JC] def children: HTMLCollection[Element]
SVGMarkerElement[JC] var classList: DOMTokenList
SVGMarkerElement[JC] var className: SVGAnimatedString
SVGMarkerElement[JC] def clientHeight: Int
SVGMarkerElement[JC] def clientLeft: Int
SVGMarkerElement[JC] def clientTop: Int
SVGMarkerElement[JC] def clientWidth: Int
SVGMarkerElement[JC] def cloneNode(deep: Boolean?): Node
SVGMarkerElement[JC] def closest(selector: String): Element
SVGMarkerElement[JC] def compareDocumentPosition(other: Node): Int
SVGMarkerElement[JC] def contains(otherNode: Node): Boolean
SVGMarkerElement[JC] def dispatchEvent(evt: Event): Boolean
SVGMarkerElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGMarkerElement[JC] def firstChild: Node
SVGMarkerElement[JC] def firstElementChild: Element
SVGMarkerElement[JC] def getAttribute(name: String): String
SVGMarkerElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGMarkerElement[JC] def getAttributeNode(name: String): Attr
SVGMarkerElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGMarkerElement[JC] def getBoundingClientRect(): DOMRect
SVGMarkerElement[JC] def getClientRects(): DOMRectList
SVGMarkerElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGMarkerElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGMarkerElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGMarkerElement[JC] def hasAttribute(name: String): Boolean
SVGMarkerElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGMarkerElement[JC] def hasAttributes(): Boolean
SVGMarkerElement[JC] def hasChildNodes(): Boolean
SVGMarkerElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGMarkerElement[JC] var id: String
SVGMarkerElement[JC] var innerHTML: String
SVGMarkerElement[JC] var innerText: String
SVGMarkerElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGMarkerElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGMarkerElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGMarkerElement[JC] def isConnected: Boolean
SVGMarkerElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGMarkerElement[JC] def isEqualNode(arg: Node): Boolean
SVGMarkerElement[JC] def isSameNode(other: Node): Boolean
SVGMarkerElement[JC] def isSupported(feature: String, version: String): Boolean
SVGMarkerElement[JC] def lastChild: Node
SVGMarkerElement[JC] def lastElementChild: Element
SVGMarkerElement[JC] def localName: String
SVGMarkerElement[JC] def lookupNamespaceURI(prefix: String): String
SVGMarkerElement[JC] def lookupPrefix(namespaceURI: String): String
SVGMarkerElement[JC] def markerHeight: SVGAnimatedLength
SVGMarkerElement[JC] var markerUnits: SVGAnimatedEnumeration
SVGMarkerElement[JC] def markerWidth: SVGAnimatedLength
SVGMarkerElement[JC] def matches(selector: String): Boolean
SVGMarkerElement[JC] def namespaceURI: String
SVGMarkerElement[JC] def nextElementSibling: Element
SVGMarkerElement[JC] def nextSibling: Node
SVGMarkerElement[JC] def nodeName: String
SVGMarkerElement[JC] def nodeType: Int
SVGMarkerElement[JC] var nodeValue: String
SVGMarkerElement[JC] def normalize(): Unit
SVGMarkerElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGMarkerElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGMarkerElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGMarkerElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGMarkerElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGMarkerElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGMarkerElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGMarkerElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGMarkerElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGMarkerElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGMarkerElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGMarkerElement[JC] var onload: js.Function1[Event, _]
SVGMarkerElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGMarkerElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGMarkerElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGMarkerElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGMarkerElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGMarkerElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGMarkerElement[JC] def orientAngle: SVGAnimatedAngle
SVGMarkerElement[JC] var orientType: SVGAnimatedEnumeration
SVGMarkerElement[JC] var outerHTML: String
SVGMarkerElement[JC] def ownerDocument: Document
SVGMarkerElement[JC] def ownerSVGElement: SVGSVGElement
SVGMarkerElement[JC] def parentNode: Node
SVGMarkerElement[JC] def prefix: String
SVGMarkerElement[JC] def prepend(nodes: Node | String*): Unit
SVGMarkerElement[JC] var preserveAspectRatio: SVGAnimatedPreserveAspectRatio
SVGMarkerElement[JC] def previousElementSibling: Element
SVGMarkerElement[JC] def previousSibling: Node
SVGMarkerElement[JC] def querySelector(selectors: String): Element
SVGMarkerElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGMarkerElement[JC] def refX: SVGAnimatedLength
SVGMarkerElement[JC] def refY: SVGAnimatedLength
SVGMarkerElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGMarkerElement[JC] def remove(): Unit
SVGMarkerElement[JC] def removeAttribute(name: String): Unit
SVGMarkerElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGMarkerElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGMarkerElement[JC] def removeChild(oldChild: Node): Node
SVGMarkerElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGMarkerElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGMarkerElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGMarkerElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGMarkerElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGMarkerElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGMarkerElement[JC] def requestPointerLock(): Unit
SVGMarkerElement[JC] def scrollHeight: Int
SVGMarkerElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGMarkerElement[JC] var scrollLeft: Double
SVGMarkerElement[JC] var scrollTop: Double
SVGMarkerElement[JC] def scrollWidth: Int
SVGMarkerElement[JC] def setAttribute(name: String, value: String): Unit
SVGMarkerElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGMarkerElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGMarkerElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGMarkerElement[JC] def setOrientToAngle(angle: SVGAngle): Unit
SVGMarkerElement[JC] def setOrientToAuto(): Unit
SVGMarkerElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGMarkerElement[JC] def shadowRoot: ShadowRoot
SVGMarkerElement[JC] var style: CSSStyleDeclaration
SVGMarkerElement[JC] def tagName: String
SVGMarkerElement[JC] var textContent: String
SVGMarkerElement[JC] var viewBox: SVGAnimatedRect
SVGMarkerElement[JC] def viewportElement: SVGElement
SVGMarkerElement[JC] var xmlbase: String
SVGMarkerElement[JC] var xmllang: String
SVGMarkerElement[JC] var xmlspace: String
SVGMarkerElement[JO] val SVG_MARKERUNITS_STROKEWIDTH: Int
SVGMarkerElement[JO] val SVG_MARKERUNITS_UNKNOWN: Int
SVGMarkerElement[JO] val SVG_MARKERUNITS_USERSPACEONUSE: Int
SVGMarkerElement[JO] val SVG_MARKER_ORIENT_ANGLE: Int
SVGMarkerElement[JO] val SVG_MARKER_ORIENT_AUTO: Int
SVGMarkerElement[JO] val SVG_MARKER_ORIENT_UNKNOWN: Int
SVGMaskElement[JC] val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Int
SVGMaskElement[JC] val SVG_UNIT_TYPE_UNKNOWN: Int
SVGMaskElement[JC] val SVG_UNIT_TYPE_USERSPACEONUSE: Int
SVGMaskElement[JC] var accessKey: String
SVGMaskElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGMaskElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGMaskElement[JC] def after(nodes: Node | String*): Unit
SVGMaskElement[JC] def append(nodes: Node | String*): Unit
SVGMaskElement[JC] def appendChild(newChild: Node): Node
SVGMaskElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGMaskElement[JC] def attributes: NamedNodeMap
SVGMaskElement[JC] def baseURI: String
SVGMaskElement[JC] def before(nodes: Node | String*): Unit
SVGMaskElement[JC] def childElementCount: Int
SVGMaskElement[JC] def childNodes: NodeList[Node]
SVGMaskElement[JC] def children: HTMLCollection[Element]
SVGMaskElement[JC] var classList: DOMTokenList
SVGMaskElement[JC] var className: SVGAnimatedString
SVGMaskElement[JC] def clientHeight: Int
SVGMaskElement[JC] def clientLeft: Int
SVGMaskElement[JC] def clientTop: Int
SVGMaskElement[JC] def clientWidth: Int
SVGMaskElement[JC] def cloneNode(deep: Boolean?): Node
SVGMaskElement[JC] def closest(selector: String): Element
SVGMaskElement[JC] def compareDocumentPosition(other: Node): Int
SVGMaskElement[JC] def contains(otherNode: Node): Boolean
SVGMaskElement[JC] def dispatchEvent(evt: Event): Boolean
SVGMaskElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGMaskElement[JC] def firstChild: Node
SVGMaskElement[JC] def firstElementChild: Element
SVGMaskElement[JC] def getAttribute(name: String): String
SVGMaskElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGMaskElement[JC] def getAttributeNode(name: String): Attr
SVGMaskElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGMaskElement[JC] def getBoundingClientRect(): DOMRect
SVGMaskElement[JC] def getClientRects(): DOMRectList
SVGMaskElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGMaskElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGMaskElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGMaskElement[JC] def hasAttribute(name: String): Boolean
SVGMaskElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGMaskElement[JC] def hasAttributes(): Boolean
SVGMaskElement[JC] def hasChildNodes(): Boolean
SVGMaskElement[JC] def hasExtension(extension: String): Boolean
SVGMaskElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGMaskElement[JC] def height: SVGAnimatedLength
SVGMaskElement[JC] var id: String
SVGMaskElement[JC] var innerHTML: String
SVGMaskElement[JC] var innerText: String
SVGMaskElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGMaskElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGMaskElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGMaskElement[JC] def isConnected: Boolean
SVGMaskElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGMaskElement[JC] def isEqualNode(arg: Node): Boolean
SVGMaskElement[JC] def isSameNode(other: Node): Boolean
SVGMaskElement[JC] def isSupported(feature: String, version: String): Boolean
SVGMaskElement[JC] def lastChild: Node
SVGMaskElement[JC] def lastElementChild: Element
SVGMaskElement[JC] def localName: String
SVGMaskElement[JC] def lookupNamespaceURI(prefix: String): String
SVGMaskElement[JC] def lookupPrefix(namespaceURI: String): String
SVGMaskElement[JC] def maskContentUnits: SVGAnimatedEnumeration
SVGMaskElement[JC] def maskUnits: SVGAnimatedEnumeration
SVGMaskElement[JC] def matches(selector: String): Boolean
SVGMaskElement[JC] def namespaceURI: String
SVGMaskElement[JC] def nextElementSibling: Element
SVGMaskElement[JC] def nextSibling: Node
SVGMaskElement[JC] def nodeName: String
SVGMaskElement[JC] def nodeType: Int
SVGMaskElement[JC] var nodeValue: String
SVGMaskElement[JC] def normalize(): Unit
SVGMaskElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGMaskElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGMaskElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGMaskElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGMaskElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGMaskElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGMaskElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGMaskElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGMaskElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGMaskElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGMaskElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGMaskElement[JC] var onload: js.Function1[Event, _]
SVGMaskElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGMaskElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGMaskElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGMaskElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGMaskElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGMaskElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGMaskElement[JC] var outerHTML: String
SVGMaskElement[JC] def ownerDocument: Document
SVGMaskElement[JC] def ownerSVGElement: SVGSVGElement
SVGMaskElement[JC] def parentNode: Node
SVGMaskElement[JC] def prefix: String
SVGMaskElement[JC] def prepend(nodes: Node | String*): Unit
SVGMaskElement[JC] def previousElementSibling: Element
SVGMaskElement[JC] def previousSibling: Node
SVGMaskElement[JC] def querySelector(selectors: String): Element
SVGMaskElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGMaskElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGMaskElement[JC] def remove(): Unit
SVGMaskElement[JC] def removeAttribute(name: String): Unit
SVGMaskElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGMaskElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGMaskElement[JC] def removeChild(oldChild: Node): Node
SVGMaskElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGMaskElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGMaskElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGMaskElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGMaskElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGMaskElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGMaskElement[JC] def requestPointerLock(): Unit
SVGMaskElement[JC] var requiredExtensions: SVGStringList
SVGMaskElement[JC] var requiredFeatures: SVGStringList
SVGMaskElement[JC] def scrollHeight: Int
SVGMaskElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGMaskElement[JC] var scrollLeft: Double
SVGMaskElement[JC] var scrollTop: Double
SVGMaskElement[JC] def scrollWidth: Int
SVGMaskElement[JC] def setAttribute(name: String, value: String): Unit
SVGMaskElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGMaskElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGMaskElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGMaskElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGMaskElement[JC] def shadowRoot: ShadowRoot
SVGMaskElement[JC] var style: CSSStyleDeclaration
SVGMaskElement[JC] var systemLanguage: SVGStringList
SVGMaskElement[JC] def tagName: String
SVGMaskElement[JC] var textContent: String
SVGMaskElement[JC] def viewportElement: SVGElement
SVGMaskElement[JC] def width: SVGAnimatedLength
SVGMaskElement[JC] def x: SVGAnimatedLength
SVGMaskElement[JC] var xmlbase: String
SVGMaskElement[JC] var xmllang: String
SVGMaskElement[JC] var xmlspace: String
SVGMaskElement[JC] def y: SVGAnimatedLength
SVGMatrix[JC] var a: Double
SVGMatrix[JC] var b: Double
SVGMatrix[JC] var c: Double
SVGMatrix[JC] var d: Double
SVGMatrix[JC] var e: Double
SVGMatrix[JC] var f: Double
SVGMatrix[JC] def flipX(): SVGMatrix
SVGMatrix[JC] def flipY(): SVGMatrix
SVGMatrix[JC] def inverse(): SVGMatrix
SVGMatrix[JC] def multiply(secondMatrix: SVGMatrix): SVGMatrix
SVGMatrix[JC] def rotate(angle: Double): SVGMatrix
SVGMatrix[JC] def rotateFromVector(x: Double, y: Double): SVGMatrix
SVGMatrix[JC] def scale(scaleFactor: Double): SVGMatrix
SVGMatrix[JC] def scaleNonUniform(scaleFactorX: Double, scaleFactorY: Double): SVGMatrix
SVGMatrix[JC] def skewX(angle: Double): SVGMatrix
SVGMatrix[JC] def skewY(angle: Double): SVGMatrix
SVGMatrix[JC] def translate(x: Double, y: Double): SVGMatrix
SVGMetadataElement[JC] var accessKey: String
SVGMetadataElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGMetadataElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGMetadataElement[JC] def after(nodes: Node | String*): Unit
SVGMetadataElement[JC] def append(nodes: Node | String*): Unit
SVGMetadataElement[JC] def appendChild(newChild: Node): Node
SVGMetadataElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGMetadataElement[JC] def attributes: NamedNodeMap
SVGMetadataElement[JC] def baseURI: String
SVGMetadataElement[JC] def before(nodes: Node | String*): Unit
SVGMetadataElement[JC] def childElementCount: Int
SVGMetadataElement[JC] def childNodes: NodeList[Node]
SVGMetadataElement[JC] def children: HTMLCollection[Element]
SVGMetadataElement[JC] var classList: DOMTokenList
SVGMetadataElement[JC] def clientHeight: Int
SVGMetadataElement[JC] def clientLeft: Int
SVGMetadataElement[JC] def clientTop: Int
SVGMetadataElement[JC] def clientWidth: Int
SVGMetadataElement[JC] def cloneNode(deep: Boolean?): Node
SVGMetadataElement[JC] def closest(selector: String): Element
SVGMetadataElement[JC] def compareDocumentPosition(other: Node): Int
SVGMetadataElement[JC] def contains(otherNode: Node): Boolean
SVGMetadataElement[JC] def dispatchEvent(evt: Event): Boolean
SVGMetadataElement[JC] def firstChild: Node
SVGMetadataElement[JC] def firstElementChild: Element
SVGMetadataElement[JC] def getAttribute(name: String): String
SVGMetadataElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGMetadataElement[JC] def getAttributeNode(name: String): Attr
SVGMetadataElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGMetadataElement[JC] def getBoundingClientRect(): DOMRect
SVGMetadataElement[JC] def getClientRects(): DOMRectList
SVGMetadataElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGMetadataElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGMetadataElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGMetadataElement[JC] def hasAttribute(name: String): Boolean
SVGMetadataElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGMetadataElement[JC] def hasAttributes(): Boolean
SVGMetadataElement[JC] def hasChildNodes(): Boolean
SVGMetadataElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGMetadataElement[JC] var id: String
SVGMetadataElement[JC] var innerHTML: String
SVGMetadataElement[JC] var innerText: String
SVGMetadataElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGMetadataElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGMetadataElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGMetadataElement[JC] def isConnected: Boolean
SVGMetadataElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGMetadataElement[JC] def isEqualNode(arg: Node): Boolean
SVGMetadataElement[JC] def isSameNode(other: Node): Boolean
SVGMetadataElement[JC] def isSupported(feature: String, version: String): Boolean
SVGMetadataElement[JC] def lastChild: Node
SVGMetadataElement[JC] def lastElementChild: Element
SVGMetadataElement[JC] def localName: String
SVGMetadataElement[JC] def lookupNamespaceURI(prefix: String): String
SVGMetadataElement[JC] def lookupPrefix(namespaceURI: String): String
SVGMetadataElement[JC] def matches(selector: String): Boolean
SVGMetadataElement[JC] def namespaceURI: String
SVGMetadataElement[JC] def nextElementSibling: Element
SVGMetadataElement[JC] def nextSibling: Node
SVGMetadataElement[JC] def nodeName: String
SVGMetadataElement[JC] def nodeType: Int
SVGMetadataElement[JC] var nodeValue: String
SVGMetadataElement[JC] def normalize(): Unit
SVGMetadataElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGMetadataElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGMetadataElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGMetadataElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGMetadataElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGMetadataElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGMetadataElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGMetadataElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGMetadataElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGMetadataElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGMetadataElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGMetadataElement[JC] var onload: js.Function1[Event, _]
SVGMetadataElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGMetadataElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGMetadataElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGMetadataElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGMetadataElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGMetadataElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGMetadataElement[JC] var outerHTML: String
SVGMetadataElement[JC] def ownerDocument: Document
SVGMetadataElement[JC] def ownerSVGElement: SVGSVGElement
SVGMetadataElement[JC] def parentNode: Node
SVGMetadataElement[JC] def prefix: String
SVGMetadataElement[JC] def prepend(nodes: Node | String*): Unit
SVGMetadataElement[JC] def previousElementSibling: Element
SVGMetadataElement[JC] def previousSibling: Node
SVGMetadataElement[JC] def querySelector(selectors: String): Element
SVGMetadataElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGMetadataElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGMetadataElement[JC] def remove(): Unit
SVGMetadataElement[JC] def removeAttribute(name: String): Unit
SVGMetadataElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGMetadataElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGMetadataElement[JC] def removeChild(oldChild: Node): Node
SVGMetadataElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGMetadataElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGMetadataElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGMetadataElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGMetadataElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGMetadataElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGMetadataElement[JC] def requestPointerLock(): Unit
SVGMetadataElement[JC] def scrollHeight: Int
SVGMetadataElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGMetadataElement[JC] var scrollLeft: Double
SVGMetadataElement[JC] var scrollTop: Double
SVGMetadataElement[JC] def scrollWidth: Int
SVGMetadataElement[JC] def setAttribute(name: String, value: String): Unit
SVGMetadataElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGMetadataElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGMetadataElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGMetadataElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGMetadataElement[JC] def shadowRoot: ShadowRoot
SVGMetadataElement[JC] def tagName: String
SVGMetadataElement[JC] var textContent: String
SVGMetadataElement[JC] def viewportElement: SVGElement
SVGMetadataElement[JC] var xmlbase: String
SVGNumber[JC] var value: Double
SVGNumberList[JC] def appendItem(newItem: SVGNumber): SVGNumber
SVGNumberList[JC] def clear(): Unit
SVGNumberList[JC] def getItem(index: Int): SVGNumber
SVGNumberList[JC] def initialize(newItem: SVGNumber): SVGNumber
SVGNumberList[JC] def insertItemBefore(newItem: SVGNumber, index: Int): SVGNumber
SVGNumberList[JC] def numberOfItems: Int
SVGNumberList[JC] def removeItem(index: Int): SVGNumber
SVGNumberList[JC] def replaceItem(newItem: SVGNumber, index: Int): SVGNumber
SVGPathElement[JC] var accessKey: String
SVGPathElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGPathElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGPathElement[JC] def after(nodes: Node | String*): Unit
SVGPathElement[JC] def append(nodes: Node | String*): Unit
SVGPathElement[JC] def appendChild(newChild: Node): Node
SVGPathElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGPathElement[JC] def attributes: NamedNodeMap
SVGPathElement[JC] def baseURI: String
SVGPathElement[JC] def before(nodes: Node | String*): Unit
SVGPathElement[JC] def childElementCount: Int
SVGPathElement[JC] def childNodes: NodeList[Node]
SVGPathElement[JC] def children: HTMLCollection[Element]
SVGPathElement[JC] var classList: DOMTokenList
SVGPathElement[JC] var className: SVGAnimatedString
SVGPathElement[JC] def clientHeight: Int
SVGPathElement[JC] def clientLeft: Int
SVGPathElement[JC] def clientTop: Int
SVGPathElement[JC] def clientWidth: Int
SVGPathElement[JC] def cloneNode(deep: Boolean?): Node
SVGPathElement[JC] def closest(selector: String): Element
SVGPathElement[JC] def compareDocumentPosition(other: Node): Int
SVGPathElement[JC] def contains(otherNode: Node): Boolean
SVGPathElement[JC] def createSVGPathSegArcAbs(x: Double, y: Double, r1: Double, r2: Double, angle: Double, largeArcFlag: Boolean, sweepFlag: Boolean): SVGPathSegArcAbs
SVGPathElement[JC] def createSVGPathSegArcRel(x: Double, y: Double, r1: Double, r2: Double, angle: Double, largeArcFlag: Boolean, sweepFlag: Boolean): SVGPathSegArcRel
SVGPathElement[JC] def createSVGPathSegClosePath(): SVGPathSegClosePath
SVGPathElement[JC] def createSVGPathSegCurvetoCubicAbs(x: Double, y: Double, x1: Double, y1: Double, x2: Double, y2: Double): SVGPathSegCurvetoCubicAbs
SVGPathElement[JC] def createSVGPathSegCurvetoCubicRel(x: Double, y: Double, x1: Double, y1: Double, x2: Double, y2: Double): SVGPathSegCurvetoCubicRel
SVGPathElement[JC] def createSVGPathSegCurvetoCubicSmoothAbs(x: Double, y: Double, x2: Double, y2: Double): SVGPathSegCurvetoCubicSmoothAbs
SVGPathElement[JC] def createSVGPathSegCurvetoCubicSmoothRel(x: Double, y: Double, x2: Double, y2: Double): SVGPathSegCurvetoCubicSmoothRel
SVGPathElement[JC] def createSVGPathSegCurvetoQuadraticAbs(x: Double, y: Double, x1: Double, y1: Double): SVGPathSegCurvetoQuadraticAbs
SVGPathElement[JC] def createSVGPathSegCurvetoQuadraticRel(x: Double, y: Double, x1: Double, y1: Double): SVGPathSegCurvetoQuadraticRel
SVGPathElement[JC] def createSVGPathSegCurvetoQuadraticSmoothAbs(x: Double, y: Double): SVGPathSegCurvetoQuadraticSmoothAbs
SVGPathElement[JC] def createSVGPathSegCurvetoQuadraticSmoothRel(x: Double, y: Double): SVGPathSegCurvetoQuadraticSmoothRel
SVGPathElement[JC] def createSVGPathSegLinetoAbs(x: Double, y: Double): SVGPathSegLinetoAbs
SVGPathElement[JC] def createSVGPathSegLinetoHorizontalAbs(x: Double): SVGPathSegLinetoHorizontalAbs
SVGPathElement[JC] def createSVGPathSegLinetoHorizontalRel(x: Double): SVGPathSegLinetoHorizontalRel
SVGPathElement[JC] def createSVGPathSegLinetoRel(x: Double, y: Double): SVGPathSegLinetoRel
SVGPathElement[JC] def createSVGPathSegLinetoVerticalAbs(y: Double): SVGPathSegLinetoVerticalAbs
SVGPathElement[JC] def createSVGPathSegLinetoVerticalRel(y: Double): SVGPathSegLinetoVerticalRel
SVGPathElement[JC] def createSVGPathSegMovetoAbs(x: Double, y: Double): SVGPathSegMovetoAbs
SVGPathElement[JC] def createSVGPathSegMovetoRel(x: Double, y: Double): SVGPathSegMovetoRel
SVGPathElement[JC] def dispatchEvent(evt: Event): Boolean
SVGPathElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGPathElement[JC] var farthestViewportElement: SVGElement
SVGPathElement[JC] def firstChild: Node
SVGPathElement[JC] def firstElementChild: Element
SVGPathElement[JC] def getAttribute(name: String): String
SVGPathElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGPathElement[JC] def getAttributeNode(name: String): Attr
SVGPathElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGPathElement[JC] def getBBox(): SVGRect
SVGPathElement[JC] def getBoundingClientRect(): DOMRect
SVGPathElement[JC] def getCTM(): SVGMatrix
SVGPathElement[JC] def getClientRects(): DOMRectList
SVGPathElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGPathElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGPathElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGPathElement[JC] def getPathSegAtLength(distance: Double): Int
SVGPathElement[JC] def getPointAtLength(distance: Double): SVGPoint
SVGPathElement[JC] def getScreenCTM(): SVGMatrix
SVGPathElement[JC] def getTotalLength(): Double
SVGPathElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
SVGPathElement[JC] def hasAttribute(name: String): Boolean
SVGPathElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGPathElement[JC] def hasAttributes(): Boolean
SVGPathElement[JC] def hasChildNodes(): Boolean
SVGPathElement[JC] def hasExtension(extension: String): Boolean
SVGPathElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGPathElement[JC] var id: String
SVGPathElement[JC] var innerHTML: String
SVGPathElement[JC] var innerText: String
SVGPathElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGPathElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGPathElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGPathElement[JC] def isConnected: Boolean
SVGPathElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGPathElement[JC] def isEqualNode(arg: Node): Boolean
SVGPathElement[JC] def isSameNode(other: Node): Boolean
SVGPathElement[JC] def isSupported(feature: String, version: String): Boolean
SVGPathElement[JC] def lastChild: Node
SVGPathElement[JC] def lastElementChild: Element
SVGPathElement[JC] def localName: String
SVGPathElement[JC] def lookupNamespaceURI(prefix: String): String
SVGPathElement[JC] def lookupPrefix(namespaceURI: String): String
SVGPathElement[JC] def matches(selector: String): Boolean
SVGPathElement[JC] def namespaceURI: String
SVGPathElement[JC] var nearestViewportElement: SVGElement
SVGPathElement[JC] def nextElementSibling: Element
SVGPathElement[JC] def nextSibling: Node
SVGPathElement[JC] def nodeName: String
SVGPathElement[JC] def nodeType: Int
SVGPathElement[JC] var nodeValue: String
SVGPathElement[JC] def normalize(): Unit
SVGPathElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGPathElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGPathElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGPathElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGPathElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGPathElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGPathElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGPathElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGPathElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGPathElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGPathElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGPathElement[JC] var onload: js.Function1[Event, _]
SVGPathElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGPathElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGPathElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGPathElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGPathElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGPathElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGPathElement[JC] var outerHTML: String
SVGPathElement[JC] def ownerDocument: Document
SVGPathElement[JC] def ownerSVGElement: SVGSVGElement
SVGPathElement[JC] def parentNode: Node
SVGPathElement[JC] var pathSegList: SVGPathSegList
SVGPathElement[JC] def prefix: String
SVGPathElement[JC] def prepend(nodes: Node | String*): Unit
SVGPathElement[JC] def previousElementSibling: Element
SVGPathElement[JC] def previousSibling: Node
SVGPathElement[JC] def querySelector(selectors: String): Element
SVGPathElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGPathElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGPathElement[JC] def remove(): Unit
SVGPathElement[JC] def removeAttribute(name: String): Unit
SVGPathElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGPathElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGPathElement[JC] def removeChild(oldChild: Node): Node
SVGPathElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGPathElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGPathElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGPathElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGPathElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGPathElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGPathElement[JC] def requestPointerLock(): Unit
SVGPathElement[JC] var requiredExtensions: SVGStringList
SVGPathElement[JC] var requiredFeatures: SVGStringList
SVGPathElement[JC] def scrollHeight: Int
SVGPathElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGPathElement[JC] var scrollLeft: Double
SVGPathElement[JC] var scrollTop: Double
SVGPathElement[JC] def scrollWidth: Int
SVGPathElement[JC] def setAttribute(name: String, value: String): Unit
SVGPathElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGPathElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGPathElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGPathElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGPathElement[JC] def shadowRoot: ShadowRoot
SVGPathElement[JC] var style: CSSStyleDeclaration
SVGPathElement[JC] var systemLanguage: SVGStringList
SVGPathElement[JC] def tagName: String
SVGPathElement[JC] var textContent: String
SVGPathElement[JC] var transform: SVGAnimatedTransformList
SVGPathElement[JC] def viewportElement: SVGElement
SVGPathElement[JC] var xmlbase: String
SVGPathElement[JC] var xmllang: String
SVGPathElement[JC] var xmlspace: String
SVGPathSeg[JC] def pathSegType: Int
SVGPathSeg[JC] def pathSegTypeAsLetter: String
SVGPathSeg[JO] val PATHSEG_ARC_ABS: Int
SVGPathSeg[JO] val PATHSEG_ARC_REL: Int
SVGPathSeg[JO] val PATHSEG_CLOSEPATH: Int
SVGPathSeg[JO] val PATHSEG_CURVETO_CUBIC_ABS: Int
SVGPathSeg[JO] val PATHSEG_CURVETO_CUBIC_REL: Int
SVGPathSeg[JO] val PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: Int
SVGPathSeg[JO] val PATHSEG_CURVETO_CUBIC_SMOOTH_REL: Int
SVGPathSeg[JO] val PATHSEG_CURVETO_QUADRATIC_ABS: Int
SVGPathSeg[JO] val PATHSEG_CURVETO_QUADRATIC_REL: Int
SVGPathSeg[JO] val PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: Int
SVGPathSeg[JO] val PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: Int
SVGPathSeg[JO] val PATHSEG_LINETO_ABS: Int
SVGPathSeg[JO] val PATHSEG_LINETO_HORIZONTAL_ABS: Int
SVGPathSeg[JO] val PATHSEG_LINETO_HORIZONTAL_REL: Int
SVGPathSeg[JO] val PATHSEG_LINETO_REL: Int
SVGPathSeg[JO] val PATHSEG_LINETO_VERTICAL_ABS: Int
SVGPathSeg[JO] val PATHSEG_LINETO_VERTICAL_REL: Int
SVGPathSeg[JO] val PATHSEG_MOVETO_ABS: Int
SVGPathSeg[JO] val PATHSEG_MOVETO_REL: Int
SVGPathSeg[JO] val PATHSEG_UNKNOWN: Int
SVGPathSegArcAbs[JC] var angle: Double
SVGPathSegArcAbs[JC] var largeArcFlag: Boolean
SVGPathSegArcAbs[JC] def pathSegType: Int
SVGPathSegArcAbs[JC] def pathSegTypeAsLetter: String
SVGPathSegArcAbs[JC] var r1: Double
SVGPathSegArcAbs[JC] var r2: Double
SVGPathSegArcAbs[JC] var sweepFlag: Boolean
SVGPathSegArcAbs[JC] var x: Double
SVGPathSegArcAbs[JC] var y: Double
SVGPathSegArcRel[JC] var angle: Double
SVGPathSegArcRel[JC] var largeArcFlag: Boolean
SVGPathSegArcRel[JC] def pathSegType: Int
SVGPathSegArcRel[JC] def pathSegTypeAsLetter: String
SVGPathSegArcRel[JC] var r1: Double
SVGPathSegArcRel[JC] var r2: Double
SVGPathSegArcRel[JC] var sweepFlag: Boolean
SVGPathSegArcRel[JC] var x: Double
SVGPathSegArcRel[JC] var y: Double
SVGPathSegClosePath[JC] def pathSegType: Int
SVGPathSegClosePath[JC] def pathSegTypeAsLetter: String
SVGPathSegCurvetoCubicAbs[JC] def pathSegType: Int
SVGPathSegCurvetoCubicAbs[JC] def pathSegTypeAsLetter: String
SVGPathSegCurvetoCubicAbs[JC] var x: Double
SVGPathSegCurvetoCubicAbs[JC] var x1: Double
SVGPathSegCurvetoCubicAbs[JC] var x2: Double
SVGPathSegCurvetoCubicAbs[JC] var y: Double
SVGPathSegCurvetoCubicAbs[JC] var y1: Double
SVGPathSegCurvetoCubicAbs[JC] var y2: Double
SVGPathSegCurvetoCubicRel[JC] def pathSegType: Int
SVGPathSegCurvetoCubicRel[JC] def pathSegTypeAsLetter: String
SVGPathSegCurvetoCubicRel[JC] var x: Double
SVGPathSegCurvetoCubicRel[JC] var x1: Double
SVGPathSegCurvetoCubicRel[JC] var x2: Double
SVGPathSegCurvetoCubicRel[JC] var y: Double
SVGPathSegCurvetoCubicRel[JC] var y1: Double
SVGPathSegCurvetoCubicRel[JC] var y2: Double
SVGPathSegCurvetoCubicSmoothAbs[JC] def pathSegType: Int
SVGPathSegCurvetoCubicSmoothAbs[JC] def pathSegTypeAsLetter: String
SVGPathSegCurvetoCubicSmoothAbs[JC] var x: Double
SVGPathSegCurvetoCubicSmoothAbs[JC] var x2: Double
SVGPathSegCurvetoCubicSmoothAbs[JC] var y: Double
SVGPathSegCurvetoCubicSmoothAbs[JC] var y2: Double
SVGPathSegCurvetoCubicSmoothRel[JC] def pathSegType: Int
SVGPathSegCurvetoCubicSmoothRel[JC] def pathSegTypeAsLetter: String
SVGPathSegCurvetoCubicSmoothRel[JC] var x: Double
SVGPathSegCurvetoCubicSmoothRel[JC] var x2: Double
SVGPathSegCurvetoCubicSmoothRel[JC] var y: Double
SVGPathSegCurvetoCubicSmoothRel[JC] var y2: Double
SVGPathSegCurvetoQuadraticAbs[JC] def pathSegType: Int
SVGPathSegCurvetoQuadraticAbs[JC] def pathSegTypeAsLetter: String
SVGPathSegCurvetoQuadraticAbs[JC] var x: Double
SVGPathSegCurvetoQuadraticAbs[JC] var x1: Double
SVGPathSegCurvetoQuadraticAbs[JC] var y: Double
SVGPathSegCurvetoQuadraticAbs[JC] var y1: Double
SVGPathSegCurvetoQuadraticRel[JC] def pathSegType: Int
SVGPathSegCurvetoQuadraticRel[JC] def pathSegTypeAsLetter: String
SVGPathSegCurvetoQuadraticRel[JC] var x: Double
SVGPathSegCurvetoQuadraticRel[JC] var x1: Double
SVGPathSegCurvetoQuadraticRel[JC] var y: Double
SVGPathSegCurvetoQuadraticRel[JC] var y1: Double
SVGPathSegCurvetoQuadraticSmoothAbs[JC] def pathSegType: Int
SVGPathSegCurvetoQuadraticSmoothAbs[JC] def pathSegTypeAsLetter: String
SVGPathSegCurvetoQuadraticSmoothAbs[JC] var x: Double
SVGPathSegCurvetoQuadraticSmoothAbs[JC] var y: Double
SVGPathSegCurvetoQuadraticSmoothRel[JC] def pathSegType: Int
SVGPathSegCurvetoQuadraticSmoothRel[JC] def pathSegTypeAsLetter: String
SVGPathSegCurvetoQuadraticSmoothRel[JC] var x: Double
SVGPathSegCurvetoQuadraticSmoothRel[JC] var y: Double
SVGPathSegLinetoAbs[JC] def pathSegType: Int
SVGPathSegLinetoAbs[JC] def pathSegTypeAsLetter: String
SVGPathSegLinetoAbs[JC] var x: Double
SVGPathSegLinetoAbs[JC] var y: Double
SVGPathSegLinetoHorizontalAbs[JC] def pathSegType: Int
SVGPathSegLinetoHorizontalAbs[JC] def pathSegTypeAsLetter: String
SVGPathSegLinetoHorizontalAbs[JC] var x: Double
SVGPathSegLinetoHorizontalRel[JC] def pathSegType: Int
SVGPathSegLinetoHorizontalRel[JC] def pathSegTypeAsLetter: String
SVGPathSegLinetoHorizontalRel[JC] var x: Double
SVGPathSegLinetoRel[JC] def pathSegType: Int
SVGPathSegLinetoRel[JC] def pathSegTypeAsLetter: String
SVGPathSegLinetoRel[JC] var x: Double
SVGPathSegLinetoRel[JC] var y: Double
SVGPathSegLinetoVerticalAbs[JC] def pathSegType: Int
SVGPathSegLinetoVerticalAbs[JC] def pathSegTypeAsLetter: String
SVGPathSegLinetoVerticalAbs[JC] var y: Double
SVGPathSegLinetoVerticalRel[JC] def pathSegType: Int
SVGPathSegLinetoVerticalRel[JC] def pathSegTypeAsLetter: String
SVGPathSegLinetoVerticalRel[JC] var y: Double
SVGPathSegList[JC] def appendItem(newItem: SVGPathSeg): SVGPathSeg
SVGPathSegList[JC] def clear(): Unit
SVGPathSegList[JC] def getItem(index: Int): SVGPathSeg
SVGPathSegList[JC] def initialize(newItem: SVGPathSeg): SVGPathSeg
SVGPathSegList[JC] def insertItemBefore(newItem: SVGPathSeg, index: Int): SVGPathSeg
SVGPathSegList[JC] def numberOfItems: Int
SVGPathSegList[JC] def removeItem(index: Int): SVGPathSeg
SVGPathSegList[JC] def replaceItem(newItem: SVGPathSeg, index: Int): SVGPathSeg
SVGPathSegMovetoAbs[JC] def pathSegType: Int
SVGPathSegMovetoAbs[JC] def pathSegTypeAsLetter: String
SVGPathSegMovetoAbs[JC] var x: Double
SVGPathSegMovetoAbs[JC] var y: Double
SVGPathSegMovetoRel[JC] def pathSegType: Int
SVGPathSegMovetoRel[JC] def pathSegTypeAsLetter: String
SVGPathSegMovetoRel[JC] var x: Double
SVGPathSegMovetoRel[JC] var y: Double
SVGPatternElement[JC] val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Int
SVGPatternElement[JC] val SVG_UNIT_TYPE_UNKNOWN: Int
SVGPatternElement[JC] val SVG_UNIT_TYPE_USERSPACEONUSE: Int
SVGPatternElement[JC] var accessKey: String
SVGPatternElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGPatternElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGPatternElement[JC] def after(nodes: Node | String*): Unit
SVGPatternElement[JC] def append(nodes: Node | String*): Unit
SVGPatternElement[JC] def appendChild(newChild: Node): Node
SVGPatternElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGPatternElement[JC] def attributes: NamedNodeMap
SVGPatternElement[JC] def baseURI: String
SVGPatternElement[JC] def before(nodes: Node | String*): Unit
SVGPatternElement[JC] def childElementCount: Int
SVGPatternElement[JC] def childNodes: NodeList[Node]
SVGPatternElement[JC] def children: HTMLCollection[Element]
SVGPatternElement[JC] var classList: DOMTokenList
SVGPatternElement[JC] var className: SVGAnimatedString
SVGPatternElement[JC] def clientHeight: Int
SVGPatternElement[JC] def clientLeft: Int
SVGPatternElement[JC] def clientTop: Int
SVGPatternElement[JC] def clientWidth: Int
SVGPatternElement[JC] def cloneNode(deep: Boolean?): Node
SVGPatternElement[JC] def closest(selector: String): Element
SVGPatternElement[JC] def compareDocumentPosition(other: Node): Int
SVGPatternElement[JC] def contains(otherNode: Node): Boolean
SVGPatternElement[JC] def dispatchEvent(evt: Event): Boolean
SVGPatternElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGPatternElement[JC] def firstChild: Node
SVGPatternElement[JC] def firstElementChild: Element
SVGPatternElement[JC] def getAttribute(name: String): String
SVGPatternElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGPatternElement[JC] def getAttributeNode(name: String): Attr
SVGPatternElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGPatternElement[JC] def getBoundingClientRect(): DOMRect
SVGPatternElement[JC] def getClientRects(): DOMRectList
SVGPatternElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGPatternElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGPatternElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGPatternElement[JC] def hasAttribute(name: String): Boolean
SVGPatternElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGPatternElement[JC] def hasAttributes(): Boolean
SVGPatternElement[JC] def hasChildNodes(): Boolean
SVGPatternElement[JC] def hasExtension(extension: String): Boolean
SVGPatternElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGPatternElement[JC] def height: SVGAnimatedLength
SVGPatternElement[JC] var href: SVGAnimatedString
SVGPatternElement[JC] var id: String
SVGPatternElement[JC] var innerHTML: String
SVGPatternElement[JC] var innerText: String
SVGPatternElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGPatternElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGPatternElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGPatternElement[JC] def isConnected: Boolean
SVGPatternElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGPatternElement[JC] def isEqualNode(arg: Node): Boolean
SVGPatternElement[JC] def isSameNode(other: Node): Boolean
SVGPatternElement[JC] def isSupported(feature: String, version: String): Boolean
SVGPatternElement[JC] def lastChild: Node
SVGPatternElement[JC] def lastElementChild: Element
SVGPatternElement[JC] def localName: String
SVGPatternElement[JC] def lookupNamespaceURI(prefix: String): String
SVGPatternElement[JC] def lookupPrefix(namespaceURI: String): String
SVGPatternElement[JC] def matches(selector: String): Boolean
SVGPatternElement[JC] def namespaceURI: String
SVGPatternElement[JC] def nextElementSibling: Element
SVGPatternElement[JC] def nextSibling: Node
SVGPatternElement[JC] def nodeName: String
SVGPatternElement[JC] def nodeType: Int
SVGPatternElement[JC] var nodeValue: String
SVGPatternElement[JC] def normalize(): Unit
SVGPatternElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGPatternElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGPatternElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGPatternElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGPatternElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGPatternElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGPatternElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGPatternElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGPatternElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGPatternElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGPatternElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGPatternElement[JC] var onload: js.Function1[Event, _]
SVGPatternElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGPatternElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGPatternElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGPatternElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGPatternElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGPatternElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGPatternElement[JC] var outerHTML: String
SVGPatternElement[JC] def ownerDocument: Document
SVGPatternElement[JC] def ownerSVGElement: SVGSVGElement
SVGPatternElement[JC] def parentNode: Node
SVGPatternElement[JC] def patternContentUnits: SVGAnimatedEnumeration
SVGPatternElement[JC] def patternTransform: SVGAnimatedTransformList
SVGPatternElement[JC] def patternUnits: SVGAnimatedEnumeration
SVGPatternElement[JC] def prefix: String
SVGPatternElement[JC] def prepend(nodes: Node | String*): Unit
SVGPatternElement[JC] var preserveAspectRatio: SVGAnimatedPreserveAspectRatio
SVGPatternElement[JC] def previousElementSibling: Element
SVGPatternElement[JC] def previousSibling: Node
SVGPatternElement[JC] def querySelector(selectors: String): Element
SVGPatternElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGPatternElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGPatternElement[JC] def remove(): Unit
SVGPatternElement[JC] def removeAttribute(name: String): Unit
SVGPatternElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGPatternElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGPatternElement[JC] def removeChild(oldChild: Node): Node
SVGPatternElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGPatternElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGPatternElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGPatternElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGPatternElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGPatternElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGPatternElement[JC] def requestPointerLock(): Unit
SVGPatternElement[JC] var requiredExtensions: SVGStringList
SVGPatternElement[JC] var requiredFeatures: SVGStringList
SVGPatternElement[JC] def scrollHeight: Int
SVGPatternElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGPatternElement[JC] var scrollLeft: Double
SVGPatternElement[JC] var scrollTop: Double
SVGPatternElement[JC] def scrollWidth: Int
SVGPatternElement[JC] def setAttribute(name: String, value: String): Unit
SVGPatternElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGPatternElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGPatternElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGPatternElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGPatternElement[JC] def shadowRoot: ShadowRoot
SVGPatternElement[JC] var style: CSSStyleDeclaration
SVGPatternElement[JC] var systemLanguage: SVGStringList
SVGPatternElement[JC] def tagName: String
SVGPatternElement[JC] var textContent: String
SVGPatternElement[JC] var viewBox: SVGAnimatedRect
SVGPatternElement[JC] def viewportElement: SVGElement
SVGPatternElement[JC] def width: SVGAnimatedLength
SVGPatternElement[JC] def x: SVGAnimatedLength
SVGPatternElement[JC] var xmlbase: String
SVGPatternElement[JC] var xmllang: String
SVGPatternElement[JC] var xmlspace: String
SVGPatternElement[JC] def y: SVGAnimatedLength
SVGPoint[JC] def matrixTransform(matrix: SVGMatrix): SVGPoint
SVGPoint[JC] var x: Double
SVGPoint[JC] var y: Double
SVGPointList[JC] def appendItem(newItem: SVGPoint): SVGPoint
SVGPointList[JC] def clear(): Unit
SVGPointList[JC] def getItem(index: Int): SVGPoint
SVGPointList[JC] def initialize(newItem: SVGPoint): SVGPoint
SVGPointList[JC] def insertItemBefore(newItem: SVGPoint, index: Int): SVGPoint
SVGPointList[JC] def numberOfItems: Int
SVGPointList[JC] def removeItem(index: Int): SVGPoint
SVGPointList[JC] def replaceItem(newItem: SVGPoint, index: Int): SVGPoint
SVGPolygonElement[JC] var accessKey: String
SVGPolygonElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGPolygonElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGPolygonElement[JC] def after(nodes: Node | String*): Unit
SVGPolygonElement[JC] def animatedPoints: SVGPointList
SVGPolygonElement[JC] def append(nodes: Node | String*): Unit
SVGPolygonElement[JC] def appendChild(newChild: Node): Node
SVGPolygonElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGPolygonElement[JC] def attributes: NamedNodeMap
SVGPolygonElement[JC] def baseURI: String
SVGPolygonElement[JC] def before(nodes: Node | String*): Unit
SVGPolygonElement[JC] def childElementCount: Int
SVGPolygonElement[JC] def childNodes: NodeList[Node]
SVGPolygonElement[JC] def children: HTMLCollection[Element]
SVGPolygonElement[JC] var classList: DOMTokenList
SVGPolygonElement[JC] var className: SVGAnimatedString
SVGPolygonElement[JC] def clientHeight: Int
SVGPolygonElement[JC] def clientLeft: Int
SVGPolygonElement[JC] def clientTop: Int
SVGPolygonElement[JC] def clientWidth: Int
SVGPolygonElement[JC] def cloneNode(deep: Boolean?): Node
SVGPolygonElement[JC] def closest(selector: String): Element
SVGPolygonElement[JC] def compareDocumentPosition(other: Node): Int
SVGPolygonElement[JC] def contains(otherNode: Node): Boolean
SVGPolygonElement[JC] def dispatchEvent(evt: Event): Boolean
SVGPolygonElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGPolygonElement[JC] var farthestViewportElement: SVGElement
SVGPolygonElement[JC] def firstChild: Node
SVGPolygonElement[JC] def firstElementChild: Element
SVGPolygonElement[JC] def getAttribute(name: String): String
SVGPolygonElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGPolygonElement[JC] def getAttributeNode(name: String): Attr
SVGPolygonElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGPolygonElement[JC] def getBBox(): SVGRect
SVGPolygonElement[JC] def getBoundingClientRect(): DOMRect
SVGPolygonElement[JC] def getCTM(): SVGMatrix
SVGPolygonElement[JC] def getClientRects(): DOMRectList
SVGPolygonElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGPolygonElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGPolygonElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGPolygonElement[JC] def getScreenCTM(): SVGMatrix
SVGPolygonElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
SVGPolygonElement[JC] def hasAttribute(name: String): Boolean
SVGPolygonElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGPolygonElement[JC] def hasAttributes(): Boolean
SVGPolygonElement[JC] def hasChildNodes(): Boolean
SVGPolygonElement[JC] def hasExtension(extension: String): Boolean
SVGPolygonElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGPolygonElement[JC] var id: String
SVGPolygonElement[JC] var innerHTML: String
SVGPolygonElement[JC] var innerText: String
SVGPolygonElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGPolygonElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGPolygonElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGPolygonElement[JC] def isConnected: Boolean
SVGPolygonElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGPolygonElement[JC] def isEqualNode(arg: Node): Boolean
SVGPolygonElement[JC] def isSameNode(other: Node): Boolean
SVGPolygonElement[JC] def isSupported(feature: String, version: String): Boolean
SVGPolygonElement[JC] def lastChild: Node
SVGPolygonElement[JC] def lastElementChild: Element
SVGPolygonElement[JC] def localName: String
SVGPolygonElement[JC] def lookupNamespaceURI(prefix: String): String
SVGPolygonElement[JC] def lookupPrefix(namespaceURI: String): String
SVGPolygonElement[JC] def matches(selector: String): Boolean
SVGPolygonElement[JC] def namespaceURI: String
SVGPolygonElement[JC] var nearestViewportElement: SVGElement
SVGPolygonElement[JC] def nextElementSibling: Element
SVGPolygonElement[JC] def nextSibling: Node
SVGPolygonElement[JC] def nodeName: String
SVGPolygonElement[JC] def nodeType: Int
SVGPolygonElement[JC] var nodeValue: String
SVGPolygonElement[JC] def normalize(): Unit
SVGPolygonElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGPolygonElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGPolygonElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGPolygonElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGPolygonElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGPolygonElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGPolygonElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGPolygonElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGPolygonElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGPolygonElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGPolygonElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGPolygonElement[JC] var onload: js.Function1[Event, _]
SVGPolygonElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGPolygonElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGPolygonElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGPolygonElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGPolygonElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGPolygonElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGPolygonElement[JC] var outerHTML: String
SVGPolygonElement[JC] def ownerDocument: Document
SVGPolygonElement[JC] def ownerSVGElement: SVGSVGElement
SVGPolygonElement[JC] def parentNode: Node
SVGPolygonElement[JC] var points: SVGPointList
SVGPolygonElement[JC] def prefix: String
SVGPolygonElement[JC] def prepend(nodes: Node | String*): Unit
SVGPolygonElement[JC] def previousElementSibling: Element
SVGPolygonElement[JC] def previousSibling: Node
SVGPolygonElement[JC] def querySelector(selectors: String): Element
SVGPolygonElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGPolygonElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGPolygonElement[JC] def remove(): Unit
SVGPolygonElement[JC] def removeAttribute(name: String): Unit
SVGPolygonElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGPolygonElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGPolygonElement[JC] def removeChild(oldChild: Node): Node
SVGPolygonElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGPolygonElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGPolygonElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGPolygonElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGPolygonElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGPolygonElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGPolygonElement[JC] def requestPointerLock(): Unit
SVGPolygonElement[JC] var requiredExtensions: SVGStringList
SVGPolygonElement[JC] var requiredFeatures: SVGStringList
SVGPolygonElement[JC] def scrollHeight: Int
SVGPolygonElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGPolygonElement[JC] var scrollLeft: Double
SVGPolygonElement[JC] var scrollTop: Double
SVGPolygonElement[JC] def scrollWidth: Int
SVGPolygonElement[JC] def setAttribute(name: String, value: String): Unit
SVGPolygonElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGPolygonElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGPolygonElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGPolygonElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGPolygonElement[JC] def shadowRoot: ShadowRoot
SVGPolygonElement[JC] var style: CSSStyleDeclaration
SVGPolygonElement[JC] var systemLanguage: SVGStringList
SVGPolygonElement[JC] def tagName: String
SVGPolygonElement[JC] var textContent: String
SVGPolygonElement[JC] var transform: SVGAnimatedTransformList
SVGPolygonElement[JC] def viewportElement: SVGElement
SVGPolygonElement[JC] var xmlbase: String
SVGPolygonElement[JC] var xmllang: String
SVGPolygonElement[JC] var xmlspace: String
SVGPolylineElement[JC] var accessKey: String
SVGPolylineElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGPolylineElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGPolylineElement[JC] def after(nodes: Node | String*): Unit
SVGPolylineElement[JC] def animatedPoints: SVGPointList
SVGPolylineElement[JC] def append(nodes: Node | String*): Unit
SVGPolylineElement[JC] def appendChild(newChild: Node): Node
SVGPolylineElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGPolylineElement[JC] def attributes: NamedNodeMap
SVGPolylineElement[JC] def baseURI: String
SVGPolylineElement[JC] def before(nodes: Node | String*): Unit
SVGPolylineElement[JC] def childElementCount: Int
SVGPolylineElement[JC] def childNodes: NodeList[Node]
SVGPolylineElement[JC] def children: HTMLCollection[Element]
SVGPolylineElement[JC] var classList: DOMTokenList
SVGPolylineElement[JC] var className: SVGAnimatedString
SVGPolylineElement[JC] def clientHeight: Int
SVGPolylineElement[JC] def clientLeft: Int
SVGPolylineElement[JC] def clientTop: Int
SVGPolylineElement[JC] def clientWidth: Int
SVGPolylineElement[JC] def cloneNode(deep: Boolean?): Node
SVGPolylineElement[JC] def closest(selector: String): Element
SVGPolylineElement[JC] def compareDocumentPosition(other: Node): Int
SVGPolylineElement[JC] def contains(otherNode: Node): Boolean
SVGPolylineElement[JC] def dispatchEvent(evt: Event): Boolean
SVGPolylineElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGPolylineElement[JC] var farthestViewportElement: SVGElement
SVGPolylineElement[JC] def firstChild: Node
SVGPolylineElement[JC] def firstElementChild: Element
SVGPolylineElement[JC] def getAttribute(name: String): String
SVGPolylineElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGPolylineElement[JC] def getAttributeNode(name: String): Attr
SVGPolylineElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGPolylineElement[JC] def getBBox(): SVGRect
SVGPolylineElement[JC] def getBoundingClientRect(): DOMRect
SVGPolylineElement[JC] def getCTM(): SVGMatrix
SVGPolylineElement[JC] def getClientRects(): DOMRectList
SVGPolylineElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGPolylineElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGPolylineElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGPolylineElement[JC] def getScreenCTM(): SVGMatrix
SVGPolylineElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
SVGPolylineElement[JC] def hasAttribute(name: String): Boolean
SVGPolylineElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGPolylineElement[JC] def hasAttributes(): Boolean
SVGPolylineElement[JC] def hasChildNodes(): Boolean
SVGPolylineElement[JC] def hasExtension(extension: String): Boolean
SVGPolylineElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGPolylineElement[JC] var id: String
SVGPolylineElement[JC] var innerHTML: String
SVGPolylineElement[JC] var innerText: String
SVGPolylineElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGPolylineElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGPolylineElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGPolylineElement[JC] def isConnected: Boolean
SVGPolylineElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGPolylineElement[JC] def isEqualNode(arg: Node): Boolean
SVGPolylineElement[JC] def isSameNode(other: Node): Boolean
SVGPolylineElement[JC] def isSupported(feature: String, version: String): Boolean
SVGPolylineElement[JC] def lastChild: Node
SVGPolylineElement[JC] def lastElementChild: Element
SVGPolylineElement[JC] def localName: String
SVGPolylineElement[JC] def lookupNamespaceURI(prefix: String): String
SVGPolylineElement[JC] def lookupPrefix(namespaceURI: String): String
SVGPolylineElement[JC] def matches(selector: String): Boolean
SVGPolylineElement[JC] def namespaceURI: String
SVGPolylineElement[JC] var nearestViewportElement: SVGElement
SVGPolylineElement[JC] def nextElementSibling: Element
SVGPolylineElement[JC] def nextSibling: Node
SVGPolylineElement[JC] def nodeName: String
SVGPolylineElement[JC] def nodeType: Int
SVGPolylineElement[JC] var nodeValue: String
SVGPolylineElement[JC] def normalize(): Unit
SVGPolylineElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGPolylineElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGPolylineElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGPolylineElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGPolylineElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGPolylineElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGPolylineElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGPolylineElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGPolylineElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGPolylineElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGPolylineElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGPolylineElement[JC] var onload: js.Function1[Event, _]
SVGPolylineElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGPolylineElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGPolylineElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGPolylineElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGPolylineElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGPolylineElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGPolylineElement[JC] var outerHTML: String
SVGPolylineElement[JC] def ownerDocument: Document
SVGPolylineElement[JC] def ownerSVGElement: SVGSVGElement
SVGPolylineElement[JC] def parentNode: Node
SVGPolylineElement[JC] var points: SVGPointList
SVGPolylineElement[JC] def prefix: String
SVGPolylineElement[JC] def prepend(nodes: Node | String*): Unit
SVGPolylineElement[JC] def previousElementSibling: Element
SVGPolylineElement[JC] def previousSibling: Node
SVGPolylineElement[JC] def querySelector(selectors: String): Element
SVGPolylineElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGPolylineElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGPolylineElement[JC] def remove(): Unit
SVGPolylineElement[JC] def removeAttribute(name: String): Unit
SVGPolylineElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGPolylineElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGPolylineElement[JC] def removeChild(oldChild: Node): Node
SVGPolylineElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGPolylineElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGPolylineElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGPolylineElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGPolylineElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGPolylineElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGPolylineElement[JC] def requestPointerLock(): Unit
SVGPolylineElement[JC] var requiredExtensions: SVGStringList
SVGPolylineElement[JC] var requiredFeatures: SVGStringList
SVGPolylineElement[JC] def scrollHeight: Int
SVGPolylineElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGPolylineElement[JC] var scrollLeft: Double
SVGPolylineElement[JC] var scrollTop: Double
SVGPolylineElement[JC] def scrollWidth: Int
SVGPolylineElement[JC] def setAttribute(name: String, value: String): Unit
SVGPolylineElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGPolylineElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGPolylineElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGPolylineElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGPolylineElement[JC] def shadowRoot: ShadowRoot
SVGPolylineElement[JC] var style: CSSStyleDeclaration
SVGPolylineElement[JC] var systemLanguage: SVGStringList
SVGPolylineElement[JC] def tagName: String
SVGPolylineElement[JC] var textContent: String
SVGPolylineElement[JC] var transform: SVGAnimatedTransformList
SVGPolylineElement[JC] def viewportElement: SVGElement
SVGPolylineElement[JC] var xmlbase: String
SVGPolylineElement[JC] var xmllang: String
SVGPolylineElement[JC] var xmlspace: String
SVGPreserveAspectRatio[JC] var align: Int
SVGPreserveAspectRatio[JC] var meetOrSlice: Int
SVGPreserveAspectRatio[JO] val SVG_MEETORSLICE_MEET: Int
SVGPreserveAspectRatio[JO] val SVG_MEETORSLICE_SLICE: Int
SVGPreserveAspectRatio[JO] val SVG_MEETORSLICE_UNKNOWN: Int
SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_NONE: Int
SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_UNKNOWN: Int
SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_XMAXYMAX: Int
SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_XMAXYMID: Int
SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_XMAXYMIN: Int
SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_XMIDYMAX: Int
SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_XMIDYMID: Int
SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_XMIDYMIN: Int
SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_XMINYMAX: Int
SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_XMINYMID: Int
SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_XMINYMIN: Int
SVGRadialGradientElement[JC] val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Int
SVGRadialGradientElement[JC] val SVG_UNIT_TYPE_UNKNOWN: Int
SVGRadialGradientElement[JC] val SVG_UNIT_TYPE_USERSPACEONUSE: Int
SVGRadialGradientElement[JC] var accessKey: String
SVGRadialGradientElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGRadialGradientElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGRadialGradientElement[JC] def after(nodes: Node | String*): Unit
SVGRadialGradientElement[JC] def append(nodes: Node | String*): Unit
SVGRadialGradientElement[JC] def appendChild(newChild: Node): Node
SVGRadialGradientElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGRadialGradientElement[JC] def attributes: NamedNodeMap
SVGRadialGradientElement[JC] def baseURI: String
SVGRadialGradientElement[JC] def before(nodes: Node | String*): Unit
SVGRadialGradientElement[JC] def childElementCount: Int
SVGRadialGradientElement[JC] def childNodes: NodeList[Node]
SVGRadialGradientElement[JC] def children: HTMLCollection[Element]
SVGRadialGradientElement[JC] var classList: DOMTokenList
SVGRadialGradientElement[JC] var className: SVGAnimatedString
SVGRadialGradientElement[JC] def clientHeight: Int
SVGRadialGradientElement[JC] def clientLeft: Int
SVGRadialGradientElement[JC] def clientTop: Int
SVGRadialGradientElement[JC] def clientWidth: Int
SVGRadialGradientElement[JC] def cloneNode(deep: Boolean?): Node
SVGRadialGradientElement[JC] def closest(selector: String): Element
SVGRadialGradientElement[JC] def compareDocumentPosition(other: Node): Int
SVGRadialGradientElement[JC] def contains(otherNode: Node): Boolean
SVGRadialGradientElement[JC] def cx: SVGAnimatedLength
SVGRadialGradientElement[JC] def cy: SVGAnimatedLength
SVGRadialGradientElement[JC] def dispatchEvent(evt: Event): Boolean
SVGRadialGradientElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGRadialGradientElement[JC] def firstChild: Node
SVGRadialGradientElement[JC] def firstElementChild: Element
SVGRadialGradientElement[JC] def fx: SVGAnimatedLength
SVGRadialGradientElement[JC] def fy: SVGAnimatedLength
SVGRadialGradientElement[JC] def getAttribute(name: String): String
SVGRadialGradientElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGRadialGradientElement[JC] def getAttributeNode(name: String): Attr
SVGRadialGradientElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGRadialGradientElement[JC] def getBoundingClientRect(): DOMRect
SVGRadialGradientElement[JC] def getClientRects(): DOMRectList
SVGRadialGradientElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGRadialGradientElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGRadialGradientElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGRadialGradientElement[JC] def gradientTransform: SVGAnimatedTransformList
SVGRadialGradientElement[JC] def gradientUnits: SVGAnimatedEnumeration
SVGRadialGradientElement[JC] def hasAttribute(name: String): Boolean
SVGRadialGradientElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGRadialGradientElement[JC] def hasAttributes(): Boolean
SVGRadialGradientElement[JC] def hasChildNodes(): Boolean
SVGRadialGradientElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGRadialGradientElement[JC] var href: SVGAnimatedString
SVGRadialGradientElement[JC] var id: String
SVGRadialGradientElement[JC] var innerHTML: String
SVGRadialGradientElement[JC] var innerText: String
SVGRadialGradientElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGRadialGradientElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGRadialGradientElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGRadialGradientElement[JC] def isConnected: Boolean
SVGRadialGradientElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGRadialGradientElement[JC] def isEqualNode(arg: Node): Boolean
SVGRadialGradientElement[JC] def isSameNode(other: Node): Boolean
SVGRadialGradientElement[JC] def isSupported(feature: String, version: String): Boolean
SVGRadialGradientElement[JC] def lastChild: Node
SVGRadialGradientElement[JC] def lastElementChild: Element
SVGRadialGradientElement[JC] def localName: String
SVGRadialGradientElement[JC] def lookupNamespaceURI(prefix: String): String
SVGRadialGradientElement[JC] def lookupPrefix(namespaceURI: String): String
SVGRadialGradientElement[JC] def matches(selector: String): Boolean
SVGRadialGradientElement[JC] def namespaceURI: String
SVGRadialGradientElement[JC] def nextElementSibling: Element
SVGRadialGradientElement[JC] def nextSibling: Node
SVGRadialGradientElement[JC] def nodeName: String
SVGRadialGradientElement[JC] def nodeType: Int
SVGRadialGradientElement[JC] var nodeValue: String
SVGRadialGradientElement[JC] def normalize(): Unit
SVGRadialGradientElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGRadialGradientElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGRadialGradientElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGRadialGradientElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGRadialGradientElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGRadialGradientElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGRadialGradientElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGRadialGradientElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGRadialGradientElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGRadialGradientElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGRadialGradientElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGRadialGradientElement[JC] var onload: js.Function1[Event, _]
SVGRadialGradientElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGRadialGradientElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGRadialGradientElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGRadialGradientElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGRadialGradientElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGRadialGradientElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGRadialGradientElement[JC] var outerHTML: String
SVGRadialGradientElement[JC] def ownerDocument: Document
SVGRadialGradientElement[JC] def ownerSVGElement: SVGSVGElement
SVGRadialGradientElement[JC] def parentNode: Node
SVGRadialGradientElement[JC] def prefix: String
SVGRadialGradientElement[JC] def prepend(nodes: Node | String*): Unit
SVGRadialGradientElement[JC] def previousElementSibling: Element
SVGRadialGradientElement[JC] def previousSibling: Node
SVGRadialGradientElement[JC] def querySelector(selectors: String): Element
SVGRadialGradientElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGRadialGradientElement[JC] def r: SVGAnimatedLength
SVGRadialGradientElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGRadialGradientElement[JC] def remove(): Unit
SVGRadialGradientElement[JC] def removeAttribute(name: String): Unit
SVGRadialGradientElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGRadialGradientElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGRadialGradientElement[JC] def removeChild(oldChild: Node): Node
SVGRadialGradientElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGRadialGradientElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGRadialGradientElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGRadialGradientElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGRadialGradientElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGRadialGradientElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGRadialGradientElement[JC] def requestPointerLock(): Unit
SVGRadialGradientElement[JC] def scrollHeight: Int
SVGRadialGradientElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGRadialGradientElement[JC] var scrollLeft: Double
SVGRadialGradientElement[JC] var scrollTop: Double
SVGRadialGradientElement[JC] def scrollWidth: Int
SVGRadialGradientElement[JC] def setAttribute(name: String, value: String): Unit
SVGRadialGradientElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGRadialGradientElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGRadialGradientElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGRadialGradientElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGRadialGradientElement[JC] def shadowRoot: ShadowRoot
SVGRadialGradientElement[JC] def spreadMethod: SVGAnimatedEnumeration
SVGRadialGradientElement[JC] var style: CSSStyleDeclaration
SVGRadialGradientElement[JC] def tagName: String
SVGRadialGradientElement[JC] var textContent: String
SVGRadialGradientElement[JC] def viewportElement: SVGElement
SVGRadialGradientElement[JC] var xmlbase: String
SVGRect[JC] var height: Double
SVGRect[JC] var width: Double
SVGRect[JC] var x: Double
SVGRect[JC] var y: Double
SVGRectElement[JC] var accessKey: String
SVGRectElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGRectElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGRectElement[JC] def after(nodes: Node | String*): Unit
SVGRectElement[JC] def append(nodes: Node | String*): Unit
SVGRectElement[JC] def appendChild(newChild: Node): Node
SVGRectElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGRectElement[JC] def attributes: NamedNodeMap
SVGRectElement[JC] def baseURI: String
SVGRectElement[JC] def before(nodes: Node | String*): Unit
SVGRectElement[JC] def childElementCount: Int
SVGRectElement[JC] def childNodes: NodeList[Node]
SVGRectElement[JC] def children: HTMLCollection[Element]
SVGRectElement[JC] var classList: DOMTokenList
SVGRectElement[JC] var className: SVGAnimatedString
SVGRectElement[JC] def clientHeight: Int
SVGRectElement[JC] def clientLeft: Int
SVGRectElement[JC] def clientTop: Int
SVGRectElement[JC] def clientWidth: Int
SVGRectElement[JC] def cloneNode(deep: Boolean?): Node
SVGRectElement[JC] def closest(selector: String): Element
SVGRectElement[JC] def compareDocumentPosition(other: Node): Int
SVGRectElement[JC] def contains(otherNode: Node): Boolean
SVGRectElement[JC] def dispatchEvent(evt: Event): Boolean
SVGRectElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGRectElement[JC] var farthestViewportElement: SVGElement
SVGRectElement[JC] def firstChild: Node
SVGRectElement[JC] def firstElementChild: Element
SVGRectElement[JC] def getAttribute(name: String): String
SVGRectElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGRectElement[JC] def getAttributeNode(name: String): Attr
SVGRectElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGRectElement[JC] def getBBox(): SVGRect
SVGRectElement[JC] def getBoundingClientRect(): DOMRect
SVGRectElement[JC] def getCTM(): SVGMatrix
SVGRectElement[JC] def getClientRects(): DOMRectList
SVGRectElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGRectElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGRectElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGRectElement[JC] def getScreenCTM(): SVGMatrix
SVGRectElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
SVGRectElement[JC] def hasAttribute(name: String): Boolean
SVGRectElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGRectElement[JC] def hasAttributes(): Boolean
SVGRectElement[JC] def hasChildNodes(): Boolean
SVGRectElement[JC] def hasExtension(extension: String): Boolean
SVGRectElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGRectElement[JC] def height: SVGAnimatedLength
SVGRectElement[JC] var id: String
SVGRectElement[JC] var innerHTML: String
SVGRectElement[JC] var innerText: String
SVGRectElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGRectElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGRectElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGRectElement[JC] def isConnected: Boolean
SVGRectElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGRectElement[JC] def isEqualNode(arg: Node): Boolean
SVGRectElement[JC] def isSameNode(other: Node): Boolean
SVGRectElement[JC] def isSupported(feature: String, version: String): Boolean
SVGRectElement[JC] def lastChild: Node
SVGRectElement[JC] def lastElementChild: Element
SVGRectElement[JC] def localName: String
SVGRectElement[JC] def lookupNamespaceURI(prefix: String): String
SVGRectElement[JC] def lookupPrefix(namespaceURI: String): String
SVGRectElement[JC] def matches(selector: String): Boolean
SVGRectElement[JC] def namespaceURI: String
SVGRectElement[JC] var nearestViewportElement: SVGElement
SVGRectElement[JC] def nextElementSibling: Element
SVGRectElement[JC] def nextSibling: Node
SVGRectElement[JC] def nodeName: String
SVGRectElement[JC] def nodeType: Int
SVGRectElement[JC] var nodeValue: String
SVGRectElement[JC] def normalize(): Unit
SVGRectElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGRectElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGRectElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGRectElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGRectElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGRectElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGRectElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGRectElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGRectElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGRectElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGRectElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGRectElement[JC] var onload: js.Function1[Event, _]
SVGRectElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGRectElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGRectElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGRectElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGRectElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGRectElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGRectElement[JC] var outerHTML: String
SVGRectElement[JC] def ownerDocument: Document
SVGRectElement[JC] def ownerSVGElement: SVGSVGElement
SVGRectElement[JC] def parentNode: Node
SVGRectElement[JC] def prefix: String
SVGRectElement[JC] def prepend(nodes: Node | String*): Unit
SVGRectElement[JC] def previousElementSibling: Element
SVGRectElement[JC] def previousSibling: Node
SVGRectElement[JC] def querySelector(selectors: String): Element
SVGRectElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGRectElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGRectElement[JC] def remove(): Unit
SVGRectElement[JC] def removeAttribute(name: String): Unit
SVGRectElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGRectElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGRectElement[JC] def removeChild(oldChild: Node): Node
SVGRectElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGRectElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGRectElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGRectElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGRectElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGRectElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGRectElement[JC] def requestPointerLock(): Unit
SVGRectElement[JC] var requiredExtensions: SVGStringList
SVGRectElement[JC] var requiredFeatures: SVGStringList
SVGRectElement[JC] def rx: SVGAnimatedLength
SVGRectElement[JC] def ry: SVGAnimatedLength
SVGRectElement[JC] def scrollHeight: Int
SVGRectElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGRectElement[JC] var scrollLeft: Double
SVGRectElement[JC] var scrollTop: Double
SVGRectElement[JC] def scrollWidth: Int
SVGRectElement[JC] def setAttribute(name: String, value: String): Unit
SVGRectElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGRectElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGRectElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGRectElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGRectElement[JC] def shadowRoot: ShadowRoot
SVGRectElement[JC] var style: CSSStyleDeclaration
SVGRectElement[JC] var systemLanguage: SVGStringList
SVGRectElement[JC] def tagName: String
SVGRectElement[JC] var textContent: String
SVGRectElement[JC] var transform: SVGAnimatedTransformList
SVGRectElement[JC] def viewportElement: SVGElement
SVGRectElement[JC] def width: SVGAnimatedLength
SVGRectElement[JC] def x: SVGAnimatedLength
SVGRectElement[JC] var xmlbase: String
SVGRectElement[JC] var xmllang: String
SVGRectElement[JC] var xmlspace: String
SVGRectElement[JC] def y: SVGAnimatedLength
SVGSVGElement[JC] var accessKey: String
SVGSVGElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGSVGElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGSVGElement[JC] def after(nodes: Node | String*): Unit
SVGSVGElement[JC] def append(nodes: Node | String*): Unit
SVGSVGElement[JC] def appendChild(newChild: Node): Node
SVGSVGElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGSVGElement[JC] def attributes: NamedNodeMap
SVGSVGElement[JC] def baseURI: String
SVGSVGElement[JC] def before(nodes: Node | String*): Unit
SVGSVGElement[JC] def checkEnclosure(element: SVGElement, rect: SVGRect): Boolean
SVGSVGElement[JC] def checkIntersection(element: SVGElement, rect: SVGRect): Boolean
SVGSVGElement[JC] def childElementCount: Int
SVGSVGElement[JC] def childNodes: NodeList[Node]
SVGSVGElement[JC] def children: HTMLCollection[Element]
SVGSVGElement[JC] var classList: DOMTokenList
SVGSVGElement[JC] var className: SVGAnimatedString
SVGSVGElement[JC] def clientHeight: Int
SVGSVGElement[JC] def clientLeft: Int
SVGSVGElement[JC] def clientTop: Int
SVGSVGElement[JC] def clientWidth: Int
SVGSVGElement[JC] def cloneNode(deep: Boolean?): Node
SVGSVGElement[JC] def closest(selector: String): Element
SVGSVGElement[JC] def compareDocumentPosition(other: Node): Int
SVGSVGElement[JC] def contains(otherNode: Node): Boolean
SVGSVGElement[JC] var contentScriptType: String
SVGSVGElement[JC] var contentStyleType: String
SVGSVGElement[JC] def createEvent(eventInterface: String): Event
SVGSVGElement[JC] def createSVGAngle(): SVGAngle
SVGSVGElement[JC] def createSVGLength(): SVGLength
SVGSVGElement[JC] def createSVGMatrix(): SVGMatrix
SVGSVGElement[JC] def createSVGNumber(): SVGNumber
SVGSVGElement[JC] def createSVGPoint(): SVGPoint
SVGSVGElement[JC] def createSVGRect(): SVGRect
SVGSVGElement[JC] def createSVGTransform(): SVGTransform
SVGSVGElement[JC] def createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform
SVGSVGElement[JC] def currentScale: Double
SVGSVGElement[JC] def currentTranslate: SVGPoint
SVGSVGElement[JC] def deselectAll(): Unit
SVGSVGElement[JC] def dispatchEvent(evt: Event): Boolean
SVGSVGElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGSVGElement[JC] var farthestViewportElement: SVGElement
SVGSVGElement[JC] def firstChild: Node
SVGSVGElement[JC] def firstElementChild: Element
SVGSVGElement[JC] def forceRedraw(): Unit
SVGSVGElement[JC] def getAttribute(name: String): String
SVGSVGElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGSVGElement[JC] def getAttributeNode(name: String): Attr
SVGSVGElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGSVGElement[JC] def getBBox(): SVGRect
SVGSVGElement[JC] def getBoundingClientRect(): DOMRect
SVGSVGElement[JC] def getCTM(): SVGMatrix
SVGSVGElement[JC] def getClientRects(): DOMRectList
SVGSVGElement[JC] def getComputedStyle(elt: Element, pseudoElt: String?): CSSStyleDeclaration
SVGSVGElement[JC] def getCurrentTime(): Int
SVGSVGElement[JC] def getElementById(elementId: String): Element
SVGSVGElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGSVGElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGSVGElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGSVGElement[JC] def getEnclosureList(rect: SVGRect, referenceElement: SVGElement): NodeList[Node]
SVGSVGElement[JC] def getIntersectionList(rect: SVGRect, referenceElement: SVGElement): NodeList[Node]
SVGSVGElement[JC] def getScreenCTM(): SVGMatrix
SVGSVGElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
SVGSVGElement[JC] def hasAttribute(name: String): Boolean
SVGSVGElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGSVGElement[JC] def hasAttributes(): Boolean
SVGSVGElement[JC] def hasChildNodes(): Boolean
SVGSVGElement[JC] def hasExtension(extension: String): Boolean
SVGSVGElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGSVGElement[JC] def height: SVGAnimatedLength
SVGSVGElement[JC] var id: String
SVGSVGElement[JC] var innerHTML: String
SVGSVGElement[JC] var innerText: String
SVGSVGElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGSVGElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGSVGElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGSVGElement[JC] def isConnected: Boolean
SVGSVGElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGSVGElement[JC] def isEqualNode(arg: Node): Boolean
SVGSVGElement[JC] def isSameNode(other: Node): Boolean
SVGSVGElement[JC] def isSupported(feature: String, version: String): Boolean
SVGSVGElement[JC] def lastChild: Node
SVGSVGElement[JC] def lastElementChild: Element
SVGSVGElement[JC] def localName: String
SVGSVGElement[JC] def lookupNamespaceURI(prefix: String): String
SVGSVGElement[JC] def lookupPrefix(namespaceURI: String): String
SVGSVGElement[JC] def matches(selector: String): Boolean
SVGSVGElement[JC] def namespaceURI: String
SVGSVGElement[JC] var nearestViewportElement: SVGElement
SVGSVGElement[JC] def nextElementSibling: Element
SVGSVGElement[JC] def nextSibling: Node
SVGSVGElement[JC] def nodeName: String
SVGSVGElement[JC] def nodeType: Int
SVGSVGElement[JC] var nodeValue: String
SVGSVGElement[JC] def normalize(): Unit
SVGSVGElement[JC] var onabort: js.Function1[UIEvent, _]
SVGSVGElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGSVGElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGSVGElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGSVGElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGSVGElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGSVGElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGSVGElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGSVGElement[JC] var onerror: js.Function1[Event, _]
SVGSVGElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGSVGElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGSVGElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGSVGElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGSVGElement[JC] var onload: js.Function1[Event, _]
SVGSVGElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGSVGElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGSVGElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGSVGElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGSVGElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGSVGElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGSVGElement[JC] var onresize: js.Function1[UIEvent, _]
SVGSVGElement[JC] var onscroll: js.Function1[UIEvent, _]
SVGSVGElement[JC] var onunload: js.Function1[Event, _]
SVGSVGElement[JC] var onzoom: js.Function1[js.Any, _]
SVGSVGElement[JC] var outerHTML: String
SVGSVGElement[JC] def ownerDocument: Document
SVGSVGElement[JC] def ownerSVGElement: SVGSVGElement
SVGSVGElement[JC] def parentNode: Node
SVGSVGElement[JC] def pauseAnimations(): Unit
SVGSVGElement[JC] def pixelUnitToMillimeterX: Double
SVGSVGElement[JC] def pixelUnitToMillimeterY: Double
SVGSVGElement[JC] def prefix: String
SVGSVGElement[JC] def prepend(nodes: Node | String*): Unit
SVGSVGElement[JC] var preserveAspectRatio: SVGAnimatedPreserveAspectRatio
SVGSVGElement[JC] def previousElementSibling: Element
SVGSVGElement[JC] def previousSibling: Node
SVGSVGElement[JC] def querySelector(selectors: String): Element
SVGSVGElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGSVGElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGSVGElement[JC] def remove(): Unit
SVGSVGElement[JC] def removeAttribute(name: String): Unit
SVGSVGElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGSVGElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGSVGElement[JC] def removeChild(oldChild: Node): Node
SVGSVGElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGSVGElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGSVGElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGSVGElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGSVGElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGSVGElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGSVGElement[JC] def requestPointerLock(): Unit
SVGSVGElement[JC] var requiredExtensions: SVGStringList
SVGSVGElement[JC] var requiredFeatures: SVGStringList
SVGSVGElement[JC] def screenPixelToMillimeterX: Double
SVGSVGElement[JC] def screenPixelToMillimeterY: Double
SVGSVGElement[JC] def scrollHeight: Int
SVGSVGElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGSVGElement[JC] var scrollLeft: Double
SVGSVGElement[JC] var scrollTop: Double
SVGSVGElement[JC] def scrollWidth: Int
SVGSVGElement[JC] def setAttribute(name: String, value: String): Unit
SVGSVGElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGSVGElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGSVGElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGSVGElement[JC] def setCurrentTime(seconds: Double): Unit
SVGSVGElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGSVGElement[JC] def shadowRoot: ShadowRoot
SVGSVGElement[JC] var style: CSSStyleDeclaration
SVGSVGElement[JC] def suspendRedraw(maxWaitMilliseconds: Int): Int
SVGSVGElement[JC] var systemLanguage: SVGStringList
SVGSVGElement[JC] def tagName: String
SVGSVGElement[JC] var textContent: String
SVGSVGElement[JC] def unpauseAnimations(): Unit
SVGSVGElement[JC] def unsuspendRedraw(suspendHandleID: Int): Unit
SVGSVGElement[JC] def unsuspendRedrawAll(): Unit
SVGSVGElement[JC] var viewBox: SVGAnimatedRect
SVGSVGElement[JC] def viewport: SVGRect
SVGSVGElement[JC] def viewportElement: SVGElement
SVGSVGElement[JC] def width: SVGAnimatedLength
SVGSVGElement[JC] def x: SVGAnimatedLength
SVGSVGElement[JC] var xmlbase: String
SVGSVGElement[JC] var xmllang: String
SVGSVGElement[JC] var xmlspace: String
SVGSVGElement[JC] def y: SVGAnimatedLength
SVGSVGElement[JC] var zoomAndPan: Int
SVGScriptElement[JC] var accessKey: String
SVGScriptElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGScriptElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGScriptElement[JC] def after(nodes: Node | String*): Unit
SVGScriptElement[JC] def append(nodes: Node | String*): Unit
SVGScriptElement[JC] def appendChild(newChild: Node): Node
SVGScriptElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGScriptElement[JC] def attributes: NamedNodeMap
SVGScriptElement[JC] def baseURI: String
SVGScriptElement[JC] def before(nodes: Node | String*): Unit
SVGScriptElement[JC] def childElementCount: Int
SVGScriptElement[JC] def childNodes: NodeList[Node]
SVGScriptElement[JC] def children: HTMLCollection[Element]
SVGScriptElement[JC] var classList: DOMTokenList
SVGScriptElement[JC] def clientHeight: Int
SVGScriptElement[JC] def clientLeft: Int
SVGScriptElement[JC] def clientTop: Int
SVGScriptElement[JC] def clientWidth: Int
SVGScriptElement[JC] def cloneNode(deep: Boolean?): Node
SVGScriptElement[JC] def closest(selector: String): Element
SVGScriptElement[JC] def compareDocumentPosition(other: Node): Int
SVGScriptElement[JC] def contains(otherNode: Node): Boolean
SVGScriptElement[JC] def dispatchEvent(evt: Event): Boolean
SVGScriptElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGScriptElement[JC] def firstChild: Node
SVGScriptElement[JC] def firstElementChild: Element
SVGScriptElement[JC] def getAttribute(name: String): String
SVGScriptElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGScriptElement[JC] def getAttributeNode(name: String): Attr
SVGScriptElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGScriptElement[JC] def getBoundingClientRect(): DOMRect
SVGScriptElement[JC] def getClientRects(): DOMRectList
SVGScriptElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGScriptElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGScriptElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGScriptElement[JC] def hasAttribute(name: String): Boolean
SVGScriptElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGScriptElement[JC] def hasAttributes(): Boolean
SVGScriptElement[JC] def hasChildNodes(): Boolean
SVGScriptElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGScriptElement[JC] var href: SVGAnimatedString
SVGScriptElement[JC] var id: String
SVGScriptElement[JC] var innerHTML: String
SVGScriptElement[JC] var innerText: String
SVGScriptElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGScriptElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGScriptElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGScriptElement[JC] def isConnected: Boolean
SVGScriptElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGScriptElement[JC] def isEqualNode(arg: Node): Boolean
SVGScriptElement[JC] def isSameNode(other: Node): Boolean
SVGScriptElement[JC] def isSupported(feature: String, version: String): Boolean
SVGScriptElement[JC] def lastChild: Node
SVGScriptElement[JC] def lastElementChild: Element
SVGScriptElement[JC] def localName: String
SVGScriptElement[JC] def lookupNamespaceURI(prefix: String): String
SVGScriptElement[JC] def lookupPrefix(namespaceURI: String): String
SVGScriptElement[JC] def matches(selector: String): Boolean
SVGScriptElement[JC] def namespaceURI: String
SVGScriptElement[JC] def nextElementSibling: Element
SVGScriptElement[JC] def nextSibling: Node
SVGScriptElement[JC] def nodeName: String
SVGScriptElement[JC] def nodeType: Int
SVGScriptElement[JC] var nodeValue: String
SVGScriptElement[JC] def normalize(): Unit
SVGScriptElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGScriptElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGScriptElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGScriptElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGScriptElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGScriptElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGScriptElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGScriptElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGScriptElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGScriptElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGScriptElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGScriptElement[JC] var onload: js.Function1[Event, _]
SVGScriptElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGScriptElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGScriptElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGScriptElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGScriptElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGScriptElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGScriptElement[JC] var outerHTML: String
SVGScriptElement[JC] def ownerDocument: Document
SVGScriptElement[JC] def ownerSVGElement: SVGSVGElement
SVGScriptElement[JC] def parentNode: Node
SVGScriptElement[JC] def prefix: String
SVGScriptElement[JC] def prepend(nodes: Node | String*): Unit
SVGScriptElement[JC] def previousElementSibling: Element
SVGScriptElement[JC] def previousSibling: Node
SVGScriptElement[JC] def querySelector(selectors: String): Element
SVGScriptElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGScriptElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGScriptElement[JC] def remove(): Unit
SVGScriptElement[JC] def removeAttribute(name: String): Unit
SVGScriptElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGScriptElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGScriptElement[JC] def removeChild(oldChild: Node): Node
SVGScriptElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGScriptElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGScriptElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGScriptElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGScriptElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGScriptElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGScriptElement[JC] def requestPointerLock(): Unit
SVGScriptElement[JC] def scrollHeight: Int
SVGScriptElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGScriptElement[JC] var scrollLeft: Double
SVGScriptElement[JC] var scrollTop: Double
SVGScriptElement[JC] def scrollWidth: Int
SVGScriptElement[JC] def setAttribute(name: String, value: String): Unit
SVGScriptElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGScriptElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGScriptElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGScriptElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGScriptElement[JC] def shadowRoot: ShadowRoot
SVGScriptElement[JC] def tagName: String
SVGScriptElement[JC] var textContent: String
SVGScriptElement[JC] def `type`: String
SVGScriptElement[JC] def viewportElement: SVGElement
SVGScriptElement[JC] var xmlbase: String
SVGStopElement[JC] var accessKey: String
SVGStopElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGStopElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGStopElement[JC] def after(nodes: Node | String*): Unit
SVGStopElement[JC] def append(nodes: Node | String*): Unit
SVGStopElement[JC] def appendChild(newChild: Node): Node
SVGStopElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGStopElement[JC] def attributes: NamedNodeMap
SVGStopElement[JC] def baseURI: String
SVGStopElement[JC] def before(nodes: Node | String*): Unit
SVGStopElement[JC] def childElementCount: Int
SVGStopElement[JC] def childNodes: NodeList[Node]
SVGStopElement[JC] def children: HTMLCollection[Element]
SVGStopElement[JC] var classList: DOMTokenList
SVGStopElement[JC] var className: SVGAnimatedString
SVGStopElement[JC] def clientHeight: Int
SVGStopElement[JC] def clientLeft: Int
SVGStopElement[JC] def clientTop: Int
SVGStopElement[JC] def clientWidth: Int
SVGStopElement[JC] def cloneNode(deep: Boolean?): Node
SVGStopElement[JC] def closest(selector: String): Element
SVGStopElement[JC] def compareDocumentPosition(other: Node): Int
SVGStopElement[JC] def contains(otherNode: Node): Boolean
SVGStopElement[JC] def dispatchEvent(evt: Event): Boolean
SVGStopElement[JC] def firstChild: Node
SVGStopElement[JC] def firstElementChild: Element
SVGStopElement[JC] def getAttribute(name: String): String
SVGStopElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGStopElement[JC] def getAttributeNode(name: String): Attr
SVGStopElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGStopElement[JC] def getBoundingClientRect(): DOMRect
SVGStopElement[JC] def getClientRects(): DOMRectList
SVGStopElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGStopElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGStopElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGStopElement[JC] def hasAttribute(name: String): Boolean
SVGStopElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGStopElement[JC] def hasAttributes(): Boolean
SVGStopElement[JC] def hasChildNodes(): Boolean
SVGStopElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGStopElement[JC] var id: String
SVGStopElement[JC] var innerHTML: String
SVGStopElement[JC] var innerText: String
SVGStopElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGStopElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGStopElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGStopElement[JC] def isConnected: Boolean
SVGStopElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGStopElement[JC] def isEqualNode(arg: Node): Boolean
SVGStopElement[JC] def isSameNode(other: Node): Boolean
SVGStopElement[JC] def isSupported(feature: String, version: String): Boolean
SVGStopElement[JC] def lastChild: Node
SVGStopElement[JC] def lastElementChild: Element
SVGStopElement[JC] def localName: String
SVGStopElement[JC] def lookupNamespaceURI(prefix: String): String
SVGStopElement[JC] def lookupPrefix(namespaceURI: String): String
SVGStopElement[JC] def matches(selector: String): Boolean
SVGStopElement[JC] def namespaceURI: String
SVGStopElement[JC] def nextElementSibling: Element
SVGStopElement[JC] def nextSibling: Node
SVGStopElement[JC] def nodeName: String
SVGStopElement[JC] def nodeType: Int
SVGStopElement[JC] var nodeValue: String
SVGStopElement[JC] def normalize(): Unit
SVGStopElement[JC] var offset: SVGAnimatedNumber
SVGStopElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGStopElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGStopElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGStopElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGStopElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGStopElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGStopElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGStopElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGStopElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGStopElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGStopElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGStopElement[JC] var onload: js.Function1[Event, _]
SVGStopElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGStopElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGStopElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGStopElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGStopElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGStopElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGStopElement[JC] var outerHTML: String
SVGStopElement[JC] def ownerDocument: Document
SVGStopElement[JC] def ownerSVGElement: SVGSVGElement
SVGStopElement[JC] def parentNode: Node
SVGStopElement[JC] def prefix: String
SVGStopElement[JC] def prepend(nodes: Node | String*): Unit
SVGStopElement[JC] def previousElementSibling: Element
SVGStopElement[JC] def previousSibling: Node
SVGStopElement[JC] def querySelector(selectors: String): Element
SVGStopElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGStopElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGStopElement[JC] def remove(): Unit
SVGStopElement[JC] def removeAttribute(name: String): Unit
SVGStopElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGStopElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGStopElement[JC] def removeChild(oldChild: Node): Node
SVGStopElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGStopElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGStopElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGStopElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGStopElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGStopElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGStopElement[JC] def requestPointerLock(): Unit
SVGStopElement[JC] def scrollHeight: Int
SVGStopElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGStopElement[JC] var scrollLeft: Double
SVGStopElement[JC] var scrollTop: Double
SVGStopElement[JC] def scrollWidth: Int
SVGStopElement[JC] def setAttribute(name: String, value: String): Unit
SVGStopElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGStopElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGStopElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGStopElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGStopElement[JC] def shadowRoot: ShadowRoot
SVGStopElement[JC] var style: CSSStyleDeclaration
SVGStopElement[JC] def tagName: String
SVGStopElement[JC] var textContent: String
SVGStopElement[JC] def viewportElement: SVGElement
SVGStopElement[JC] var xmlbase: String
SVGStringList[JC] def appendItem(newItem: String): String
SVGStringList[JC] def clear(): Unit
SVGStringList[JC] def getItem(index: Int): String
SVGStringList[JC] def initialize(newItem: String): String
SVGStringList[JC] def insertItemBefore(newItem: String, index: Int): String
SVGStringList[JC] def numberOfItems: Int
SVGStringList[JC] def removeItem(index: Int): String
SVGStringList[JC] def replaceItem(newItem: String, index: Int): String
SVGStylable[JT] var className: SVGAnimatedString
SVGStylable[JT] var style: CSSStyleDeclaration
SVGStyleElement[JC] var accessKey: String
SVGStyleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGStyleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGStyleElement[JC] def after(nodes: Node | String*): Unit
SVGStyleElement[JC] def append(nodes: Node | String*): Unit
SVGStyleElement[JC] def appendChild(newChild: Node): Node
SVGStyleElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGStyleElement[JC] def attributes: NamedNodeMap
SVGStyleElement[JC] def baseURI: String
SVGStyleElement[JC] def before(nodes: Node | String*): Unit
SVGStyleElement[JC] def childElementCount: Int
SVGStyleElement[JC] def childNodes: NodeList[Node]
SVGStyleElement[JC] def children: HTMLCollection[Element]
SVGStyleElement[JC] var classList: DOMTokenList
SVGStyleElement[JC] def clientHeight: Int
SVGStyleElement[JC] def clientLeft: Int
SVGStyleElement[JC] def clientTop: Int
SVGStyleElement[JC] def clientWidth: Int
SVGStyleElement[JC] def cloneNode(deep: Boolean?): Node
SVGStyleElement[JC] def closest(selector: String): Element
SVGStyleElement[JC] def compareDocumentPosition(other: Node): Int
SVGStyleElement[JC] def contains(otherNode: Node): Boolean
SVGStyleElement[JC] def dispatchEvent(evt: Event): Boolean
SVGStyleElement[JC] def firstChild: Node
SVGStyleElement[JC] def firstElementChild: Element
SVGStyleElement[JC] def getAttribute(name: String): String
SVGStyleElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGStyleElement[JC] def getAttributeNode(name: String): Attr
SVGStyleElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGStyleElement[JC] def getBoundingClientRect(): DOMRect
SVGStyleElement[JC] def getClientRects(): DOMRectList
SVGStyleElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGStyleElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGStyleElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGStyleElement[JC] def hasAttribute(name: String): Boolean
SVGStyleElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGStyleElement[JC] def hasAttributes(): Boolean
SVGStyleElement[JC] def hasChildNodes(): Boolean
SVGStyleElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGStyleElement[JC] var id: String
SVGStyleElement[JC] var innerHTML: String
SVGStyleElement[JC] var innerText: String
SVGStyleElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGStyleElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGStyleElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGStyleElement[JC] def isConnected: Boolean
SVGStyleElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGStyleElement[JC] def isEqualNode(arg: Node): Boolean
SVGStyleElement[JC] def isSameNode(other: Node): Boolean
SVGStyleElement[JC] def isSupported(feature: String, version: String): Boolean
SVGStyleElement[JC] def lastChild: Node
SVGStyleElement[JC] def lastElementChild: Element
SVGStyleElement[JC] def localName: String
SVGStyleElement[JC] def lookupNamespaceURI(prefix: String): String
SVGStyleElement[JC] def lookupPrefix(namespaceURI: String): String
SVGStyleElement[JC] def matches(selector: String): Boolean
SVGStyleElement[JC] var media: String
SVGStyleElement[JC] def namespaceURI: String
SVGStyleElement[JC] def nextElementSibling: Element
SVGStyleElement[JC] def nextSibling: Node
SVGStyleElement[JC] def nodeName: String
SVGStyleElement[JC] def nodeType: Int
SVGStyleElement[JC] var nodeValue: String
SVGStyleElement[JC] def normalize(): Unit
SVGStyleElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGStyleElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGStyleElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGStyleElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGStyleElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGStyleElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGStyleElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGStyleElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGStyleElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGStyleElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGStyleElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGStyleElement[JC] var onload: js.Function1[Event, _]
SVGStyleElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGStyleElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGStyleElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGStyleElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGStyleElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGStyleElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGStyleElement[JC] var outerHTML: String
SVGStyleElement[JC] def ownerDocument: Document
SVGStyleElement[JC] def ownerSVGElement: SVGSVGElement
SVGStyleElement[JC] def parentNode: Node
SVGStyleElement[JC] def prefix: String
SVGStyleElement[JC] def prepend(nodes: Node | String*): Unit
SVGStyleElement[JC] def previousElementSibling: Element
SVGStyleElement[JC] def previousSibling: Node
SVGStyleElement[JC] def querySelector(selectors: String): Element
SVGStyleElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGStyleElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGStyleElement[JC] def remove(): Unit
SVGStyleElement[JC] def removeAttribute(name: String): Unit
SVGStyleElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGStyleElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGStyleElement[JC] def removeChild(oldChild: Node): Node
SVGStyleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGStyleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGStyleElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGStyleElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGStyleElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGStyleElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGStyleElement[JC] def requestPointerLock(): Unit
SVGStyleElement[JC] def scrollHeight: Int
SVGStyleElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGStyleElement[JC] var scrollLeft: Double
SVGStyleElement[JC] var scrollTop: Double
SVGStyleElement[JC] def scrollWidth: Int
SVGStyleElement[JC] def setAttribute(name: String, value: String): Unit
SVGStyleElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGStyleElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGStyleElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGStyleElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGStyleElement[JC] def shadowRoot: ShadowRoot
SVGStyleElement[JC] def tagName: String
SVGStyleElement[JC] var textContent: String
SVGStyleElement[JC] var title: String
SVGStyleElement[JC] def `type`: String
SVGStyleElement[JC] def viewportElement: SVGElement
SVGStyleElement[JC] var xmlbase: String
SVGStyleElement[JC] var xmllang: String
SVGStyleElement[JC] var xmlspace: String
SVGSwitchElement[JC] var accessKey: String
SVGSwitchElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGSwitchElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGSwitchElement[JC] def after(nodes: Node | String*): Unit
SVGSwitchElement[JC] def append(nodes: Node | String*): Unit
SVGSwitchElement[JC] def appendChild(newChild: Node): Node
SVGSwitchElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGSwitchElement[JC] def attributes: NamedNodeMap
SVGSwitchElement[JC] def baseURI: String
SVGSwitchElement[JC] def before(nodes: Node | String*): Unit
SVGSwitchElement[JC] def childElementCount: Int
SVGSwitchElement[JC] def childNodes: NodeList[Node]
SVGSwitchElement[JC] def children: HTMLCollection[Element]
SVGSwitchElement[JC] var classList: DOMTokenList
SVGSwitchElement[JC] var className: SVGAnimatedString
SVGSwitchElement[JC] def clientHeight: Int
SVGSwitchElement[JC] def clientLeft: Int
SVGSwitchElement[JC] def clientTop: Int
SVGSwitchElement[JC] def clientWidth: Int
SVGSwitchElement[JC] def cloneNode(deep: Boolean?): Node
SVGSwitchElement[JC] def closest(selector: String): Element
SVGSwitchElement[JC] def compareDocumentPosition(other: Node): Int
SVGSwitchElement[JC] def contains(otherNode: Node): Boolean
SVGSwitchElement[JC] def dispatchEvent(evt: Event): Boolean
SVGSwitchElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGSwitchElement[JC] var farthestViewportElement: SVGElement
SVGSwitchElement[JC] def firstChild: Node
SVGSwitchElement[JC] def firstElementChild: Element
SVGSwitchElement[JC] def getAttribute(name: String): String
SVGSwitchElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGSwitchElement[JC] def getAttributeNode(name: String): Attr
SVGSwitchElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGSwitchElement[JC] def getBBox(): SVGRect
SVGSwitchElement[JC] def getBoundingClientRect(): DOMRect
SVGSwitchElement[JC] def getCTM(): SVGMatrix
SVGSwitchElement[JC] def getClientRects(): DOMRectList
SVGSwitchElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGSwitchElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGSwitchElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGSwitchElement[JC] def getScreenCTM(): SVGMatrix
SVGSwitchElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
SVGSwitchElement[JC] def hasAttribute(name: String): Boolean
SVGSwitchElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGSwitchElement[JC] def hasAttributes(): Boolean
SVGSwitchElement[JC] def hasChildNodes(): Boolean
SVGSwitchElement[JC] def hasExtension(extension: String): Boolean
SVGSwitchElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGSwitchElement[JC] var id: String
SVGSwitchElement[JC] var innerHTML: String
SVGSwitchElement[JC] var innerText: String
SVGSwitchElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGSwitchElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGSwitchElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGSwitchElement[JC] def isConnected: Boolean
SVGSwitchElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGSwitchElement[JC] def isEqualNode(arg: Node): Boolean
SVGSwitchElement[JC] def isSameNode(other: Node): Boolean
SVGSwitchElement[JC] def isSupported(feature: String, version: String): Boolean
SVGSwitchElement[JC] def lastChild: Node
SVGSwitchElement[JC] def lastElementChild: Element
SVGSwitchElement[JC] def localName: String
SVGSwitchElement[JC] def lookupNamespaceURI(prefix: String): String
SVGSwitchElement[JC] def lookupPrefix(namespaceURI: String): String
SVGSwitchElement[JC] def matches(selector: String): Boolean
SVGSwitchElement[JC] def namespaceURI: String
SVGSwitchElement[JC] var nearestViewportElement: SVGElement
SVGSwitchElement[JC] def nextElementSibling: Element
SVGSwitchElement[JC] def nextSibling: Node
SVGSwitchElement[JC] def nodeName: String
SVGSwitchElement[JC] def nodeType: Int
SVGSwitchElement[JC] var nodeValue: String
SVGSwitchElement[JC] def normalize(): Unit
SVGSwitchElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGSwitchElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGSwitchElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGSwitchElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGSwitchElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGSwitchElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGSwitchElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGSwitchElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGSwitchElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGSwitchElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGSwitchElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGSwitchElement[JC] var onload: js.Function1[Event, _]
SVGSwitchElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGSwitchElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGSwitchElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGSwitchElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGSwitchElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGSwitchElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGSwitchElement[JC] var outerHTML: String
SVGSwitchElement[JC] def ownerDocument: Document
SVGSwitchElement[JC] def ownerSVGElement: SVGSVGElement
SVGSwitchElement[JC] def parentNode: Node
SVGSwitchElement[JC] def prefix: String
SVGSwitchElement[JC] def prepend(nodes: Node | String*): Unit
SVGSwitchElement[JC] def previousElementSibling: Element
SVGSwitchElement[JC] def previousSibling: Node
SVGSwitchElement[JC] def querySelector(selectors: String): Element
SVGSwitchElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGSwitchElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGSwitchElement[JC] def remove(): Unit
SVGSwitchElement[JC] def removeAttribute(name: String): Unit
SVGSwitchElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGSwitchElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGSwitchElement[JC] def removeChild(oldChild: Node): Node
SVGSwitchElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGSwitchElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGSwitchElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGSwitchElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGSwitchElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGSwitchElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGSwitchElement[JC] def requestPointerLock(): Unit
SVGSwitchElement[JC] var requiredExtensions: SVGStringList
SVGSwitchElement[JC] var requiredFeatures: SVGStringList
SVGSwitchElement[JC] def scrollHeight: Int
SVGSwitchElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGSwitchElement[JC] var scrollLeft: Double
SVGSwitchElement[JC] var scrollTop: Double
SVGSwitchElement[JC] def scrollWidth: Int
SVGSwitchElement[JC] def setAttribute(name: String, value: String): Unit
SVGSwitchElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGSwitchElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGSwitchElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGSwitchElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGSwitchElement[JC] def shadowRoot: ShadowRoot
SVGSwitchElement[JC] var style: CSSStyleDeclaration
SVGSwitchElement[JC] var systemLanguage: SVGStringList
SVGSwitchElement[JC] def tagName: String
SVGSwitchElement[JC] var textContent: String
SVGSwitchElement[JC] var transform: SVGAnimatedTransformList
SVGSwitchElement[JC] def viewportElement: SVGElement
SVGSwitchElement[JC] var xmlbase: String
SVGSwitchElement[JC] var xmllang: String
SVGSwitchElement[JC] var xmlspace: String
SVGSymbolElement[JC] var accessKey: String
SVGSymbolElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGSymbolElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGSymbolElement[JC] def after(nodes: Node | String*): Unit
SVGSymbolElement[JC] def append(nodes: Node | String*): Unit
SVGSymbolElement[JC] def appendChild(newChild: Node): Node
SVGSymbolElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGSymbolElement[JC] def attributes: NamedNodeMap
SVGSymbolElement[JC] def baseURI: String
SVGSymbolElement[JC] def before(nodes: Node | String*): Unit
SVGSymbolElement[JC] def childElementCount: Int
SVGSymbolElement[JC] def childNodes: NodeList[Node]
SVGSymbolElement[JC] def children: HTMLCollection[Element]
SVGSymbolElement[JC] var classList: DOMTokenList
SVGSymbolElement[JC] var className: SVGAnimatedString
SVGSymbolElement[JC] def clientHeight: Int
SVGSymbolElement[JC] def clientLeft: Int
SVGSymbolElement[JC] def clientTop: Int
SVGSymbolElement[JC] def clientWidth: Int
SVGSymbolElement[JC] def cloneNode(deep: Boolean?): Node
SVGSymbolElement[JC] def closest(selector: String): Element
SVGSymbolElement[JC] def compareDocumentPosition(other: Node): Int
SVGSymbolElement[JC] def contains(otherNode: Node): Boolean
SVGSymbolElement[JC] def dispatchEvent(evt: Event): Boolean
SVGSymbolElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGSymbolElement[JC] def firstChild: Node
SVGSymbolElement[JC] def firstElementChild: Element
SVGSymbolElement[JC] def getAttribute(name: String): String
SVGSymbolElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGSymbolElement[JC] def getAttributeNode(name: String): Attr
SVGSymbolElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGSymbolElement[JC] def getBoundingClientRect(): DOMRect
SVGSymbolElement[JC] def getClientRects(): DOMRectList
SVGSymbolElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGSymbolElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGSymbolElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGSymbolElement[JC] def hasAttribute(name: String): Boolean
SVGSymbolElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGSymbolElement[JC] def hasAttributes(): Boolean
SVGSymbolElement[JC] def hasChildNodes(): Boolean
SVGSymbolElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGSymbolElement[JC] var id: String
SVGSymbolElement[JC] var innerHTML: String
SVGSymbolElement[JC] var innerText: String
SVGSymbolElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGSymbolElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGSymbolElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGSymbolElement[JC] def isConnected: Boolean
SVGSymbolElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGSymbolElement[JC] def isEqualNode(arg: Node): Boolean
SVGSymbolElement[JC] def isSameNode(other: Node): Boolean
SVGSymbolElement[JC] def isSupported(feature: String, version: String): Boolean
SVGSymbolElement[JC] def lastChild: Node
SVGSymbolElement[JC] def lastElementChild: Element
SVGSymbolElement[JC] def localName: String
SVGSymbolElement[JC] def lookupNamespaceURI(prefix: String): String
SVGSymbolElement[JC] def lookupPrefix(namespaceURI: String): String
SVGSymbolElement[JC] def matches(selector: String): Boolean
SVGSymbolElement[JC] def namespaceURI: String
SVGSymbolElement[JC] def nextElementSibling: Element
SVGSymbolElement[JC] def nextSibling: Node
SVGSymbolElement[JC] def nodeName: String
SVGSymbolElement[JC] def nodeType: Int
SVGSymbolElement[JC] var nodeValue: String
SVGSymbolElement[JC] def normalize(): Unit
SVGSymbolElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGSymbolElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGSymbolElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGSymbolElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGSymbolElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGSymbolElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGSymbolElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGSymbolElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGSymbolElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGSymbolElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGSymbolElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGSymbolElement[JC] var onload: js.Function1[Event, _]
SVGSymbolElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGSymbolElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGSymbolElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGSymbolElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGSymbolElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGSymbolElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGSymbolElement[JC] var outerHTML: String
SVGSymbolElement[JC] def ownerDocument: Document
SVGSymbolElement[JC] def ownerSVGElement: SVGSVGElement
SVGSymbolElement[JC] def parentNode: Node
SVGSymbolElement[JC] def prefix: String
SVGSymbolElement[JC] def prepend(nodes: Node | String*): Unit
SVGSymbolElement[JC] var preserveAspectRatio: SVGAnimatedPreserveAspectRatio
SVGSymbolElement[JC] def previousElementSibling: Element
SVGSymbolElement[JC] def previousSibling: Node
SVGSymbolElement[JC] def querySelector(selectors: String): Element
SVGSymbolElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGSymbolElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGSymbolElement[JC] def remove(): Unit
SVGSymbolElement[JC] def removeAttribute(name: String): Unit
SVGSymbolElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGSymbolElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGSymbolElement[JC] def removeChild(oldChild: Node): Node
SVGSymbolElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGSymbolElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGSymbolElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGSymbolElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGSymbolElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGSymbolElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGSymbolElement[JC] def requestPointerLock(): Unit
SVGSymbolElement[JC] def scrollHeight: Int
SVGSymbolElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGSymbolElement[JC] var scrollLeft: Double
SVGSymbolElement[JC] var scrollTop: Double
SVGSymbolElement[JC] def scrollWidth: Int
SVGSymbolElement[JC] def setAttribute(name: String, value: String): Unit
SVGSymbolElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGSymbolElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGSymbolElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGSymbolElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGSymbolElement[JC] def shadowRoot: ShadowRoot
SVGSymbolElement[JC] var style: CSSStyleDeclaration
SVGSymbolElement[JC] def tagName: String
SVGSymbolElement[JC] var textContent: String
SVGSymbolElement[JC] var viewBox: SVGAnimatedRect
SVGSymbolElement[JC] def viewportElement: SVGElement
SVGSymbolElement[JC] var xmlbase: String
SVGSymbolElement[JC] var xmllang: String
SVGSymbolElement[JC] var xmlspace: String
SVGTSpanElement[JC] var accessKey: String
SVGTSpanElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGTSpanElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGTSpanElement[JC] def after(nodes: Node | String*): Unit
SVGTSpanElement[JC] def append(nodes: Node | String*): Unit
SVGTSpanElement[JC] def appendChild(newChild: Node): Node
SVGTSpanElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGTSpanElement[JC] def attributes: NamedNodeMap
SVGTSpanElement[JC] def baseURI: String
SVGTSpanElement[JC] def before(nodes: Node | String*): Unit
SVGTSpanElement[JC] def childElementCount: Int
SVGTSpanElement[JC] def childNodes: NodeList[Node]
SVGTSpanElement[JC] def children: HTMLCollection[Element]
SVGTSpanElement[JC] var classList: DOMTokenList
SVGTSpanElement[JC] var className: SVGAnimatedString
SVGTSpanElement[JC] def clientHeight: Int
SVGTSpanElement[JC] def clientLeft: Int
SVGTSpanElement[JC] def clientTop: Int
SVGTSpanElement[JC] def clientWidth: Int
SVGTSpanElement[JC] def cloneNode(deep: Boolean?): Node
SVGTSpanElement[JC] def closest(selector: String): Element
SVGTSpanElement[JC] def compareDocumentPosition(other: Node): Int
SVGTSpanElement[JC] def contains(otherNode: Node): Boolean
SVGTSpanElement[JC] def dispatchEvent(evt: Event): Boolean
SVGTSpanElement[JC] def dx: SVGAnimatedLengthList
SVGTSpanElement[JC] def dy: SVGAnimatedLengthList
SVGTSpanElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGTSpanElement[JC] def firstChild: Node
SVGTSpanElement[JC] def firstElementChild: Element
SVGTSpanElement[JC] def getAttribute(name: String): String
SVGTSpanElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGTSpanElement[JC] def getAttributeNode(name: String): Attr
SVGTSpanElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGTSpanElement[JC] def getBoundingClientRect(): DOMRect
SVGTSpanElement[JC] def getCharNumAtPosition(point: SVGPoint): Int
SVGTSpanElement[JC] def getClientRects(): DOMRectList
SVGTSpanElement[JC] def getComputedTextLength(): Double
SVGTSpanElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGTSpanElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGTSpanElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGTSpanElement[JC] def getEndPositionOfChar(charnum: Int): SVGPoint
SVGTSpanElement[JC] def getExtentOfChar(charnum: Int): SVGRect
SVGTSpanElement[JC] def getNumberOfChars(): Int
SVGTSpanElement[JC] def getRotationOfChar(charnum: Int): Double
SVGTSpanElement[JC] def getStartPositionOfChar(charnum: Int): SVGPoint
SVGTSpanElement[JC] def getSubStringLength(charnum: Int, nchars: Int): Double
SVGTSpanElement[JC] def hasAttribute(name: String): Boolean
SVGTSpanElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGTSpanElement[JC] def hasAttributes(): Boolean
SVGTSpanElement[JC] def hasChildNodes(): Boolean
SVGTSpanElement[JC] def hasExtension(extension: String): Boolean
SVGTSpanElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGTSpanElement[JC] var id: String
SVGTSpanElement[JC] var innerHTML: String
SVGTSpanElement[JC] var innerText: String
SVGTSpanElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGTSpanElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGTSpanElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGTSpanElement[JC] def isConnected: Boolean
SVGTSpanElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGTSpanElement[JC] def isEqualNode(arg: Node): Boolean
SVGTSpanElement[JC] def isSameNode(other: Node): Boolean
SVGTSpanElement[JC] def isSupported(feature: String, version: String): Boolean
SVGTSpanElement[JC] def lastChild: Node
SVGTSpanElement[JC] def lastElementChild: Element
SVGTSpanElement[JC] def lengthAdjust: SVGAnimatedEnumeration
SVGTSpanElement[JC] def localName: String
SVGTSpanElement[JC] def lookupNamespaceURI(prefix: String): String
SVGTSpanElement[JC] def lookupPrefix(namespaceURI: String): String
SVGTSpanElement[JC] def matches(selector: String): Boolean
SVGTSpanElement[JC] def namespaceURI: String
SVGTSpanElement[JC] def nextElementSibling: Element
SVGTSpanElement[JC] def nextSibling: Node
SVGTSpanElement[JC] def nodeName: String
SVGTSpanElement[JC] def nodeType: Int
SVGTSpanElement[JC] var nodeValue: String
SVGTSpanElement[JC] def normalize(): Unit
SVGTSpanElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGTSpanElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGTSpanElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGTSpanElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGTSpanElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGTSpanElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGTSpanElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGTSpanElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGTSpanElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGTSpanElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGTSpanElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGTSpanElement[JC] var onload: js.Function1[Event, _]
SVGTSpanElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGTSpanElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGTSpanElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGTSpanElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGTSpanElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGTSpanElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGTSpanElement[JC] var outerHTML: String
SVGTSpanElement[JC] def ownerDocument: Document
SVGTSpanElement[JC] def ownerSVGElement: SVGSVGElement
SVGTSpanElement[JC] def parentNode: Node
SVGTSpanElement[JC] def prefix: String
SVGTSpanElement[JC] def prepend(nodes: Node | String*): Unit
SVGTSpanElement[JC] def previousElementSibling: Element
SVGTSpanElement[JC] def previousSibling: Node
SVGTSpanElement[JC] def querySelector(selectors: String): Element
SVGTSpanElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGTSpanElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGTSpanElement[JC] def remove(): Unit
SVGTSpanElement[JC] def removeAttribute(name: String): Unit
SVGTSpanElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGTSpanElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGTSpanElement[JC] def removeChild(oldChild: Node): Node
SVGTSpanElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGTSpanElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGTSpanElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGTSpanElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGTSpanElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGTSpanElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGTSpanElement[JC] def requestPointerLock(): Unit
SVGTSpanElement[JC] var requiredExtensions: SVGStringList
SVGTSpanElement[JC] var requiredFeatures: SVGStringList
SVGTSpanElement[JC] def rotate: SVGAnimatedNumberList
SVGTSpanElement[JC] def scrollHeight: Int
SVGTSpanElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGTSpanElement[JC] var scrollLeft: Double
SVGTSpanElement[JC] var scrollTop: Double
SVGTSpanElement[JC] def scrollWidth: Int
SVGTSpanElement[JC] def selectSubString(charnum: Int, nchars: Int): Unit
SVGTSpanElement[JC] def setAttribute(name: String, value: String): Unit
SVGTSpanElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGTSpanElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGTSpanElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGTSpanElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGTSpanElement[JC] def shadowRoot: ShadowRoot
SVGTSpanElement[JC] var style: CSSStyleDeclaration
SVGTSpanElement[JC] var systemLanguage: SVGStringList
SVGTSpanElement[JC] def tagName: String
SVGTSpanElement[JC] var textContent: String
SVGTSpanElement[JC] def textLength: SVGAnimatedLength
SVGTSpanElement[JC] def viewportElement: SVGElement
SVGTSpanElement[JC] def x: SVGAnimatedLengthList
SVGTSpanElement[JC] var xmlbase: String
SVGTSpanElement[JC] var xmllang: String
SVGTSpanElement[JC] var xmlspace: String
SVGTSpanElement[JC] def y: SVGAnimatedLengthList
SVGTests[JT] def hasExtension(extension: String): Boolean
SVGTests[JT] var requiredExtensions: SVGStringList
SVGTests[JT] var requiredFeatures: SVGStringList
SVGTests[JT] var systemLanguage: SVGStringList
SVGTextContentElement[JC] var accessKey: String
SVGTextContentElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGTextContentElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGTextContentElement[JC] def after(nodes: Node | String*): Unit
SVGTextContentElement[JC] def append(nodes: Node | String*): Unit
SVGTextContentElement[JC] def appendChild(newChild: Node): Node
SVGTextContentElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGTextContentElement[JC] def attributes: NamedNodeMap
SVGTextContentElement[JC] def baseURI: String
SVGTextContentElement[JC] def before(nodes: Node | String*): Unit
SVGTextContentElement[JC] def childElementCount: Int
SVGTextContentElement[JC] def childNodes: NodeList[Node]
SVGTextContentElement[JC] def children: HTMLCollection[Element]
SVGTextContentElement[JC] var classList: DOMTokenList
SVGTextContentElement[JC] var className: SVGAnimatedString
SVGTextContentElement[JC] def clientHeight: Int
SVGTextContentElement[JC] def clientLeft: Int
SVGTextContentElement[JC] def clientTop: Int
SVGTextContentElement[JC] def clientWidth: Int
SVGTextContentElement[JC] def cloneNode(deep: Boolean?): Node
SVGTextContentElement[JC] def closest(selector: String): Element
SVGTextContentElement[JC] def compareDocumentPosition(other: Node): Int
SVGTextContentElement[JC] def contains(otherNode: Node): Boolean
SVGTextContentElement[JC] def dispatchEvent(evt: Event): Boolean
SVGTextContentElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGTextContentElement[JC] def firstChild: Node
SVGTextContentElement[JC] def firstElementChild: Element
SVGTextContentElement[JC] def getAttribute(name: String): String
SVGTextContentElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGTextContentElement[JC] def getAttributeNode(name: String): Attr
SVGTextContentElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGTextContentElement[JC] def getBoundingClientRect(): DOMRect
SVGTextContentElement[JC] def getCharNumAtPosition(point: SVGPoint): Int
SVGTextContentElement[JC] def getClientRects(): DOMRectList
SVGTextContentElement[JC] def getComputedTextLength(): Double
SVGTextContentElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGTextContentElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGTextContentElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGTextContentElement[JC] def getEndPositionOfChar(charnum: Int): SVGPoint
SVGTextContentElement[JC] def getExtentOfChar(charnum: Int): SVGRect
SVGTextContentElement[JC] def getNumberOfChars(): Int
SVGTextContentElement[JC] def getRotationOfChar(charnum: Int): Double
SVGTextContentElement[JC] def getStartPositionOfChar(charnum: Int): SVGPoint
SVGTextContentElement[JC] def getSubStringLength(charnum: Int, nchars: Int): Double
SVGTextContentElement[JC] def hasAttribute(name: String): Boolean
SVGTextContentElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGTextContentElement[JC] def hasAttributes(): Boolean
SVGTextContentElement[JC] def hasChildNodes(): Boolean
SVGTextContentElement[JC] def hasExtension(extension: String): Boolean
SVGTextContentElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGTextContentElement[JC] var id: String
SVGTextContentElement[JC] var innerHTML: String
SVGTextContentElement[JC] var innerText: String
SVGTextContentElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGTextContentElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGTextContentElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGTextContentElement[JC] def isConnected: Boolean
SVGTextContentElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGTextContentElement[JC] def isEqualNode(arg: Node): Boolean
SVGTextContentElement[JC] def isSameNode(other: Node): Boolean
SVGTextContentElement[JC] def isSupported(feature: String, version: String): Boolean
SVGTextContentElement[JC] def lastChild: Node
SVGTextContentElement[JC] def lastElementChild: Element
SVGTextContentElement[JC] def lengthAdjust: SVGAnimatedEnumeration
SVGTextContentElement[JC] def localName: String
SVGTextContentElement[JC] def lookupNamespaceURI(prefix: String): String
SVGTextContentElement[JC] def lookupPrefix(namespaceURI: String): String
SVGTextContentElement[JC] def matches(selector: String): Boolean
SVGTextContentElement[JC] def namespaceURI: String
SVGTextContentElement[JC] def nextElementSibling: Element
SVGTextContentElement[JC] def nextSibling: Node
SVGTextContentElement[JC] def nodeName: String
SVGTextContentElement[JC] def nodeType: Int
SVGTextContentElement[JC] var nodeValue: String
SVGTextContentElement[JC] def normalize(): Unit
SVGTextContentElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGTextContentElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGTextContentElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGTextContentElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGTextContentElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGTextContentElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGTextContentElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGTextContentElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGTextContentElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGTextContentElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGTextContentElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGTextContentElement[JC] var onload: js.Function1[Event, _]
SVGTextContentElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGTextContentElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGTextContentElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGTextContentElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGTextContentElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGTextContentElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGTextContentElement[JC] var outerHTML: String
SVGTextContentElement[JC] def ownerDocument: Document
SVGTextContentElement[JC] def ownerSVGElement: SVGSVGElement
SVGTextContentElement[JC] def parentNode: Node
SVGTextContentElement[JC] def prefix: String
SVGTextContentElement[JC] def prepend(nodes: Node | String*): Unit
SVGTextContentElement[JC] def previousElementSibling: Element
SVGTextContentElement[JC] def previousSibling: Node
SVGTextContentElement[JC] def querySelector(selectors: String): Element
SVGTextContentElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGTextContentElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGTextContentElement[JC] def remove(): Unit
SVGTextContentElement[JC] def removeAttribute(name: String): Unit
SVGTextContentElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGTextContentElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGTextContentElement[JC] def removeChild(oldChild: Node): Node
SVGTextContentElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGTextContentElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGTextContentElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGTextContentElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGTextContentElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGTextContentElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGTextContentElement[JC] def requestPointerLock(): Unit
SVGTextContentElement[JC] var requiredExtensions: SVGStringList
SVGTextContentElement[JC] var requiredFeatures: SVGStringList
SVGTextContentElement[JC] def scrollHeight: Int
SVGTextContentElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGTextContentElement[JC] var scrollLeft: Double
SVGTextContentElement[JC] var scrollTop: Double
SVGTextContentElement[JC] def scrollWidth: Int
SVGTextContentElement[JC] def selectSubString(charnum: Int, nchars: Int): Unit
SVGTextContentElement[JC] def setAttribute(name: String, value: String): Unit
SVGTextContentElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGTextContentElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGTextContentElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGTextContentElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGTextContentElement[JC] def shadowRoot: ShadowRoot
SVGTextContentElement[JC] var style: CSSStyleDeclaration
SVGTextContentElement[JC] var systemLanguage: SVGStringList
SVGTextContentElement[JC] def tagName: String
SVGTextContentElement[JC] var textContent: String
SVGTextContentElement[JC] def textLength: SVGAnimatedLength
SVGTextContentElement[JC] def viewportElement: SVGElement
SVGTextContentElement[JC] var xmlbase: String
SVGTextContentElement[JC] var xmllang: String
SVGTextContentElement[JC] var xmlspace: String
SVGTextContentElement[JO] val LENGTHADJUST_SPACING: Int
SVGTextContentElement[JO] val LENGTHADJUST_SPACINGANDGLYPHS: Int
SVGTextContentElement[JO] val LENGTHADJUST_UNKNOWN: Int
SVGTextElement[JC] var accessKey: String
SVGTextElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGTextElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGTextElement[JC] def after(nodes: Node | String*): Unit
SVGTextElement[JC] def append(nodes: Node | String*): Unit
SVGTextElement[JC] def appendChild(newChild: Node): Node
SVGTextElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGTextElement[JC] def attributes: NamedNodeMap
SVGTextElement[JC] def baseURI: String
SVGTextElement[JC] def before(nodes: Node | String*): Unit
SVGTextElement[JC] def childElementCount: Int
SVGTextElement[JC] def childNodes: NodeList[Node]
SVGTextElement[JC] def children: HTMLCollection[Element]
SVGTextElement[JC] var classList: DOMTokenList
SVGTextElement[JC] var className: SVGAnimatedString
SVGTextElement[JC] def clientHeight: Int
SVGTextElement[JC] def clientLeft: Int
SVGTextElement[JC] def clientTop: Int
SVGTextElement[JC] def clientWidth: Int
SVGTextElement[JC] def cloneNode(deep: Boolean?): Node
SVGTextElement[JC] def closest(selector: String): Element
SVGTextElement[JC] def compareDocumentPosition(other: Node): Int
SVGTextElement[JC] def contains(otherNode: Node): Boolean
SVGTextElement[JC] def dispatchEvent(evt: Event): Boolean
SVGTextElement[JC] def dx: SVGAnimatedLengthList
SVGTextElement[JC] def dy: SVGAnimatedLengthList
SVGTextElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGTextElement[JC] var farthestViewportElement: SVGElement
SVGTextElement[JC] def firstChild: Node
SVGTextElement[JC] def firstElementChild: Element
SVGTextElement[JC] def getAttribute(name: String): String
SVGTextElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGTextElement[JC] def getAttributeNode(name: String): Attr
SVGTextElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGTextElement[JC] def getBBox(): SVGRect
SVGTextElement[JC] def getBoundingClientRect(): DOMRect
SVGTextElement[JC] def getCTM(): SVGMatrix
SVGTextElement[JC] def getCharNumAtPosition(point: SVGPoint): Int
SVGTextElement[JC] def getClientRects(): DOMRectList
SVGTextElement[JC] def getComputedTextLength(): Double
SVGTextElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGTextElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGTextElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGTextElement[JC] def getEndPositionOfChar(charnum: Int): SVGPoint
SVGTextElement[JC] def getExtentOfChar(charnum: Int): SVGRect
SVGTextElement[JC] def getNumberOfChars(): Int
SVGTextElement[JC] def getRotationOfChar(charnum: Int): Double
SVGTextElement[JC] def getScreenCTM(): SVGMatrix
SVGTextElement[JC] def getStartPositionOfChar(charnum: Int): SVGPoint
SVGTextElement[JC] def getSubStringLength(charnum: Int, nchars: Int): Double
SVGTextElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
SVGTextElement[JC] def hasAttribute(name: String): Boolean
SVGTextElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGTextElement[JC] def hasAttributes(): Boolean
SVGTextElement[JC] def hasChildNodes(): Boolean
SVGTextElement[JC] def hasExtension(extension: String): Boolean
SVGTextElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGTextElement[JC] var id: String
SVGTextElement[JC] var innerHTML: String
SVGTextElement[JC] var innerText: String
SVGTextElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGTextElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGTextElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGTextElement[JC] def isConnected: Boolean
SVGTextElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGTextElement[JC] def isEqualNode(arg: Node): Boolean
SVGTextElement[JC] def isSameNode(other: Node): Boolean
SVGTextElement[JC] def isSupported(feature: String, version: String): Boolean
SVGTextElement[JC] def lastChild: Node
SVGTextElement[JC] def lastElementChild: Element
SVGTextElement[JC] def lengthAdjust: SVGAnimatedEnumeration
SVGTextElement[JC] def localName: String
SVGTextElement[JC] def lookupNamespaceURI(prefix: String): String
SVGTextElement[JC] def lookupPrefix(namespaceURI: String): String
SVGTextElement[JC] def matches(selector: String): Boolean
SVGTextElement[JC] def namespaceURI: String
SVGTextElement[JC] var nearestViewportElement: SVGElement
SVGTextElement[JC] def nextElementSibling: Element
SVGTextElement[JC] def nextSibling: Node
SVGTextElement[JC] def nodeName: String
SVGTextElement[JC] def nodeType: Int
SVGTextElement[JC] var nodeValue: String
SVGTextElement[JC] def normalize(): Unit
SVGTextElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGTextElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGTextElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGTextElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGTextElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGTextElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGTextElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGTextElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGTextElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGTextElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGTextElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGTextElement[JC] var onload: js.Function1[Event, _]
SVGTextElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGTextElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGTextElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGTextElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGTextElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGTextElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGTextElement[JC] var outerHTML: String
SVGTextElement[JC] def ownerDocument: Document
SVGTextElement[JC] def ownerSVGElement: SVGSVGElement
SVGTextElement[JC] def parentNode: Node
SVGTextElement[JC] def prefix: String
SVGTextElement[JC] def prepend(nodes: Node | String*): Unit
SVGTextElement[JC] def previousElementSibling: Element
SVGTextElement[JC] def previousSibling: Node
SVGTextElement[JC] def querySelector(selectors: String): Element
SVGTextElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGTextElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGTextElement[JC] def remove(): Unit
SVGTextElement[JC] def removeAttribute(name: String): Unit
SVGTextElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGTextElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGTextElement[JC] def removeChild(oldChild: Node): Node
SVGTextElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGTextElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGTextElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGTextElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGTextElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGTextElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGTextElement[JC] def requestPointerLock(): Unit
SVGTextElement[JC] var requiredExtensions: SVGStringList
SVGTextElement[JC] var requiredFeatures: SVGStringList
SVGTextElement[JC] def rotate: SVGAnimatedNumberList
SVGTextElement[JC] def scrollHeight: Int
SVGTextElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGTextElement[JC] var scrollLeft: Double
SVGTextElement[JC] var scrollTop: Double
SVGTextElement[JC] def scrollWidth: Int
SVGTextElement[JC] def selectSubString(charnum: Int, nchars: Int): Unit
SVGTextElement[JC] def setAttribute(name: String, value: String): Unit
SVGTextElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGTextElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGTextElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGTextElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGTextElement[JC] def shadowRoot: ShadowRoot
SVGTextElement[JC] var style: CSSStyleDeclaration
SVGTextElement[JC] var systemLanguage: SVGStringList
SVGTextElement[JC] def tagName: String
SVGTextElement[JC] var textContent: String
SVGTextElement[JC] def textLength: SVGAnimatedLength
SVGTextElement[JC] var transform: SVGAnimatedTransformList
SVGTextElement[JC] def viewportElement: SVGElement
SVGTextElement[JC] def x: SVGAnimatedLengthList
SVGTextElement[JC] var xmlbase: String
SVGTextElement[JC] var xmllang: String
SVGTextElement[JC] var xmlspace: String
SVGTextElement[JC] def y: SVGAnimatedLengthList
SVGTextPathElement[JC] var accessKey: String
SVGTextPathElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGTextPathElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGTextPathElement[JC] def after(nodes: Node | String*): Unit
SVGTextPathElement[JC] def append(nodes: Node | String*): Unit
SVGTextPathElement[JC] def appendChild(newChild: Node): Node
SVGTextPathElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGTextPathElement[JC] def attributes: NamedNodeMap
SVGTextPathElement[JC] def baseURI: String
SVGTextPathElement[JC] def before(nodes: Node | String*): Unit
SVGTextPathElement[JC] def childElementCount: Int
SVGTextPathElement[JC] def childNodes: NodeList[Node]
SVGTextPathElement[JC] def children: HTMLCollection[Element]
SVGTextPathElement[JC] var classList: DOMTokenList
SVGTextPathElement[JC] var className: SVGAnimatedString
SVGTextPathElement[JC] def clientHeight: Int
SVGTextPathElement[JC] def clientLeft: Int
SVGTextPathElement[JC] def clientTop: Int
SVGTextPathElement[JC] def clientWidth: Int
SVGTextPathElement[JC] def cloneNode(deep: Boolean?): Node
SVGTextPathElement[JC] def closest(selector: String): Element
SVGTextPathElement[JC] def compareDocumentPosition(other: Node): Int
SVGTextPathElement[JC] def contains(otherNode: Node): Boolean
SVGTextPathElement[JC] def dispatchEvent(evt: Event): Boolean
SVGTextPathElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGTextPathElement[JC] def firstChild: Node
SVGTextPathElement[JC] def firstElementChild: Element
SVGTextPathElement[JC] def getAttribute(name: String): String
SVGTextPathElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGTextPathElement[JC] def getAttributeNode(name: String): Attr
SVGTextPathElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGTextPathElement[JC] def getBoundingClientRect(): DOMRect
SVGTextPathElement[JC] def getCharNumAtPosition(point: SVGPoint): Int
SVGTextPathElement[JC] def getClientRects(): DOMRectList
SVGTextPathElement[JC] def getComputedTextLength(): Double
SVGTextPathElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGTextPathElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGTextPathElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGTextPathElement[JC] def getEndPositionOfChar(charnum: Int): SVGPoint
SVGTextPathElement[JC] def getExtentOfChar(charnum: Int): SVGRect
SVGTextPathElement[JC] def getNumberOfChars(): Int
SVGTextPathElement[JC] def getRotationOfChar(charnum: Int): Double
SVGTextPathElement[JC] def getStartPositionOfChar(charnum: Int): SVGPoint
SVGTextPathElement[JC] def getSubStringLength(charnum: Int, nchars: Int): Double
SVGTextPathElement[JC] def hasAttribute(name: String): Boolean
SVGTextPathElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGTextPathElement[JC] def hasAttributes(): Boolean
SVGTextPathElement[JC] def hasChildNodes(): Boolean
SVGTextPathElement[JC] def hasExtension(extension: String): Boolean
SVGTextPathElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGTextPathElement[JC] var href: SVGAnimatedString
SVGTextPathElement[JC] var id: String
SVGTextPathElement[JC] var innerHTML: String
SVGTextPathElement[JC] var innerText: String
SVGTextPathElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGTextPathElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGTextPathElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGTextPathElement[JC] def isConnected: Boolean
SVGTextPathElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGTextPathElement[JC] def isEqualNode(arg: Node): Boolean
SVGTextPathElement[JC] def isSameNode(other: Node): Boolean
SVGTextPathElement[JC] def isSupported(feature: String, version: String): Boolean
SVGTextPathElement[JC] def lastChild: Node
SVGTextPathElement[JC] def lastElementChild: Element
SVGTextPathElement[JC] def lengthAdjust: SVGAnimatedEnumeration
SVGTextPathElement[JC] def localName: String
SVGTextPathElement[JC] def lookupNamespaceURI(prefix: String): String
SVGTextPathElement[JC] def lookupPrefix(namespaceURI: String): String
SVGTextPathElement[JC] def matches(selector: String): Boolean
SVGTextPathElement[JC] def method: SVGAnimatedEnumeration
SVGTextPathElement[JC] def namespaceURI: String
SVGTextPathElement[JC] def nextElementSibling: Element
SVGTextPathElement[JC] def nextSibling: Node
SVGTextPathElement[JC] def nodeName: String
SVGTextPathElement[JC] def nodeType: Int
SVGTextPathElement[JC] var nodeValue: String
SVGTextPathElement[JC] def normalize(): Unit
SVGTextPathElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGTextPathElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGTextPathElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGTextPathElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGTextPathElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGTextPathElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGTextPathElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGTextPathElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGTextPathElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGTextPathElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGTextPathElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGTextPathElement[JC] var onload: js.Function1[Event, _]
SVGTextPathElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGTextPathElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGTextPathElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGTextPathElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGTextPathElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGTextPathElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGTextPathElement[JC] var outerHTML: String
SVGTextPathElement[JC] def ownerDocument: Document
SVGTextPathElement[JC] def ownerSVGElement: SVGSVGElement
SVGTextPathElement[JC] def parentNode: Node
SVGTextPathElement[JC] def prefix: String
SVGTextPathElement[JC] def prepend(nodes: Node | String*): Unit
SVGTextPathElement[JC] def previousElementSibling: Element
SVGTextPathElement[JC] def previousSibling: Node
SVGTextPathElement[JC] def querySelector(selectors: String): Element
SVGTextPathElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGTextPathElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGTextPathElement[JC] def remove(): Unit
SVGTextPathElement[JC] def removeAttribute(name: String): Unit
SVGTextPathElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGTextPathElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGTextPathElement[JC] def removeChild(oldChild: Node): Node
SVGTextPathElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGTextPathElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGTextPathElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGTextPathElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGTextPathElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGTextPathElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGTextPathElement[JC] def requestPointerLock(): Unit
SVGTextPathElement[JC] var requiredExtensions: SVGStringList
SVGTextPathElement[JC] var requiredFeatures: SVGStringList
SVGTextPathElement[JC] def scrollHeight: Int
SVGTextPathElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGTextPathElement[JC] var scrollLeft: Double
SVGTextPathElement[JC] var scrollTop: Double
SVGTextPathElement[JC] def scrollWidth: Int
SVGTextPathElement[JC] def selectSubString(charnum: Int, nchars: Int): Unit
SVGTextPathElement[JC] def setAttribute(name: String, value: String): Unit
SVGTextPathElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGTextPathElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGTextPathElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGTextPathElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGTextPathElement[JC] def shadowRoot: ShadowRoot
SVGTextPathElement[JC] def spacing: SVGAnimatedEnumeration
SVGTextPathElement[JC] def startOffset: SVGAnimatedLength
SVGTextPathElement[JC] var style: CSSStyleDeclaration
SVGTextPathElement[JC] var systemLanguage: SVGStringList
SVGTextPathElement[JC] def tagName: String
SVGTextPathElement[JC] var textContent: String
SVGTextPathElement[JC] def textLength: SVGAnimatedLength
SVGTextPathElement[JC] def viewportElement: SVGElement
SVGTextPathElement[JC] var xmlbase: String
SVGTextPathElement[JC] var xmllang: String
SVGTextPathElement[JC] var xmlspace: String
SVGTextPathElement[JO] val TEXTPATH_METHODTYPE_ALIGN: Int
SVGTextPathElement[JO] val TEXTPATH_METHODTYPE_STRETCH: Int
SVGTextPathElement[JO] val TEXTPATH_METHODTYPE_UNKNOWN: Int
SVGTextPathElement[JO] val TEXTPATH_SPACINGTYPE_AUTO: Int
SVGTextPathElement[JO] val TEXTPATH_SPACINGTYPE_EXACT: Int
SVGTextPathElement[JO] val TEXTPATH_SPACINGTYPE_UNKNOWN: Int
SVGTextPositioningElement[JC] var accessKey: String
SVGTextPositioningElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGTextPositioningElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGTextPositioningElement[JC] def after(nodes: Node | String*): Unit
SVGTextPositioningElement[JC] def append(nodes: Node | String*): Unit
SVGTextPositioningElement[JC] def appendChild(newChild: Node): Node
SVGTextPositioningElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGTextPositioningElement[JC] def attributes: NamedNodeMap
SVGTextPositioningElement[JC] def baseURI: String
SVGTextPositioningElement[JC] def before(nodes: Node | String*): Unit
SVGTextPositioningElement[JC] def childElementCount: Int
SVGTextPositioningElement[JC] def childNodes: NodeList[Node]
SVGTextPositioningElement[JC] def children: HTMLCollection[Element]
SVGTextPositioningElement[JC] var classList: DOMTokenList
SVGTextPositioningElement[JC] var className: SVGAnimatedString
SVGTextPositioningElement[JC] def clientHeight: Int
SVGTextPositioningElement[JC] def clientLeft: Int
SVGTextPositioningElement[JC] def clientTop: Int
SVGTextPositioningElement[JC] def clientWidth: Int
SVGTextPositioningElement[JC] def cloneNode(deep: Boolean?): Node
SVGTextPositioningElement[JC] def closest(selector: String): Element
SVGTextPositioningElement[JC] def compareDocumentPosition(other: Node): Int
SVGTextPositioningElement[JC] def contains(otherNode: Node): Boolean
SVGTextPositioningElement[JC] def dispatchEvent(evt: Event): Boolean
SVGTextPositioningElement[JC] def dx: SVGAnimatedLengthList
SVGTextPositioningElement[JC] def dy: SVGAnimatedLengthList
SVGTextPositioningElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGTextPositioningElement[JC] def firstChild: Node
SVGTextPositioningElement[JC] def firstElementChild: Element
SVGTextPositioningElement[JC] def getAttribute(name: String): String
SVGTextPositioningElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGTextPositioningElement[JC] def getAttributeNode(name: String): Attr
SVGTextPositioningElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGTextPositioningElement[JC] def getBoundingClientRect(): DOMRect
SVGTextPositioningElement[JC] def getCharNumAtPosition(point: SVGPoint): Int
SVGTextPositioningElement[JC] def getClientRects(): DOMRectList
SVGTextPositioningElement[JC] def getComputedTextLength(): Double
SVGTextPositioningElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGTextPositioningElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGTextPositioningElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGTextPositioningElement[JC] def getEndPositionOfChar(charnum: Int): SVGPoint
SVGTextPositioningElement[JC] def getExtentOfChar(charnum: Int): SVGRect
SVGTextPositioningElement[JC] def getNumberOfChars(): Int
SVGTextPositioningElement[JC] def getRotationOfChar(charnum: Int): Double
SVGTextPositioningElement[JC] def getStartPositionOfChar(charnum: Int): SVGPoint
SVGTextPositioningElement[JC] def getSubStringLength(charnum: Int, nchars: Int): Double
SVGTextPositioningElement[JC] def hasAttribute(name: String): Boolean
SVGTextPositioningElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGTextPositioningElement[JC] def hasAttributes(): Boolean
SVGTextPositioningElement[JC] def hasChildNodes(): Boolean
SVGTextPositioningElement[JC] def hasExtension(extension: String): Boolean
SVGTextPositioningElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGTextPositioningElement[JC] var id: String
SVGTextPositioningElement[JC] var innerHTML: String
SVGTextPositioningElement[JC] var innerText: String
SVGTextPositioningElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGTextPositioningElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGTextPositioningElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGTextPositioningElement[JC] def isConnected: Boolean
SVGTextPositioningElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGTextPositioningElement[JC] def isEqualNode(arg: Node): Boolean
SVGTextPositioningElement[JC] def isSameNode(other: Node): Boolean
SVGTextPositioningElement[JC] def isSupported(feature: String, version: String): Boolean
SVGTextPositioningElement[JC] def lastChild: Node
SVGTextPositioningElement[JC] def lastElementChild: Element
SVGTextPositioningElement[JC] def lengthAdjust: SVGAnimatedEnumeration
SVGTextPositioningElement[JC] def localName: String
SVGTextPositioningElement[JC] def lookupNamespaceURI(prefix: String): String
SVGTextPositioningElement[JC] def lookupPrefix(namespaceURI: String): String
SVGTextPositioningElement[JC] def matches(selector: String): Boolean
SVGTextPositioningElement[JC] def namespaceURI: String
SVGTextPositioningElement[JC] def nextElementSibling: Element
SVGTextPositioningElement[JC] def nextSibling: Node
SVGTextPositioningElement[JC] def nodeName: String
SVGTextPositioningElement[JC] def nodeType: Int
SVGTextPositioningElement[JC] var nodeValue: String
SVGTextPositioningElement[JC] def normalize(): Unit
SVGTextPositioningElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGTextPositioningElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGTextPositioningElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGTextPositioningElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGTextPositioningElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGTextPositioningElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGTextPositioningElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGTextPositioningElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGTextPositioningElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGTextPositioningElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGTextPositioningElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGTextPositioningElement[JC] var onload: js.Function1[Event, _]
SVGTextPositioningElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGTextPositioningElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGTextPositioningElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGTextPositioningElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGTextPositioningElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGTextPositioningElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGTextPositioningElement[JC] var outerHTML: String
SVGTextPositioningElement[JC] def ownerDocument: Document
SVGTextPositioningElement[JC] def ownerSVGElement: SVGSVGElement
SVGTextPositioningElement[JC] def parentNode: Node
SVGTextPositioningElement[JC] def prefix: String
SVGTextPositioningElement[JC] def prepend(nodes: Node | String*): Unit
SVGTextPositioningElement[JC] def previousElementSibling: Element
SVGTextPositioningElement[JC] def previousSibling: Node
SVGTextPositioningElement[JC] def querySelector(selectors: String): Element
SVGTextPositioningElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGTextPositioningElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGTextPositioningElement[JC] def remove(): Unit
SVGTextPositioningElement[JC] def removeAttribute(name: String): Unit
SVGTextPositioningElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGTextPositioningElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGTextPositioningElement[JC] def removeChild(oldChild: Node): Node
SVGTextPositioningElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGTextPositioningElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGTextPositioningElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGTextPositioningElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGTextPositioningElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGTextPositioningElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGTextPositioningElement[JC] def requestPointerLock(): Unit
SVGTextPositioningElement[JC] var requiredExtensions: SVGStringList
SVGTextPositioningElement[JC] var requiredFeatures: SVGStringList
SVGTextPositioningElement[JC] def rotate: SVGAnimatedNumberList
SVGTextPositioningElement[JC] def scrollHeight: Int
SVGTextPositioningElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGTextPositioningElement[JC] var scrollLeft: Double
SVGTextPositioningElement[JC] var scrollTop: Double
SVGTextPositioningElement[JC] def scrollWidth: Int
SVGTextPositioningElement[JC] def selectSubString(charnum: Int, nchars: Int): Unit
SVGTextPositioningElement[JC] def setAttribute(name: String, value: String): Unit
SVGTextPositioningElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGTextPositioningElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGTextPositioningElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGTextPositioningElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGTextPositioningElement[JC] def shadowRoot: ShadowRoot
SVGTextPositioningElement[JC] var style: CSSStyleDeclaration
SVGTextPositioningElement[JC] var systemLanguage: SVGStringList
SVGTextPositioningElement[JC] def tagName: String
SVGTextPositioningElement[JC] var textContent: String
SVGTextPositioningElement[JC] def textLength: SVGAnimatedLength
SVGTextPositioningElement[JC] def viewportElement: SVGElement
SVGTextPositioningElement[JC] def x: SVGAnimatedLengthList
SVGTextPositioningElement[JC] var xmlbase: String
SVGTextPositioningElement[JC] var xmllang: String
SVGTextPositioningElement[JC] var xmlspace: String
SVGTextPositioningElement[JC] def y: SVGAnimatedLengthList
SVGTitleElement[JC] var accessKey: String
SVGTitleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGTitleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGTitleElement[JC] def after(nodes: Node | String*): Unit
SVGTitleElement[JC] def append(nodes: Node | String*): Unit
SVGTitleElement[JC] def appendChild(newChild: Node): Node
SVGTitleElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGTitleElement[JC] def attributes: NamedNodeMap
SVGTitleElement[JC] def baseURI: String
SVGTitleElement[JC] def before(nodes: Node | String*): Unit
SVGTitleElement[JC] def childElementCount: Int
SVGTitleElement[JC] def childNodes: NodeList[Node]
SVGTitleElement[JC] def children: HTMLCollection[Element]
SVGTitleElement[JC] var classList: DOMTokenList
SVGTitleElement[JC] var className: SVGAnimatedString
SVGTitleElement[JC] def clientHeight: Int
SVGTitleElement[JC] def clientLeft: Int
SVGTitleElement[JC] def clientTop: Int
SVGTitleElement[JC] def clientWidth: Int
SVGTitleElement[JC] def cloneNode(deep: Boolean?): Node
SVGTitleElement[JC] def closest(selector: String): Element
SVGTitleElement[JC] def compareDocumentPosition(other: Node): Int
SVGTitleElement[JC] def contains(otherNode: Node): Boolean
SVGTitleElement[JC] def dispatchEvent(evt: Event): Boolean
SVGTitleElement[JC] def firstChild: Node
SVGTitleElement[JC] def firstElementChild: Element
SVGTitleElement[JC] def getAttribute(name: String): String
SVGTitleElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGTitleElement[JC] def getAttributeNode(name: String): Attr
SVGTitleElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGTitleElement[JC] def getBoundingClientRect(): DOMRect
SVGTitleElement[JC] def getClientRects(): DOMRectList
SVGTitleElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGTitleElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGTitleElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGTitleElement[JC] def hasAttribute(name: String): Boolean
SVGTitleElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGTitleElement[JC] def hasAttributes(): Boolean
SVGTitleElement[JC] def hasChildNodes(): Boolean
SVGTitleElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGTitleElement[JC] var id: String
SVGTitleElement[JC] var innerHTML: String
SVGTitleElement[JC] var innerText: String
SVGTitleElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGTitleElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGTitleElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGTitleElement[JC] def isConnected: Boolean
SVGTitleElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGTitleElement[JC] def isEqualNode(arg: Node): Boolean
SVGTitleElement[JC] def isSameNode(other: Node): Boolean
SVGTitleElement[JC] def isSupported(feature: String, version: String): Boolean
SVGTitleElement[JC] def lastChild: Node
SVGTitleElement[JC] def lastElementChild: Element
SVGTitleElement[JC] def localName: String
SVGTitleElement[JC] def lookupNamespaceURI(prefix: String): String
SVGTitleElement[JC] def lookupPrefix(namespaceURI: String): String
SVGTitleElement[JC] def matches(selector: String): Boolean
SVGTitleElement[JC] def namespaceURI: String
SVGTitleElement[JC] def nextElementSibling: Element
SVGTitleElement[JC] def nextSibling: Node
SVGTitleElement[JC] def nodeName: String
SVGTitleElement[JC] def nodeType: Int
SVGTitleElement[JC] var nodeValue: String
SVGTitleElement[JC] def normalize(): Unit
SVGTitleElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGTitleElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGTitleElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGTitleElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGTitleElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGTitleElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGTitleElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGTitleElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGTitleElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGTitleElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGTitleElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGTitleElement[JC] var onload: js.Function1[Event, _]
SVGTitleElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGTitleElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGTitleElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGTitleElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGTitleElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGTitleElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGTitleElement[JC] var outerHTML: String
SVGTitleElement[JC] def ownerDocument: Document
SVGTitleElement[JC] def ownerSVGElement: SVGSVGElement
SVGTitleElement[JC] def parentNode: Node
SVGTitleElement[JC] def prefix: String
SVGTitleElement[JC] def prepend(nodes: Node | String*): Unit
SVGTitleElement[JC] def previousElementSibling: Element
SVGTitleElement[JC] def previousSibling: Node
SVGTitleElement[JC] def querySelector(selectors: String): Element
SVGTitleElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGTitleElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGTitleElement[JC] def remove(): Unit
SVGTitleElement[JC] def removeAttribute(name: String): Unit
SVGTitleElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGTitleElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGTitleElement[JC] def removeChild(oldChild: Node): Node
SVGTitleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGTitleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGTitleElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGTitleElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGTitleElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGTitleElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGTitleElement[JC] def requestPointerLock(): Unit
SVGTitleElement[JC] def scrollHeight: Int
SVGTitleElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGTitleElement[JC] var scrollLeft: Double
SVGTitleElement[JC] var scrollTop: Double
SVGTitleElement[JC] def scrollWidth: Int
SVGTitleElement[JC] def setAttribute(name: String, value: String): Unit
SVGTitleElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGTitleElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGTitleElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGTitleElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGTitleElement[JC] def shadowRoot: ShadowRoot
SVGTitleElement[JC] var style: CSSStyleDeclaration
SVGTitleElement[JC] def tagName: String
SVGTitleElement[JC] var textContent: String
SVGTitleElement[JC] def viewportElement: SVGElement
SVGTitleElement[JC] var xmlbase: String
SVGTitleElement[JC] var xmllang: String
SVGTitleElement[JC] var xmlspace: String
SVGTransform[JC] def angle: Double
SVGTransform[JC] def matrix: SVGMatrix
SVGTransform[JC] def setMatrix(matrix: SVGMatrix): Unit
SVGTransform[JC] def setRotate(angle: Double, cx: Double, cy: Double): Unit
SVGTransform[JC] def setScale(sx: Double, sy: Double): Unit
SVGTransform[JC] def setSkewX(angle: Double): Unit
SVGTransform[JC] def setSkewY(angle: Double): Unit
SVGTransform[JC] def setTranslate(tx: Double, ty: Double): Unit
SVGTransform[JC] def `type`: Int
SVGTransform[JO] val SVG_TRANSFORM_MATRIX: Int
SVGTransform[JO] val SVG_TRANSFORM_ROTATE: Int
SVGTransform[JO] val SVG_TRANSFORM_SCALE: Int
SVGTransform[JO] val SVG_TRANSFORM_SKEWX: Int
SVGTransform[JO] val SVG_TRANSFORM_SKEWY: Int
SVGTransform[JO] val SVG_TRANSFORM_TRANSLATE: Int
SVGTransform[JO] val SVG_TRANSFORM_UNKNOWN: Int
SVGTransformList[JC] def appendItem(newItem: SVGTransform): SVGTransform
SVGTransformList[JC] def clear(): Unit
SVGTransformList[JC] def consolidate(): SVGTransform
SVGTransformList[JC] def createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform
SVGTransformList[JC] def getItem(index: Int): SVGTransform
SVGTransformList[JC] def initialize(newItem: SVGTransform): SVGTransform
SVGTransformList[JC] def insertItemBefore(newItem: SVGTransform, index: Int): SVGTransform
SVGTransformList[JC] def numberOfItems: Int
SVGTransformList[JC] def removeItem(index: Int): SVGTransform
SVGTransformList[JC] def replaceItem(newItem: SVGTransform, index: Int): SVGTransform
SVGTransformable[JT] var farthestViewportElement: SVGElement
SVGTransformable[JT] def getBBox(): SVGRect
SVGTransformable[JT] def getCTM(): SVGMatrix
SVGTransformable[JT] def getScreenCTM(): SVGMatrix
SVGTransformable[JT] def getTransformToElement(element: SVGElement): SVGMatrix
SVGTransformable[JT] var nearestViewportElement: SVGElement
SVGTransformable[JT] var transform: SVGAnimatedTransformList
SVGURIReference[JT] var href: SVGAnimatedString
SVGUnitTypes[JO] val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Int
SVGUnitTypes[JO] val SVG_UNIT_TYPE_UNKNOWN: Int
SVGUnitTypes[JO] val SVG_UNIT_TYPE_USERSPACEONUSE: Int
SVGUnitTypes[JT] val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Int
SVGUnitTypes[JT] val SVG_UNIT_TYPE_UNKNOWN: Int
SVGUnitTypes[JT] val SVG_UNIT_TYPE_USERSPACEONUSE: Int
SVGUseElement[JC] var accessKey: String
SVGUseElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGUseElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGUseElement[JC] def after(nodes: Node | String*): Unit
SVGUseElement[JC] def animatedInstanceRoot: SVGElementInstance
SVGUseElement[JC] def append(nodes: Node | String*): Unit
SVGUseElement[JC] def appendChild(newChild: Node): Node
SVGUseElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGUseElement[JC] def attributes: NamedNodeMap
SVGUseElement[JC] def baseURI: String
SVGUseElement[JC] def before(nodes: Node | String*): Unit
SVGUseElement[JC] def childElementCount: Int
SVGUseElement[JC] def childNodes: NodeList[Node]
SVGUseElement[JC] def children: HTMLCollection[Element]
SVGUseElement[JC] var classList: DOMTokenList
SVGUseElement[JC] var className: SVGAnimatedString
SVGUseElement[JC] def clientHeight: Int
SVGUseElement[JC] def clientLeft: Int
SVGUseElement[JC] def clientTop: Int
SVGUseElement[JC] def clientWidth: Int
SVGUseElement[JC] def cloneNode(deep: Boolean?): Node
SVGUseElement[JC] def closest(selector: String): Element
SVGUseElement[JC] def compareDocumentPosition(other: Node): Int
SVGUseElement[JC] def contains(otherNode: Node): Boolean
SVGUseElement[JC] def dispatchEvent(evt: Event): Boolean
SVGUseElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGUseElement[JC] var farthestViewportElement: SVGElement
SVGUseElement[JC] def firstChild: Node
SVGUseElement[JC] def firstElementChild: Element
SVGUseElement[JC] def getAttribute(name: String): String
SVGUseElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGUseElement[JC] def getAttributeNode(name: String): Attr
SVGUseElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGUseElement[JC] def getBBox(): SVGRect
SVGUseElement[JC] def getBoundingClientRect(): DOMRect
SVGUseElement[JC] def getCTM(): SVGMatrix
SVGUseElement[JC] def getClientRects(): DOMRectList
SVGUseElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGUseElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGUseElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGUseElement[JC] def getScreenCTM(): SVGMatrix
SVGUseElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
SVGUseElement[JC] def hasAttribute(name: String): Boolean
SVGUseElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGUseElement[JC] def hasAttributes(): Boolean
SVGUseElement[JC] def hasChildNodes(): Boolean
SVGUseElement[JC] def hasExtension(extension: String): Boolean
SVGUseElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGUseElement[JC] def height: SVGAnimatedLength
SVGUseElement[JC] var href: SVGAnimatedString
SVGUseElement[JC] var id: String
SVGUseElement[JC] var innerHTML: String
SVGUseElement[JC] var innerText: String
SVGUseElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGUseElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGUseElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGUseElement[JC] def instanceRoot: SVGElementInstance
SVGUseElement[JC] def isConnected: Boolean
SVGUseElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGUseElement[JC] def isEqualNode(arg: Node): Boolean
SVGUseElement[JC] def isSameNode(other: Node): Boolean
SVGUseElement[JC] def isSupported(feature: String, version: String): Boolean
SVGUseElement[JC] def lastChild: Node
SVGUseElement[JC] def lastElementChild: Element
SVGUseElement[JC] def localName: String
SVGUseElement[JC] def lookupNamespaceURI(prefix: String): String
SVGUseElement[JC] def lookupPrefix(namespaceURI: String): String
SVGUseElement[JC] def matches(selector: String): Boolean
SVGUseElement[JC] def namespaceURI: String
SVGUseElement[JC] var nearestViewportElement: SVGElement
SVGUseElement[JC] def nextElementSibling: Element
SVGUseElement[JC] def nextSibling: Node
SVGUseElement[JC] def nodeName: String
SVGUseElement[JC] def nodeType: Int
SVGUseElement[JC] var nodeValue: String
SVGUseElement[JC] def normalize(): Unit
SVGUseElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGUseElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGUseElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGUseElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGUseElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGUseElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGUseElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGUseElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGUseElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGUseElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGUseElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGUseElement[JC] var onload: js.Function1[Event, _]
SVGUseElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGUseElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGUseElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGUseElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGUseElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGUseElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGUseElement[JC] var outerHTML: String
SVGUseElement[JC] def ownerDocument: Document
SVGUseElement[JC] def ownerSVGElement: SVGSVGElement
SVGUseElement[JC] def parentNode: Node
SVGUseElement[JC] def prefix: String
SVGUseElement[JC] def prepend(nodes: Node | String*): Unit
SVGUseElement[JC] def previousElementSibling: Element
SVGUseElement[JC] def previousSibling: Node
SVGUseElement[JC] def querySelector(selectors: String): Element
SVGUseElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGUseElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGUseElement[JC] def remove(): Unit
SVGUseElement[JC] def removeAttribute(name: String): Unit
SVGUseElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGUseElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGUseElement[JC] def removeChild(oldChild: Node): Node
SVGUseElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGUseElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGUseElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGUseElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGUseElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGUseElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGUseElement[JC] def requestPointerLock(): Unit
SVGUseElement[JC] var requiredExtensions: SVGStringList
SVGUseElement[JC] var requiredFeatures: SVGStringList
SVGUseElement[JC] def scrollHeight: Int
SVGUseElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGUseElement[JC] var scrollLeft: Double
SVGUseElement[JC] var scrollTop: Double
SVGUseElement[JC] def scrollWidth: Int
SVGUseElement[JC] def setAttribute(name: String, value: String): Unit
SVGUseElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGUseElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGUseElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGUseElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGUseElement[JC] def shadowRoot: ShadowRoot
SVGUseElement[JC] var style: CSSStyleDeclaration
SVGUseElement[JC] var systemLanguage: SVGStringList
SVGUseElement[JC] def tagName: String
SVGUseElement[JC] var textContent: String
SVGUseElement[JC] var transform: SVGAnimatedTransformList
SVGUseElement[JC] def viewportElement: SVGElement
SVGUseElement[JC] def width: SVGAnimatedLength
SVGUseElement[JC] def x: SVGAnimatedLength
SVGUseElement[JC] var xmlbase: String
SVGUseElement[JC] var xmllang: String
SVGUseElement[JC] var xmlspace: String
SVGUseElement[JC] def y: SVGAnimatedLength
SVGViewElement[JC] var accessKey: String
SVGViewElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGViewElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGViewElement[JC] def after(nodes: Node | String*): Unit
SVGViewElement[JC] def append(nodes: Node | String*): Unit
SVGViewElement[JC] def appendChild(newChild: Node): Node
SVGViewElement[JC] def attachShadow(init: ShadowRootInit): ShadowRoot
SVGViewElement[JC] def attributes: NamedNodeMap
SVGViewElement[JC] def baseURI: String
SVGViewElement[JC] def before(nodes: Node | String*): Unit
SVGViewElement[JC] def childElementCount: Int
SVGViewElement[JC] def childNodes: NodeList[Node]
SVGViewElement[JC] def children: HTMLCollection[Element]
SVGViewElement[JC] var classList: DOMTokenList
SVGViewElement[JC] def clientHeight: Int
SVGViewElement[JC] def clientLeft: Int
SVGViewElement[JC] def clientTop: Int
SVGViewElement[JC] def clientWidth: Int
SVGViewElement[JC] def cloneNode(deep: Boolean?): Node
SVGViewElement[JC] def closest(selector: String): Element
SVGViewElement[JC] def compareDocumentPosition(other: Node): Int
SVGViewElement[JC] def contains(otherNode: Node): Boolean
SVGViewElement[JC] def dispatchEvent(evt: Event): Boolean
SVGViewElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
SVGViewElement[JC] def firstChild: Node
SVGViewElement[JC] def firstElementChild: Element
SVGViewElement[JC] def getAttribute(name: String): String
SVGViewElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
SVGViewElement[JC] def getAttributeNode(name: String): Attr
SVGViewElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
SVGViewElement[JC] def getBoundingClientRect(): DOMRect
SVGViewElement[JC] def getClientRects(): DOMRectList
SVGViewElement[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
SVGViewElement[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
SVGViewElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
SVGViewElement[JC] def hasAttribute(name: String): Boolean
SVGViewElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
SVGViewElement[JC] def hasAttributes(): Boolean
SVGViewElement[JC] def hasChildNodes(): Boolean
SVGViewElement[JC] def hasPointerCapture(pointerId: Double): Boolean
SVGViewElement[JC] var id: String
SVGViewElement[JC] var innerHTML: String
SVGViewElement[JC] var innerText: String
SVGViewElement[JC] def insertAdjacentElement(position: String, element: Element): Element
SVGViewElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
SVGViewElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
SVGViewElement[JC] def isConnected: Boolean
SVGViewElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
SVGViewElement[JC] def isEqualNode(arg: Node): Boolean
SVGViewElement[JC] def isSameNode(other: Node): Boolean
SVGViewElement[JC] def isSupported(feature: String, version: String): Boolean
SVGViewElement[JC] def lastChild: Node
SVGViewElement[JC] def lastElementChild: Element
SVGViewElement[JC] def localName: String
SVGViewElement[JC] def lookupNamespaceURI(prefix: String): String
SVGViewElement[JC] def lookupPrefix(namespaceURI: String): String
SVGViewElement[JC] def matches(selector: String): Boolean
SVGViewElement[JC] def namespaceURI: String
SVGViewElement[JC] def nextElementSibling: Element
SVGViewElement[JC] def nextSibling: Node
SVGViewElement[JC] def nodeName: String
SVGViewElement[JC] def nodeType: Int
SVGViewElement[JC] var nodeValue: String
SVGViewElement[JC] def normalize(): Unit
SVGViewElement[JC] var onclick: js.Function1[MouseEvent, _]
SVGViewElement[JC] var oncompositionend: js.Function1[CompositionEvent, _]
SVGViewElement[JC] var oncompositionstart: js.Function1[CompositionEvent, _]
SVGViewElement[JC] var oncompositionupdate: js.Function1[CompositionEvent, _]
SVGViewElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
SVGViewElement[JC] var oncut: js.Function1[ClipboardEvent, _]
SVGViewElement[JC] var ondblclick: js.Function1[MouseEvent, _]
SVGViewElement[JC] var onfocusin: js.Function1[FocusEvent, _]
SVGViewElement[JC] var onfocusout: js.Function1[FocusEvent, _]
SVGViewElement[JC] var onfullscreenchange: js.Function1[Event, _]
SVGViewElement[JC] var onfullscreenerror: js.Function1[Event, _]
SVGViewElement[JC] var onload: js.Function1[Event, _]
SVGViewElement[JC] var onmousedown: js.Function1[MouseEvent, _]
SVGViewElement[JC] var onmousemove: js.Function1[MouseEvent, _]
SVGViewElement[JC] var onmouseout: js.Function1[MouseEvent, _]
SVGViewElement[JC] var onmouseover: js.Function1[MouseEvent, _]
SVGViewElement[JC] var onmouseup: js.Function1[MouseEvent, _]
SVGViewElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
SVGViewElement[JC] var outerHTML: String
SVGViewElement[JC] def ownerDocument: Document
SVGViewElement[JC] def ownerSVGElement: SVGSVGElement
SVGViewElement[JC] def parentNode: Node
SVGViewElement[JC] def prefix: String
SVGViewElement[JC] def prepend(nodes: Node | String*): Unit
SVGViewElement[JC] var preserveAspectRatio: SVGAnimatedPreserveAspectRatio
SVGViewElement[JC] def previousElementSibling: Element
SVGViewElement[JC] def previousSibling: Node
SVGViewElement[JC] def querySelector(selectors: String): Element
SVGViewElement[JC] def querySelectorAll(selectors: String): NodeList[Element]
SVGViewElement[JC] def releasePointerCapture(pointerId: Double): Unit
SVGViewElement[JC] def remove(): Unit
SVGViewElement[JC] def removeAttribute(name: String): Unit
SVGViewElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
SVGViewElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
SVGViewElement[JC] def removeChild(oldChild: Node): Node
SVGViewElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SVGViewElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SVGViewElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
SVGViewElement[JC] def replaceChildren(nodes: Node | String*): Unit
SVGViewElement[JC] def replaceWith(nodes: Node | String*): Unit
SVGViewElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
SVGViewElement[JC] def requestPointerLock(): Unit
SVGViewElement[JC] def scrollHeight: Int
SVGViewElement[JC] def scrollIntoView(top: Boolean?): Unit
SVGViewElement[JC] var scrollLeft: Double
SVGViewElement[JC] var scrollTop: Double
SVGViewElement[JC] def scrollWidth: Int
SVGViewElement[JC] def setAttribute(name: String, value: String): Unit
SVGViewElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
SVGViewElement[JC] def setAttributeNode(newAttr: Attr): Attr
SVGViewElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
SVGViewElement[JC] def setPointerCapture(pointerId: Double): Unit
SVGViewElement[JC] def shadowRoot: ShadowRoot
SVGViewElement[JC] def tagName: String
SVGViewElement[JC] var textContent: String
SVGViewElement[JC] var viewBox: SVGAnimatedRect
SVGViewElement[JC] def viewTarget: SVGStringList
SVGViewElement[JC] def viewportElement: SVGElement
SVGViewElement[JC] var xmlbase: String
SVGViewElement[JC] var zoomAndPan: Int
SVGZoomAndPan[JO] val SVG_ZOOMANDPAN_DISABLE: Int
SVGZoomAndPan[JO] val SVG_ZOOMANDPAN_MAGNIFY: Int
SVGZoomAndPan[JO] val SVG_ZOOMANDPAN_UNKNOWN: Int
SVGZoomAndPan[JT] var zoomAndPan: Int
SVGZoomEventInit[JT] var bubbles: js.UndefOr[Boolean]
SVGZoomEventInit[JT] var cancelable: js.UndefOr[Boolean]
SVGZoomEventInit[JT] var composed: js.UndefOr[Boolean]
SVGZoomEventInit[JT] var detail: js.UndefOr[Int]
SVGZoomEventInit[JT] var newScale: js.UndefOr[Double]
SVGZoomEventInit[JT] var newTranslate: js.UndefOr[SVGPoint]
SVGZoomEventInit[JT] var previousScale: js.UndefOr[Double]
SVGZoomEventInit[JT] var previousTranslate: js.UndefOr[SVGPoint]
SVGZoomEventInit[JT] var scoped: js.UndefOr[Boolean]
SVGZoomEventInit[JT] var view: js.UndefOr[Window]
SVGZoomEventInit[JT] var zoomRectScreen: js.UndefOr[SVGRect]
Screen[JC] def availHeight: Double
Screen[JC] def availWidth: Double
Screen[JC] def colorDepth: Int
Screen[JC] def height: Double
Screen[JC] def pixelDepth: Int
Screen[JC] def width: Double
ScrollRestoration[JT]
ScrollRestoration[SO] val auto: ScrollRestoration
ScrollRestoration[SO] val manual: ScrollRestoration
Selection[JC] def addRange(range: Range): Unit
Selection[JC] def anchorNode: Node
Selection[JC] def anchorOffset: Int
Selection[JC] def collapse(parentNode: Node, offset: Int): Unit
Selection[JC] def collapseToEnd(): Unit
Selection[JC] def collapseToStart(): Unit
Selection[JC] def containsNode(node: Node, partialContainment: Boolean?): Boolean
Selection[JC] def deleteFromDocument(): Unit
Selection[JC] def extend(node: Node, offset: Int?): Unit
Selection[JC] def focusNode: Node
Selection[JC] def focusOffset: Int
Selection[JC] def getRangeAt(index: Int): Range
Selection[JC] def isCollapsed: Boolean
Selection[JC] def rangeCount: Int
Selection[JC] def removeAllRanges(): Unit
Selection[JC] def removeRange(range: Range): Unit
Selection[JC] def selectAllChildren(parentNode: Node): Unit
ServiceWorker[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ServiceWorker[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ServiceWorker[JT] def dispatchEvent(evt: Event): Boolean
ServiceWorker[JT] var onstatechange: js.Function1[Event, _]
ServiceWorker[JT] def postMessage(message: js.Any, transfer: js.UndefOr[js.Array[Transferable]]?): Unit
ServiceWorker[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ServiceWorker[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ServiceWorker[JT] def scriptURL: String
ServiceWorker[JT] def state: String
ServiceWorkerContainer[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ServiceWorkerContainer[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ServiceWorkerContainer[JT] def controller: ServiceWorker
ServiceWorkerContainer[JT] def dispatchEvent(evt: Event): Boolean
ServiceWorkerContainer[JT] def getRegistration(scope: String?): js.Promise[js.UndefOr[ServiceWorkerRegistration]]
ServiceWorkerContainer[JT] def getRegistrations(): js.Promise[js.Array[ServiceWorkerRegistration]]
ServiceWorkerContainer[JT] var oncontrollerchange: js.Function1[Event, _]
ServiceWorkerContainer[JT] var onmessage: js.Function1[MessageEvent, _]
ServiceWorkerContainer[JT] def ready: js.Promise[ServiceWorkerRegistration]
ServiceWorkerContainer[JT] def register(scriptURL: String, options: ServiceWorkerRegistrationOptions?): js.Promise[ServiceWorkerRegistration]
ServiceWorkerContainer[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ServiceWorkerContainer[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ServiceWorkerGlobalScope[JO] def self: ServiceWorkerGlobalScope
ServiceWorkerGlobalScope[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ServiceWorkerGlobalScope[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ServiceWorkerGlobalScope[JT] def atob(encodedString: String): String
ServiceWorkerGlobalScope[JT] def btoa(rawString: String): String
ServiceWorkerGlobalScope[JT] def caches: js.UndefOr[CacheStorage]
ServiceWorkerGlobalScope[JT] def clearInterval(handle: Int): Unit
ServiceWorkerGlobalScope[JT] def clearTimeout(handle: Int): Unit
ServiceWorkerGlobalScope[JT] def clients: Clients
ServiceWorkerGlobalScope[JT] def close(): Unit
ServiceWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput): js.Promise[ImageBitmap]
ServiceWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
ServiceWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double): js.Promise[ImageBitmap]
ServiceWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
ServiceWorkerGlobalScope[JT] def crossOriginIsolated: Boolean
ServiceWorkerGlobalScope[JT] def dispatchEvent(evt: Event): Boolean
ServiceWorkerGlobalScope[JT] def fetch(info: RequestInfo, init: RequestInit?): js.Promise[Response]
ServiceWorkerGlobalScope[JT] def importScripts(urls: js.Array[String]): Unit
ServiceWorkerGlobalScope[JT] def indexedDB: js.UndefOr[IDBFactory]
ServiceWorkerGlobalScope[JT] def isSecureContext: Boolean
ServiceWorkerGlobalScope[JT] def location: WorkerLocation
ServiceWorkerGlobalScope[JT] def navigator: WorkerNavigator
ServiceWorkerGlobalScope[JT] var onError: js.Function1[ErrorEvent, _]
ServiceWorkerGlobalScope[JT] var onactivate: js.Function1[ExtendableEvent, _]
ServiceWorkerGlobalScope[JT] var onfetch: js.Function1[FetchEvent, _]
ServiceWorkerGlobalScope[JT] var oninstall: js.Function1[ExtendableEvent, _]
ServiceWorkerGlobalScope[JT] var onlanguagechange: js.Function1[Event, _]
ServiceWorkerGlobalScope[JT] var onmessage: js.Function1[MessageEvent, _]
ServiceWorkerGlobalScope[JT] var onoffline: js.Function1[Event, _]
ServiceWorkerGlobalScope[JT] var ononline: js.Function1[Event, _]
ServiceWorkerGlobalScope[JT] var onpush: js.Function1[PushEvent, _]
ServiceWorkerGlobalScope[JT] var onpushsubscriptionchange: js.Function1[PushEvent, _]
ServiceWorkerGlobalScope[JT] def origin: String
ServiceWorkerGlobalScope[JT] def queueMicrotask(function: js.Function0[Any]): Unit
ServiceWorkerGlobalScope[JT] def registration: ServiceWorkerRegistration
ServiceWorkerGlobalScope[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ServiceWorkerGlobalScope[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ServiceWorkerGlobalScope[JT] def self: this.type
ServiceWorkerGlobalScope[JT] def setInterval(handler: js.Function0[Any], timeout: Double): Int
ServiceWorkerGlobalScope[JT] def setTimeout(handler: js.Function0[Any], timeout: Double): Int
ServiceWorkerGlobalScope[JT] def skipWaiting(): js.Promise[Unit]
ServiceWorkerMessageEventInit[JT] var bubbles: js.UndefOr[Boolean]
ServiceWorkerMessageEventInit[JT] var cancelable: js.UndefOr[Boolean]
ServiceWorkerMessageEventInit[JT] var composed: js.UndefOr[Boolean]
ServiceWorkerMessageEventInit[JT] var data: js.UndefOr[Any]
ServiceWorkerMessageEventInit[JT] var lastEventId: js.UndefOr[String]
ServiceWorkerMessageEventInit[JT] var origin: js.UndefOr[String]
ServiceWorkerMessageEventInit[JT] var ports: js.UndefOr[js.Array[MessagePort]]
ServiceWorkerMessageEventInit[JT] var scoped: js.UndefOr[Boolean]
ServiceWorkerMessageEventInit[JT] var source: js.UndefOr[ServiceWorker | MessagePort]
ServiceWorkerRegistration[JT] var active: ServiceWorker
ServiceWorkerRegistration[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ServiceWorkerRegistration[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ServiceWorkerRegistration[JT] def dispatchEvent(evt: Event): Boolean
ServiceWorkerRegistration[JT] def getNotifications(options: GetNotificationOptions?): js.Promise[Sequence[Notification]]
ServiceWorkerRegistration[JT] var installing: ServiceWorker
ServiceWorkerRegistration[JT] var onupdatefound: js.Function1[Event, _]
ServiceWorkerRegistration[JT] val pushManager: PushManager
ServiceWorkerRegistration[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ServiceWorkerRegistration[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ServiceWorkerRegistration[JT] var scope: String
ServiceWorkerRegistration[JT] def showNotification(title: String, options: NotificationOptions?): js.Promise[Unit]
ServiceWorkerRegistration[JT] def unregister(): js.Promise[Boolean]
ServiceWorkerRegistration[JT] def update(): js.Promise[Unit]
ServiceWorkerRegistration[JT] var waiting: ServiceWorker
ServiceWorkerRegistrationOptions[JT] var scope: js.UndefOr[String]
ServiceWorkerRegistrationOptions[JT] var `type`: js.UndefOr[WorkerType]
ServiceWorkerRegistrationOptions[JT] var updateViaCache: js.UndefOr[ServiceWorkerUpdateViaCache]
ServiceWorkerState[JT]
ServiceWorkerState[SO] val activated: ServiceWorkerState
ServiceWorkerState[SO] val activating: ServiceWorkerState
ServiceWorkerState[SO] val installed: ServiceWorkerState
ServiceWorkerState[SO] val installing: ServiceWorkerState
ServiceWorkerState[SO] val redundant: ServiceWorkerState
ServiceWorkerUpdateViaCache[JT]
ServiceWorkerUpdateViaCache[SO] val all: ServiceWorkerUpdateViaCache
ServiceWorkerUpdateViaCache[SO] val imports: ServiceWorkerUpdateViaCache
ServiceWorkerUpdateViaCache[SO] val none: ServiceWorkerUpdateViaCache
ShadowRoot[JC] def activeElement: Element
ShadowRoot[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ShadowRoot[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ShadowRoot[JC] def appendChild(newChild: Node): Node
ShadowRoot[JC] def baseURI: String
ShadowRoot[JC] def childNodes: NodeList[Node]
ShadowRoot[JC] def cloneNode(deep: Boolean?): Node
ShadowRoot[JC] def compareDocumentPosition(other: Node): Int
ShadowRoot[JC] def contains(otherNode: Node): Boolean
ShadowRoot[JC] def dispatchEvent(evt: Event): Boolean
ShadowRoot[JC] def firstChild: Node
ShadowRoot[JC] def hasChildNodes(): Boolean
ShadowRoot[JC] var innerText: String
ShadowRoot[JC] def insertBefore(newChild: Node, refChild: Node): Node
ShadowRoot[JC] def isConnected: Boolean
ShadowRoot[JC] def isDefaultNamespace(namespaceURI: String): Boolean
ShadowRoot[JC] def isEqualNode(arg: Node): Boolean
ShadowRoot[JC] def isSameNode(other: Node): Boolean
ShadowRoot[JC] def isSupported(feature: String, version: String): Boolean
ShadowRoot[JC] def lastChild: Node
ShadowRoot[JC] def localName: String
ShadowRoot[JC] def lookupNamespaceURI(prefix: String): String
ShadowRoot[JC] def lookupPrefix(namespaceURI: String): String
ShadowRoot[JC] def namespaceURI: String
ShadowRoot[JC] def nextSibling: Node
ShadowRoot[JC] def nodeName: String
ShadowRoot[JC] def nodeType: Int
ShadowRoot[JC] var nodeValue: String
ShadowRoot[JC] def normalize(): Unit
ShadowRoot[JC] def ownerDocument: Document
ShadowRoot[JC] def parentNode: Node
ShadowRoot[JC] def previousSibling: Node
ShadowRoot[JC] def querySelector(selectors: String): Element
ShadowRoot[JC] def querySelectorAll(selectors: String): NodeList[Element]
ShadowRoot[JC] def removeChild(oldChild: Node): Node
ShadowRoot[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
ShadowRoot[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
ShadowRoot[JC] def replaceChild(newChild: Node, oldChild: Node): Node
ShadowRoot[JC] var textContent: String
ShadowRootInit[JT] var delegatesFocus: js.UndefOr[Boolean]
ShadowRootInit[JT] var mode: ShadowRootMode
ShadowRootMode[JT]
ShadowRootMode[SO] val closed: ShadowRootMode
ShadowRootMode[SO] val open: ShadowRootMode
SharedWorker[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SharedWorker[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SharedWorker[JC] def dispatchEvent(evt: Event): Boolean
SharedWorker[JC] var onerror: js.Function1[ErrorEvent, _]
SharedWorker[JC] def port: MessagePort
SharedWorker[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SharedWorker[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SharedWorker[SO]
SharedWorkerGlobalScope[JO] def self: SharedWorkerGlobalScope
SharedWorkerGlobalScope[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SharedWorkerGlobalScope[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SharedWorkerGlobalScope[JT] def applicationCache: ApplicationCache
SharedWorkerGlobalScope[JT] def atob(encodedString: String): String
SharedWorkerGlobalScope[JT] def btoa(rawString: String): String
SharedWorkerGlobalScope[JT] def caches: js.UndefOr[CacheStorage]
SharedWorkerGlobalScope[JT] def clearInterval(handle: Int): Unit
SharedWorkerGlobalScope[JT] def clearTimeout(handle: Int): Unit
SharedWorkerGlobalScope[JT] def close(): Unit
SharedWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput): js.Promise[ImageBitmap]
SharedWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
SharedWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double): js.Promise[ImageBitmap]
SharedWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
SharedWorkerGlobalScope[JT] def crossOriginIsolated: Boolean
SharedWorkerGlobalScope[JT] def dispatchEvent(evt: Event): Boolean
SharedWorkerGlobalScope[JT] def fetch(info: RequestInfo, init: RequestInit?): js.Promise[Response]
SharedWorkerGlobalScope[JT] def importScripts(urls: js.Array[String]): Unit
SharedWorkerGlobalScope[JT] def indexedDB: js.UndefOr[IDBFactory]
SharedWorkerGlobalScope[JT] def isSecureContext: Boolean
SharedWorkerGlobalScope[JT] def location: WorkerLocation
SharedWorkerGlobalScope[JT] def name: String
SharedWorkerGlobalScope[JT] def navigator: WorkerNavigator
SharedWorkerGlobalScope[JT] var onError: js.Function1[ErrorEvent, _]
SharedWorkerGlobalScope[JT] var onconnect: js.Function1[ExtendableMessageEvent, _]
SharedWorkerGlobalScope[JT] var onlanguagechange: js.Function1[Event, _]
SharedWorkerGlobalScope[JT] var onoffline: js.Function1[Event, _]
SharedWorkerGlobalScope[JT] var ononline: js.Function1[Event, _]
SharedWorkerGlobalScope[JT] def origin: String
SharedWorkerGlobalScope[JT] def queueMicrotask(function: js.Function0[Any]): Unit
SharedWorkerGlobalScope[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SharedWorkerGlobalScope[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SharedWorkerGlobalScope[JT] def self: this.type
SharedWorkerGlobalScope[JT] def setInterval(handler: js.Function0[Any], timeout: Double): Int
SharedWorkerGlobalScope[JT] def setTimeout(handler: js.Function0[Any], timeout: Double): Int
SourceBuffer[JT] def abort(): Unit
SourceBuffer[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SourceBuffer[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SourceBuffer[JT] def appendBuffer(data: BufferSource): Unit
SourceBuffer[JT] var appendWindowEnd: Double
SourceBuffer[JT] var appendWindowStart: Double
SourceBuffer[JT] def audioTracks: AudioTrackList
SourceBuffer[JT] def buffered: TimeRanges
SourceBuffer[JT] def dispatchEvent(evt: Event): Boolean
SourceBuffer[JT] var mode: AppendMode
SourceBuffer[JT] var onabort: js.Function1[Event, Any]
SourceBuffer[JT] var onerror: js.Function1[Event, Any]
SourceBuffer[JT] var onupdate: js.Function1[Event, Any]
SourceBuffer[JT] var onupdateend: js.Function1[Event, Any]
SourceBuffer[JT] var onupdatestart: js.Function1[Event, Any]
SourceBuffer[JT] def remove(start: Double, end: Double): Unit
SourceBuffer[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SourceBuffer[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SourceBuffer[JT] def textTracks: TextTrackList
SourceBuffer[JT] var timestampOffset: Double
SourceBuffer[JT] def updating: Boolean
SourceBuffer[JT] def videoTracks: VideoTrackList
SourceBufferList[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SourceBufferList[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
SourceBufferList[JT] @JSBracketAccess def apply(index: Double): SourceBuffer
SourceBufferList[JT] def dispatchEvent(evt: Event): Boolean
SourceBufferList[JT] def length: Double
SourceBufferList[JT] var onaddsourcebuffer: js.Function1[Event, Any]
SourceBufferList[JT] var onremovesourcebuffer: js.Function1[Event, Any]
SourceBufferList[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
SourceBufferList[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
StaticRange[JC] def collapsed: Boolean
StaticRange[JC] def endContainer: Node
StaticRange[JC] def endOffset: Int
StaticRange[JC] def startContainer: Node
StaticRange[JC] def startOffset: Int
StaticRangeInit[JT] val endContainer: Node
StaticRangeInit[JT] val endOffset: Int
StaticRangeInit[JT] val startContainer: Node
StaticRangeInit[JT] val startOffset: Int
StereoPannerNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
StereoPannerNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
StereoPannerNode[JT] var channelCount: Int
StereoPannerNode[JT] var channelCountMode: AudioNodeChannelCountMode
StereoPannerNode[JT] var channelInterpretation: AudioNodeChannelInterpretation
StereoPannerNode[JT] def connect(audioNode: AudioNode): Unit
StereoPannerNode[JT] def connect(audioParam: AudioParam): Unit
StereoPannerNode[JT] val context: AudioContext
StereoPannerNode[JT] def disconnect(output: AudioNode?): Unit
StereoPannerNode[JT] def dispatchEvent(evt: Event): Boolean
StereoPannerNode[JT] val numberOfInputs: Int
StereoPannerNode[JT] val numberOfOutputs: Int
StereoPannerNode[JT] val pan: AudioParam
StereoPannerNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
StereoPannerNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Storage[JC] def clear(): Unit
Storage[JC] def getItem(key: String): String
Storage[JC] def key(index: Int): String
Storage[JC] def length: Int
Storage[JC] def removeItem(key: String): Unit
Storage[JC] def setItem(key: String, data: String): Unit
StorageEstimate[JT] val quota: Double
StorageEstimate[JT] val usage: Double
StorageEvent[JC] def bubbles: Boolean
StorageEvent[JC] def cancelBubble: Boolean
StorageEvent[JC] def cancelable: Boolean
StorageEvent[JC] def composed: Boolean
StorageEvent[JC] def currentTarget: EventTarget
StorageEvent[JC] def defaultPrevented: Boolean
StorageEvent[JC] def eventPhase: Int
StorageEvent[JC] def isTrusted: Boolean
StorageEvent[JC] def key: String
StorageEvent[JC] def newValue: String
StorageEvent[JC] def oldValue: String
StorageEvent[JC] def preventDefault(): Unit
StorageEvent[JC] def stopImmediatePropagation(): Unit
StorageEvent[JC] def stopPropagation(): Unit
StorageEvent[JC] def storageArea: Storage
StorageEvent[JC] def target: EventTarget
StorageEvent[JC] def timeStamp: Double
StorageEvent[JC] def `type`: String
StorageEvent[JC] def url: String
StorageEventInit[JT] var bubbles: js.UndefOr[Boolean]
StorageEventInit[JT] var cancelable: js.UndefOr[Boolean]
StorageEventInit[JT] var composed: js.UndefOr[Boolean]
StorageEventInit[JT] var key: js.UndefOr[String]
StorageEventInit[JT] var newValue: js.UndefOr[String]
StorageEventInit[JT] var oldValue: js.UndefOr[String]
StorageEventInit[JT] var scoped: js.UndefOr[Boolean]
StorageEventInit[JT] var storageArea: js.UndefOr[Storage]
StorageEventInit[JT] var url: js.UndefOr[String]
StorageManager[JT] def estimate(): js.Promise[StorageEstimate]
StorageManager[JT] def persist(): js.Promise[Boolean]
StorageManager[JT] def persisted(): js.Promise[Boolean]
StyleMedia[JT] def matchMedium(mediaquery: String): Boolean
StyleMedia[JT] def `type`: String
StyleSheet[JC] def disabled: Boolean
StyleSheet[JC] def href: String
StyleSheet[JC] def media: MediaList
StyleSheet[JC] def ownerNode: Node
StyleSheet[JC] def parentStyleSheet: StyleSheet
StyleSheet[JC] def title: String
StyleSheet[JC] def `type`: String
StyleSheetList[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): StyleSheet
StyleSheetList[JC] def item(index: Int): StyleSheet
StyleSheetList[JC] def length: Int
StyleSheetList[JC] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: StyleSheet): Unit
SubtleCrypto[JT] def decrypt(algorithm: AlgorithmIdentifier, key: CryptoKey, data: BufferSource): js.Promise[js.Any]
SubtleCrypto[JT] def deriveBits(algorithm: AlgorithmIdentifier, baseKey: CryptoKey, length: Double): js.Promise[ArrayBuffer]
SubtleCrypto[JT] def deriveKey(algorithm: AlgorithmIdentifier, baseKey: CryptoKey, derivedKeyType: KeyAlgorithmIdentifier, extractable: Boolean, keyUsages: js.Array[KeyUsage]): js.Promise[js.Any]
SubtleCrypto[JT] def digest(algorithm: HashAlgorithmIdentifier, data: BufferSource): js.Promise[js.Any]
SubtleCrypto[JT] def encrypt(algorithm: AlgorithmIdentifier, key: CryptoKey, data: BufferSource): js.Promise[js.Any]
SubtleCrypto[JT] def exportKey(format: KeyFormat, key: CryptoKey): js.Promise[js.Any]
SubtleCrypto[JT] def generateKey(algorithm: KeyAlgorithmIdentifier, extractable: Boolean, keyUsages: js.Array[KeyUsage]): js.Promise[js.Any]
SubtleCrypto[JT] def importKey(format: KeyFormat, keyData: BufferSource, algorithm: KeyAlgorithmIdentifier, extractable: Boolean, keyUsages: js.Array[KeyUsage]): js.Promise[CryptoKey]
SubtleCrypto[JT] def importKey(format: KeyFormat, keyData: JsonWebKey, algorithm: KeyAlgorithmIdentifier, extractable: Boolean, keyUsages: js.Array[KeyUsage]): js.Promise[CryptoKey]
SubtleCrypto[JT] def sign(algorithm: AlgorithmIdentifier, key: CryptoKey, data: BufferSource): js.Promise[js.Any]
SubtleCrypto[JT] def unwrapKey(format: String, wrappedKey: BufferSource, unwrappingKey: CryptoKey, unwrapAlgorithm: AlgorithmIdentifier, unwrappedKeyAlgorithm: AlgorithmIdentifier, extractable: Boolean, keyUsages: js.Array[KeyUsage]): js.Promise[js.Any]
SubtleCrypto[JT] def verify(algorithm: AlgorithmIdentifier, key: CryptoKey, signature: BufferSource, data: BufferSource): js.Promise[js.Any]
SubtleCrypto[JT] def wrapKey(format: KeyFormat, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: AlgorithmIdentifier): js.Promise[js.Any]
Text[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Text[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Text[JC] def appendChild(newChild: Node): Node
Text[JC] def appendData(arg: String): Unit
Text[JC] def baseURI: String
Text[JC] def childNodes: NodeList[Node]
Text[JC] def cloneNode(deep: Boolean?): Node
Text[JC] def compareDocumentPosition(other: Node): Int
Text[JC] def contains(otherNode: Node): Boolean
Text[JC] var data: String
Text[JC] def deleteData(offset: Int, count: Int): Unit
Text[JC] def dispatchEvent(evt: Event): Boolean
Text[JC] def firstChild: Node
Text[JC] def hasChildNodes(): Boolean
Text[JC] var innerText: String
Text[JC] def insertBefore(newChild: Node, refChild: Node): Node
Text[JC] def insertData(offset: Int, arg: String): Unit
Text[JC] def isConnected: Boolean
Text[JC] def isDefaultNamespace(namespaceURI: String): Boolean
Text[JC] def isEqualNode(arg: Node): Boolean
Text[JC] def isSameNode(other: Node): Boolean
Text[JC] def isSupported(feature: String, version: String): Boolean
Text[JC] def lastChild: Node
Text[JC] def length: Int
Text[JC] def localName: String
Text[JC] def lookupNamespaceURI(prefix: String): String
Text[JC] def lookupPrefix(namespaceURI: String): String
Text[JC] def namespaceURI: String
Text[JC] def nextElementSibling: Element
Text[JC] def nextSibling: Node
Text[JC] def nodeName: String
Text[JC] def nodeType: Int
Text[JC] var nodeValue: String
Text[JC] def normalize(): Unit
Text[JC] def ownerDocument: Document
Text[JC] def parentNode: Node
Text[JC] def previousElementSibling: Element
Text[JC] def previousSibling: Node
Text[JC] def removeChild(oldChild: Node): Node
Text[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Text[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Text[JC] def replaceChild(newChild: Node, oldChild: Node): Node
Text[JC] def replaceData(offset: Int, count: Int, arg: String): Unit
Text[JC] def splitText(offset: Int): Text
Text[JC] def substringData(offset: Int, count: Int): String
Text[JC] var textContent: String
Text[JC] def wholeText: String
TextEvent[JC] def bubbles: Boolean
TextEvent[JC] def cancelBubble: Boolean
TextEvent[JC] def cancelable: Boolean
TextEvent[JC] def composed: Boolean
TextEvent[JC] def currentTarget: EventTarget
TextEvent[JC] def data: String
TextEvent[JC] def defaultPrevented: Boolean
TextEvent[JC] def detail: Int
TextEvent[JC] def eventPhase: Int
TextEvent[JC] def initTextEvent(typeArg: String, canBubbleArg: Boolean, cancelableArg: Boolean, viewArg: Window, dataArg: String, inputMethod: Int, locale: String): Unit
TextEvent[JC] def inputMethod: Int
TextEvent[JC] def isTrusted: Boolean
TextEvent[JC] def locale: String
TextEvent[JC] def preventDefault(): Unit
TextEvent[JC] def stopImmediatePropagation(): Unit
TextEvent[JC] def stopPropagation(): Unit
TextEvent[JC] def target: EventTarget
TextEvent[JC] def timeStamp: Double
TextEvent[JC] def `type`: String
TextEvent[JC] def view: Window
TextEvent[JO] val DOM_INPUT_METHOD_DROP: Int
TextEvent[JO] val DOM_INPUT_METHOD_HANDWRITING: Int
TextEvent[JO] val DOM_INPUT_METHOD_IME: Int
TextEvent[JO] val DOM_INPUT_METHOD_KEYBOARD: Int
TextEvent[JO] val DOM_INPUT_METHOD_MULTIMODAL: Int
TextEvent[JO] val DOM_INPUT_METHOD_OPTION: Int
TextEvent[JO] val DOM_INPUT_METHOD_PASTE: Int
TextEvent[JO] val DOM_INPUT_METHOD_SCRIPT: Int
TextEvent[JO] val DOM_INPUT_METHOD_UNKNOWN: Int
TextEvent[JO] val DOM_INPUT_METHOD_VOICE: Int
TextEventInit[JT] var bubbles: js.UndefOr[Boolean]
TextEventInit[JT] var cancelable: js.UndefOr[Boolean]
TextEventInit[JT] var composed: js.UndefOr[Boolean]
TextEventInit[JT] var data: js.UndefOr[String]
TextEventInit[JT] var detail: js.UndefOr[Int]
TextEventInit[JT] var inputMethod: js.UndefOr[Int]
TextEventInit[JT] var locale: js.UndefOr[String]
TextEventInit[JT] var scoped: js.UndefOr[Boolean]
TextEventInit[JT] var view: js.UndefOr[Window]
TextMetrics[JC] val actualBoundingBoxAscent: Double
TextMetrics[JC] val actualBoundingBoxDescent: Double
TextMetrics[JC] val actualBoundingBoxLeft: Double
TextMetrics[JC] val actualBoundingBoxRight: Double
TextMetrics[JC] val alphabeticBaseline: Double
TextMetrics[JC] val emHeightAscent: Double
TextMetrics[JC] val emHeightDescent: Double
TextMetrics[JC] val fontBoundingBoxAscent: Double
TextMetrics[JC] val fontBoundingBoxDescent: Double
TextMetrics[JC] val hangingBaseline: Double
TextMetrics[JC] val ideographicBaseline: Double
TextMetrics[JC] var width: Double
TextTrack[JO] var DISABLED: Int
TextTrack[JO] var ERROR: Int
TextTrack[JO] var HIDDEN: Int
TextTrack[JO] var LOADED: Int
TextTrack[JO] var LOADING: Int
TextTrack[JO] var NONE: Int
TextTrack[JO] var SHOWING: Int
TextTrack[JT] var DISABLED: Int
TextTrack[JT] var ERROR: Int
TextTrack[JT] var HIDDEN: Int
TextTrack[JT] var LOADED: Int
TextTrack[JT] var LOADING: Int
TextTrack[JT] var NONE: Int
TextTrack[JT] var SHOWING: Int
TextTrack[JT] var activeCues: TextTrackCueList
TextTrack[JT] def addCue(cue: TextTrackCue): Unit
TextTrack[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
TextTrack[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
TextTrack[JT] var cues: TextTrackCueList
TextTrack[JT] def dispatchEvent(evt: Event): Boolean
TextTrack[JT] val id: String
TextTrack[JT] val inBandMetadataTrackDispatchType: String
TextTrack[JT] var kind: String
TextTrack[JT] var label: String
TextTrack[JT] var language: String
TextTrack[JT] var mode: TextTrackMode
TextTrack[JT] var oncuechange: js.Function1[Event, _]
TextTrack[JT] var onerror: js.Function1[ErrorEvent, _]
TextTrack[JT] var onload: js.Function1[js.Any, _]
TextTrack[JT] var readyState: Int
TextTrack[JT] def removeCue(cue: TextTrackCue): Unit
TextTrack[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
TextTrack[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
TextTrackCue[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
TextTrackCue[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
TextTrackCue[JT] def dispatchEvent(evt: Event): Boolean
TextTrackCue[JT] var endTime: Double
TextTrackCue[JT] def getCueAsHTML(): DocumentFragment
TextTrackCue[JT] var id: String
TextTrackCue[JT] var onenter: js.Function1[Event, _]
TextTrackCue[JT] var onexit: js.Function1[Event, _]
TextTrackCue[JT] var pauseOnExit: Boolean
TextTrackCue[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
TextTrackCue[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
TextTrackCue[JT] var startTime: Double
TextTrackCue[JT] var text: String
TextTrackCue[JT] var track: TextTrack
TextTrackCueList[JC] @JSBracketAccess def apply(index: Int): T
TextTrackCueList[JC] def getCueById(id: String): TextTrackCue
TextTrackCueList[JC] def length: Int
TextTrackList[JT] @JSBracketAccess def apply(index: Int): T
TextTrackList[JT] def getTrackById(id: String): TextTrack
TextTrackList[JT] def length: Int
TextTrackList[JT] var onaddtrack: js.Function1[TrackEvent, Any]
TextTrackList[JT] var onchange: js.Function1[Event, Any]
TextTrackList[JT] var onremovetrack: js.Function1[TrackEvent, Any]
TextTrackMode[JT]
TextTrackMode[SO] val disabled: TextTrackMode
TextTrackMode[SO] val hidden: TextTrackMode
TextTrackMode[SO] val showing: TextTrackMode
TimeRanges[JC] def end(index: Int): Double
TimeRanges[JC] def length: Int
TimeRanges[JC] def start(index: Int): Double
Touch[JC] def clientX: Double
Touch[JC] def clientY: Double
Touch[JC] def force: Double
Touch[JC] def identifier: Double
Touch[JC] def pageX: Double
Touch[JC] def pageY: Double
Touch[JC] def radiusX: Double
Touch[JC] def radiusY: Double
Touch[JC] def rotationAngle: Double
Touch[JC] def screenX: Double
Touch[JC] def screenY: Double
Touch[JC] def target: EventTarget
TouchEvent[JC] def altKey: Boolean
TouchEvent[JC] def bubbles: Boolean
TouchEvent[JC] def cancelBubble: Boolean
TouchEvent[JC] def cancelable: Boolean
TouchEvent[JC] def changedTouches: TouchList
TouchEvent[JC] def composed: Boolean
TouchEvent[JC] def ctrlKey: Boolean
TouchEvent[JC] def currentTarget: EventTarget
TouchEvent[JC] def defaultPrevented: Boolean
TouchEvent[JC] def detail: Int
TouchEvent[JC] def eventPhase: Int
TouchEvent[JC] def isTrusted: Boolean
TouchEvent[JC] def metaKey: Boolean
TouchEvent[JC] def preventDefault(): Unit
TouchEvent[JC] def shiftKey: Boolean
TouchEvent[JC] def stopImmediatePropagation(): Unit
TouchEvent[JC] def stopPropagation(): Unit
TouchEvent[JC] def target: EventTarget
TouchEvent[JC] override def target: EventTarget
TouchEvent[JC] def targetTouches: TouchList
TouchEvent[JC] def timeStamp: Double
TouchEvent[JC] def touches: TouchList
TouchEvent[JC] def `type`: String
TouchEvent[JC] def view: Window
TouchEventInit[JT] var altKey: js.UndefOr[Boolean]
TouchEventInit[JT] var bubbles: js.UndefOr[Boolean]
TouchEventInit[JT] var cancelable: js.UndefOr[Boolean]
TouchEventInit[JT] var changedTouches: js.UndefOr[TouchList]
TouchEventInit[JT] var composed: js.UndefOr[Boolean]
TouchEventInit[JT] var ctrlKey: js.UndefOr[Boolean]
TouchEventInit[JT] var detail: js.UndefOr[Int]
TouchEventInit[JT] var metaKey: js.UndefOr[Boolean]
TouchEventInit[JT] var scoped: js.UndefOr[Boolean]
TouchEventInit[JT] var shiftKey: js.UndefOr[Boolean]
TouchEventInit[JT] var targetTouches: js.UndefOr[TouchList]
TouchEventInit[JT] var touches: js.UndefOr[TouchList]
TouchEventInit[JT] var view: js.UndefOr[Window]
TouchList[JT] @JSBracketAccess def apply(index: Int): T
TouchList[JT] def item(index: Int): Touch
TouchList[JT] def length: Int
TrackEvent[JT] def bubbles: Boolean
TrackEvent[JT] def cancelBubble: Boolean
TrackEvent[JT] def cancelable: Boolean
TrackEvent[JT] def composed: Boolean
TrackEvent[JT] def currentTarget: EventTarget
TrackEvent[JT] def defaultPrevented: Boolean
TrackEvent[JT] def eventPhase: Int
TrackEvent[JT] def isTrusted: Boolean
TrackEvent[JT] def preventDefault(): Unit
TrackEvent[JT] def stopImmediatePropagation(): Unit
TrackEvent[JT] def stopPropagation(): Unit
TrackEvent[JT] def target: EventTarget
TrackEvent[JT] def timeStamp: Double
TrackEvent[JT] var track: js.Any
TrackEvent[JT] def `type`: String
TransitionEvent[JT] def bubbles: Boolean
TransitionEvent[JT] def cancelBubble: Boolean
TransitionEvent[JT] def cancelable: Boolean
TransitionEvent[JT] def composed: Boolean
TransitionEvent[JT] def currentTarget: EventTarget
TransitionEvent[JT] def defaultPrevented: Boolean
TransitionEvent[JT] def elapsedTime: Double
TransitionEvent[JT] def eventPhase: Int
TransitionEvent[JT] def isTrusted: Boolean
TransitionEvent[JT] def preventDefault(): Unit
TransitionEvent[JT] def propertyName: String
TransitionEvent[JT] def stopImmediatePropagation(): Unit
TransitionEvent[JT] def stopPropagation(): Unit
TransitionEvent[JT] def target: EventTarget
TransitionEvent[JT] def timeStamp: Double
TransitionEvent[JT] def `type`: String
TreeWalker[JC] var currentNode: Node
TreeWalker[JC] def filter: NodeFilter
TreeWalker[JC] def firstChild(): Node
TreeWalker[JC] def lastChild(): Node
TreeWalker[JC] def nextNode(): Node
TreeWalker[JC] def nextSibling(): Node
TreeWalker[JC] def parentNode(): Node
TreeWalker[JC] def previousNode(): Node
TreeWalker[JC] def previousSibling(): Node
TreeWalker[JC] def root: Node
TreeWalker[JC] def whatToShow: Int
TwoDContextAttributes[JT] var alpha: js.UndefOr[Boolean]
TwoDContextAttributes[JT] var storage: js.UndefOr[String]
TwoDContextAttributes[JT] var willReadFrequently: js.UndefOr[Boolean]
UIEvent[JC] def bubbles: Boolean
UIEvent[JC] def cancelBubble: Boolean
UIEvent[JC] def cancelable: Boolean
UIEvent[JC] def composed: Boolean
UIEvent[JC] def currentTarget: EventTarget
UIEvent[JC] def defaultPrevented: Boolean
UIEvent[JC] def detail: Int
UIEvent[JC] def eventPhase: Int
UIEvent[JC] def isTrusted: Boolean
UIEvent[JC] def preventDefault(): Unit
UIEvent[JC] def stopImmediatePropagation(): Unit
UIEvent[JC] def stopPropagation(): Unit
UIEvent[JC] def target: EventTarget
UIEvent[JC] def timeStamp: Double
UIEvent[JC] def `type`: String
UIEvent[JC] def view: Window
UIEventInit[JT] var bubbles: js.UndefOr[Boolean]
UIEventInit[JT] var cancelable: js.UndefOr[Boolean]
UIEventInit[JT] var composed: js.UndefOr[Boolean]
UIEventInit[JT] var detail: js.UndefOr[Int]
UIEventInit[JT] var scoped: js.UndefOr[Boolean]
UIEventInit[JT] var view: js.UndefOr[Window]
URL[JC] var hash: String
URL[JC] var host: String
URL[JC] var hostname: String
URL[JC] var href: String
URL[JC] def origin: String
URL[JC] var password: String
URL[JC] var pathname: String
URL[JC] var port: String
URL[JC] var protocol: String
URL[JC] var search: String
URL[JC] val searchParams: URLSearchParams
URL[JC] var username: String
URL[JO] def createObjectURL(blob: Blob): String
URL[JO] def createObjectURL(src: MediaSource): String
URL[JO] def revokeObjectURL(url: String): Unit
URLSearchParams[JC] def append(name: String, value: String): Unit
URLSearchParams[JC] def delete(name: String): Unit
URLSearchParams[JC] def entries(): js.Iterator[js.Tuple2[String, String]]
URLSearchParams[JC] def forEach(callback: js.Function2[String, String, Unit]): Unit
URLSearchParams[JC] def get(name: String): String
URLSearchParams[JC] def getAll(name: String): Sequence[String]
URLSearchParams[JC] def has(name: String): Boolean
URLSearchParams[JC] @JSName(js.Symbol.iterator) override def jsIterator(): js.Iterator[js.Tuple2[String, String]]
URLSearchParams[JC] def keys(): js.Iterator[String]
URLSearchParams[JC] def set(name: String, value: String): Unit
URLSearchParams[JC] def sort(): Unit
URLSearchParams[JC] def values(): js.Iterator[String]
ValidityState[JT] def customError: Boolean
ValidityState[JT] def patternMismatch: Boolean
ValidityState[JT] def rangeOverflow: Boolean
ValidityState[JT] def rangeUnderflow: Boolean
ValidityState[JT] def stepMismatch: Boolean
ValidityState[JT] def tooLong: Boolean
ValidityState[JT] def typeMismatch: Boolean
ValidityState[JT] def valid: Boolean
ValidityState[JT] def valueMissing: Boolean
VideoTrack[JT] val id: String
VideoTrack[JT] val kind: String
VideoTrack[JT] val label: String
VideoTrack[JT] val language: String
VideoTrack[JT] var selected: Boolean
VideoTrackList[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
VideoTrackList[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
VideoTrackList[JT] @JSBracketAccess def apply(index: Double): VideoTrack
VideoTrackList[JT] def dispatchEvent(evt: Event): Boolean
VideoTrackList[JT] def getTrackById(id: String): VideoTrack
VideoTrackList[JT] def length: Double
VideoTrackList[JT] var onaddtrack: js.Function1[Event, Any]
VideoTrackList[JT] var onchange: js.Function1[Event, Any]
VideoTrackList[JT] var onremovetrack: js.Function1[Event, Any]
VideoTrackList[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
VideoTrackList[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
VideoTrackList[JT] def selectedIndex: Double
VisibilityState[JT]
VisibilityState[SO] val hidden: VisibilityState
VisibilityState[SO] val prerender: VisibilityState
VisibilityState[SO] val unloaded: VisibilityState
VisibilityState[SO] val visible: VisibilityState
WaveShaperNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
WaveShaperNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
WaveShaperNode[JT] var channelCount: Int
WaveShaperNode[JT] var channelCountMode: AudioNodeChannelCountMode
WaveShaperNode[JT] var channelInterpretation: AudioNodeChannelInterpretation
WaveShaperNode[JT] def connect(audioNode: AudioNode): Unit
WaveShaperNode[JT] def connect(audioParam: AudioParam): Unit
WaveShaperNode[JT] val context: AudioContext
WaveShaperNode[JT] var curve: js.typedarray.Float32Array
WaveShaperNode[JT] def disconnect(output: AudioNode?): Unit
WaveShaperNode[JT] def dispatchEvent(evt: Event): Boolean
WaveShaperNode[JT] val numberOfInputs: Int
WaveShaperNode[JT] val numberOfOutputs: Int
WaveShaperNode[JT] var oversample: String
WaveShaperNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
WaveShaperNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
WebGLActiveInfo[JC] val name: String
WebGLActiveInfo[JC] val size: Int
WebGLActiveInfo[JC] val `type`: Int
WebGLBuffer[JC]
WebGLContextAttributes[JC] var alpha: Boolean
WebGLContextAttributes[JC] var antialias: Boolean
WebGLContextAttributes[JC] var depth: Boolean
WebGLContextAttributes[JC] var premultipliedAlpha: Boolean
WebGLContextAttributes[JC] var preserveDrawingBuffer: Boolean
WebGLContextAttributes[JC] var stencil: Boolean
WebGLFramebuffer[JC]
WebGLProgram[JC]
WebGLRenderbuffer[JC]
WebGLRenderingContext[JC] def activeTexture(texture: Int): Unit
WebGLRenderingContext[JC] def attachShader(program: WebGLProgram, shader: WebGLShader): Unit
WebGLRenderingContext[JC] def bindAttribLocation(program: WebGLProgram, index: Int, name: String): Unit
WebGLRenderingContext[JC] def bindBuffer(target: Int, buffer: WebGLBuffer): Unit
WebGLRenderingContext[JC] def bindFramebuffer(target: Int, framebuffer: WebGLFramebuffer): Unit
WebGLRenderingContext[JC] def bindRenderbuffer(target: Int, renderbuffer: WebGLRenderbuffer): Unit
WebGLRenderingContext[JC] def bindTexture(target: Int, texture: WebGLTexture): Unit
WebGLRenderingContext[JC] def blendColor(red: Double, green: Double, blue: Double, alpha: Double): Unit
WebGLRenderingContext[JC] def blendEquation(mode: Int): Unit
WebGLRenderingContext[JC] def blendEquationSeparate(modeRGB: Int, modeAlpha: Int): Unit
WebGLRenderingContext[JC] def blendFunc(sfactor: Int, dfactor: Int): Unit
WebGLRenderingContext[JC] def blendFuncSeparate(srcRGB: Int, dstRGB: Int, srcAlpha: Int, dstAlpha: Int): Unit
WebGLRenderingContext[JC] def bufferData(target: Int, data: ArrayBuffer, usage: Int): Unit
WebGLRenderingContext[JC] def bufferData(target: Int, data: ArrayBufferView, usage: Int): Unit
WebGLRenderingContext[JC] def bufferData(target: Int, size: Int, usage: Int): Unit
WebGLRenderingContext[JC] def bufferSubData(target: Int, offset: Int, data: ArrayBuffer): Unit
WebGLRenderingContext[JC] def bufferSubData(target: Int, offset: Int, data: ArrayBufferView): Unit
WebGLRenderingContext[JC] val canvas: HTMLCanvasElement
WebGLRenderingContext[JC] def checkFramebufferStatus(target: Int): Int
WebGLRenderingContext[JC] def clear(mask: Int): Unit
WebGLRenderingContext[JC] def clearColor(red: Double, green: Double, blue: Double, alpha: Double): Unit
WebGLRenderingContext[JC] def clearDepth(depth: Double): Unit
WebGLRenderingContext[JC] def clearStencil(s: Int): Unit
WebGLRenderingContext[JC] def colorMask(red: Boolean, green: Boolean, blue: Boolean, alpha: Boolean): Unit
WebGLRenderingContext[JC] def compileShader(shader: WebGLShader): Unit
WebGLRenderingContext[JC] def compressedTexImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, data: ArrayBufferView): Unit
WebGLRenderingContext[JC] def compressedTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, data: ArrayBufferView): Unit
WebGLRenderingContext[JC] def copyTexImage2D(target: Int, level: Int, internalformat: Int, x: Int, y: Int, width: Int, height: Int, border: Int): Unit
WebGLRenderingContext[JC] def copyTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, x: Int, y: Int, width: Int, height: Int): Unit
WebGLRenderingContext[JC] def createBuffer(): WebGLBuffer
WebGLRenderingContext[JC] def createFramebuffer(): WebGLFramebuffer
WebGLRenderingContext[JC] def createProgram(): WebGLProgram
WebGLRenderingContext[JC] def createRenderbuffer(): WebGLRenderbuffer
WebGLRenderingContext[JC] def createShader(`type`: Int): WebGLShader
WebGLRenderingContext[JC] def createTexture(): WebGLTexture
WebGLRenderingContext[JC] def cullFace(mode: Int): Unit
WebGLRenderingContext[JC] def deleteBuffer(buffer: WebGLBuffer): Unit
WebGLRenderingContext[JC] def deleteFramebuffer(framebuffer: WebGLFramebuffer): Unit
WebGLRenderingContext[JC] def deleteProgram(program: WebGLProgram): Unit
WebGLRenderingContext[JC] def deleteRenderbuffer(renderbuffer: WebGLRenderbuffer): Unit
WebGLRenderingContext[JC] def deleteShader(shader: WebGLShader): Unit
WebGLRenderingContext[JC] def deleteTexture(texture: WebGLTexture): Unit
WebGLRenderingContext[JC] def depthFunc(func: Int): Unit
WebGLRenderingContext[JC] def depthMask(flag: Boolean): Unit
WebGLRenderingContext[JC] def depthRange(zNear: Double, zFar: Double): Unit
WebGLRenderingContext[JC] def detachShader(program: WebGLProgram, shader: WebGLShader): Unit
WebGLRenderingContext[JC] def disable(cap: Int): Unit
WebGLRenderingContext[JC] def disableVertexAttribArray(index: Int): Unit
WebGLRenderingContext[JC] def drawArrays(mode: Int, first: Int, count: Int): Unit
WebGLRenderingContext[JC] def drawElements(mode: Int, count: Int, `type`: Int, offset: Int): Unit
WebGLRenderingContext[JC] val drawingBufferHeight: Int
WebGLRenderingContext[JC] val drawingBufferWidth: Int
WebGLRenderingContext[JC] def enable(cap: Int): Unit
WebGLRenderingContext[JC] def enableVertexAttribArray(index: Int): Unit
WebGLRenderingContext[JC] def finish(): Unit
WebGLRenderingContext[JC] def flush(): Unit
WebGLRenderingContext[JC] def framebufferRenderbuffer(target: Int, attachment: Int, renderbuffertarget: Int, renderbuffer: WebGLRenderbuffer): Unit
WebGLRenderingContext[JC] def framebufferTexture2D(target: Int, attachment: Int, textarget: Int, texture: WebGLTexture, level: Int): Unit
WebGLRenderingContext[JC] def frontFace(mode: Int): Unit
WebGLRenderingContext[JC] def generateMipmap(target: Int): Unit
WebGLRenderingContext[JC] def getActiveAttrib(program: WebGLProgram, index: Int): WebGLActiveInfo
WebGLRenderingContext[JC] def getActiveUniform(program: WebGLProgram, index: Int): WebGLActiveInfo
WebGLRenderingContext[JC] def getAttachedShaders(program: WebGLProgram): js.Array[WebGLShader]
WebGLRenderingContext[JC] def getAttribLocation(program: WebGLProgram, name: String): Int
WebGLRenderingContext[JC] def getBufferParameter(target: Int, pname: Int): Int
WebGLRenderingContext[JC] def getContextAttributes(): WebGLContextAttributes
WebGLRenderingContext[JC] def getError(): Int
WebGLRenderingContext[JC] def getExtension(name: String): js.Any
WebGLRenderingContext[JC] def getFramebufferAttachmentParameter(target: Int, attachment: Int, pname: Int): js.Any
WebGLRenderingContext[JC] def getParameter(pname: Int): js.Any
WebGLRenderingContext[JC] def getProgramInfoLog(program: WebGLProgram): String
WebGLRenderingContext[JC] def getProgramParameter(program: WebGLProgram, pname: Int): js.Any
WebGLRenderingContext[JC] def getRenderbufferParameter(target: Int, pname: Int): js.Any
WebGLRenderingContext[JC] def getShaderInfoLog(shader: WebGLShader): String
WebGLRenderingContext[JC] def getShaderParameter(shader: WebGLShader, pname: Int): js.Any
WebGLRenderingContext[JC] def getShaderPrecisionFormat(shadertype: Int, precisiontype: Int): WebGLShaderPrecisionFormat
WebGLRenderingContext[JC] def getShaderSource(shader: WebGLShader): String
WebGLRenderingContext[JC] def getSupportedExtensions(): js.Array[String]
WebGLRenderingContext[JC] def getTexParameter(target: Int, pname: Int): js.Any
WebGLRenderingContext[JC] def getUniform(program: WebGLProgram, location: WebGLUniformLocation): js.Any
WebGLRenderingContext[JC] def getUniformLocation(program: WebGLProgram, name: String): WebGLUniformLocation
WebGLRenderingContext[JC] def getVertexAttrib(index: Int, pname: Int): js.Any
WebGLRenderingContext[JC] def getVertexAttribOffset(index: Int, pname: Int): Int
WebGLRenderingContext[JC] def hint(target: Int, mode: Int): Unit
WebGLRenderingContext[JC] def isBuffer(buffer: js.Any): Boolean
WebGLRenderingContext[JC] def isContextLost(): Boolean
WebGLRenderingContext[JC] def isEnabled(cap: Int): Boolean
WebGLRenderingContext[JC] def isFramebuffer(framebuffer: js.Any): Boolean
WebGLRenderingContext[JC] def isProgram(program: js.Any): Boolean
WebGLRenderingContext[JC] def isRenderbuffer(renderbuffer: js.Any): Boolean
WebGLRenderingContext[JC] def isShader(shader: js.Any): Boolean
WebGLRenderingContext[JC] def isTexture(texture: js.Any): Boolean
WebGLRenderingContext[JC] def lineWidth(width: Double): Unit
WebGLRenderingContext[JC] def linkProgram(program: WebGLProgram): Unit
WebGLRenderingContext[JC] def pixelStorei(pname: Int, param: Int): Unit
WebGLRenderingContext[JC] def polygonOffset(factor: Double, units: Double): Unit
WebGLRenderingContext[JC] def readPixels(x: Int, y: Int, width: Int, height: Int, format: Int, `type`: Int, pixels: ArrayBufferView): Unit
WebGLRenderingContext[JC] def renderbufferStorage(target: Int, internalformat: Int, width: Int, height: Int): Unit
WebGLRenderingContext[JC] def sampleCoverage(value: Int, invert: Boolean): Unit
WebGLRenderingContext[JC] def scissor(x: Int, y: Int, width: Int, height: Int): Unit
WebGLRenderingContext[JC] def shaderSource(shader: WebGLShader, source: String): Unit
WebGLRenderingContext[JC] def stencilFunc(func: Int, ref: Int, mask: Int): Unit
WebGLRenderingContext[JC] def stencilFuncSeparate(face: Int, func: Int, ref: Int, mask: Int): Unit
WebGLRenderingContext[JC] def stencilMask(mask: Int): Unit
WebGLRenderingContext[JC] def stencilMaskSeparate(face: Int, mask: Int): Unit
WebGLRenderingContext[JC] def stencilOp(fail: Int, zfail: Int, zpass: Int): Unit
WebGLRenderingContext[JC] def stencilOpSeparate(face: Int, fail: Int, zfail: Int, zpass: Int): Unit
WebGLRenderingContext[JC] def texImage2D(target: Int, level: Int, internalformat: Int, format: Int, `type`: Int, pixels: HTMLCanvasElement): Unit
WebGLRenderingContext[JC] def texImage2D(target: Int, level: Int, internalformat: Int, format: Int, `type`: Int, pixels: HTMLImageElement): Unit
WebGLRenderingContext[JC] def texImage2D(target: Int, level: Int, internalformat: Int, format: Int, `type`: Int, pixels: HTMLVideoElement): Unit
WebGLRenderingContext[JC] def texImage2D(target: Int, level: Int, internalformat: Int, format: Int, `type`: Int, pixels: ImageData): Unit
WebGLRenderingContext[JC] def texImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, format: Int, `type`: Int, pixels: ArrayBufferView): Unit
WebGLRenderingContext[JC] def texParameterf(target: Int, pname: Int, param: Double): Unit
WebGLRenderingContext[JC] def texParameteri(target: Int, pname: Int, param: Int): Unit
WebGLRenderingContext[JC] def texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, format: Int, `type`: Int, pixels: HTMLCanvasElement): Unit
WebGLRenderingContext[JC] def texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, format: Int, `type`: Int, pixels: HTMLImageElement): Unit
WebGLRenderingContext[JC] def texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, format: Int, `type`: Int, pixels: HTMLVideoElement): Unit
WebGLRenderingContext[JC] def texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, format: Int, `type`: Int, pixels: ImageData): Unit
WebGLRenderingContext[JC] def texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, `type`: Int, pixels: ArrayBufferView): Unit
WebGLRenderingContext[JC] def uniform1f(location: WebGLUniformLocation, x: Double): Unit
WebGLRenderingContext[JC] def uniform1fv(location: WebGLUniformLocation, v: Float32Array): Unit
WebGLRenderingContext[JC] def uniform1fv(location: WebGLUniformLocation, v: js.Array[Double]): Unit
WebGLRenderingContext[JC] def uniform1i(location: WebGLUniformLocation, x: Int): Unit
WebGLRenderingContext[JC] def uniform1iv(location: WebGLUniformLocation, v: Int32Array): Unit
WebGLRenderingContext[JC] def uniform1iv(location: WebGLUniformLocation, v: js.Array[Int]): Unit
WebGLRenderingContext[JC] def uniform2f(location: WebGLUniformLocation, x: Double, y: Double): Unit
WebGLRenderingContext[JC] def uniform2fv(location: WebGLUniformLocation, v: Float32Array): Unit
WebGLRenderingContext[JC] def uniform2fv(location: WebGLUniformLocation, v: js.Array[Double]): Unit
WebGLRenderingContext[JC] def uniform2i(location: WebGLUniformLocation, x: Int, y: Int): Unit
WebGLRenderingContext[JC] def uniform2iv(location: WebGLUniformLocation, v: Int32Array): Unit
WebGLRenderingContext[JC] def uniform2iv(location: WebGLUniformLocation, v: js.Array[Int]): Unit
WebGLRenderingContext[JC] def uniform3f(location: WebGLUniformLocation, x: Double, y: Double, z: Double): Unit
WebGLRenderingContext[JC] def uniform3fv(location: WebGLUniformLocation, v: Float32Array): Unit
WebGLRenderingContext[JC] def uniform3fv(location: WebGLUniformLocation, v: js.Array[Double]): Unit
WebGLRenderingContext[JC] def uniform3i(location: WebGLUniformLocation, x: Int, y: Int, z: Int): Unit
WebGLRenderingContext[JC] def uniform3iv(location: WebGLUniformLocation, v: Int32Array): Unit
WebGLRenderingContext[JC] def uniform3iv(location: WebGLUniformLocation, v: js.Array[Int]): Unit
WebGLRenderingContext[JC] def uniform4f(location: WebGLUniformLocation, x: Double, y: Double, z: Double, w: Double): Unit
WebGLRenderingContext[JC] def uniform4fv(location: WebGLUniformLocation, v: Float32Array): Unit
WebGLRenderingContext[JC] def uniform4fv(location: WebGLUniformLocation, v: js.Array[Double]): Unit
WebGLRenderingContext[JC] def uniform4i(location: WebGLUniformLocation, x: Int, y: Int, z: Int, w: Int): Unit
WebGLRenderingContext[JC] def uniform4iv(location: WebGLUniformLocation, v: Int32Array): Unit
WebGLRenderingContext[JC] def uniform4iv(location: WebGLUniformLocation, v: js.Array[Int]): Unit
WebGLRenderingContext[JC] def uniformMatrix2fv(location: WebGLUniformLocation, transpose: Boolean, value: Float32Array): Unit
WebGLRenderingContext[JC] def uniformMatrix2fv(location: WebGLUniformLocation, transpose: Boolean, value: js.Array[Double]): Unit
WebGLRenderingContext[JC] def uniformMatrix3fv(location: WebGLUniformLocation, transpose: Boolean, value: Float32Array): Unit
WebGLRenderingContext[JC] def uniformMatrix3fv(location: WebGLUniformLocation, transpose: Boolean, value: js.Array[Double]): Unit
WebGLRenderingContext[JC] def uniformMatrix4fv(location: WebGLUniformLocation, transpose: Boolean, value: Float32Array): Unit
WebGLRenderingContext[JC] def uniformMatrix4fv(location: WebGLUniformLocation, transpose: Boolean, value: js.Array[Double]): Unit
WebGLRenderingContext[JC] def useProgram(program: WebGLProgram): Unit
WebGLRenderingContext[JC] def validateProgram(program: WebGLProgram): Unit
WebGLRenderingContext[JC] def vertexAttrib1f(indx: Int, x: Double): Unit
WebGLRenderingContext[JC] def vertexAttrib1fv(indx: Int, values: Float32Array): Unit
WebGLRenderingContext[JC] def vertexAttrib1fv(indx: Int, values: js.Array[Double]): Unit
WebGLRenderingContext[JC] def vertexAttrib2f(indx: Int, x: Double, y: Double): Unit
WebGLRenderingContext[JC] def vertexAttrib2fv(indx: Int, values: Float32Array): Unit
WebGLRenderingContext[JC] def vertexAttrib2fv(indx: Int, values: js.Array[Double]): Unit
WebGLRenderingContext[JC] def vertexAttrib3f(indx: Int, x: Double, y: Double, z: Double): Unit
WebGLRenderingContext[JC] def vertexAttrib3fv(indx: Int, values: Float32Array): Unit
WebGLRenderingContext[JC] def vertexAttrib3fv(indx: Int, values: js.Array[Double]): Unit
WebGLRenderingContext[JC] def vertexAttrib4f(indx: Int, x: Double, y: Double, z: Double, w: Double): Unit
WebGLRenderingContext[JC] def vertexAttrib4fv(indx: Int, values: Float32Array): Unit
WebGLRenderingContext[JC] def vertexAttrib4fv(indx: Int, values: js.Array[Double]): Unit
WebGLRenderingContext[JC] def vertexAttribPointer(indx: Int, size: Int, `type`: Int, normalized: Boolean, stride: Int, offset: Int): Unit
WebGLRenderingContext[JC] def viewport(x: Double, y: Double, width: Double, height: Double): Unit
WebGLRenderingContext[SO] final val ACTIVE_ATTRIBUTES = 0x8B89
WebGLRenderingContext[SO] final val ACTIVE_TEXTURE = 0x84E0
WebGLRenderingContext[SO] final val ACTIVE_UNIFORMS = 0x8B86
WebGLRenderingContext[SO] final val ALIASED_LINE_WIDTH_RANGE = 0x846E
WebGLRenderingContext[SO] final val ALIASED_POINT_SIZE_RANGE = 0x846D
WebGLRenderingContext[SO] final val ALPHA = 0x1906
WebGLRenderingContext[SO] final val ALPHA_BITS = 0x0D55
WebGLRenderingContext[SO] final val ALWAYS = 0x0207
WebGLRenderingContext[SO] final val ARRAY_BUFFER = 0x8892
WebGLRenderingContext[SO] final val ARRAY_BUFFER_BINDING = 0x8894
WebGLRenderingContext[SO] final val ATTACHED_SHADERS = 0x8B85
WebGLRenderingContext[SO] final val BACK = 0x0405
WebGLRenderingContext[SO] final val BLEND = 0x0BE2
WebGLRenderingContext[SO] final val BLEND_COLOR = 0x8005
WebGLRenderingContext[SO] final val BLEND_DST_ALPHA = 0x80CA
WebGLRenderingContext[SO] final val BLEND_DST_RGB = 0x80C8
WebGLRenderingContext[SO] final val BLEND_EQUATION = 0x8009
WebGLRenderingContext[SO] final val BLEND_EQUATION_ALPHA = 0x883D
WebGLRenderingContext[SO] final val BLEND_EQUATION_RGB = 0x8009
WebGLRenderingContext[SO] final val BLEND_SRC_ALPHA = 0x80CB
WebGLRenderingContext[SO] final val BLEND_SRC_RGB = 0x80C9
WebGLRenderingContext[SO] final val BLUE_BITS = 0x0D54
WebGLRenderingContext[SO] final val BOOL = 0x8B56
WebGLRenderingContext[SO] final val BOOL_VEC2 = 0x8B57
WebGLRenderingContext[SO] final val BOOL_VEC3 = 0x8B58
WebGLRenderingContext[SO] final val BOOL_VEC4 = 0x8B59
WebGLRenderingContext[SO] final val BROWSER_DEFAULT_WEBGL = 0x9244
WebGLRenderingContext[SO] final val BUFFER_SIZE = 0x8764
WebGLRenderingContext[SO] final val BUFFER_USAGE = 0x8765
WebGLRenderingContext[SO] final val BYTE = 0x1400
WebGLRenderingContext[SO] final val CCW = 0x0901
WebGLRenderingContext[SO] final val CLAMP_TO_EDGE = 0x812F
WebGLRenderingContext[SO] final val COLOR_ATTACHMENT0 = 0x8CE0
WebGLRenderingContext[SO] final val COLOR_BUFFER_BIT = 0x00004000
WebGLRenderingContext[SO] final val COLOR_CLEAR_VALUE = 0x0C22
WebGLRenderingContext[SO] final val COLOR_WRITEMASK = 0x0C23
WebGLRenderingContext[SO] final val COMPILE_STATUS = 0x8B81
WebGLRenderingContext[SO] final val COMPRESSED_TEXTURE_FORMATS = 0x86A3
WebGLRenderingContext[SO] final val CONSTANT_ALPHA = 0x8003
WebGLRenderingContext[SO] final val CONSTANT_COLOR = 0x8001
WebGLRenderingContext[SO] final val CONTEXT_LOST_WEBGL = 0x9242
WebGLRenderingContext[SO] final val CULL_FACE = 0x0B44
WebGLRenderingContext[SO] final val CULL_FACE_MODE = 0x0B45
WebGLRenderingContext[SO] final val CURRENT_PROGRAM = 0x8B8D
WebGLRenderingContext[SO] final val CURRENT_VERTEX_ATTRIB = 0x8626
WebGLRenderingContext[SO] final val CW = 0x0900
WebGLRenderingContext[SO] final val DECR = 0x1E03
WebGLRenderingContext[SO] final val DECR_WRAP = 0x8508
WebGLRenderingContext[SO] final val DELETE_STATUS = 0x8B80
WebGLRenderingContext[SO] final val DEPTH_ATTACHMENT = 0x8D00
WebGLRenderingContext[SO] final val DEPTH_BITS = 0x0D56
WebGLRenderingContext[SO] final val DEPTH_BUFFER_BIT = 0x00000100
WebGLRenderingContext[SO] final val DEPTH_CLEAR_VALUE = 0x0B73
WebGLRenderingContext[SO] final val DEPTH_COMPONENT = 0x1902
WebGLRenderingContext[SO] final val DEPTH_COMPONENT16 = 0x81A5
WebGLRenderingContext[SO] final val DEPTH_FUNC = 0x0B74
WebGLRenderingContext[SO] final val DEPTH_RANGE = 0x0B70
WebGLRenderingContext[SO] final val DEPTH_STENCIL = 0x84F9
WebGLRenderingContext[SO] final val DEPTH_STENCIL_ATTACHMENT = 0x821A
WebGLRenderingContext[SO] final val DEPTH_TEST = 0x0B71
WebGLRenderingContext[SO] final val DEPTH_WRITEMASK = 0x0B72
WebGLRenderingContext[SO] final val DITHER = 0x0BD0
WebGLRenderingContext[SO] final val DONT_CARE = 0x1100
WebGLRenderingContext[SO] final val DST_ALPHA = 0x0304
WebGLRenderingContext[SO] final val DST_COLOR = 0x0306
WebGLRenderingContext[SO] final val DYNAMIC_DRAW = 0x88E8
WebGLRenderingContext[SO] final val ELEMENT_ARRAY_BUFFER = 0x8893
WebGLRenderingContext[SO] final val ELEMENT_ARRAY_BUFFER_BINDING = 0x8895
WebGLRenderingContext[SO] final val EQUAL = 0x0202
WebGLRenderingContext[SO] final val FASTEST = 0x1101
WebGLRenderingContext[SO] final val FLOAT = 0x1406
WebGLRenderingContext[SO] final val FLOAT_MAT2 = 0x8B5A
WebGLRenderingContext[SO] final val FLOAT_MAT3 = 0x8B5B
WebGLRenderingContext[SO] final val FLOAT_MAT4 = 0x8B5C
WebGLRenderingContext[SO] final val FLOAT_VEC2 = 0x8B50
WebGLRenderingContext[SO] final val FLOAT_VEC3 = 0x8B51
WebGLRenderingContext[SO] final val FLOAT_VEC4 = 0x8B52
WebGLRenderingContext[SO] final val FRAGMENT_SHADER = 0x8B30
WebGLRenderingContext[SO] final val FRAMEBUFFER = 0x8D40
WebGLRenderingContext[SO] final val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1
WebGLRenderingContext[SO] final val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0
WebGLRenderingContext[SO] final val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3
WebGLRenderingContext[SO] final val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2
WebGLRenderingContext[SO] final val FRAMEBUFFER_BINDING = 0x8CA6
WebGLRenderingContext[SO] final val FRAMEBUFFER_COMPLETE = 0x8CD5
WebGLRenderingContext[SO] final val FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6
WebGLRenderingContext[SO] final val FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9
WebGLRenderingContext[SO] final val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7
WebGLRenderingContext[SO] final val FRAMEBUFFER_UNSUPPORTED = 0x8CDD
WebGLRenderingContext[SO] final val FRONT = 0x0404
WebGLRenderingContext[SO] final val FRONT_AND_BACK = 0x0408
WebGLRenderingContext[SO] final val FRONT_FACE = 0x0B46
WebGLRenderingContext[SO] final val FUNC_ADD = 0x8006
WebGLRenderingContext[SO] final val FUNC_REVERSE_SUBTRACT = 0x800B
WebGLRenderingContext[SO] final val FUNC_SUBTRACT = 0x800A
WebGLRenderingContext[SO] final val GENERATE_MIPMAP_HINT = 0x8192
WebGLRenderingContext[SO] final val GEQUAL = 0x0206
WebGLRenderingContext[SO] final val GREATER = 0x0204
WebGLRenderingContext[SO] final val GREEN_BITS = 0x0D53
WebGLRenderingContext[SO] final val HIGH_FLOAT = 0x8DF2
WebGLRenderingContext[SO] final val HIGH_INT = 0x8DF5
WebGLRenderingContext[SO] final val IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B
WebGLRenderingContext[SO] final val IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A
WebGLRenderingContext[SO] final val INCR = 0x1E02
WebGLRenderingContext[SO] final val INCR_WRAP = 0x8507
WebGLRenderingContext[SO] final val INT = 0x1404
WebGLRenderingContext[SO] final val INT_VEC2 = 0x8B53
WebGLRenderingContext[SO] final val INT_VEC3 = 0x8B54
WebGLRenderingContext[SO] final val INT_VEC4 = 0x8B55
WebGLRenderingContext[SO] final val INVALID_ENUM = 0x0500
WebGLRenderingContext[SO] final val INVALID_FRAMEBUFFER_OPERATION = 0x0506
WebGLRenderingContext[SO] final val INVALID_OPERATION = 0x0502
WebGLRenderingContext[SO] final val INVALID_VALUE = 0x0501
WebGLRenderingContext[SO] final val INVERT = 0x150A
WebGLRenderingContext[SO] final val KEEP = 0x1E00
WebGLRenderingContext[SO] final val LEQUAL = 0x0203
WebGLRenderingContext[SO] final val LESS = 0x0201
WebGLRenderingContext[SO] final val LINEAR = 0x2601
WebGLRenderingContext[SO] final val LINEAR_MIPMAP_LINEAR = 0x2703
WebGLRenderingContext[SO] final val LINEAR_MIPMAP_NEAREST = 0x2701
WebGLRenderingContext[SO] final val LINES = 0x0001
WebGLRenderingContext[SO] final val LINE_LOOP = 0x0002
WebGLRenderingContext[SO] final val LINE_STRIP = 0x0003
WebGLRenderingContext[SO] final val LINE_WIDTH = 0x0B21
WebGLRenderingContext[SO] final val LINK_STATUS = 0x8B82
WebGLRenderingContext[SO] final val LOW_FLOAT = 0x8DF0
WebGLRenderingContext[SO] final val LOW_INT = 0x8DF3
WebGLRenderingContext[SO] final val LUMINANCE = 0x1909
WebGLRenderingContext[SO] final val LUMINANCE_ALPHA = 0x190A
WebGLRenderingContext[SO] final val MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D
WebGLRenderingContext[SO] final val MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C
WebGLRenderingContext[SO] final val MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD
WebGLRenderingContext[SO] final val MAX_RENDERBUFFER_SIZE = 0x84E8
WebGLRenderingContext[SO] final val MAX_TEXTURE_IMAGE_UNITS = 0x8872
WebGLRenderingContext[SO] final val MAX_TEXTURE_SIZE = 0x0D33
WebGLRenderingContext[SO] final val MAX_VARYING_VECTORS = 0x8DFC
WebGLRenderingContext[SO] final val MAX_VERTEX_ATTRIBS = 0x8869
WebGLRenderingContext[SO] final val MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C
WebGLRenderingContext[SO] final val MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB
WebGLRenderingContext[SO] final val MAX_VIEWPORT_DIMS = 0x0D3A
WebGLRenderingContext[SO] final val MEDIUM_FLOAT = 0x8DF1
WebGLRenderingContext[SO] final val MEDIUM_INT = 0x8DF4
WebGLRenderingContext[SO] final val MIRRORED_REPEAT = 0x8370
WebGLRenderingContext[SO] final val NEAREST = 0x2600
WebGLRenderingContext[SO] final val NEAREST_MIPMAP_LINEAR = 0x2702
WebGLRenderingContext[SO] final val NEAREST_MIPMAP_NEAREST = 0x2700
WebGLRenderingContext[SO] final val NEVER = 0x0200
WebGLRenderingContext[SO] final val NICEST = 0x1102
WebGLRenderingContext[SO] final val NONE = 0
WebGLRenderingContext[SO] final val NOTEQUAL = 0x0205
WebGLRenderingContext[SO] final val NO_ERROR = 0
WebGLRenderingContext[SO] final val ONE = 1
WebGLRenderingContext[SO] final val ONE_MINUS_CONSTANT_ALPHA = 0x8004
WebGLRenderingContext[SO] final val ONE_MINUS_CONSTANT_COLOR = 0x8002
WebGLRenderingContext[SO] final val ONE_MINUS_DST_ALPHA = 0x0305
WebGLRenderingContext[SO] final val ONE_MINUS_DST_COLOR = 0x0307
WebGLRenderingContext[SO] final val ONE_MINUS_SRC_ALPHA = 0x0303
WebGLRenderingContext[SO] final val ONE_MINUS_SRC_COLOR = 0x0301
WebGLRenderingContext[SO] final val OUT_OF_MEMORY = 0x0505
WebGLRenderingContext[SO] final val PACK_ALIGNMENT = 0x0D05
WebGLRenderingContext[SO] final val POINTS = 0x0000
WebGLRenderingContext[SO] final val POLYGON_OFFSET_FACTOR = 0x8038
WebGLRenderingContext[SO] final val POLYGON_OFFSET_FILL = 0x8037
WebGLRenderingContext[SO] final val POLYGON_OFFSET_UNITS = 0x2A00
WebGLRenderingContext[SO] final val RED_BITS = 0x0D52
WebGLRenderingContext[SO] final val RENDERBUFFER = 0x8D41
WebGLRenderingContext[SO] final val RENDERBUFFER_ALPHA_SIZE = 0x8D53
WebGLRenderingContext[SO] final val RENDERBUFFER_BINDING = 0x8CA7
WebGLRenderingContext[SO] final val RENDERBUFFER_BLUE_SIZE = 0x8D52
WebGLRenderingContext[SO] final val RENDERBUFFER_DEPTH_SIZE = 0x8D54
WebGLRenderingContext[SO] final val RENDERBUFFER_GREEN_SIZE = 0x8D51
WebGLRenderingContext[SO] final val RENDERBUFFER_HEIGHT = 0x8D43
WebGLRenderingContext[SO] final val RENDERBUFFER_INTERNAL_FORMAT = 0x8D44
WebGLRenderingContext[SO] final val RENDERBUFFER_RED_SIZE = 0x8D50
WebGLRenderingContext[SO] final val RENDERBUFFER_STENCIL_SIZE = 0x8D55
WebGLRenderingContext[SO] final val RENDERBUFFER_WIDTH = 0x8D42
WebGLRenderingContext[SO] final val RENDERER = 0x1F01
WebGLRenderingContext[SO] final val REPEAT = 0x2901
WebGLRenderingContext[SO] final val REPLACE = 0x1E01
WebGLRenderingContext[SO] final val RGB = 0x1907
WebGLRenderingContext[SO] final val RGB565 = 0x8D62
WebGLRenderingContext[SO] final val RGB5_A1 = 0x8057
WebGLRenderingContext[SO] final val RGBA = 0x1908
WebGLRenderingContext[SO] final val RGBA4 = 0x8056
WebGLRenderingContext[SO] final val SAMPLER_2D = 0x8B5E
WebGLRenderingContext[SO] final val SAMPLER_CUBE = 0x8B60
WebGLRenderingContext[SO] final val SAMPLES = 0x80A9
WebGLRenderingContext[SO] final val SAMPLE_ALPHA_TO_COVERAGE = 0x809E
WebGLRenderingContext[SO] final val SAMPLE_BUFFERS = 0x80A8
WebGLRenderingContext[SO] final val SAMPLE_COVERAGE = 0x80A0
WebGLRenderingContext[SO] final val SAMPLE_COVERAGE_INVERT = 0x80AB
WebGLRenderingContext[SO] final val SAMPLE_COVERAGE_VALUE = 0x80AA
WebGLRenderingContext[SO] final val SCISSOR_BOX = 0x0C10
WebGLRenderingContext[SO] final val SCISSOR_TEST = 0x0C11
WebGLRenderingContext[SO] final val SHADER_TYPE = 0x8B4F
WebGLRenderingContext[SO] final val SHADING_LANGUAGE_VERSION = 0x8B8C
WebGLRenderingContext[SO] final val SHORT = 0x1402
WebGLRenderingContext[SO] final val SRC_ALPHA = 0x0302
WebGLRenderingContext[SO] final val SRC_ALPHA_SATURATE = 0x0308
WebGLRenderingContext[SO] final val SRC_COLOR = 0x0300
WebGLRenderingContext[SO] final val STATIC_DRAW = 0x88E4
WebGLRenderingContext[SO] final val STENCIL_ATTACHMENT = 0x8D20
WebGLRenderingContext[SO] final val STENCIL_BACK_FAIL = 0x8801
WebGLRenderingContext[SO] final val STENCIL_BACK_FUNC = 0x8800
WebGLRenderingContext[SO] final val STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802
WebGLRenderingContext[SO] final val STENCIL_BACK_PASS_DEPTH_PASS = 0x8803
WebGLRenderingContext[SO] final val STENCIL_BACK_REF = 0x8CA3
WebGLRenderingContext[SO] final val STENCIL_BACK_VALUE_MASK = 0x8CA4
WebGLRenderingContext[SO] final val STENCIL_BACK_WRITEMASK = 0x8CA5
WebGLRenderingContext[SO] final val STENCIL_BITS = 0x0D57
WebGLRenderingContext[SO] final val STENCIL_BUFFER_BIT = 0x00000400
WebGLRenderingContext[SO] final val STENCIL_CLEAR_VALUE = 0x0B91
WebGLRenderingContext[SO] final val STENCIL_FAIL = 0x0B94
WebGLRenderingContext[SO] final val STENCIL_FUNC = 0x0B92
WebGLRenderingContext[SO] final val STENCIL_INDEX = 0x1901
WebGLRenderingContext[SO] final val STENCIL_INDEX8 = 0x8D48
WebGLRenderingContext[SO] final val STENCIL_PASS_DEPTH_FAIL = 0x0B95
WebGLRenderingContext[SO] final val STENCIL_PASS_DEPTH_PASS = 0x0B96
WebGLRenderingContext[SO] final val STENCIL_REF = 0x0B97
WebGLRenderingContext[SO] final val STENCIL_TEST = 0x0B90
WebGLRenderingContext[SO] final val STENCIL_VALUE_MASK = 0x0B93
WebGLRenderingContext[SO] final val STENCIL_WRITEMASK = 0x0B98
WebGLRenderingContext[SO] final val STREAM_DRAW = 0x88E0
WebGLRenderingContext[SO] final val SUBPIXEL_BITS = 0x0D50
WebGLRenderingContext[SO] final val TEXTURE = 0x1702
WebGLRenderingContext[SO] final val TEXTURE0 = 0x84C0
WebGLRenderingContext[SO] final val TEXTURE1 = 0x84C1
WebGLRenderingContext[SO] final val TEXTURE10 = 0x84CA
WebGLRenderingContext[SO] final val TEXTURE11 = 0x84CB
WebGLRenderingContext[SO] final val TEXTURE12 = 0x84CC
WebGLRenderingContext[SO] final val TEXTURE13 = 0x84CD
WebGLRenderingContext[SO] final val TEXTURE14 = 0x84CE
WebGLRenderingContext[SO] final val TEXTURE15 = 0x84CF
WebGLRenderingContext[SO] final val TEXTURE16 = 0x84D0
WebGLRenderingContext[SO] final val TEXTURE17 = 0x84D1
WebGLRenderingContext[SO] final val TEXTURE18 = 0x84D2
WebGLRenderingContext[SO] final val TEXTURE19 = 0x84D3
WebGLRenderingContext[SO] final val TEXTURE2 = 0x84C2
WebGLRenderingContext[SO] final val TEXTURE20 = 0x84D4
WebGLRenderingContext[SO] final val TEXTURE21 = 0x84D5
WebGLRenderingContext[SO] final val TEXTURE22 = 0x84D6
WebGLRenderingContext[SO] final val TEXTURE23 = 0x84D7
WebGLRenderingContext[SO] final val TEXTURE24 = 0x84D8
WebGLRenderingContext[SO] final val TEXTURE25 = 0x84D9
WebGLRenderingContext[SO] final val TEXTURE26 = 0x84DA
WebGLRenderingContext[SO] final val TEXTURE27 = 0x84DB
WebGLRenderingContext[SO] final val TEXTURE28 = 0x84DC
WebGLRenderingContext[SO] final val TEXTURE29 = 0x84DD
WebGLRenderingContext[SO] final val TEXTURE3 = 0x84C3
WebGLRenderingContext[SO] final val TEXTURE30 = 0x84DE
WebGLRenderingContext[SO] final val TEXTURE31 = 0x84DF
WebGLRenderingContext[SO] final val TEXTURE4 = 0x84C4
WebGLRenderingContext[SO] final val TEXTURE5 = 0x84C5
WebGLRenderingContext[SO] final val TEXTURE6 = 0x84C6
WebGLRenderingContext[SO] final val TEXTURE7 = 0x84C7
WebGLRenderingContext[SO] final val TEXTURE8 = 0x84C8
WebGLRenderingContext[SO] final val TEXTURE9 = 0x84C9
WebGLRenderingContext[SO] final val TEXTURE_2D = 0x0DE1
WebGLRenderingContext[SO] final val TEXTURE_BINDING_2D = 0x8069
WebGLRenderingContext[SO] final val TEXTURE_BINDING_CUBE_MAP = 0x8514
WebGLRenderingContext[SO] final val TEXTURE_CUBE_MAP = 0x8513
WebGLRenderingContext[SO] final val TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516
WebGLRenderingContext[SO] final val TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518
WebGLRenderingContext[SO] final val TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A
WebGLRenderingContext[SO] final val TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515
WebGLRenderingContext[SO] final val TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517
WebGLRenderingContext[SO] final val TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519
WebGLRenderingContext[SO] final val TEXTURE_MAG_FILTER = 0x2800
WebGLRenderingContext[SO] final val TEXTURE_MIN_FILTER = 0x2801
WebGLRenderingContext[SO] final val TEXTURE_WRAP_S = 0x2802
WebGLRenderingContext[SO] final val TEXTURE_WRAP_T = 0x2803
WebGLRenderingContext[SO] final val TRIANGLES = 0x0004
WebGLRenderingContext[SO] final val TRIANGLE_FAN = 0x0006
WebGLRenderingContext[SO] final val TRIANGLE_STRIP = 0x0005
WebGLRenderingContext[SO] final val UNPACK_ALIGNMENT = 0x0CF5
WebGLRenderingContext[SO] final val UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243
WebGLRenderingContext[SO] final val UNPACK_FLIP_Y_WEBGL = 0x9240
WebGLRenderingContext[SO] final val UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241
WebGLRenderingContext[SO] final val UNSIGNED_BYTE = 0x1401
WebGLRenderingContext[SO] final val UNSIGNED_INT = 0x1405
WebGLRenderingContext[SO] final val UNSIGNED_SHORT = 0x1403
WebGLRenderingContext[SO] final val UNSIGNED_SHORT_4_4_4_4 = 0x8033
WebGLRenderingContext[SO] final val UNSIGNED_SHORT_5_5_5_1 = 0x8034
WebGLRenderingContext[SO] final val UNSIGNED_SHORT_5_6_5 = 0x8363
WebGLRenderingContext[SO] final val VALIDATE_STATUS = 0x8B83
WebGLRenderingContext[SO] final val VENDOR = 0x1F00
WebGLRenderingContext[SO] final val VERSION = 0x1F02
WebGLRenderingContext[SO] final val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F
WebGLRenderingContext[SO] final val VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622
WebGLRenderingContext[SO] final val VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A
WebGLRenderingContext[SO] final val VERTEX_ATTRIB_ARRAY_POINTER = 0x8645
WebGLRenderingContext[SO] final val VERTEX_ATTRIB_ARRAY_SIZE = 0x8623
WebGLRenderingContext[SO] final val VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624
WebGLRenderingContext[SO] final val VERTEX_ATTRIB_ARRAY_TYPE = 0x8625
WebGLRenderingContext[SO] final val VERTEX_SHADER = 0x8B31
WebGLRenderingContext[SO] final val VIEWPORT = 0x0BA2
WebGLRenderingContext[SO] final val ZERO = 0
WebGLRenderingContext[SO] def getExtension[T](id: webgl.WebGLExtensionIdentifier[T]): js.UndefOr[T]
WebGLRenderingContext.WebGLRenderingContextOps[SC] def getExtension[T](id: webgl.WebGLExtensionIdentifier[T]): js.UndefOr[T]
WebGLShader[JC]
WebGLShaderPrecisionFormat[JC] val precision: Int
WebGLShaderPrecisionFormat[JC] val rangeMax: Int
WebGLShaderPrecisionFormat[JC] val rangeMin: Int
WebGLTexture[JC]
WebGLUniformLocation[JC]
WebSocket[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
WebSocket[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
WebSocket[JC] var binaryType: String
WebSocket[JC] def bufferedAmount: Int
WebSocket[JC] def close(code: Int?, reason: String?): Unit
WebSocket[JC] def dispatchEvent(evt: Event): Boolean
WebSocket[JC] def extensions: String
WebSocket[JC] var onclose: js.Function1[CloseEvent, _]
WebSocket[JC] var onerror: js.Function1[Event, _]
WebSocket[JC] var onmessage: js.Function1[MessageEvent, _]
WebSocket[JC] var onopen: js.Function1[Event, _]
WebSocket[JC] def readyState: Int
WebSocket[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
WebSocket[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
WebSocket[JC] def send(data: ArrayBuffer): Unit
WebSocket[JC] def send(data: Blob): Unit
WebSocket[JC] def send(data: String): Unit
WebSocket[JO] val CLOSED: Int
WebSocket[JO] val CLOSING: Int
WebSocket[JO] val CONNECTING: Int
WebSocket[JO] val OPEN: Int
WheelEvent[JC] def altKey: Boolean
WheelEvent[JC] def bubbles: Boolean
WheelEvent[JC] def button: Int
WheelEvent[JC] def buttons: Int
WheelEvent[JC] def cancelBubble: Boolean
WheelEvent[JC] def cancelable: Boolean
WheelEvent[JC] def clientX: Double
WheelEvent[JC] def clientY: Double
WheelEvent[JC] def composed: Boolean
WheelEvent[JC] def ctrlKey: Boolean
WheelEvent[JC] def currentTarget: EventTarget
WheelEvent[JC] def defaultPrevented: Boolean
WheelEvent[JC] def deltaMode: Int
WheelEvent[JC] def deltaX: Double
WheelEvent[JC] def deltaY: Double
WheelEvent[JC] def deltaZ: Double
WheelEvent[JC] def detail: Int
WheelEvent[JC] def eventPhase: Int
WheelEvent[JC] def getModifierState(keyArg: String): Boolean
WheelEvent[JC] def isTrusted: Boolean
WheelEvent[JC] def metaKey: Boolean
WheelEvent[JC] def movementX: Double
WheelEvent[JC] def movementY: Double
WheelEvent[JC] def pageX: Double
WheelEvent[JC] def pageY: Double
WheelEvent[JC] def preventDefault(): Unit
WheelEvent[JC] def relatedTarget: EventTarget
WheelEvent[JC] def screenX: Double
WheelEvent[JC] def screenY: Double
WheelEvent[JC] def shiftKey: Boolean
WheelEvent[JC] def stopImmediatePropagation(): Unit
WheelEvent[JC] def stopPropagation(): Unit
WheelEvent[JC] def target: EventTarget
WheelEvent[JC] def timeStamp: Double
WheelEvent[JC] def `type`: String
WheelEvent[JC] def view: Window
WheelEvent[JO] val DOM_DELTA_LINE: Int
WheelEvent[JO] val DOM_DELTA_PAGE: Int
WheelEvent[JO] val DOM_DELTA_PIXEL: Int
WheelEventInit[JT] var altKey: js.UndefOr[Boolean]
WheelEventInit[JT] var bubbles: js.UndefOr[Boolean]
WheelEventInit[JT] var button: js.UndefOr[Int]
WheelEventInit[JT] var buttons: js.UndefOr[Int]
WheelEventInit[JT] var cancelable: js.UndefOr[Boolean]
WheelEventInit[JT] var clientX: js.UndefOr[Double]
WheelEventInit[JT] var clientY: js.UndefOr[Double]
WheelEventInit[JT] var composed: js.UndefOr[Boolean]
WheelEventInit[JT] var ctrlKey: js.UndefOr[Boolean]
WheelEventInit[JT] var deltaMode: js.UndefOr[Int]
WheelEventInit[JT] var deltaX: js.UndefOr[Double]
WheelEventInit[JT] var deltaY: js.UndefOr[Double]
WheelEventInit[JT] var deltaZ: js.UndefOr[Double]
WheelEventInit[JT] var detail: js.UndefOr[Int]
WheelEventInit[JT] var metaKey: js.UndefOr[Boolean]
WheelEventInit[JT] var pageX: js.UndefOr[Double]
WheelEventInit[JT] var pageY: js.UndefOr[Double]
WheelEventInit[JT] var relatedTarget: js.UndefOr[EventTarget]
WheelEventInit[JT] var scoped: js.UndefOr[Boolean]
WheelEventInit[JT] var screenX: js.UndefOr[Double]
WheelEventInit[JT] var screenY: js.UndefOr[Double]
WheelEventInit[JT] var shiftKey: js.UndefOr[Boolean]
WheelEventInit[JT] var view: js.UndefOr[Window]
Window[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Window[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Window[JC] def alert(): Unit
Window[JC] def alert(message: String): Unit
Window[JC] def applicationCache: ApplicationCache
Window[JC] def atob(encodedString: String): String
Window[JC] def blur(): Unit
Window[JC] def btoa(rawString: String): String
Window[JC] def caches: js.UndefOr[CacheStorage]
Window[JC] def cancelAnimationFrame(handle: Int): Unit
Window[JC] def clearInterval(handle: Int): Unit
Window[JC] def clearTimeout(handle: Int): Unit
Window[JC] def close(): Unit
Window[JC] def closed: Boolean
Window[JC] def confirm(message: String?): Boolean
Window[JC] var console: Console
Window[JC] def createImageBitmap(image: CreateImageBitmapInput): js.Promise[ImageBitmap]
Window[JC] def createImageBitmap(image: CreateImageBitmapInput, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
Window[JC] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double): js.Promise[ImageBitmap]
Window[JC] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
Window[JC] def crossOriginIsolated: Boolean
Window[JC] def customElements: CustomElementRegistry
Window[JC] def devicePixelRatio: Double
Window[JC] def dispatchEvent(evt: Event): Boolean
Window[JC] def document: HTMLDocument
Window[JC] def fetch(info: RequestInfo, init: RequestInit?): js.Promise[Response]
Window[JC] def focus(): Unit
Window[JC] def frameElement: Element
Window[JC] def frames: Window
Window[JC] def getComputedStyle(elt: Element, pseudoElt: String?): CSSStyleDeclaration
Window[JC] def getSelection(): Selection
Window[JC] var gotpointercapture: js.Function1[PointerEvent, _]
Window[JC] def history: History
Window[JC] def indexedDB: js.UndefOr[IDBFactory]
Window[JC] def innerHeight: Double
Window[JC] def innerWidth: Double
Window[JC] def isSecureContext: Boolean
Window[JC] def length: Int
Window[JC] def localStorage: Storage
Window[JC] var location: Location
Window[JC] var lostpointercapture: js.Function1[PointerEvent, _]
Window[JC] def matchMedia(mediaQuery: String): MediaQueryList
Window[JC] def moveBy(deltaX: Int, deltaY: Int): Unit
Window[JC] def moveTo(x: Int, y: Int): Unit
Window[JC] var name: String
Window[JC] def navigator: Navigator
Window[JC] var onabort: js.Function1[UIEvent, _]
Window[JC] var onafterprint: js.Function1[Event, _]
Window[JC] var onbeforeprint: js.Function1[Event, _]
Window[JC] var onbeforeunload: js.Function1[BeforeUnloadEvent, _]
Window[JC] var onblur: js.Function1[FocusEvent, _]
Window[JC] var oncanplay: js.Function1[Event, _]
Window[JC] var oncanplaythrough: js.Function1[Event, _]
Window[JC] var onchange: js.Function1[Event, _]
Window[JC] var onclick: js.Function1[MouseEvent, _]
Window[JC] var oncontextmenu: js.Function1[MouseEvent, _]
Window[JC] var ondblclick: js.Function1[MouseEvent, _]
Window[JC] var ondrag: js.Function1[DragEvent, _]
Window[JC] var ondragend: js.Function1[DragEvent, _]
Window[JC] var ondragenter: js.Function1[DragEvent, _]
Window[JC] var ondragleave: js.Function1[DragEvent, _]
Window[JC] var ondragover: js.Function1[DragEvent, _]
Window[JC] var ondragstart: js.Function1[DragEvent, _]
Window[JC] var ondrop: js.Function1[DragEvent, _]
Window[JC] var ondurationchange: js.Function1[Event, _]
Window[JC] var onemptied: js.Function1[Event, _]
Window[JC] var onended: js.Function1[Event, _]
Window[JC] var onerror: js.Function5[Event, String, Int, Int, Any, _]
Window[JC] var onfocus: js.Function1[FocusEvent, _]
Window[JC] var onhashchange: js.Function1[HashChangeEvent, _]
Window[JC] var oninput: js.Function1[Event, _]
Window[JC] var onkeydown: js.Function1[KeyboardEvent, _]
Window[JC] var onkeypress: js.Function1[KeyboardEvent, _]
Window[JC] var onkeyup: js.Function1[KeyboardEvent, _]
Window[JC] var onload: js.Function1[Event, _]
Window[JC] var onloadeddata: js.Function1[Event, _]
Window[JC] var onloadedmetadata: js.Function1[Event, _]
Window[JC] var onloadstart: js.Function1[Event, _]
Window[JC] var onmessage: js.Function1[MessageEvent, _]
Window[JC] var onmousedown: js.Function1[MouseEvent, _]
Window[JC] var onmousemove: js.Function1[MouseEvent, _]
Window[JC] var onmouseout: js.Function1[MouseEvent, _]
Window[JC] var onmouseover: js.Function1[MouseEvent, _]
Window[JC] var onmouseup: js.Function1[MouseEvent, _]
Window[JC] var onmousewheel: js.Function1[WheelEvent, _]
Window[JC] var onoffline: js.Function1[Event, _]
Window[JC] var ononline: js.Function1[Event, _]
Window[JC] var onpagehide: js.Function1[PageTransitionEvent, _]
Window[JC] var onpageshow: js.Function1[PageTransitionEvent, _]
Window[JC] var onpause: js.Function1[Event, _]
Window[JC] var onplay: js.Function1[Event, _]
Window[JC] var onplaying: js.Function1[Event, _]
Window[JC] var onpointercancel: js.Function1[PointerEvent, _]
Window[JC] var onpointerdown: js.Function1[PointerEvent, _]
Window[JC] var onpointerenter: js.Function1[PointerEvent, _]
Window[JC] var onpointerleave: js.Function1[PointerEvent, _]
Window[JC] var onpointermove: js.Function1[PointerEvent, _]
Window[JC] var onpointerout: js.Function1[PointerEvent, _]
Window[JC] var onpointerover: js.Function1[PointerEvent, _]
Window[JC] var onpointerup: js.Function1[PointerEvent, _]
Window[JC] var onpopstate: js.Function1[PopStateEvent, _]
Window[JC] var onprogress: js.Function1[js.Any, _]
Window[JC] var onratechange: js.Function1[Event, _]
Window[JC] var onreadystatechange: js.Function1[Event, _]
Window[JC] var onreset: js.Function1[Event, _]
Window[JC] var onresize: js.Function1[UIEvent, _]
Window[JC] var onscroll: js.Function1[UIEvent, _]
Window[JC] var onseeked: js.Function1[Event, _]
Window[JC] var onseeking: js.Function1[Event, _]
Window[JC] var onselect: js.Function1[UIEvent, _]
Window[JC] var onstalled: js.Function1[Event, _]
Window[JC] var onstorage: js.Function1[StorageEvent, _]
Window[JC] var onsubmit: js.Function1[Event, _]
Window[JC] var onsuspend: js.Function1[Event, _]
Window[JC] var ontimeupdate: js.Function1[Event, _]
Window[JC] var onunload: js.Function1[Event, _]
Window[JC] var onvolumechange: js.Function1[Event, _]
Window[JC] var onwaiting: js.Function1[Event, _]
Window[JC] var onwheel: js.Function1[WheelEvent, _]
Window[JC] def open(url: String?, target: String?, features: String?, replace: Boolean?): Window
Window[JC] var opener: Window
Window[JC] def origin: String
Window[JC] def outerHeight: Int
Window[JC] def outerWidth: Int
Window[JC] def pageXOffset: Double
Window[JC] def pageYOffset: Double
Window[JC] def parent: Window
Window[JC] def performance: Performance
Window[JC] def postMessage(message: js.Any, targetOrigin: String, transfer: js.UndefOr[js.Array[Transferable]]?): Unit
Window[JC] def print(): Unit
Window[JC] def prompt(): String
Window[JC] def prompt(message: String, default: String?): String
Window[JC] def queueMicrotask(function: js.Function0[Any]): Unit
Window[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Window[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Window[JC] def requestAnimationFrame(callback: js.Function1[Double, _]): Int
Window[JC] def resizeBy(deltaX: Int, deltaY: Int): Unit
Window[JC] def resizeTo(width: Int, height: Int): Unit
Window[JC] def screen: Screen
Window[JC] var screenX: Int
Window[JC] def screenY: Int
Window[JC] def scroll(x: Int, y: Int): Unit
Window[JC] def scrollBy(x: Int, y: Int): Unit
Window[JC] def scrollTo(x: Int, y: Int): Unit
Window[JC] def scrollX: Double
Window[JC] def scrollY: Double
Window[JC] def self: Window
Window[JC] def sessionStorage: Storage
Window[JC] def setInterval(handler: js.Function0[Any], timeout: Double): Int
Window[JC] def setTimeout(handler: js.Function0[Any], timeout: Double): Int
Window[JC] def showModalDialog(url: String?, argument: js.Any?, options: js.Any?): js.Dynamic
Window[JC] def styleMedia: StyleMedia
Window[JC] def top: Window
Window[JC] def window: Window
WindowBase64[JT] def atob(encodedString: String): String
WindowBase64[JT] def btoa(rawString: String): String
WindowClient[JT] def focus(): js.Promise[WindowClient]
WindowClient[JT] def focused: Boolean
WindowClient[JT] def frameType: FrameType
WindowClient[JT] def id: String
WindowClient[JT] def navigate(url: String): js.Promise[WindowClient]
WindowClient[JT] def postMessage(message: js.Any, transfer: js.UndefOr[js.Array[Transferable]]?): Unit
WindowClient[JT] def url: String
WindowClient[JT] def visibilityState: String
WindowConsole[JT] var console: Console
WindowLocalStorage[JT] def localStorage: Storage
WindowOrWorkerGlobalScope[JT] def atob(encodedString: String): String
WindowOrWorkerGlobalScope[JT] def btoa(rawString: String): String
WindowOrWorkerGlobalScope[JT] def caches: js.UndefOr[CacheStorage]
WindowOrWorkerGlobalScope[JT] def clearInterval(handle: Int): Unit
WindowOrWorkerGlobalScope[JT] def clearTimeout(handle: Int): Unit
WindowOrWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput): js.Promise[ImageBitmap]
WindowOrWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
WindowOrWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double): js.Promise[ImageBitmap]
WindowOrWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
WindowOrWorkerGlobalScope[JT] def crossOriginIsolated: Boolean
WindowOrWorkerGlobalScope[JT] def fetch(info: RequestInfo, init: RequestInit?): js.Promise[Response]
WindowOrWorkerGlobalScope[JT] def indexedDB: js.UndefOr[IDBFactory]
WindowOrWorkerGlobalScope[JT] def isSecureContext: Boolean
WindowOrWorkerGlobalScope[JT] def origin: String
WindowOrWorkerGlobalScope[JT] def queueMicrotask(function: js.Function0[Any]): Unit
WindowOrWorkerGlobalScope[JT] def setInterval(handler: js.Function0[Any], timeout: Double): Int
WindowOrWorkerGlobalScope[JT] def setTimeout(handler: js.Function0[Any], timeout: Double): Int
WindowOrWorkerGlobalScope[SO] type CreateImageBitmapInput = HTMLImageElement | SVGImageElement | HTMLVideoElement | HTMLCanvasElement | HTMLCanvasElement | Blob | ImageData | ImageBitmap | OffscreenCanvas
WindowSessionStorage[JT] def sessionStorage: Storage
WindowTimers[JT] def clearInterval(handle: Int): Unit
WindowTimers[JT] def clearTimeout(handle: Int): Unit
WindowTimers[JT] def setInterval(handler: js.Function0[Any], timeout: Double): Int
WindowTimers[JT] def setTimeout(handler: js.Function0[Any], timeout: Double): Int
Worker[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Worker[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Worker[JC] def dispatchEvent(evt: Event): Boolean
Worker[JC] var onerror: js.Function1[ErrorEvent, _]
Worker[JC] var onmessage: js.Function1[MessageEvent, _]
Worker[JC] def postMessage(message: js.Any, transfer: js.UndefOr[js.Array[Transferable]]?): Unit
Worker[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
Worker[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
Worker[JC] def terminate(): Unit
WorkerGlobalScope[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
WorkerGlobalScope[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
WorkerGlobalScope[JT] def atob(encodedString: String): String
WorkerGlobalScope[JT] def btoa(rawString: String): String
WorkerGlobalScope[JT] def caches: js.UndefOr[CacheStorage]
WorkerGlobalScope[JT] def clearInterval(handle: Int): Unit
WorkerGlobalScope[JT] def clearTimeout(handle: Int): Unit
WorkerGlobalScope[JT] def close(): Unit
WorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput): js.Promise[ImageBitmap]
WorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
WorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double): js.Promise[ImageBitmap]
WorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
WorkerGlobalScope[JT] def crossOriginIsolated: Boolean
WorkerGlobalScope[JT] def dispatchEvent(evt: Event): Boolean
WorkerGlobalScope[JT] def fetch(info: RequestInfo, init: RequestInit?): js.Promise[Response]
WorkerGlobalScope[JT] def importScripts(urls: js.Array[String]): Unit
WorkerGlobalScope[JT] def indexedDB: js.UndefOr[IDBFactory]
WorkerGlobalScope[JT] def isSecureContext: Boolean
WorkerGlobalScope[JT] def location: WorkerLocation
WorkerGlobalScope[JT] def navigator: WorkerNavigator
WorkerGlobalScope[JT] var onError: js.Function1[ErrorEvent, _]
WorkerGlobalScope[JT] var onlanguagechange: js.Function1[Event, _]
WorkerGlobalScope[JT] var onoffline: js.Function1[Event, _]
WorkerGlobalScope[JT] var ononline: js.Function1[Event, _]
WorkerGlobalScope[JT] def origin: String
WorkerGlobalScope[JT] def queueMicrotask(function: js.Function0[Any]): Unit
WorkerGlobalScope[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
WorkerGlobalScope[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
WorkerGlobalScope[JT] def self: this.type
WorkerGlobalScope[JT] def setInterval(handler: js.Function0[Any], timeout: Double): Int
WorkerGlobalScope[JT] def setTimeout(handler: js.Function0[Any], timeout: Double): Int
WorkerLocation[JT] def hash: String
WorkerLocation[JT] def host: String
WorkerLocation[JT] def hostname: String
WorkerLocation[JT] def href: String
WorkerLocation[JT] def origin: String
WorkerLocation[JT] def pathname: String
WorkerLocation[JT] def port: String
WorkerLocation[JT] def protocol: String
WorkerLocation[JT] def search: String
WorkerNavigator[JT] def appName: String
WorkerNavigator[JT] def appVersion: String
WorkerNavigator[JT] def language: String
WorkerNavigator[JT] def languages: js.Array[String]
WorkerNavigator[JT] def onLine: Boolean
WorkerNavigator[JT] def platform: String
WorkerNavigator[JT] def sendBeacon(url: String, data: BodyInit?): Boolean  (@deprecated in 2.0.0)
WorkerNavigator[JT] def userAgent: String
WorkerOptions[JT] var credentials: js.UndefOr[RequestCredentials]
WorkerOptions[JT] var name: js.UndefOr[String]
WorkerOptions[JT] var `type`: js.UndefOr[WorkerType]
WorkerType[JT]
WorkerType[SO] val classic: WorkerType
WorkerType[SO] val module: WorkerType
Worklet[JC] def addModule(moduleURL: String, options: WorkletOptions?): js.Promise[Unit]
WorkletGlobalScope[JT]
WorkletOptions[JT] var credentials: js.UndefOr[RequestCredentials]
WriteableState[JT]
WriteableState[SO] val closed: WriteableState
WriteableState[SO] val closing: WriteableState
WriteableState[SO] val errored: WriteableState
WriteableState[SO] val waiting: WriteableState
WriteableState[SO] val writable: WriteableState
WriteableStream[JT] def abort(reason: js.UndefOr[Any]?): js.Promise[Unit]
WriteableStream[JT] def close(): js.Promise[WriteableStream[T]]
WriteableStream[JT] val closed: js.Promise[WriteableStream[T]]
WriteableStream[JT] val ready: js.Promise[WriteableStream[T]]
WriteableStream[JT] def state: WriteableState
WriteableStream[JT] def write(chunk: Chunk[T]): js.Promise[Any]
XMLDocument[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
XMLDocument[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
XMLDocument[JC] def adoptNode(source: Node): Node
XMLDocument[JC] def appendChild(newChild: Node): Node
XMLDocument[JC] def baseURI: String
XMLDocument[JC] def characterSet: String
XMLDocument[JC] def childElementCount: Int
XMLDocument[JC] def childNodes: NodeList[Node]
XMLDocument[JC] def children: HTMLCollection[Element]
XMLDocument[JC] def cloneNode(deep: Boolean?): Node
XMLDocument[JC] def compareDocumentPosition(other: Node): Int
XMLDocument[JC] def contains(otherNode: Node): Boolean
XMLDocument[JC] def createAttribute(name: String): Attr
XMLDocument[JC] def createAttributeNS(namespaceURI: String, qualifiedName: String): Attr
XMLDocument[JC] def createCDATASection(data: String): CDATASection
XMLDocument[JC] def createComment(data: String): Comment
XMLDocument[JC] def createDocumentFragment(): DocumentFragment
XMLDocument[JC] def createElement(tagName: String): Element
XMLDocument[JC] def createElement(tagName: String, options: ElementCreationOptions): Element
XMLDocument[JC] def createElement(tagName: String, options: String): Element
XMLDocument[JC] def createElementNS(namespaceURI: String, qualifiedName: String): Element
XMLDocument[JC] def createElementNS(namespaceURI: String, qualifiedName: String, options: ElementCreationOptions): Element
XMLDocument[JC] def createElementNS(namespaceURI: String, qualifiedName: String, options: String): Element
XMLDocument[JC] def createEvent(eventInterface: String): Event
XMLDocument[JC] def createNSResolver(node: Node): XPathNSResolver
XMLDocument[JC] def createNodeIterator(root: Node, whatToShow: Int, filter: NodeFilter, entityReferenceExpansion: Boolean): NodeIterator
XMLDocument[JC] def createProcessingInstruction(target: String, data: String): ProcessingInstruction
XMLDocument[JC] def createRange(): Range
XMLDocument[JC] def createStyleSheet(href: String?, index: Int?): CSSStyleSheet
XMLDocument[JC] def createTextNode(data: String): Text
XMLDocument[JC] def createTreeWalker(root: Node, whatToShow: Int, filter: NodeFilter, entityReferenceExpansion: Boolean): TreeWalker
XMLDocument[JC] def dispatchEvent(evt: Event): Boolean
XMLDocument[JC] def doctype: DocumentType
XMLDocument[JC] def documentElement: Element
XMLDocument[JC] def documentURI: String
XMLDocument[JC] def elementFromPoint(x: Double, y: Double): Element
XMLDocument[JC] def evaluate(xpathExpression: String, contextNode: Node, namespaceResolver: XPathNSResolver, resultType: Int, result: XPathResult): XPathResult
XMLDocument[JC] def evaluate(xpathExpression: String, contextNode: Node, namespaceResolver: js.Function1[String, String], resultType: Int, result: XPathResult): XPathResult
XMLDocument[JC] def exitFullscreen(): js.Promise[Unit]
XMLDocument[JC] def exitPointerLock(): Unit
XMLDocument[JC] def firstChild: Node
XMLDocument[JC] def firstElementChild: Element
XMLDocument[JC] def fullscreenElement: Element
XMLDocument[JC] def fullscreenEnabled: Boolean
XMLDocument[JC] def getElementById(elementId: String): Element
XMLDocument[JC] def getElementsByClassName(classNames: String): HTMLCollection[Element]
XMLDocument[JC] def getElementsByName(elementName: String): NodeList[Node]
XMLDocument[JC] def getElementsByTagName(name: String): HTMLCollection[Element]
XMLDocument[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection[Element]
XMLDocument[JC] def hasChildNodes(): Boolean
XMLDocument[JC] def hidden: Boolean
XMLDocument[JC] def implementation: DOMImplementation
XMLDocument[JC] def importNode(importedNode: Node, deep: Boolean): Node
XMLDocument[JC] var innerText: String
XMLDocument[JC] def insertBefore(newChild: Node, refChild: Node): Node
XMLDocument[JC] def isConnected: Boolean
XMLDocument[JC] def isDefaultNamespace(namespaceURI: String): Boolean
XMLDocument[JC] def isEqualNode(arg: Node): Boolean
XMLDocument[JC] def isSameNode(other: Node): Boolean
XMLDocument[JC] def isSupported(feature: String, version: String): Boolean
XMLDocument[JC] def lastChild: Node
XMLDocument[JC] def lastElementChild: Element
XMLDocument[JC] def lastModified: String
XMLDocument[JC] def localName: String
XMLDocument[JC] def lookupNamespaceURI(prefix: String): String
XMLDocument[JC] def lookupPrefix(namespaceURI: String): String
XMLDocument[JC] def namespaceURI: String
XMLDocument[JC] def nextSibling: Node
XMLDocument[JC] def nodeName: String
XMLDocument[JC] def nodeType: Int
XMLDocument[JC] var nodeValue: String
XMLDocument[JC] def normalize(): Unit
XMLDocument[JC] var onfullscreenchange: js.Function1[Event, _]
XMLDocument[JC] var onfullscreenerror: js.Function1[Event, _]
XMLDocument[JC] var onpointerlockchange: js.Function1[Event, _]
XMLDocument[JC] var onpointerlockerror: js.Function1[Event, _]
XMLDocument[JC] def ownerDocument: Document
XMLDocument[JC] def parentNode: Node
XMLDocument[JC] def pointerLockElement: Element
XMLDocument[JC] def previousSibling: Node
XMLDocument[JC] def querySelector(selectors: String): Element
XMLDocument[JC] def querySelectorAll(selectors: String): NodeList[Element]
XMLDocument[JC] def removeChild(oldChild: Node): Node
XMLDocument[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
XMLDocument[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
XMLDocument[JC] def replaceChild(newChild: Node, oldChild: Node): Node
XMLDocument[JC] def replaceChildren(nodes: Node | String*): Unit
XMLDocument[JC] def styleSheets: StyleSheetList
XMLDocument[JC] var textContent: String
XMLDocument[JC] def visibilityState: VisibilityState | String
XMLDocument[JC] var visibilitychange: js.Function1[Event, _]
XMLHttpRequest[JC] def abort(): Unit
XMLHttpRequest[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
XMLHttpRequest[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
XMLHttpRequest[JC] def create(): XMLHttpRequest
XMLHttpRequest[JC] def dispatchEvent(evt: Event): Boolean
XMLHttpRequest[JC] def getAllResponseHeaders(): String
XMLHttpRequest[JC] def getResponseHeader(header: String): String
XMLHttpRequest[JC] var onabort: js.Function1[ProgressEvent, _]
XMLHttpRequest[JC] var onerror: js.Function1[ProgressEvent, _]
XMLHttpRequest[JC] var onload: js.Function1[ProgressEvent, _]
XMLHttpRequest[JC] var onloadend: js.Function1[ProgressEvent, _]
XMLHttpRequest[JC] var onloadstart: js.Function1[ProgressEvent, _]
XMLHttpRequest[JC] var onprogress: js.Function1[ProgressEvent, _]
XMLHttpRequest[JC] var onreadystatechange: js.Function1[Event, _]
XMLHttpRequest[JC] var ontimeout: js.Function1[ProgressEvent, _]
XMLHttpRequest[JC] def open(method: String, url: String, async: Boolean?, user: String?, password: String?): Unit
XMLHttpRequest[JC] def overrideMimeType(mimeType: String): Unit
XMLHttpRequest[JC] def readyState: Int
XMLHttpRequest[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
XMLHttpRequest[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
XMLHttpRequest[JC] def response: js.Any
XMLHttpRequest[JC] def responseText: String
XMLHttpRequest[JC] var responseType: String
XMLHttpRequest[JC] def responseURL: js.UndefOr[String]
XMLHttpRequest[JC] def responseXML: Document
XMLHttpRequest[JC] def send(data: js.Any?): Unit
XMLHttpRequest[JC] def setRequestHeader(header: String, value: String): Unit
XMLHttpRequest[JC] def status: Int
XMLHttpRequest[JC] def statusText: String
XMLHttpRequest[JC] var timeout: Double
XMLHttpRequest[JC] var upload: XMLHttpRequestEventTarget
XMLHttpRequest[JC] var withCredentials: Boolean
XMLHttpRequest[JO] var DONE: Int
XMLHttpRequest[JO] var HEADERS_RECEIVED: Int
XMLHttpRequest[JO] var LOADING: Int
XMLHttpRequest[JO] var OPENED: Int
XMLHttpRequest[JO] var UNSENT: Int
XMLHttpRequestEventTarget[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
XMLHttpRequestEventTarget[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
XMLHttpRequestEventTarget[JT] def dispatchEvent(evt: Event): Boolean
XMLHttpRequestEventTarget[JT] var onabort: js.Function1[ProgressEvent, _]
XMLHttpRequestEventTarget[JT] var onerror: js.Function1[ProgressEvent, _]
XMLHttpRequestEventTarget[JT] var onload: js.Function1[ProgressEvent, _]
XMLHttpRequestEventTarget[JT] var onloadend: js.Function1[ProgressEvent, _]
XMLHttpRequestEventTarget[JT] var onloadstart: js.Function1[ProgressEvent, _]
XMLHttpRequestEventTarget[JT] var onprogress: js.Function1[ProgressEvent, _]
XMLHttpRequestEventTarget[JT] var ontimeout: js.Function1[ProgressEvent, _]
XMLHttpRequestEventTarget[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
XMLHttpRequestEventTarget[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
XMLSerializer[JC] def serializeToString(target: Node): String
XPathNSResolver[JC] def lookupNamespaceURI(prefix: String): String
XPathResult[JC] def booleanValue: Boolean
XPathResult[JC] def invalidIteratorState: Boolean
XPathResult[JC] def iterateNext(): Node
XPathResult[JC] def numberValue: Double
XPathResult[JC] def resultType: Int
XPathResult[JC] def singleNodeValue: Node
XPathResult[JC] def snapshotItem(index: Int): Node
XPathResult[JC] def snapshotLength: Int
XPathResult[JC] def stringValue: String
XPathResult[JO] val ANY_TYPE: Int
XPathResult[JO] val ANY_UNORDERED_NODE_TYPE: Int
XPathResult[JO] val BOOLEAN_TYPE: Int
XPathResult[JO] val FIRST_ORDERED_NODE_TYPE: Int
XPathResult[JO] val NUMBER_TYPE: Int
XPathResult[JO] val ORDERED_NODE_ITERATOR_TYPE: Int
XPathResult[JO] val ORDERED_NODE_SNAPSHOT_TYPE: Int
XPathResult[JO] val STRING_TYPE: Int
XPathResult[JO] val UNORDERED_NODE_ITERATOR_TYPE: Int
XPathResult[JO] val UNORDERED_NODE_SNAPSHOT_TYPE: Int
crypto/GlobalCrypto[JO] val crypto: Crypto  (@deprecated in 2.0.0)
crypto/package[SO] type AesCbcParams = dom.AesCbcParams  (@deprecated in 2.0.0)
crypto/package[SO] type AesCfbParams = dom.AesCfbParams  (@deprecated in 2.0.0)
crypto/package[SO] type AesCmacParams = dom.AesCmacParams  (@deprecated in 2.0.0)
crypto/package[SO] type AesCtrParams = dom.AesCtrParams  (@deprecated in 2.0.0)
crypto/package[SO] type AesDerivedKeyParams = dom.AesDerivedKeyParams  (@deprecated in 2.0.0)
crypto/package[SO] type AesGcmParams = dom.AesGcmParams  (@deprecated in 2.0.0)
crypto/package[SO] type AesKeyAlgorithm = dom.AesKeyAlgorithm  (@deprecated in 2.0.0)
crypto/package[SO] type AesKeyGenParams = dom.AesKeyGenParams  (@deprecated in 2.0.0)
crypto/package[SO] type Algorithm = dom.Algorithm  (@deprecated in 2.0.0)
crypto/package[SO] type AlgorithmIdentifier = dom.AlgorithmIdentifier  (@deprecated in 2.0.0)
crypto/package[SO] type BigInteger = dom.BigInteger  (@deprecated in 2.0.0)
crypto/package[SO] type ConcatParams = dom.ConcatParams  (@deprecated in 2.0.0)
crypto/package[SO] type Crypto = dom.Crypto  (@deprecated in 2.0.0)
crypto/package[SO] type CryptoKey = dom.CryptoKey  (@deprecated in 2.0.0)
crypto/package[SO] type CryptoKeyPair = dom.CryptoKeyPair  (@deprecated in 2.0.0)
crypto/package[SO] type DhImportKeyParams = dom.DhImportKeyParams  (@deprecated in 2.0.0)
crypto/package[SO] type DhKeyAlgorithm = dom.DhKeyAlgorithm  (@deprecated in 2.0.0)
crypto/package[SO] type DhKeyDeriveParams = dom.DhKeyDeriveParams  (@deprecated in 2.0.0)
crypto/package[SO] type DhKeyGenParams = dom.DhKeyGenParams  (@deprecated in 2.0.0)
crypto/package[SO] type EcKeyAlgorithm = dom.EcKeyAlgorithm  (@deprecated in 2.0.0)
crypto/package[SO] type EcKeyGenParams = dom.EcKeyGenParams  (@deprecated in 2.0.0)
crypto/package[SO] type EcKeyImportParams = dom.EcKeyImportParams  (@deprecated in 2.0.0)
crypto/package[SO] type EcdhKeyDeriveParams = dom.EcdhKeyDeriveParams  (@deprecated in 2.0.0)
crypto/package[SO] type EcdsaParams = dom.EcdsaParams  (@deprecated in 2.0.0)
crypto/package[SO] type HashAlgorithm = dom.HashAlgorithm  (@deprecated in 2.0.0)
crypto/package[SO] type HashAlgorithmIdentifier = dom.HashAlgorithmIdentifier  (@deprecated in 2.0.0)
crypto/package[SO] type HkdfCtrParams = dom.HkdfCtrParams  (@deprecated in 2.0.0)
crypto/package[SO] type HmacImportParams = dom.HmacImportParams  (@deprecated in 2.0.0)
crypto/package[SO] type HmacKeyAlgorithm = dom.HmacKeyAlgorithm  (@deprecated in 2.0.0)
crypto/package[SO] type HmacKeyGenParams = dom.HmacKeyGenParams  (@deprecated in 2.0.0)
crypto/package[SO] type JsonWebKey = dom.JsonWebKey  (@deprecated in 2.0.0)
crypto/package[SO] type KeyAlgorithm = dom.KeyAlgorithm  (@deprecated in 2.0.0)
crypto/package[SO] type KeyAlgorithmIdentifier = dom.KeyAlgorithmIdentifier  (@deprecated in 2.0.0)
crypto/package[SO] type KeyFormat = dom.KeyFormat  (@deprecated in 2.0.0)
crypto/package[SO] type KeyType = dom.KeyType  (@deprecated in 2.0.0)
crypto/package[SO] type KeyUsage = dom.KeyUsage  (@deprecated in 2.0.0)
crypto/package[SO] type Pbkdf2Params = dom.Pbkdf2Params  (@deprecated in 2.0.0)
crypto/package[SO] type RsaHashedImportParams = dom.RsaHashedImportParams  (@deprecated in 2.0.0)
crypto/package[SO] type RsaHashedKeyAlgorithm = dom.RsaHashedKeyAlgorithm  (@deprecated in 2.0.0)
crypto/package[SO] type RsaHashedKeyGenParams = dom.RsaHashedKeyGenParams  (@deprecated in 2.0.0)
crypto/package[SO] type RsaKeyAlgorithm = dom.RsaKeyAlgorithm  (@deprecated in 2.0.0)
crypto/package[SO] type RsaKeyGenParams = dom.RsaKeyGenParams  (@deprecated in 2.0.0)
crypto/package[SO] type RsaOaepParams = dom.RsaOaepParams  (@deprecated in 2.0.0)
crypto/package[SO] type RsaOtherPrimesInfo = dom.RsaOtherPrimesInfo  (@deprecated in 2.0.0)
crypto/package[SO] type RsaPssParams = dom.RsaPssParams  (@deprecated in 2.0.0)
crypto/package[SO] type SubtleCrypto = dom.SubtleCrypto  (@deprecated in 2.0.0)
crypto/package[SO] @deprecated("use dom.AesCbcParams instead", "2.0.0") val AesCbcParams = dom.AesCbcParams
crypto/package[SO] @deprecated("use dom.AesCfbParams instead", "2.0.0") val AesCfbParams = dom.AesCfbParams
crypto/package[SO] @deprecated("use dom.AesCmacParams instead", "2.0.0") val AesCmacParams = dom.AesCmacParams
crypto/package[SO] @deprecated("use dom.AesCtrParams instead", "2.0.0") val AesCtrParams = dom.AesCtrParams
crypto/package[SO] @deprecated("use dom.AesDerivedKeyParams instead", "2.0.0") val AesDerivedKeyParams = dom.AesDerivedKeyParams
crypto/package[SO] @deprecated("use dom.AesGcmParams instead", "2.0.0") val AesGcmParams = dom.AesGcmParams
crypto/package[SO] @deprecated("use dom.AesKeyAlgorithm instead", "2.0.0") val AesKeyAlgorithm = dom.AesKeyAlgorithm
crypto/package[SO] @deprecated("use dom.AesKeyGenParams instead", "2.0.0") val AesKeyGenParams = dom.AesKeyGenParams
crypto/package[SO] @deprecated("use dom.ConcatParams instead", "2.0.0") val ConcatParams = dom.ConcatParams
crypto/package[SO] @deprecated("use dom.DhImportKeyParams instead", "2.0.0") val DhImportKeyParams = dom.DhImportKeyParams
crypto/package[SO] @deprecated("use dom.DhKeyAlgorithm instead", "2.0.0") val DhKeyAlgorithm = dom.DhKeyAlgorithm
crypto/package[SO] @deprecated("use dom.DhKeyDeriveParams instead", "2.0.0") val DhKeyDeriveParams = dom.DhKeyDeriveParams
crypto/package[SO] @deprecated("use dom.DhKeyGenParams instead", "2.0.0") val DhKeyGenParams = dom.DhKeyGenParams
crypto/package[SO] @deprecated("use dom.EcKeyAlgorithm instead", "2.0.0") val EcKeyAlgorithm = dom.EcKeyAlgorithm
crypto/package[SO] @deprecated("use dom.EcKeyGenParams instead", "2.0.0") val EcKeyGenParams = dom.EcKeyGenParams
crypto/package[SO] @deprecated("use dom.EcKeyImportParams instead", "2.0.0") val EcKeyImportParams = dom.EcKeyImportParams
crypto/package[SO] @deprecated("use dom.EcdhKeyDeriveParams instead", "2.0.0") val EcdhKeyDeriveParams = dom.EcdhKeyDeriveParams
crypto/package[SO] @deprecated("use dom.EcdsaParams instead", "2.0.0") val EcdsaParams = dom.EcdsaParams
crypto/package[SO] @deprecated("use dom.HashAlgorithm instead", "2.0.0") val HashAlgorithm = dom.HashAlgorithm
crypto/package[SO] @deprecated("use dom.HkdfCtrParams instead", "2.0.0") val HkdfCtrParams = dom.HkdfCtrParams
crypto/package[SO] @deprecated("use dom.HmacImportParams instead", "2.0.0") val HmacImportParams = dom.HmacImportParams
crypto/package[SO] @deprecated("use dom.HmacKeyAlgorithm instead", "2.0.0") val HmacKeyAlgorithm = dom.HmacKeyAlgorithm
crypto/package[SO] @deprecated("use dom.HmacKeyGenParams instead", "2.0.0") val HmacKeyGenParams = dom.HmacKeyGenParams
crypto/package[SO] @deprecated("use dom.KeyFormat instead", "2.0.0") val KeyFormat = dom.KeyFormat
crypto/package[SO] @deprecated("use dom.KeyType instead", "2.0.0") val KeyType = dom.KeyType
crypto/package[SO] @deprecated("use dom.KeyUsage instead", "2.0.0") val KeyUsage = dom.KeyUsage
crypto/package[SO] @deprecated("use dom.Pbkdf2Params instead", "2.0.0") val Pbkdf2Params = dom.Pbkdf2Params
crypto/package[SO] @deprecated("use dom.RsaHashedImportParams instead", "2.0.0") val RsaHashedImportParams = dom.RsaHashedImportParams
crypto/package[SO] @deprecated("use dom.RsaHashedKeyAlgorithm instead", "2.0.0") val RsaHashedKeyAlgorithm = dom.RsaHashedKeyAlgorithm
crypto/package[SO] @deprecated("use dom.RsaHashedKeyGenParams instead", "2.0.0") val RsaHashedKeyGenParams = dom.RsaHashedKeyGenParams
crypto/package[SO] @deprecated("use dom.RsaKeyAlgorithm instead", "2.0.0") val RsaKeyAlgorithm = dom.RsaKeyAlgorithm
crypto/package[SO] @deprecated("use dom.RsaKeyGenParams instead", "2.0.0") val RsaKeyGenParams = dom.RsaKeyGenParams
crypto/package[SO] @deprecated("use dom.RsaOaepParams instead", "2.0.0") val RsaOaepParams = dom.RsaOaepParams
crypto/package[SO] @deprecated("use dom.RsaPssParams instead", "2.0.0") val RsaPssParams = dom.RsaPssParams
crypto/package[SO] def crypto: Crypto  (@deprecated in 2.0.0)
crypto/package[SO] def getRandomValues(array: ArrayBufferView)(implicit dummy: DummyImplicit): ArrayBufferView
crypto/package[SO] @JSGlobal("crypto.subtle") @js.native val subtle: dom.SubtleCrypto
experimental/Fullscreen[SO]  (@deprecated in 2.0.0)
experimental/PointerLock[SO] type PointerLockDocument = dom.Document  (@deprecated in 2.0.0)
experimental/PointerLock[SO] type PointerLockElement = dom.Element  (@deprecated in 2.0.0)
experimental/PointerLock[SO] type PointerLockMouseEvent = dom.MouseEvent  (@deprecated in 2.0.0)
experimental/PointerLock[SO] def toPointerLockDocument(document: dom.Document): PointerLockDocument  (@deprecated in 2.0.0)
experimental/PointerLock[SO] def toPointerLockElement(element: dom.Element): PointerLockElement  (@deprecated in 2.0.0)
experimental/PointerLock[SO] def toPointerLockMouseEvent(me: dom.MouseEvent): PointerLockMouseEvent  (@deprecated in 2.0.0)
experimental/Vibration[SO]  (@deprecated in 2.0.0)
experimental/beacon/package[SO] type BeaconNavigator = dom.Navigator  (@deprecated in 2.0.0)
experimental/beacon/package[SO] type BeaconWorkerNavigator = dom.WorkerNavigator  (@deprecated in 2.0.0)
experimental/beacon/package[SO] def toBeaconNavigator(n: Navigator): BeaconNavigator  (@deprecated in 2.0.0)
experimental/beacon/package[SO] def toBeaconWorkerNavigator(n: WorkerNavigator): BeaconWorkerNavigator  (@deprecated in 2.0.0)
experimental/cachestorage/package[SO] type Cache = dom.Cache  (@deprecated in 2.0.0)
experimental/cachestorage/package[SO] type CacheQueryOptions = dom.CacheQueryOptions  (@deprecated in 2.0.0)
experimental/cachestorage/package[SO] type CacheStorage = dom.CacheStorage  (@deprecated in 2.0.0)
experimental/deviceorientation/package[SO] type DeviceAcceleration = dom.DeviceAcceleration  (@deprecated in 2.0.0)
experimental/deviceorientation/package[SO] type DeviceMotionEvent = dom.DeviceMotionEvent  (@deprecated in 2.0.0)
experimental/deviceorientation/package[SO] type DeviceMotionEventInit = dom.DeviceMotionEventInit  (@deprecated in 2.0.0)
experimental/deviceorientation/package[SO] type DeviceOrientationEvent = dom.DeviceOrientationEvent  (@deprecated in 2.0.0)
experimental/deviceorientation/package[SO] type DeviceOrientationEventInit = dom.DeviceOrientationEventInit  (@deprecated in 2.0.0)
experimental/deviceorientation/package[SO] type DeviceRotationRate = dom.DeviceRotationRate  (@deprecated in 2.0.0)
experimental/domparser/package[SO] type DOMParser = dom.DOMParser  (@deprecated in 2.0.0)
experimental/domparser/package[SO] type SupportedType = dom.MIMEType  (@deprecated in 2.0.0)
experimental/domparser/package[SO] @deprecated("use dom.MIMEType instead", "2.0.0") val SupportedType = dom.MIMEType
experimental/gamepad/package[SO] type Gamepad = dom.Gamepad  (@deprecated in 2.0.0)
experimental/gamepad/package[SO] type GamepadButton = dom.GamepadButton  (@deprecated in 2.0.0)
experimental/gamepad/package[SO] type GamepadEvent = dom.GamepadEvent  (@deprecated in 2.0.0)
experimental/gamepad/package[SO] type GamepadEventInit = dom.GamepadEventInit  (@deprecated in 2.0.0)
experimental/gamepad/package[SO] type GamepadMappingType = dom.GamepadMappingType  (@deprecated in 2.0.0)
experimental/gamepad/package[SO] type GamepadNavigator = dom.Navigator  (@deprecated in 2.0.0)
experimental/gamepad/package[SO] def standard: dom.GamepadMappingType  (@deprecated in 2.0.0)
experimental/gamepad/package[SO] def toGamepad(navigator: dom.Navigator): GamepadNavigator  (@deprecated in 2.0.0)
experimental/gamepad/package[SO] def unknown: dom.GamepadMappingType  (@deprecated in 2.0.0)
experimental/intl/package[SO] type Collator = dom.intl.Collator  (@deprecated in 2.0.0)
experimental/intl/package[SO] type CollatorOptions = dom.intl.CollatorOptions  (@deprecated in 2.0.0)
experimental/intl/package[SO] type DateTimeFormat = dom.intl.DateTimeFormat  (@deprecated in 2.0.0)
experimental/intl/package[SO] type DateTimeFormatOptions = dom.intl.DateTimeFormatOptions  (@deprecated in 2.0.0)
experimental/intl/package[SO] type NumberFormat = dom.intl.NumberFormat  (@deprecated in 2.0.0)
experimental/intl/package[SO] type NumberFormatOptions = dom.intl.NumberFormatOptions  (@deprecated in 2.0.0)
experimental/intl/package[SO] @deprecated("use dom.intl.Collator instead", "2.0.0") val Collator = dom.intl.Collator
experimental/intl/package[SO] @deprecated("use dom.intl.CollatorOptions instead", "2.0.0") val CollatorOptions = dom.intl.CollatorOptions
experimental/intl/package[SO] @deprecated("use dom.intl.DateTimeFormat instead", "2.0.0") val DateTimeFormat = dom.intl.DateTimeFormat
experimental/intl/package[SO] @deprecated("use dom.intl.DateTimeFormatOptions instead", "2.0.0") val DateTimeFormatOptions = dom.intl.DateTimeFormatOptions
experimental/intl/package[SO] @deprecated("use dom.intl.NumberFormat instead", "2.0.0") val NumberFormat = dom.intl.NumberFormat
experimental/intl/package[SO] @deprecated("use dom.intl.NumberFormatOptions instead", "2.0.0") val NumberFormatOptions = dom.intl.NumberFormatOptions
experimental/mediastream/package[SO] type AppendMode = dom.AppendMode  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type AudioTrack = dom.AudioTrack  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type AudioTrackList = dom.AudioTrackList  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type BufferSource = dom.BufferSource  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type EndOfStreamError = dom.EndOfStreamError  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type ImageCapture = dom.ImageCapture  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type MediaDeviceInfo = dom.MediaDeviceInfo  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type MediaDeviceKind = dom.MediaDeviceKind  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type MediaDevices = dom.MediaDevices  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type MediaSource = dom.MediaSource  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type MediaStream = dom.MediaStream  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type MediaStreamConstraints = dom.MediaStreamConstraints  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type MediaStreamTrack = dom.MediaStreamTrack  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type MediaStreamTrackEvent = dom.MediaStreamTrackEvent  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type MediaStreamTrackEventInit = dom.MediaStreamTrackEventInit  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type MediaStreamTrackState = dom.MediaStreamTrackState  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type MediaTrackConstraintSet = dom.MediaTrackConstraintSet  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type MediaTrackConstraints = dom.MediaTrackConstraints  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type MediaTrackSettings = dom.MediaTrackSettings  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type MediaTrackSupportedConstraints = dom.MediaTrackSupportedConstraints  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type ReadyState = dom.MediaSourceReadyState  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type SourceBuffer = dom.SourceBuffer  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type SourceBufferList = dom.SourceBufferList  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type TextTrack = dom.TextTrack  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type TextTrackCue = dom.TextTrackCue  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type TextTrackCueList = dom.TextTrackCueList  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type TextTrackList = dom.TextTrackList  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type TextTrackMode = dom.TextTrackMode  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type VideoTrack = dom.VideoTrack  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] type VideoTrackList = dom.VideoTrackList  (@deprecated in 2.0.0)
experimental/mediastream/package[SO] @deprecated("use dom.MediaDeviceInfo instead", "2.0.0") val MediaDeviceInfo = dom.MediaDeviceInfo
experimental/mediastream/package[SO] @deprecated("use dom.MediaDeviceKind instead", "2.0.0") val MediaDeviceKind = dom.MediaDeviceKind
experimental/mediastream/package[SO] @deprecated("use dom.MediaSource instead", "2.0.0") val MediaSource = dom.MediaSource
experimental/mediastream/package[SO] @deprecated("use dom.MediaStreamConstraints instead", "2.0.0") val MediaStreamConstraints = dom.MediaStreamConstraints
experimental/mediastream/package[SO] @deprecated("use dom.MediaStreamTrack instead", "2.0.0") val MediaStreamTrack = dom.MediaStreamTrack
experimental/mediastream/package[SO] @deprecated("use dom.MediaStreamTrackState instead", "2.0.0") val MediaStreamTrackState = dom.MediaStreamTrackState
experimental/mediastream/package[SO] @deprecated("use dom.MediaTrackConstraintSet instead", "2.0.0") val MediaTrackConstraintSet = dom.MediaTrackConstraintSet
experimental/mediastream/package[SO] @deprecated("use dom.MediaTrackConstraints instead", "2.0.0") val MediaTrackConstraints = dom.MediaTrackConstraints
experimental/mediastream/package[SO] @deprecated("use dom.TextTrack instead", "2.0.0") val TextTrack = dom.TextTrack
experimental/package[SO] type AbortController = dom.AbortController  (@deprecated in 2.0.0)
experimental/package[SO] type AbortSignal = dom.AbortSignal  (@deprecated in 2.0.0)
experimental/package[SO] type Body = dom.Body  (@deprecated in 2.0.0)
experimental/package[SO] type BodyInit = dom.BodyInit  (@deprecated in 2.0.0)
experimental/package[SO] type ByteString = dom.ByteString  (@deprecated in 2.0.0)
experimental/package[SO] type Chunk[+T] = dom.Chunk[T]  (@deprecated in 2.0.0)
experimental/package[SO] type FileReaderSync = dom.FileReaderSync  (@deprecated in 2.0.0)
experimental/package[SO] type Headers = dom.Headers  (@deprecated in 2.0.0)
experimental/package[SO] type HeadersInit = dom.HeadersInit  (@deprecated in 2.0.0)
experimental/package[SO] type HttpMethod = dom.HttpMethod  (@deprecated in 2.0.0)
experimental/package[SO] type Notification = dom.Notification  (@deprecated in 2.0.0)
experimental/package[SO] type NotificationOptions = dom.NotificationOptions  (@deprecated in 2.0.0)
experimental/package[SO] type OpenEndedDictionary[T] = dom.OpenEndedDictionary[T]  (@deprecated in 2.0.0)
experimental/package[SO] type ReadableStreamController[-T] = dom.ReadableStreamController[T]  (@deprecated in 2.0.0)
experimental/package[SO] type ReadableStreamReader[+T] = dom.ReadableStreamReader[T]  (@deprecated in 2.0.0)
experimental/package[SO] type ReadableStream[+T] = dom.ReadableStream[T]  (@deprecated in 2.0.0)
experimental/package[SO] type ReferrerPolicy = dom.ReferrerPolicy  (@deprecated in 2.0.0)
experimental/package[SO] type Request = dom.Request  (@deprecated in 2.0.0)
experimental/package[SO] type RequestCache = dom.RequestCache  (@deprecated in 2.0.0)
experimental/package[SO] type RequestCredentials = dom.RequestCredentials  (@deprecated in 2.0.0)
experimental/package[SO] type RequestDestination = dom.RequestDestination  (@deprecated in 2.0.0)
experimental/package[SO] type RequestInfo = dom.RequestInfo  (@deprecated in 2.0.0)
experimental/package[SO] type RequestInit = dom.RequestInit  (@deprecated in 2.0.0)
experimental/package[SO] type RequestMode = dom.RequestMode  (@deprecated in 2.0.0)
experimental/package[SO] type RequestRedirect = dom.RequestRedirect  (@deprecated in 2.0.0)
experimental/package[SO] type RequestType = dom.RequestType  (@deprecated in 2.0.0)
experimental/package[SO] type Response = dom.Response  (@deprecated in 2.0.0)
experimental/package[SO] type ResponseInit = dom.ResponseInit  (@deprecated in 2.0.0)
experimental/package[SO] type ResponseType = dom.ResponseType  (@deprecated in 2.0.0)
experimental/package[SO] type Sequence[T] = dom.Sequence[T]  (@deprecated in 2.0.0)
experimental/package[SO] type URL = dom.URL  (@deprecated in 2.0.0)
experimental/package[SO] type URLSearchParams = dom.URLSearchParams  (@deprecated in 2.0.0)
experimental/package[SO] type WriteableState = dom.WriteableState  (@deprecated in 2.0.0)
experimental/package[SO] type WriteableStream[-T] = dom.WriteableStream[T]  (@deprecated in 2.0.0)
experimental/package[SO] lazy val HttpMethod: dom.HttpMethod.type  (@deprecated in 2.0.0)
experimental/package[SO] lazy val Notification: dom.Notification.type  (@deprecated in 2.0.0)
experimental/package[SO] lazy val ReferrerPolicy: dom.ReferrerPolicy.type  (@deprecated in 2.0.0)
experimental/package[SO] lazy val RequestCache: dom.RequestCache.type  (@deprecated in 2.0.0)
experimental/package[SO] lazy val RequestCredentials: dom.RequestCredentials.type  (@deprecated in 2.0.0)
experimental/package[SO] lazy val RequestDestination: dom.RequestDestination.type  (@deprecated in 2.0.0)
experimental/package[SO] lazy val RequestMode: dom.RequestMode.type  (@deprecated in 2.0.0)
experimental/package[SO] lazy val RequestRedirect: dom.RequestRedirect.type  (@deprecated in 2.0.0)
experimental/package[SO] lazy val RequestType: dom.RequestType.type  (@deprecated in 2.0.0)
experimental/package[SO] lazy val Response: dom.Response.type  (@deprecated in 2.0.0)
experimental/package[SO] lazy val ResponseType: dom.ResponseType.type  (@deprecated in 2.0.0)
experimental/package[SO] lazy val WriteableState: dom.WriteableState.type  (@deprecated in 2.0.0)
experimental/package[SO] def apply(_status: Int = 200, _statusText: ByteString = "OK", _headers: HeadersInit = js.Dictionary[String]()): ResponseInit
experimental/package[SO] @js.native @JSGlobal("fetch") def fetch(info: RequestInfo, init: RequestInit = null): js.Promise[Response]
experimental/package.Fetch[SO] @js.native @JSGlobal("fetch") def fetch(info: RequestInfo, init: RequestInit = null): js.Promise[Response]  (@deprecated in 2.0.0)
experimental/package.ResponseInit[SO] def apply(_status: Int = 200, _statusText: ByteString = "OK", _headers: HeadersInit = js.Dictionary[String]()): ResponseInit  (@deprecated in 2.0.0)
experimental/permissions/package[SO] type PermissionDescriptor = dom.PermissionDescriptor  (@deprecated in 2.0.0)
experimental/permissions/package[SO] type PermissionName = dom.PermissionName  (@deprecated in 2.0.0)
experimental/permissions/package[SO] type PermissionState = dom.PermissionState  (@deprecated in 2.0.0)
experimental/permissions/package[SO] type PermissionStatus = dom.PermissionStatus  (@deprecated in 2.0.0)
experimental/permissions/package[SO] type Permissions = dom.Permissions  (@deprecated in 2.0.0)
experimental/permissions/package[SO] type PermissionsNavigator = dom.Navigator  (@deprecated in 2.0.0)
experimental/permissions/package[SO] type PushPermissionDescriptor = dom.PushPermissionDescriptor  (@deprecated in 2.0.0)
experimental/permissions/package[SO] @deprecated("use dom.PermissionDescriptor instead", "2.0.0") val PermissionDescriptor = dom.PermissionDescriptor
experimental/permissions/package[SO] @deprecated("use dom.PermissionName instead", "2.0.0") val PermissionName = dom.PermissionName
experimental/permissions/package[SO] @deprecated("use dom.PermissionState instead", "2.0.0") val PermissionState = dom.PermissionState
experimental/permissions/package[SO] @deprecated("use dom.PushPermissionDescriptor instead", "2.0.0") val PushPermissionDescriptor = dom.PushPermissionDescriptor
experimental/permissions/package[SO] def toPermissions(navigator: dom.Navigator): PermissionsNavigator  (@deprecated in 2.0.0)
experimental/push/package[SO] type PushEncryptionKeyName = dom.PushEncryptionKeyName  (@deprecated in 2.0.0)
experimental/push/package[SO] type PushEvent = dom.PushEvent  (@deprecated in 2.0.0)
experimental/push/package[SO] type PushManager = dom.PushManager  (@deprecated in 2.0.0)
experimental/push/package[SO] type PushMessageData = dom.PushMessageData  (@deprecated in 2.0.0)
experimental/push/package[SO] type PushPermissionState = dom.PushPermissionState  (@deprecated in 2.0.0)
experimental/push/package[SO] type PushServiceWorkerGlobalScope = ServiceWorkerGlobalScope  (@deprecated in 2.0.0)
experimental/push/package[SO] type PushServiceWorkerRegistration = ServiceWorkerRegistration  (@deprecated in 2.0.0)
experimental/push/package[SO] type PushSubscription = dom.PushSubscription  (@deprecated in 2.0.0)
experimental/push/package[SO] type PushSubscriptionJSON = dom.PushSubscriptionJSON  (@deprecated in 2.0.0)
experimental/push/package[SO] type PushSubscriptionOptions = dom.PushSubscriptionOptions  (@deprecated in 2.0.0)
experimental/push/package[SO] @deprecated("use dom.PushEncryptionKeyName instead", "2.0.0") val PushEncryptionKeyName = dom.PushEncryptionKeyName
experimental/push/package[SO] @deprecated("use dom.PushPermissionState instead", "2.0.0") val PushPermissionState = dom.PushPermissionState
experimental/push/package[SO] def pushServiceWorkerGlobalScope(swgs: ServiceWorkerGlobalScope): PushServiceWorkerGlobalScope  (@deprecated in 2.0.0)
experimental/push/package[SO] def pushServiceWorkerRegistration(swr: ServiceWorkerRegistration): PushServiceWorkerRegistration  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type Cache = dom.Cache  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type CacheQueryOptions = dom.CacheQueryOptions  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type CacheStorage = dom.CacheStorage  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type CanvasProxy = dom.CanvasProxy  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type Client = dom.Client  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type ClientQueryOptions = dom.ClientQueryOptions  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type ClientType = dom.ClientType  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type Clients = dom.Clients  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type ExtendableEvent = dom.ExtendableEvent  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type ExtendableEventInit = dom.ExtendableEventInit  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type ExtendableMessageEvent = dom.ExtendableMessageEvent  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type ExtendableMessageEventInit = dom.ExtendableMessageEventInit  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type FetchEvent = dom.FetchEvent  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type FetchEventInit = dom.FetchEventInit  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type FrameType = dom.FrameType  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type GetNotificationOptions = dom.GetNotificationOptions  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type ServiceWorker = dom.ServiceWorker  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type ServiceWorkerContainer = dom.ServiceWorkerContainer  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type ServiceWorkerGlobalScope = dom.ServiceWorkerGlobalScope  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type ServiceWorkerMessageEventInit = dom.ServiceWorkerMessageEventInit  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type ServiceWorkerNavigator = dom.Navigator  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type ServiceWorkerRegistration = dom.ServiceWorkerRegistration  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type ServiceWorkerState = dom.ServiceWorkerState  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type Transferable = dom.Transferable  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] type WindowClient = dom.WindowClient  (@deprecated in 2.0.0)
experimental/serviceworkers/package[SO] @deprecated("use dom.ClientType instead", "2.0.0") val ClientType = dom.ClientType
experimental/serviceworkers/package[SO] @deprecated("use dom.FrameType instead", "2.0.0") val FrameType = dom.FrameType
experimental/serviceworkers/package[SO] @deprecated("use dom.ServiceWorkerState instead", "2.0.0") val ServiceWorkerState = dom.ServiceWorkerState
experimental/serviceworkers/package[SO] def self: SharedWorkerGlobalScope
experimental/serviceworkers/package[SO] implicit def toServiceWorkerNavigator(n: Navigator): ServiceWorkerNavigator  (@deprecated in 2.0.0)
experimental/serviceworkers/package.SharedWorkerGlobalScope[JO] def self: SharedWorkerGlobalScope  (@deprecated in 2.0.0)
experimental/sharedworkers/package[SO] type SharedWorker = dom.SharedWorker  (@deprecated in 2.0.0)
experimental/sharedworkers/package[SO] type SharedWorkerGlobalScope = dom.SharedWorkerGlobalScope  (@deprecated in 2.0.0)
experimental/sharedworkers/package[SO] @deprecated("use dom.SharedWorker instead", "2.0.0") val SharedWorker = dom.SharedWorker
experimental/storage/package[SO] type NavigatorStorage = dom.Navigator  (@deprecated in 2.0.0)
experimental/storage/package[SO] type StorageEstimate = dom.StorageEstimate  (@deprecated in 2.0.0)
experimental/storage/package[SO] type StorageManager = dom.StorageManager  (@deprecated in 2.0.0)
experimental/storage/package[SO] def toNavigatorStorage(navigator: dom.Navigator): dom.Navigator  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type ANGLEInstancedArrays = dom.webgl.extensions.ANGLEInstancedArrays  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type EXTBlendMinmax = dom.webgl.extensions.EXTBlendMinmax  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type EXTColorBufferHalfFloat = dom.webgl.extensions.EXTColorBufferHalfFloat  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type EXTDisjointTimerQuery = dom.webgl.extensions.EXTDisjointTimerQuery  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type EXTFragDepth = dom.webgl.extensions.EXTFragDepth  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type EXTShaderTextureLOD = dom.webgl.extensions.EXTShaderTextureLOD  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type EXTTextureFilterAnisotropic = dom.webgl.extensions.EXTTextureFilterAnisotropic  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type EXTsRGB = dom.webgl.extensions.EXTsRGB  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type OESElementIndexUint = dom.webgl.extensions.OESElementIndexUint  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type OESStandardDerivatives = dom.webgl.extensions.OESStandardDerivatives  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type OESTextureFloat = dom.webgl.extensions.OESTextureFloat  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type OESTextureFloatLinear = dom.webgl.extensions.OESTextureFloatLinear  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type OESTextureHalfFloat = dom.webgl.extensions.OESTextureHalfFloat  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type OESTextureHalfFloatLinear = dom.webgl.extensions.OESTextureHalfFloatLinear  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type OESVertexArrayObject = dom.webgl.extensions.OESVertexArrayObject  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type WEBGLColorBufferFloat = dom.webgl.extensions.WEBGLColorBufferFloat  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type WEBGLCompressedTextureETC1 = dom.webgl.extensions.WEBGLCompressedTextureETC1  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type WEBGLDrawBuffers = dom.webgl.extensions.WEBGLDrawBuffers  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type WebGLCompressedTextureATC = dom.webgl.extensions.WebGLCompressedTextureATC  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type WebGLCompressedTexturePVRTC = dom.webgl.extensions.WebGLCompressedTexturePVRTC  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type WebGLCompressedTextureS3TC = dom.webgl.extensions.WebGLCompressedTextureS3TC  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type WebGLDebugRendererInfo = dom.webgl.extensions.WebGLDebugRendererInfo  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type WebGLDebugShaders = dom.webgl.extensions.WebGLDebugShaders  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type WebGLDepthTexture = dom.webgl.extensions.WebGLDepthTexture  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type WebGLLoseContext = dom.webgl.extensions.WebGLLoseContext  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type WebGLTimerQueryEXT = dom.webgl.extensions.WebGLTimerQueryEXT  (@deprecated in 2.0.0)
experimental/webgl/extensions/package[SO] type WebGLVertexArrayObjectOES = dom.webgl.extensions.WebGLVertexArrayObjectOES  (@deprecated in 2.0.0)
experimental/webgl/package[SO] type WebGLExtensionIdentifier[T] = dom.webgl.WebGLExtensionIdentifier[T]  (@deprecated in 2.0.0)
experimental/webgl/package[SO] type WebGLRenderingContextOps = WebGLRenderingContext.WebGLRenderingContextOps  (@deprecated in 2.0.0)
experimental/webgl/package[SO] @deprecated("use dom.webgl.ANGLE_instanced_arrays instead", "2.0.0") val ANGLE_instanced_arrays = dom.webgl.ANGLE_instanced_arrays
experimental/webgl/package[SO] @deprecated("use dom.webgl.EXT_blend_minmax instead", "2.0.0") val EXT_blend_minmax = dom.webgl.EXT_blend_minmax
experimental/webgl/package[SO] @deprecated("use dom.webgl.EXT_color_buffer_half_float instead", "2.0.0") val EXT_color_buffer_half_float = dom.webgl.EXT_color_buffer_half_float
experimental/webgl/package[SO] @deprecated("use dom.webgl.EXT_disjoint_timer_query instead", "2.0.0") val EXT_disjoint_timer_query = dom.webgl.EXT_disjoint_timer_query
experimental/webgl/package[SO] @deprecated("use dom.webgl.EXT_frag_depth instead", "2.0.0") val EXT_frag_depth = dom.webgl.EXT_frag_depth
experimental/webgl/package[SO] @deprecated("use dom.webgl.EXT_sRGB instead", "2.0.0") val EXT_sRGB = dom.webgl.EXT_sRGB
experimental/webgl/package[SO] @deprecated("use dom.webgl.EXT_shader_texture_lod instead", "2.0.0") val EXT_shader_texture_lod = dom.webgl.EXT_shader_texture_lod
experimental/webgl/package[SO] @deprecated("use dom.webgl.EXT_texture_filter_anisotropic instead", "2.0.0") val EXT_texture_filter_anisotropic = dom.webgl.EXT_texture_filter_anisotropic
experimental/webgl/package[SO] @deprecated("use dom.webgl.OES_element_index_uint instead", "2.0.0") val OES_element_index_uint = dom.webgl.OES_element_index_uint
experimental/webgl/package[SO] @deprecated("use dom.webgl.OES_standard_derivatives instead", "2.0.0") val OES_standard_derivatives = dom.webgl.OES_standard_derivatives
experimental/webgl/package[SO] @deprecated("use dom.webgl.OES_texture_float instead", "2.0.0") val OES_texture_float = dom.webgl.OES_texture_float
experimental/webgl/package[SO] @deprecated("use dom.webgl.OES_texture_float_linear instead", "2.0.0") val OES_texture_float_linear = dom.webgl.OES_texture_float_linear
experimental/webgl/package[SO] @deprecated("use dom.webgl.OES_texture_half_float instead", "2.0.0") val OES_texture_half_float = dom.webgl.OES_texture_half_float
experimental/webgl/package[SO] @deprecated("use dom.webgl.OES_texture_half_float_linear instead", "2.0.0") val OES_texture_half_float_linear = dom.webgl.OES_texture_half_float_linear
experimental/webgl/package[SO] @deprecated("use dom.webgl.OES_vertex_array_object instead", "2.0.0") val OES_vertex_array_object = dom.webgl.OES_vertex_array_object
experimental/webgl/package[SO] @deprecated("use dom.webgl.WEBGL_color_buffer_float instead", "2.0.0") val WEBGL_color_buffer_float = dom.webgl.WEBGL_color_buffer_float
experimental/webgl/package[SO] @deprecated("use dom.webgl.WEBGL_compressed_texture_atc instead", "2.0.0") val WEBGL_compressed_texture_atc = dom.webgl.WEBGL_compressed_texture_atc
experimental/webgl/package[SO] @deprecated("use dom.webgl.WEBGL_compressed_texture_etc1 instead", "2.0.0") val WEBGL_compressed_texture_etc1 = dom.webgl.WEBGL_compressed_texture_etc1
experimental/webgl/package[SO] @deprecated("use dom.webgl.WEBGL_compressed_texture_pvrtc instead", "2.0.0") val WEBGL_compressed_texture_pvrtc = dom.webgl.WEBGL_compressed_texture_pvrtc
experimental/webgl/package[SO] @deprecated("use dom.webgl.WEBGL_compressed_texture_s3tc instead", "2.0.0") val WEBGL_compressed_texture_s3tc = dom.webgl.WEBGL_compressed_texture_s3tc
experimental/webgl/package[SO] @deprecated("use dom.webgl.WEBGL_debug_renderer_info instead", "2.0.0") val WEBGL_debug_renderer_info = dom.webgl.WEBGL_debug_renderer_info
experimental/webgl/package[SO] @deprecated("use dom.webgl.WEBGL_debug_shaders instead", "2.0.0") val WEBGL_debug_shaders = dom.webgl.WEBGL_debug_shaders
experimental/webgl/package[SO] @deprecated("use dom.webgl.WEBGL_depth_texture instead", "2.0.0") val WEBGL_depth_texture = dom.webgl.WEBGL_depth_texture
experimental/webgl/package[SO] @deprecated("use dom.webgl.WEBGL_draw_buffers instead", "2.0.0") val WEBGL_draw_buffers = dom.webgl.WEBGL_draw_buffers
experimental/webgl/package[SO] @deprecated("use dom.webgl.WEBGL_lose_context instead", "2.0.0") val WEBGL_lose_context = dom.webgl.WEBGL_lose_context
experimental/webrtc/package[SO] type MediaStreamEventInit = dom.MediaStreamEventInit  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type NavigatorMediaStream = dom.Navigator  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCBundlePolicy = dom.RTCBundlePolicy  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCConfiguration = dom.RTCConfiguration  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCDTMFSender = dom.RTCDTMFSender  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCDataChannel = dom.RTCDataChannel  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCDataChannelEvent = dom.RTCDataChannelEvent  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCDataChannelEventInit = dom.RTCDataChannelEventInit  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCDataChannelInit = dom.RTCDataChannelInit  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCDataChannelState = dom.RTCDataChannelState  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCIceCandidate = dom.RTCIceCandidate  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCIceCandidateInit = dom.RTCIceCandidateInit  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCIceConnectionState = dom.RTCIceConnectionState  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCIceGatheringState = dom.RTCIceGatheringState  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCIceServer = dom.RTCIceServer  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCIceTransportPolicy = dom.RTCIceTransportPolicy  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCIdentityAssertion = dom.RTCIdentityAssertion  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCOfferOptions = dom.RTCOfferOptions  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCPeerConnection = dom.RTCPeerConnection  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCPeerConnectionIceEvent = dom.RTCPeerConnectionIceEvent  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCPeerConnectionIceEventInit = dom.RTCPeerConnectionIceEventInit  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCSdpType = dom.RTCSdpType  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCSessionDescription = dom.RTCSessionDescription  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCSessionDescriptionInit = dom.RTCSessionDescriptionInit  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCSignalingState = dom.RTCSignalingState  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCStats = dom.RTCStats  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCStatsReport = dom.RTCStatsReport  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] type RTCStatsType = dom.RTCStatsType  (@deprecated in 2.0.0)
experimental/webrtc/package[SO] @deprecated("use dom.RTCBundlePolicy instead", "2.0.0") val RTCBundlePolicy = dom.RTCBundlePolicy
experimental/webrtc/package[SO] @deprecated("use dom.RTCConfiguration instead", "2.0.0") val RTCConfiguration = dom.RTCConfiguration
experimental/webrtc/package[SO] @deprecated("use dom.RTCDataChannelInit instead", "2.0.0") val RTCDataChannelInit = dom.RTCDataChannelInit
experimental/webrtc/package[SO] @deprecated("use dom.RTCDataChannelState instead", "2.0.0") val RTCDataChannelState = dom.RTCDataChannelState
experimental/webrtc/package[SO] @deprecated("use dom.RTCIceCandidateInit instead", "2.0.0") val RTCIceCandidateInit = dom.RTCIceCandidateInit
experimental/webrtc/package[SO] @deprecated("use dom.RTCIceConnectionState instead", "2.0.0") val RTCIceConnectionState = dom.RTCIceConnectionState
experimental/webrtc/package[SO] @deprecated("use dom.RTCIceGatheringState instead", "2.0.0") val RTCIceGatheringState = dom.RTCIceGatheringState
experimental/webrtc/package[SO] @deprecated("use dom.RTCIceServer instead", "2.0.0") val RTCIceServer = dom.RTCIceServer
experimental/webrtc/package[SO] @deprecated("use dom.RTCIceTransportPolicy instead", "2.0.0") val RTCIceTransportPolicy = dom.RTCIceTransportPolicy
experimental/webrtc/package[SO] @deprecated("use dom.RTCIdentityAssertion instead", "2.0.0") val RTCIdentityAssertion = dom.RTCIdentityAssertion
experimental/webrtc/package[SO] @deprecated("use dom.RTCOfferOptions instead", "2.0.0") val RTCOfferOptions = dom.RTCOfferOptions
experimental/webrtc/package[SO] @deprecated("use dom.RTCPeerConnection instead", "2.0.0") val RTCPeerConnection = dom.RTCPeerConnection
experimental/webrtc/package[SO] @deprecated("use dom.RTCSdpType instead", "2.0.0") val RTCSdpType = dom.RTCSdpType
experimental/webrtc/package[SO] @deprecated("use dom.RTCSessionDescription instead", "2.0.0") val RTCSessionDescription = dom.RTCSessionDescription
experimental/webrtc/package[SO] @deprecated("use dom.RTCSessionDescriptionInit instead", "2.0.0") val RTCSessionDescriptionInit = dom.RTCSessionDescriptionInit
experimental/webrtc/package[SO] @deprecated("use dom.RTCSignalingState instead", "2.0.0") val RTCSignalingState = dom.RTCSignalingState
experimental/webrtc/package[SO] @deprecated("use dom.RTCStatsType instead", "2.0.0") val RTCStatsType = dom.RTCStatsType
experimental/webrtc/package[SO] def toWebRTC(n: dom.Navigator): NavigatorMediaStream  (@deprecated in 2.0.0)
ext/Ajax[SO] def apply(method: String, url: String, data: InputData, timeout: Int, headers: Map[String, String], withCredentials: Boolean, responseType: String): Future[dom.XMLHttpRequest]  (@deprecated in 2.0.0)
ext/Ajax[SO] implicit def arrayBufferView2ajax(b: ArrayBufferView): InputData  (@deprecated in 2.0.0)
ext/Ajax[SO] implicit def blob2ajax(b: Blob): InputData  (@deprecated in 2.0.0)
ext/Ajax[SO] implicit def byteBuffer2ajax(data: ByteBuffer): InputData  (@deprecated in 2.0.0)
ext/Ajax[SO] def delete(url: String, data: InputData = null, timeout: Int = 0, headers: Map[String, String] = Map.empty, withCredentials: Boolean = false, responseType: String = ""): Future[dom.XMLHttpRequest]  (@deprecated in 2.0.0)
ext/Ajax[SO] implicit def formdata2ajax(b: FormData): InputData  (@deprecated in 2.0.0)
ext/Ajax[SO] def get(url: String, data: InputData = null, timeout: Int = 0, headers: Map[String, String] = Map.empty, withCredentials: Boolean = false, responseType: String = ""): Future[dom.XMLHttpRequest]  (@deprecated in 2.0.0)
ext/Ajax[SO] def patch(url: String, data: InputData = null, timeout: Int = 0, headers: Map[String, String] = Map.empty, withCredentials: Boolean = false, responseType: String = ""): Future[dom.XMLHttpRequest]  (@deprecated in 2.0.0)
ext/Ajax[SO] def post(url: String, data: InputData = null, timeout: Int = 0, headers: Map[String, String] = Map.empty, withCredentials: Boolean = false, responseType: String = ""): Future[dom.XMLHttpRequest]  (@deprecated in 2.0.0)
ext/Ajax[SO] def put(url: String, data: InputData = null, timeout: Int = 0, headers: Map[String, String] = Map.empty, withCredentials: Boolean = false, responseType: String = ""): Future[dom.XMLHttpRequest]  (@deprecated in 2.0.0)
ext/Ajax[SO] implicit def str2ajax(s: String): InputData  (@deprecated in 2.0.0)
ext/Ajax.InputData[JT]
ext/Ajax.InputData[SO] implicit def arrayBufferView2ajax(b: ArrayBufferView): InputData
ext/Ajax.InputData[SO] implicit def blob2ajax(b: Blob): InputData
ext/Ajax.InputData[SO] implicit def byteBuffer2ajax(data: ByteBuffer): InputData
ext/Ajax.InputData[SO] implicit def formdata2ajax(b: FormData): InputData
ext/Ajax.InputData[SO] implicit def str2ajax(s: String): InputData
ext/AjaxException[SC] def isTimeout: Boolean  (@deprecated in 2.0.0)
ext/AjaxException[SO]  (@deprecated in 2.0.0)
ext/package[SO] val KeyCode: dom.KeyCode.type  (@deprecated in 2.0.0)
ext/package[SO] val KeyLocation: dom.KeyLocation.type  (@deprecated in 2.0.0)
ext/package[SO] val KeyValue: dom.KeyValue.type  (@deprecated in 2.0.0)
html[SO] type Anchor = HTMLAnchorElement
html[SO] type Area = HTMLAreaElement
html[SO] type Audio = HTMLAudioElement
html[SO] type BR = HTMLBRElement
html[SO] type Base = HTMLBaseElement
html[SO] type Body = HTMLBodyElement
html[SO] type Button = HTMLButtonElement
html[SO] type Canvas = HTMLCanvasElement
html[SO] type Collection[+E] = HTMLCollection[E]
html[SO] type DList = HTMLDListElement
html[SO] type DataList = HTMLDataListElement
html[SO] type Dialog = HTMLDialogElement
html[SO] type Div = HTMLDivElement
html[SO] type Document = HTMLDocument
html[SO] type Element = HTMLElement
html[SO] type Embed = HTMLEmbedElement
html[SO] type FieldSet = HTMLFieldSetElement
html[SO] type Form = HTMLFormElement
html[SO] type HR = HTMLHRElement
html[SO] type Head = HTMLHeadElement
html[SO] type Heading = HTMLHeadingElement
html[SO] type Html = HTMLHtmlElement
html[SO] type IFrame = HTMLIFrameElement
html[SO] type Image = HTMLImageElement
html[SO] type Input = HTMLInputElement
html[SO] type LI = HTMLLIElement
html[SO] type Label = HTMLLabelElement
html[SO] type Legend = HTMLLegendElement
html[SO] type Link = HTMLLinkElement
html[SO] type Map = HTMLMapElement
html[SO] type Media = HTMLMediaElement
html[SO] type Menu = HTMLMenuElement
html[SO] type Meta = HTMLMetaElement
html[SO] type Mod = HTMLModElement
html[SO] type OList = HTMLOListElement
html[SO] type Object = HTMLObjectElement
html[SO] type OptGroup = HTMLOptGroupElement
html[SO] type Option = HTMLOptionElement
html[SO] type Paragraph = HTMLParagraphElement
html[SO] type Param = HTMLParamElement
html[SO] type Pre = HTMLPreElement
html[SO] type Progress = HTMLProgressElement
html[SO] type Quote = HTMLQuoteElement
html[SO] type Script = HTMLScriptElement
html[SO] type Select = HTMLSelectElement
html[SO] type Source = HTMLSourceElement
html[SO] type Span = HTMLSpanElement
html[SO] type Style = HTMLStyleElement
html[SO] type Table = HTMLTableElement
html[SO] type TableAlignment = HTMLTableAlignment
html[SO] type TableCaption = HTMLTableCaptionElement
html[SO] type TableCell = HTMLTableCellElement
html[SO] type TableCol = HTMLTableColElement
html[SO] type TableRow = HTMLTableRowElement
html[SO] type TableSection = HTMLTableSectionElement
html[SO] type TextArea = HTMLTextAreaElement
html[SO] type Title = HTMLTitleElement
html[SO] type Track = HTMLTrackElement
html[SO] type UList = HTMLUListElement
html[SO] type Unknown = HTMLUnknownElement
html[SO] type Video = HTMLVideoElement
html[SO] def Media = HTMLMediaElement
idb[SO] type CreateIndexOptions = IDBCreateIndexOptions
idb[SO] type CreateObjectStoreOptions = IDBCreateObjectStoreOptions
idb[SO] type CursorReadOnly[+Source] = IDBCursorReadOnly[Source]
idb[SO] type CursorWithValue[+Source] = IDBCursorWithValue[Source]
idb[SO] type Cursor[+Source] = IDBCursor[Source]
idb[SO] type Database = IDBDatabase
idb[SO] type DatabaseInfo = IDBDatabaseInfo
idb[SO] type Environment = IDBEnvironment  (@deprecated in 1.2.0)
idb[SO] type EventTarget[+Result] = IDBEventTarget[Result]
idb[SO] type Event[+TargetResult] = IDBEvent[TargetResult]
idb[SO] type Factory = IDBFactory
idb[SO] type Index = IDBIndex
idb[SO] type Key = IDBKey
idb[SO] type KeyPath = IDBKeyPath
idb[SO] type KeyRange = IDBKeyRange
idb[SO] type ObjectStore = IDBObjectStore
idb[SO] type OpenDBRequest[TargetResult] = IDBOpenDBRequest[TargetResult]
idb[SO] type Request[+Source, TargetResult] = IDBRequest[Source, TargetResult]
idb[SO] type Transaction = IDBTransaction
idb[SO] type Value = IDBValue
idb[SO] type VersionChangeEvent = IDBVersionChangeEvent
idb[SO] def CursorDirection = IDBCursorDirection
idb[SO] def KeyRange = IDBKeyRange
idb[SO] def TransactionMode = IDBTransactionMode
intl/Collator[JC] def compare(string1: String, string2: String): Double
intl/Collator[JC] def resolvedOptions(): CollatorOptions
intl/Collator[JC] def supportedLocalesOf(locales: String | js.Array[String], options: js.Any): js.Array[String]
intl/CollatorOptions[JT] var caseFirst: js.UndefOr[String]
intl/CollatorOptions[JT] var ignorePunctuation: js.UndefOr[Boolean]
intl/CollatorOptions[JT] var localeMatcher: js.UndefOr[String]
intl/CollatorOptions[JT] var numeric: js.UndefOr[Boolean]
intl/CollatorOptions[JT] var sensitivity: js.UndefOr[String]
intl/CollatorOptions[JT] var usage: js.UndefOr[String]
intl/CollatorOptions[SO] def apply(localeMatcher: js.UndefOr[String]?, usage: js.UndefOr[String]?, sensitivity: js.UndefOr[String]?, ignorePunctuation: js.UndefOr[Boolean]?, numeric: js.UndefOr[Boolean]?, caseFirst: js.UndefOr[String]?): CollatorOptions  (@deprecated in 2.0.0)
intl/DateTimeFormat[JC] def format(date: js.Date): String
intl/DateTimeFormat[JC] def resolvedOptions(): DateTimeFormatOptions
intl/DateTimeFormat[JC] def supportedLocalesOf(locales: String | js.Array[String], options: js.Any): js.Array[String]
intl/DateTimeFormatOptions[JT] var day: js.UndefOr[String]
intl/DateTimeFormatOptions[JT] var era: js.UndefOr[String]
intl/DateTimeFormatOptions[JT] var formatMatcher: js.UndefOr[String]
intl/DateTimeFormatOptions[JT] var fractionalSecondDigits: js.UndefOr[Int]
intl/DateTimeFormatOptions[JT] var hour: js.UndefOr[String]
intl/DateTimeFormatOptions[JT] var hour12: js.UndefOr[Boolean]
intl/DateTimeFormatOptions[JT] var localeMatcher: js.UndefOr[String]
intl/DateTimeFormatOptions[JT] var minute: js.UndefOr[String]
intl/DateTimeFormatOptions[JT] var month: js.UndefOr[String]
intl/DateTimeFormatOptions[JT] var second: js.UndefOr[String]
intl/DateTimeFormatOptions[JT] var timeZone: js.UndefOr[String]
intl/DateTimeFormatOptions[JT] var timeZoneName: js.UndefOr[String]
intl/DateTimeFormatOptions[JT] var weekday: js.UndefOr[String]
intl/DateTimeFormatOptions[JT] var year: js.UndefOr[String]
intl/DateTimeFormatOptions[SO] def apply(localeMatcher: js.UndefOr[String]?, timeZone: js.UndefOr[String]?, hour12: js.UndefOr[Boolean]?, formatMatcher: js.UndefOr[String]?, weekday: js.UndefOr[String]?, era: js.UndefOr[String]?, year: js.UndefOr[String]?, month: js.UndefOr[String]?, day: js.UndefOr[String]?, hour: js.UndefOr[String]?, minute: js.UndefOr[String]?, second: js.UndefOr[String]?, timeZoneName: js.UndefOr[String]?): DateTimeFormatOptions  (@deprecated in 2.0.0)
intl/NumberFormat[JC] def format(number: Double): String
intl/NumberFormat[JC] def resolvedOptions(): NumberFormatOptions
intl/NumberFormat[JC] def supportedLocalesOf(locales: String | js.Array[String], options: js.Any): js.Array[String]
intl/NumberFormatOptions[JT] var currency: js.UndefOr[String]
intl/NumberFormatOptions[JT] var currencyDisplay: js.UndefOr[String]
intl/NumberFormatOptions[JT] var localeMatcher: js.UndefOr[String]
intl/NumberFormatOptions[JT] var maximumFractionDigits: js.UndefOr[Double]
intl/NumberFormatOptions[JT] var maximumSignificantDigits: js.UndefOr[Double]
intl/NumberFormatOptions[JT] var minimumFractionDigits: js.UndefOr[Double]
intl/NumberFormatOptions[JT] var minimumIntegerDigits: js.UndefOr[Double]
intl/NumberFormatOptions[JT] var minimumSignificantDigits: js.UndefOr[Double]
intl/NumberFormatOptions[JT] var style: js.UndefOr[String]
intl/NumberFormatOptions[JT] var useGrouping: js.UndefOr[Boolean]
intl/NumberFormatOptions[SO] def apply(localeMatcher: js.UndefOr[String]?, style: js.UndefOr[String]?, currency: js.UndefOr[String]?, currencyDisplay: js.UndefOr[String]?, useGrouping: js.UndefOr[Boolean]?, minimumIntegerDigits: js.UndefOr[Double]?, minimumFractionDigits: js.UndefOr[Double]?, maximumFractionDigits: js.UndefOr[Double]?, minimumSignificantDigits: js.UndefOr[Double]?, maximumSignificantDigits: js.UndefOr[Double]?): NumberFormatOptions  (@deprecated in 2.0.0)
package[SO] type AlgorithmIdentifier = Algorithm | String
package[SO] type BigInteger = js.typedarray.Uint8Array
package[SO] type BlobPart = BufferSource | Blob | String
package[SO] type BodyInit = Blob | BufferSource | FormData | String | ReadableStream[Uint8Array] | URLSearchParams
package[SO] type BufferSource = ArrayBufferView | ArrayBuffer
package[SO] type ByteString = String
package[SO] type ClientRect = DOMRect  (@deprecated in 2.0.0)
package[SO] type ClientRectList = DOMRectList  (@deprecated in 2.0.0)
package[SO] type ClipboardItemData = js.Promise[String | Blob]
package[SO] type HashAlgorithmIdentifier = HashAlgorithm | String
package[SO] type HeadersInit = Headers | Sequence[Sequence[ByteString]] | OpenEndedDictionary[ByteString]
package[SO] type IDBKey = Any
package[SO] type IDBKeyPath = Any
package[SO] type IDBValue = Any
package[SO] type KeyAlgorithmIdentifier = KeyAlgorithm | String
package[SO] type NodeListOf[+T <: Node] = NodeList[T]  (@deprecated in 2.0.0)
package[SO] type OpenEndedDictionary[T] = js.Dictionary[T]
package[SO] type RequestInfo = String | Request
package[SO] type Sequence[T] = js.Array[T]
package[SO] type Transferable = ArrayBuffer | MessagePort | CanvasProxy
package[SO] @js.native @JSGlobal("console") val console: Console
package[SO] lazy val css: DeprecatedCSSAliases.type  (@deprecated in 2.0.0)
package[SO] @js.native @JSGlobal("document") val document: html.Document
package[SO] @js.native @JSGlobal("fetch") def fetch(info: RequestInfo, init: RequestInit = null): js.Promise[Response]
package[SO] @js.native @JSGlobal("crypto") val webcrypto: Crypto
package[SO] @js.native @JSGlobal("window") val window: Window
raw[SO] type AbstractWorker = dom.AbstractWorker  (@deprecated in 2.0.0)
raw[SO] type AnalyserNode = dom.AnalyserNode  (@deprecated in 2.0.0)
raw[SO] type AnimationEvent = dom.AnimationEvent  (@deprecated in 2.0.0)
raw[SO] type ApplicationCache = dom.ApplicationCache  (@deprecated in 2.0.0)
raw[SO] type Attr = dom.Attr  (@deprecated in 2.0.0)
raw[SO] type AudioBuffer = dom.AudioBuffer  (@deprecated in 2.0.0)
raw[SO] type AudioBufferSourceNode = dom.AudioBufferSourceNode  (@deprecated in 2.0.0)
raw[SO] type AudioContext = dom.AudioContext  (@deprecated in 2.0.0)
raw[SO] type AudioDestinationNode = dom.AudioDestinationNode  (@deprecated in 2.0.0)
raw[SO] type AudioListener = dom.AudioListener  (@deprecated in 2.0.0)
raw[SO] type AudioNode = dom.AudioNode  (@deprecated in 2.0.0)
raw[SO] type AudioParam = dom.AudioParam  (@deprecated in 2.0.0)
raw[SO] type AudioTrack = dom.AudioTrack  (@deprecated in 2.0.0)
raw[SO] type AudioTrackList = dom.AudioTrackList  (@deprecated in 2.0.0)
raw[SO] type BeforeUnloadEvent = dom.BeforeUnloadEvent  (@deprecated in 2.0.0)
raw[SO] type BiquadFilterNode = dom.BiquadFilterNode  (@deprecated in 2.0.0)
raw[SO] type Blob = dom.Blob  (@deprecated in 2.0.0)
raw[SO] type BlobPropertyBag = dom.BlobPropertyBag  (@deprecated in 2.0.0)
raw[SO] type CDATASection = dom.CDATASection  (@deprecated in 2.0.0)
raw[SO] type CSSFontFaceRule = dom.CSSFontFaceRule  (@deprecated in 2.0.0)
raw[SO] type CSSImportRule = dom.CSSImportRule  (@deprecated in 2.0.0)
raw[SO] type CSSKeyframeRule = dom.CSSKeyframeRule  (@deprecated in 2.0.0)
raw[SO] type CSSMediaRule = dom.CSSMediaRule  (@deprecated in 2.0.0)
raw[SO] type CSSNamespaceRule = dom.CSSNamespaceRule  (@deprecated in 2.0.0)
raw[SO] type CSSPageRule = dom.CSSPageRule  (@deprecated in 2.0.0)
raw[SO] type CSSRule = dom.CSSRule  (@deprecated in 2.0.0)
raw[SO] type CSSRuleList = dom.CSSRuleList  (@deprecated in 2.0.0)
raw[SO] type CSSStyleDeclaration = dom.CSSStyleDeclaration  (@deprecated in 2.0.0)
raw[SO] type CSSStyleRule = dom.CSSStyleRule  (@deprecated in 2.0.0)
raw[SO] type CSSStyleSheet = dom.CSSStyleSheet  (@deprecated in 2.0.0)
raw[SO] type CanvasGradient = dom.CanvasGradient  (@deprecated in 2.0.0)
raw[SO] type CanvasPattern = dom.CanvasPattern  (@deprecated in 2.0.0)
raw[SO] type CanvasRenderingContext2D = dom.CanvasRenderingContext2D  (@deprecated in 2.0.0)
raw[SO] type ChannelMergerNode = dom.ChannelMergerNode  (@deprecated in 2.0.0)
raw[SO] type ChannelSplitterNode = dom.ChannelSplitterNode  (@deprecated in 2.0.0)
raw[SO] type CharacterData = dom.CharacterData  (@deprecated in 2.0.0)
raw[SO] type ClientRect = dom.DOMRect  (@deprecated in 2.0.0)
raw[SO] type ClientRectList = dom.DOMRectList  (@deprecated in 2.0.0)
raw[SO] type ClipboardEvent = dom.ClipboardEvent  (@deprecated in 2.0.0)
raw[SO] type ClipboardEventInit = dom.ClipboardEventInit  (@deprecated in 2.0.0)
raw[SO] type CloseEvent = dom.CloseEvent  (@deprecated in 2.0.0)
raw[SO] type Comment = dom.Comment  (@deprecated in 2.0.0)
raw[SO] type CompositionEvent = dom.CompositionEvent  (@deprecated in 2.0.0)
raw[SO] type Console = dom.Console  (@deprecated in 2.0.0)
raw[SO] type ConvertToBlobOptions = dom.ConvertToBlobOptions  (@deprecated in 2.0.0)
raw[SO] type ConvolverNode = dom.ConvolverNode  (@deprecated in 2.0.0)
raw[SO] type Coordinates = dom.Coordinates  (@deprecated in 2.0.0)
raw[SO] type CreateImageBitmapOptions = dom.CreateImageBitmapOptions  (@deprecated in 2.0.0)
raw[SO] type CustomEvent = dom.CustomEvent  (@deprecated in 2.0.0)
raw[SO] type DOMException = dom.DOMException  (@deprecated in 2.0.0)
raw[SO] type DOMImplementation = dom.DOMImplementation  (@deprecated in 2.0.0)
raw[SO] type DOMList[+T] = dom.DOMList[T]  (@deprecated in 2.0.0)
raw[SO] type DOMParser = dom.DOMParser  (@deprecated in 2.0.0)
raw[SO] type DOMRect = dom.DOMRect  (@deprecated in 2.0.0)
raw[SO] type DOMRectList = dom.DOMRectList  (@deprecated in 2.0.0)
raw[SO] type DOMSettableTokenList = dom.DOMSettableTokenList  (@deprecated in 2.0.0)
raw[SO] type DOMStringList = dom.DOMStringList  (@deprecated in 2.0.0)
raw[SO] type DOMTokenList = dom.DOMTokenList  (@deprecated in 2.0.0)
raw[SO] type DataTransfer = dom.DataTransfer  (@deprecated in 2.0.0)
raw[SO] type DedicatedWorkerGlobalScope = dom.DedicatedWorkerGlobalScope  (@deprecated in 2.0.0)
raw[SO] type DelayNode = dom.DelayNode  (@deprecated in 2.0.0)
raw[SO] type Document = dom.Document  (@deprecated in 2.0.0)
raw[SO] type DocumentEvent = dom.DocumentEvent  (@deprecated in 2.0.0)
raw[SO] type DocumentFragment = dom.DocumentFragment  (@deprecated in 2.0.0)
raw[SO] type DocumentType = dom.DocumentType  (@deprecated in 2.0.0)
raw[SO] type DragEvent = dom.DragEvent  (@deprecated in 2.0.0)
raw[SO] type DynamicsCompressorNode = dom.DynamicsCompressorNode  (@deprecated in 2.0.0)
raw[SO] type Element = dom.Element  (@deprecated in 2.0.0)
raw[SO] type ErrorEvent = dom.ErrorEvent  (@deprecated in 2.0.0)
raw[SO] type Event = dom.Event  (@deprecated in 2.0.0)
raw[SO] type EventException = dom.EventException  (@deprecated in 2.0.0)
raw[SO] type EventInit = dom.EventInit  (@deprecated in 2.0.0)
raw[SO] type EventSource = dom.EventSource  (@deprecated in 2.0.0)
raw[SO] type EventTarget = dom.EventTarget  (@deprecated in 2.0.0)
raw[SO] type External = dom.External  (@deprecated in 2.0.0)
raw[SO] type File = dom.File  (@deprecated in 2.0.0)
raw[SO] type FileList = dom.FileList  (@deprecated in 2.0.0)
raw[SO] type FileReader = dom.FileReader  (@deprecated in 2.0.0)
raw[SO] type FocusEvent = dom.FocusEvent  (@deprecated in 2.0.0)
raw[SO] type FormData = dom.FormData  (@deprecated in 2.0.0)
raw[SO] type GainNode = dom.GainNode  (@deprecated in 2.0.0)
raw[SO] type Geolocation = dom.Geolocation  (@deprecated in 2.0.0)
raw[SO] type HTMLAnchorElement = dom.HTMLAnchorElement  (@deprecated in 2.0.0)
raw[SO] type HTMLAreaElement = dom.HTMLAreaElement  (@deprecated in 2.0.0)
raw[SO] type HTMLAudioElement = dom.HTMLAudioElement  (@deprecated in 2.0.0)
raw[SO] type HTMLBRElement = dom.HTMLBRElement  (@deprecated in 2.0.0)
raw[SO] type HTMLBaseElement = dom.HTMLBaseElement  (@deprecated in 2.0.0)
raw[SO] type HTMLBodyElement = dom.HTMLBodyElement  (@deprecated in 2.0.0)
raw[SO] type HTMLButtonElement = dom.HTMLButtonElement  (@deprecated in 2.0.0)
raw[SO] type HTMLCanvasElement = dom.HTMLCanvasElement  (@deprecated in 2.0.0)
raw[SO] type HTMLCollectionElement = dom.HTMLCollection[dom.Element]  (@deprecated in 2.0.0)
raw[SO] type HTMLDListElement = dom.HTMLDListElement  (@deprecated in 2.0.0)
raw[SO] type HTMLDataListElement = dom.HTMLDataListElement  (@deprecated in 2.0.0)
raw[SO] type HTMLDivElement = dom.HTMLDivElement  (@deprecated in 2.0.0)
raw[SO] type HTMLDocument = dom.HTMLDocument  (@deprecated in 2.0.0)
raw[SO] type HTMLElement = dom.HTMLElement  (@deprecated in 2.0.0)
raw[SO] type HTMLEmbedElement = dom.HTMLEmbedElement  (@deprecated in 2.0.0)
raw[SO] type HTMLFieldSetElement = dom.HTMLFieldSetElement  (@deprecated in 2.0.0)
raw[SO] type HTMLFormElement = dom.HTMLFormElement  (@deprecated in 2.0.0)
raw[SO] type HTMLHRElement = dom.HTMLHRElement  (@deprecated in 2.0.0)
raw[SO] type HTMLHeadElement = dom.HTMLHeadElement  (@deprecated in 2.0.0)
raw[SO] type HTMLHeadingElement = dom.HTMLHeadingElement  (@deprecated in 2.0.0)
raw[SO] type HTMLHtmlElement = dom.HTMLHtmlElement  (@deprecated in 2.0.0)
raw[SO] type HTMLIFrameElement = dom.HTMLIFrameElement  (@deprecated in 2.0.0)
raw[SO] type HTMLImageElement = dom.HTMLImageElement  (@deprecated in 2.0.0)
raw[SO] type HTMLInputElement = dom.HTMLInputElement  (@deprecated in 2.0.0)
raw[SO] type HTMLLIElement = dom.HTMLLIElement  (@deprecated in 2.0.0)
raw[SO] type HTMLLabelElement = dom.HTMLLabelElement  (@deprecated in 2.0.0)
raw[SO] type HTMLLegendElement = dom.HTMLLegendElement  (@deprecated in 2.0.0)
raw[SO] type HTMLLinkElement = dom.HTMLLinkElement  (@deprecated in 2.0.0)
raw[SO] type HTMLMapElement = dom.HTMLMapElement  (@deprecated in 2.0.0)
raw[SO] type HTMLMediaElement = dom.HTMLMediaElement  (@deprecated in 2.0.0)
raw[SO] type HTMLMenuElement = dom.HTMLMenuElement  (@deprecated in 2.0.0)
raw[SO] type HTMLMetaElement = dom.HTMLMetaElement  (@deprecated in 2.0.0)
raw[SO] type HTMLModElement = dom.HTMLModElement  (@deprecated in 2.0.0)
raw[SO] type HTMLOListElement = dom.HTMLOListElement  (@deprecated in 2.0.0)
raw[SO] type HTMLObjectElement = dom.HTMLObjectElement  (@deprecated in 2.0.0)
raw[SO] type HTMLOptGroupElement = dom.HTMLOptGroupElement  (@deprecated in 2.0.0)
raw[SO] type HTMLOptionElement = dom.HTMLOptionElement  (@deprecated in 2.0.0)
raw[SO] type HTMLParagraphElement = dom.HTMLParagraphElement  (@deprecated in 2.0.0)
raw[SO] type HTMLParamElement = dom.HTMLParamElement  (@deprecated in 2.0.0)
raw[SO] type HTMLPreElement = dom.HTMLPreElement  (@deprecated in 2.0.0)
raw[SO] type HTMLProgressElement = dom.HTMLProgressElement  (@deprecated in 2.0.0)
raw[SO] type HTMLQuoteElement = dom.HTMLQuoteElement  (@deprecated in 2.0.0)
raw[SO] type HTMLScriptElement = dom.HTMLScriptElement  (@deprecated in 2.0.0)
raw[SO] type HTMLSelectElement = dom.HTMLSelectElement  (@deprecated in 2.0.0)
raw[SO] type HTMLSourceElement = dom.HTMLSourceElement  (@deprecated in 2.0.0)
raw[SO] type HTMLSpanElement = dom.HTMLSpanElement  (@deprecated in 2.0.0)
raw[SO] type HTMLStyleElement = dom.HTMLStyleElement  (@deprecated in 2.0.0)
raw[SO] type HTMLTableAlignment = dom.HTMLTableAlignment  (@deprecated in 2.0.0)
raw[SO] type HTMLTableCaptionElement = dom.HTMLTableCaptionElement  (@deprecated in 2.0.0)
raw[SO] type HTMLTableCellElement = dom.HTMLTableCellElement  (@deprecated in 2.0.0)
raw[SO] type HTMLTableColElement = dom.HTMLTableColElement  (@deprecated in 2.0.0)
raw[SO] type HTMLTableElement = dom.HTMLTableElement  (@deprecated in 2.0.0)
raw[SO] type HTMLTableRowElement = dom.HTMLTableRowElement  (@deprecated in 2.0.0)
raw[SO] type HTMLTableSectionElement = dom.HTMLTableSectionElement  (@deprecated in 2.0.0)
raw[SO] type HTMLTextAreaElement = dom.HTMLTextAreaElement  (@deprecated in 2.0.0)
raw[SO] type HTMLTitleElement = dom.HTMLTitleElement  (@deprecated in 2.0.0)
raw[SO] type HTMLTrackElement = dom.HTMLTrackElement  (@deprecated in 2.0.0)
raw[SO] type HTMLUListElement = dom.HTMLUListElement  (@deprecated in 2.0.0)
raw[SO] type HTMLUnknownElement = dom.HTMLUnknownElement  (@deprecated in 2.0.0)
raw[SO] type HTMLVideoElement = dom.HTMLVideoElement  (@deprecated in 2.0.0)
raw[SO] type HashChangeEvent = dom.HashChangeEvent  (@deprecated in 2.0.0)
raw[SO] type History = dom.History  (@deprecated in 2.0.0)
raw[SO] type IDBCursor = dom.IDBCursor[IDBObjectStore | IDBIndex]  (@deprecated in 2.0.0)
raw[SO] type IDBCursorWithValue = dom.IDBCursorWithValue[Any]  (@deprecated in 2.0.0)
raw[SO] type IDBDatabase = dom.IDBDatabase  (@deprecated in 2.0.0)
raw[SO] type IDBEnvironment = dom.IDBEnvironment  (@deprecated in 2.0.0)
raw[SO] type IDBFactory = dom.IDBFactory  (@deprecated in 2.0.0)
raw[SO] type IDBIndex = dom.IDBIndex  (@deprecated in 2.0.0)
raw[SO] type IDBKeyRange = dom.IDBKeyRange  (@deprecated in 2.0.0)
raw[SO] type IDBObjectStore = dom.IDBObjectStore  (@deprecated in 2.0.0)
raw[SO] type IDBOpenDBRequest = dom.IDBOpenDBRequest[Any]  (@deprecated in 2.0.0)
raw[SO] type IDBRequest = dom.IDBRequest[Any, Any]  (@deprecated in 2.0.0)
raw[SO] type IDBTransaction = dom.IDBTransaction  (@deprecated in 2.0.0)
raw[SO] type IDBVersionChangeEvent = dom.IDBVersionChangeEvent  (@deprecated in 2.0.0)
raw[SO] type ImageBitmap = dom.ImageBitmap  (@deprecated in 2.0.0)
raw[SO] type ImageData = dom.ImageData  (@deprecated in 2.0.0)
raw[SO] type KeyboardEvent = dom.KeyboardEvent  (@deprecated in 2.0.0)
raw[SO] type KeyboardEventInit = dom.KeyboardEventInit  (@deprecated in 2.0.0)
raw[SO] type LinkStyle = dom.LinkStyle  (@deprecated in 2.0.0)
raw[SO] type Location = dom.Location  (@deprecated in 2.0.0)
raw[SO] type MediaElementAudioSourceNode = dom.MediaElementAudioSourceNode  (@deprecated in 2.0.0)
raw[SO] type MediaError = dom.MediaError  (@deprecated in 2.0.0)
raw[SO] type MediaList = dom.MediaList  (@deprecated in 2.0.0)
raw[SO] type MediaQueryList = dom.MediaQueryList  (@deprecated in 2.0.0)
raw[SO] type MediaQueryListListener = dom.MediaQueryListListener  (@deprecated in 2.0.0)
raw[SO] type MediaStreamAudioDestinationNode = dom.MediaStreamAudioDestinationNode  (@deprecated in 2.0.0)
raw[SO] type MediaStreamAudioSourceNode = dom.MediaStreamAudioSourceNode  (@deprecated in 2.0.0)
raw[SO] type MessageChannel = dom.MessageChannel  (@deprecated in 2.0.0)
raw[SO] type MessageEvent = dom.MessageEvent  (@deprecated in 2.0.0)
raw[SO] type MessagePort = dom.MessagePort  (@deprecated in 2.0.0)
raw[SO] type ModifierKeyEvent = dom.ModifierKeyEvent  (@deprecated in 2.0.0)
raw[SO] type MouseEvent = dom.MouseEvent  (@deprecated in 2.0.0)
raw[SO] type MutationObserver = dom.MutationObserver  (@deprecated in 2.0.0)
raw[SO] type MutationObserverInit = dom.MutationObserverInit  (@deprecated in 2.0.0)
raw[SO] type MutationRecord = dom.MutationRecord  (@deprecated in 2.0.0)
raw[SO] type NamedNodeMap = dom.NamedNodeMap  (@deprecated in 2.0.0)
raw[SO] type Navigator = dom.Navigator  (@deprecated in 2.0.0)
raw[SO] type NavigatorContentUtils = dom.NavigatorContentUtils  (@deprecated in 2.0.0)
raw[SO] type NavigatorGeolocation = dom.NavigatorGeolocation  (@deprecated in 2.0.0)
raw[SO] type NavigatorID = dom.NavigatorID  (@deprecated in 2.0.0)
raw[SO] type NavigatorLanguage = dom.NavigatorLanguage  (@deprecated in 2.0.0)
raw[SO] type NavigatorOnLine = dom.NavigatorOnLine  (@deprecated in 2.0.0)
raw[SO] type NavigatorStorageUtils = dom.NavigatorStorageUtils  (@deprecated in 2.0.0)
raw[SO] type Node = dom.Node  (@deprecated in 2.0.0)
raw[SO] type NodeFilter = dom.NodeFilter  (@deprecated in 2.0.0)
raw[SO] type NodeIterator = dom.NodeIterator  (@deprecated in 2.0.0)
raw[SO] type NodeListOf[+T <: Node] = NodeList[T]  (@deprecated in 2.0.0)
raw[SO] type NodeList[+T <: Node] = dom.NodeList[T]  (@deprecated in 2.0.0)
raw[SO] type NodeSelector = dom.NodeSelector  (@deprecated in 2.0.0)
raw[SO] type OfflineAudioContext = dom.OfflineAudioContext  (@deprecated in 2.0.0)
raw[SO] type OffscreenCanvas = dom.OffscreenCanvas  (@deprecated in 2.0.0)
raw[SO] type OscillatorNode = dom.OscillatorNode  (@deprecated in 2.0.0)
raw[SO] type PannerNode = dom.PannerNode  (@deprecated in 2.0.0)
raw[SO] type ParentNode = dom.ParentNode  (@deprecated in 2.0.0)
raw[SO] type Performance = dom.Performance  (@deprecated in 2.0.0)
raw[SO] type PerformanceEntry = dom.PerformanceEntry  (@deprecated in 2.0.0)
raw[SO] type PerformanceMark = dom.PerformanceMark  (@deprecated in 2.0.0)
raw[SO] type PerformanceMeasure = dom.PerformanceMeasure  (@deprecated in 2.0.0)
raw[SO] type PerformanceNavigation = dom.PerformanceNavigation  (@deprecated in 2.0.0)
raw[SO] type PerformanceResourceTiming = dom.PerformanceResourceTiming  (@deprecated in 2.0.0)
raw[SO] type PerformanceTiming = dom.PerformanceTiming  (@deprecated in 2.0.0)
raw[SO] type PeriodicWave = dom.PeriodicWave  (@deprecated in 2.0.0)
raw[SO] type PointerEvent = dom.PointerEvent  (@deprecated in 2.0.0)
raw[SO] type PointerEventInit = dom.PointerEventInit  (@deprecated in 2.0.0)
raw[SO] type PopStateEvent = dom.PopStateEvent  (@deprecated in 2.0.0)
raw[SO] type Position = dom.Position  (@deprecated in 2.0.0)
raw[SO] type PositionError = dom.PositionError  (@deprecated in 2.0.0)
raw[SO] type PositionOptions = dom.PositionOptions  (@deprecated in 2.0.0)
raw[SO] type ProcessingInstruction = dom.ProcessingInstruction  (@deprecated in 2.0.0)
raw[SO] type ProgressEvent = dom.ProgressEvent  (@deprecated in 2.0.0)
raw[SO] type Range = dom.Range  (@deprecated in 2.0.0)
raw[SO] type Screen = dom.Screen  (@deprecated in 2.0.0)
raw[SO] type Selection = dom.Selection  (@deprecated in 2.0.0)
raw[SO] type StereoPannerNode = dom.StereoPannerNode  (@deprecated in 2.0.0)
raw[SO] type Storage = dom.Storage  (@deprecated in 2.0.0)
raw[SO] type StorageEvent = dom.StorageEvent  (@deprecated in 2.0.0)
raw[SO] type StyleMedia = dom.StyleMedia  (@deprecated in 2.0.0)
raw[SO] type StyleSheet = dom.StyleSheet  (@deprecated in 2.0.0)
raw[SO] type StyleSheetList = dom.StyleSheetList  (@deprecated in 2.0.0)
raw[SO] type Text = dom.Text  (@deprecated in 2.0.0)
raw[SO] type TextEvent = dom.TextEvent  (@deprecated in 2.0.0)
raw[SO] type TextMetrics = dom.TextMetrics  (@deprecated in 2.0.0)
raw[SO] type TextTrack = dom.TextTrack  (@deprecated in 2.0.0)
raw[SO] type TextTrackCue = dom.TextTrackCue  (@deprecated in 2.0.0)
raw[SO] type TextTrackCueList = dom.TextTrackCueList  (@deprecated in 2.0.0)
raw[SO] type TextTrackList = dom.TextTrackList  (@deprecated in 2.0.0)
raw[SO] type TimeRanges = dom.TimeRanges  (@deprecated in 2.0.0)
raw[SO] type Touch = dom.Touch  (@deprecated in 2.0.0)
raw[SO] type TouchEvent = dom.TouchEvent  (@deprecated in 2.0.0)
raw[SO] type TouchList = dom.TouchList  (@deprecated in 2.0.0)
raw[SO] type TrackEvent = dom.TrackEvent  (@deprecated in 2.0.0)
raw[SO] type Transferable = dom.Transferable  (@deprecated in 2.0.0)
raw[SO] type TransitionEvent = dom.TransitionEvent  (@deprecated in 2.0.0)
raw[SO] type TreeWalker = dom.TreeWalker  (@deprecated in 2.0.0)
raw[SO] type TwoDContextAttributes = dom.TwoDContextAttributes  (@deprecated in 2.0.0)
raw[SO] type UIEvent = dom.UIEvent  (@deprecated in 2.0.0)
raw[SO] type ValidityState = dom.ValidityState  (@deprecated in 2.0.0)
raw[SO] type VisibilityState = dom.VisibilityState  (@deprecated in 2.0.0)
raw[SO] type WaveShaperNode = dom.WaveShaperNode  (@deprecated in 2.0.0)
raw[SO] type WebGLActiveInfo = dom.WebGLActiveInfo  (@deprecated in 2.0.0)
raw[SO] type WebGLBuffer = dom.WebGLBuffer  (@deprecated in 2.0.0)
raw[SO] type WebGLContextAttributes = dom.WebGLContextAttributes  (@deprecated in 2.0.0)
raw[SO] type WebGLFramebuffer = dom.WebGLFramebuffer  (@deprecated in 2.0.0)
raw[SO] type WebGLProgram = dom.WebGLProgram  (@deprecated in 2.0.0)
raw[SO] type WebGLRenderbuffer = dom.WebGLRenderbuffer  (@deprecated in 2.0.0)
raw[SO] type WebGLRenderingContext = dom.WebGLRenderingContext  (@deprecated in 2.0.0)
raw[SO] type WebGLShader = dom.WebGLShader  (@deprecated in 2.0.0)
raw[SO] type WebGLShaderPrecisionFormat = dom.WebGLShaderPrecisionFormat  (@deprecated in 2.0.0)
raw[SO] type WebGLTexture = dom.WebGLTexture  (@deprecated in 2.0.0)
raw[SO] type WebGLUniformLocation = dom.WebGLUniformLocation  (@deprecated in 2.0.0)
raw[SO] type WebSocket = dom.WebSocket  (@deprecated in 2.0.0)
raw[SO] type WheelEvent = dom.WheelEvent  (@deprecated in 2.0.0)
raw[SO] type Window = dom.Window  (@deprecated in 2.0.0)
raw[SO] type WindowBase64 = dom.WindowBase64  (@deprecated in 2.0.0)
raw[SO] type WindowConsole = dom.WindowConsole  (@deprecated in 2.0.0)
raw[SO] type WindowLocalStorage = dom.WindowLocalStorage  (@deprecated in 2.0.0)
raw[SO] type WindowOrWorkerGlobalScope = dom.WindowOrWorkerGlobalScope  (@deprecated in 2.0.0)
raw[SO] type WindowSessionStorage = dom.WindowSessionStorage  (@deprecated in 2.0.0)
raw[SO] type WindowTimers = dom.WindowTimers  (@deprecated in 2.0.0)
raw[SO] type Worker = dom.Worker  (@deprecated in 2.0.0)
raw[SO] type WorkerGlobalScope = dom.WorkerGlobalScope  (@deprecated in 2.0.0)
raw[SO] type WorkerLocation = dom.WorkerLocation  (@deprecated in 2.0.0)
raw[SO] type WorkerNavigator = dom.WorkerNavigator  (@deprecated in 2.0.0)
raw[SO] type XMLHttpRequest = dom.XMLHttpRequest  (@deprecated in 2.0.0)
raw[SO] type XMLHttpRequestEventTarget = dom.XMLHttpRequestEventTarget  (@deprecated in 2.0.0)
raw[SO] type XMLSerializer = dom.XMLSerializer  (@deprecated in 2.0.0)
raw[SO] type XPathNSResolver = dom.XPathNSResolver  (@deprecated in 2.0.0)
raw[SO] type XPathResult = dom.XPathResult  (@deprecated in 2.0.0)
raw[SO] lazy val ApplicationCache: dom.ApplicationCache.type  (@deprecated in 2.0.0)
raw[SO] lazy val Blob: dom.Blob.type  (@deprecated in 2.0.0)
raw[SO] lazy val BlobPropertyBag: dom.BlobPropertyBag.type  (@deprecated in 2.0.0)
raw[SO] @deprecated("use dom.CSSRule instead", "2.0.0") def CSSRule = dom.CSSRule  (@deprecated in 2.0.0)
raw[SO] lazy val DOMException: dom.DOMException.type  (@deprecated in 2.0.0)
raw[SO] @deprecated("use dom.DragEffect instead", "2.0.0") lazy val DragEffect = dom.DragEffect  (@deprecated in 2.0.0)
raw[SO] lazy val Event: dom.Event.type  (@deprecated in 2.0.0)
raw[SO] lazy val EventException: dom.EventException.type  (@deprecated in 2.0.0)
raw[SO] lazy val EventSource: dom.EventSource.type  (@deprecated in 2.0.0)
raw[SO] lazy val FileReader: dom.FileReader.type  (@deprecated in 2.0.0)
raw[SO] lazy val FormData: dom.FormData.type  (@deprecated in 2.0.0)
raw[SO] @deprecated("use dom.HTMLMediaElement instead", "2.0.0") def HTMLMediaElement = dom.HTMLMediaElement  (@deprecated in 2.0.0)
raw[SO] @deprecated("use dom.IDBKeyRange instead", "2.0.0") def IDBKeyRange = dom.IDBKeyRange  (@deprecated in 2.0.0)
raw[SO] lazy val KeyboardEvent: dom.KeyboardEvent.type  (@deprecated in 2.0.0)
raw[SO] lazy val MediaError: dom.MediaError.type  (@deprecated in 2.0.0)
raw[SO] lazy val MutationObserverInit: dom.MutationObserverInit.type  (@deprecated in 2.0.0)
raw[SO] lazy val Node: dom.Node.type  (@deprecated in 2.0.0)
raw[SO] lazy val NodeFilter: dom.NodeFilter.type  (@deprecated in 2.0.0)
raw[SO] lazy val PerformanceNavigation: dom.PerformanceNavigation.type  (@deprecated in 2.0.0)
raw[SO] lazy val PositionError: dom.PositionError.type  (@deprecated in 2.0.0)
raw[SO] lazy val Range: dom.Range.type  (@deprecated in 2.0.0)
raw[SO] lazy val TextEvent: dom.TextEvent.type  (@deprecated in 2.0.0)
raw[SO] lazy val TextTrack: dom.TextTrack.type  (@deprecated in 2.0.0)
raw[SO] lazy val URL: dom.URL.type  (@deprecated in 2.0.0)
raw[SO] lazy val VisibilityState: dom.VisibilityState.type  (@deprecated in 2.0.0)
raw[SO] @deprecated("use dom.WebGLRenderingContext instead", "2.0.0") def WebGLRenderingContext = dom.WebGLRenderingContext  (@deprecated in 2.0.0)
raw[SO] lazy val WebSocket: dom.WebSocket.type  (@deprecated in 2.0.0)
raw[SO] lazy val WheelEvent: dom.WheelEvent.type  (@deprecated in 2.0.0)
raw[SO] @deprecated("use dom.WindowOrWorkerGlobalScope instead", "2.0.0") def WindowOrWorkerGlobalScope = dom.WindowOrWorkerGlobalScope  (@deprecated in 2.0.0)
raw[SO] lazy val XMLHttpRequest: dom.XMLHttpRequest.type  (@deprecated in 2.0.0)
raw[SO] lazy val XPathResult: dom.XPathResult.type  (@deprecated in 2.0.0)
raw[SO] def self: DedicatedWorkerGlobalScope  (@deprecated in 2.0.0)
raw.DedicatedWorkerGlobalScope[JO] def self: DedicatedWorkerGlobalScope  (@deprecated in 2.0.0)
svg[SO] type A = SVGAElement
svg[SO] type Angle = SVGAngle
svg[SO] type AnimatedAngle = SVGAnimatedAngle
svg[SO] type AnimatedBoolean = SVGAnimatedBoolean
svg[SO] type AnimatedEnumeration = SVGAnimatedEnumeration
svg[SO] type AnimatedInteger = SVGAnimatedInteger
svg[SO] type AnimatedLength = SVGAnimatedLength
svg[SO] type AnimatedLengthList = SVGAnimatedLengthList
svg[SO] type AnimatedNumber = SVGAnimatedNumber
svg[SO] type AnimatedNumberList = SVGAnimatedNumberList
svg[SO] type AnimatedPathData = SVGAnimatedPathData
svg[SO] type AnimatedPoints = SVGAnimatedPoints
svg[SO] type AnimatedPreserveAspectRatio = SVGAnimatedPreserveAspectRatio
svg[SO] type AnimatedRect = SVGAnimatedRect
svg[SO] type AnimatedString = SVGAnimatedString
svg[SO] type AnimatedTransformList = SVGAnimatedTransformList
svg[SO] type Circle = SVGCircleElement
svg[SO] type ClipPath = SVGClipPathElement
svg[SO] type ComponentTransferFunction = SVGComponentTransferFunctionElement
svg[SO] type Defs = SVGDefsElement
svg[SO] type Desc = SVGDescElement
svg[SO] type Element = SVGElement
svg[SO] type ElementInstance = SVGElementInstance
svg[SO] type ElementInstanceList = SVGElementInstanceList
svg[SO] type Ellipse = SVGEllipseElement
svg[SO] type Exception = SVGException
svg[SO] type ExternalResourcesRequired = SVGExternalResourcesRequired
svg[SO] type FEBlend = SVGFEBlendElement
svg[SO] type FEColorMatrix = SVGFEColorMatrixElement
svg[SO] type FEComponentTransfer = SVGFEComponentTransferElement
svg[SO] type FEComposite = SVGFECompositeElement
svg[SO] type FEConvolveMatrix = SVGFEConvolveMatrixElement
svg[SO] type FEDiffuseLighting = SVGFEDiffuseLightingElement
svg[SO] type FEDisplacementMap = SVGFEDisplacementMapElement
svg[SO] type FEDistantLight = SVGFEDistantLightElement
svg[SO] type FEFlood = SVGFEFloodElement
svg[SO] type FEFuncA = SVGFEFuncAElement
svg[SO] type FEFuncB = SVGFEFuncBElement
svg[SO] type FEFuncG = SVGFEFuncGElement
svg[SO] type FEFuncR = SVGFEFuncRElement
svg[SO] type FEGaussianBlur = SVGFEGaussianBlurElement
svg[SO] type FEImage = SVGFEImageElement
svg[SO] type FEMerge = SVGFEMergeElement
svg[SO] type FEMergeNode = SVGFEMergeNodeElement
svg[SO] type FEMorphology = SVGFEMorphologyElement
svg[SO] type FEOffset = SVGFEOffsetElement
svg[SO] type FEPointLight = SVGFEPointLightElement
svg[SO] type FESpecularLighting = SVGFESpecularLightingElement
svg[SO] type FESpotLight = SVGFESpotLightElement
svg[SO] type FETile = SVGFETileElement
svg[SO] type FETurbulence = SVGFETurbulenceElement
svg[SO] type Filter = SVGFilterElement
svg[SO] type FilterPrimitiveStandardAttributes = SVGFilterPrimitiveStandardAttributes
svg[SO] type FitToViewBox = SVGFitToViewBox
svg[SO] type G = SVGGElement
svg[SO] type GetSVGDocument = dom.GetSVGDocument
svg[SO] type Gradient = SVGGradientElement
svg[SO] type Image = SVGImageElement
svg[SO] type LangSpace = SVGLangSpace
svg[SO] type Length = SVGLength
svg[SO] type LengthList = SVGLengthList
svg[SO] type Line = SVGLineElement
svg[SO] type LinearGradient = SVGLinearGradientElement
svg[SO] type Locatable = SVGLocatable
svg[SO] type Marker = SVGMarkerElement
svg[SO] type Mask = SVGMaskElement
svg[SO] type Matrix = SVGMatrix
svg[SO] type Metadata = SVGMetadataElement
svg[SO] type Number = SVGNumber
svg[SO] type NumberList = SVGNumberList
svg[SO] type Path = SVGPathElement
svg[SO] type PathSeg = SVGPathSeg
svg[SO] type PathSegArcAbs = SVGPathSegArcAbs
svg[SO] type PathSegArcRel = SVGPathSegArcRel
svg[SO] type PathSegClosePath = SVGPathSegClosePath
svg[SO] type PathSegCurvetoCubicAbs = SVGPathSegCurvetoCubicAbs
svg[SO] type PathSegCurvetoCubicRel = SVGPathSegCurvetoCubicRel
svg[SO] type PathSegCurvetoCubicSmoothAbs = SVGPathSegCurvetoCubicSmoothAbs
svg[SO] type PathSegCurvetoCubicSmoothRel = SVGPathSegCurvetoCubicSmoothRel
svg[SO] type PathSegCurvetoQuadraticAbs = SVGPathSegCurvetoQuadraticAbs
svg[SO] type PathSegCurvetoQuadraticRel = SVGPathSegCurvetoQuadraticRel
svg[SO] type PathSegCurvetoQuadraticSmoothAbs = SVGPathSegCurvetoQuadraticSmoothAbs
svg[SO] type PathSegCurvetoQuadraticSmoothRel = SVGPathSegCurvetoQuadraticSmoothRel
svg[SO] type PathSegLinetoAbs = SVGPathSegLinetoAbs
svg[SO] type PathSegLinetoHorizontalAbs = SVGPathSegLinetoHorizontalAbs
svg[SO] type PathSegLinetoHorizontalRel = SVGPathSegLinetoHorizontalRel
svg[SO] type PathSegLinetoRel = SVGPathSegLinetoRel
svg[SO] type PathSegLinetoVerticalAbs = SVGPathSegLinetoVerticalAbs
svg[SO] type PathSegLinetoVerticalRel = SVGPathSegLinetoVerticalRel
svg[SO] type PathSegList = SVGPathSegList
svg[SO] type PathSegMovetoAbs = SVGPathSegMovetoAbs
svg[SO] type PathSegMovetoRel = SVGPathSegMovetoRel
svg[SO] type Pattern = SVGPatternElement
svg[SO] type Point = SVGPoint
svg[SO] type PointList = SVGPointList
svg[SO] type Polygon = SVGPolygonElement
svg[SO] type Polyline = SVGPolylineElement
svg[SO] type PreserveAspectRatio = SVGPreserveAspectRatio
svg[SO] type RadialGradient = SVGRadialGradientElement
svg[SO] type Rect = SVGRect
svg[SO] type RectElement = SVGRectElement
svg[SO] type SVG = SVGSVGElement
svg[SO] type Script = SVGScriptElement
svg[SO] type Stop = SVGStopElement
svg[SO] type StringList = SVGStringList
svg[SO] type Stylable = SVGStylable
svg[SO] type Style = SVGStyleElement
svg[SO] type Switch = SVGSwitchElement
svg[SO] type Symbol = SVGSymbolElement
svg[SO] type TSpan = SVGTSpanElement
svg[SO] type Tests = SVGTests
svg[SO] type Text = SVGTextElement
svg[SO] type TextContent = SVGTextContentElement
svg[SO] type TextPath = SVGTextPathElement
svg[SO] type TextPositioning = SVGTextPositioningElement
svg[SO] type Title = SVGTitleElement
svg[SO] type Transform = SVGTransform
svg[SO] type TransformList = SVGTransformList
svg[SO] type Transformable = SVGTransformable
svg[SO] type URIReference = SVGURIReference
svg[SO] type UnitTypes = SVGUnitTypes
svg[SO] type Use = SVGUseElement
svg[SO] type View = SVGViewElement
svg[SO] type ZoomAndPan = SVGZoomAndPan
svg[SO] def Angle = SVGAngle
svg[SO] def ComponentTransferFunction = SVGComponentTransferFunctionElement
svg[SO] def Exception = SVGException
svg[SO] def FEBlend = SVGFEBlendElement
svg[SO] def FEColorMatrix = SVGFEColorMatrixElement
svg[SO] def FEComposite = SVGFECompositeElement
svg[SO] def FEConvolveMatrix = SVGFEConvolveMatrixElement
svg[SO] def FEDisplacementMap = SVGFEDisplacementMapElement
svg[SO] def FEMorphology = SVGFEMorphologyElement
svg[SO] def FETurbulence = SVGFETurbulenceElement
svg[SO] def Gradient = SVGGradientElement
svg[SO] def Length = SVGLength
svg[SO] def Marker = SVGMarkerElement
svg[SO] def PathSeg = SVGPathSeg
svg[SO] def PreserveAspectRatio = SVGPreserveAspectRatio
svg[SO] def TextContent = SVGTextContentElement
svg[SO] def TextPath = SVGTextPathElement
svg[SO] def Transform = SVGTransform
svg[SO] def UnitTypes = SVGUnitTypes
svg[SO] def ZoomAndPan = SVGZoomAndPan
webgl/ANGLE_instanced_arrays[SO]
webgl/EXT_blend_minmax[SO]
webgl/EXT_color_buffer_half_float[SO]
webgl/EXT_disjoint_timer_query[SO]
webgl/EXT_frag_depth[SO]
webgl/EXT_sRGB[SO]
webgl/EXT_shader_texture_lod[SO]
webgl/EXT_texture_filter_anisotropic[SO]
webgl/OES_element_index_uint[SO]
webgl/OES_standard_derivatives[SO]
webgl/OES_texture_float[SO]
webgl/OES_texture_float_linear[SO]
webgl/OES_texture_half_float[SO]
webgl/OES_texture_half_float_linear[SO]
webgl/OES_vertex_array_object[SO]
webgl/WEBGL_color_buffer_float[SO]
webgl/WEBGL_compressed_texture_atc[SO]
webgl/WEBGL_compressed_texture_etc1[SO]
webgl/WEBGL_compressed_texture_pvrtc[SO]
webgl/WEBGL_compressed_texture_s3tc[SO]
webgl/WEBGL_debug_renderer_info[SO]
webgl/WEBGL_debug_shaders[SO]
webgl/WEBGL_depth_texture[SO]
webgl/WEBGL_draw_buffers[SO]
webgl/WEBGL_lose_context[SO]
webgl/WebGLExtensionIdentifier[SC]
webgl/extensions/ANGLEInstancedArrays[JT] val VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: Int
webgl/extensions/ANGLEInstancedArrays[JT] def drawArraysInstancedANGLE(mode: Int, first: Int, count: Int, primcount: Int): Unit
webgl/extensions/ANGLEInstancedArrays[JT] def drawElementsInstancedANGLE(mode: Int, count: Int, `type`: Int, offset: Int, primcount: Int): Unit
webgl/extensions/ANGLEInstancedArrays[JT] def vertexAttribDivisorANGLE(index: Int, divisor: Int): Unit
webgl/extensions/EXTBlendMinmax[JT] val MAX_EXT: Int
webgl/extensions/EXTBlendMinmax[JT] val MIN_EXT: Int
webgl/extensions/EXTColorBufferHalfFloat[JT] val FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: Int
webgl/extensions/EXTColorBufferHalfFloat[JT] val RGB16F_EXT: Int
webgl/extensions/EXTColorBufferHalfFloat[JT] val RGBA16F_EXT: Int
webgl/extensions/EXTColorBufferHalfFloat[JT] val UNSIGNED_NORMALIZED_EXT: Int
webgl/extensions/EXTDisjointTimerQuery[JT] val CURRENT_QUERY_EXT: Int
webgl/extensions/EXTDisjointTimerQuery[JT] val GPU_DISJOINT_EXT: Int
webgl/extensions/EXTDisjointTimerQuery[JT] val QUERY_COUNTER_BITS_EXT: Int
webgl/extensions/EXTDisjointTimerQuery[JT] val QUERY_RESULT_AVAILABLE_EXT: Int
webgl/extensions/EXTDisjointTimerQuery[JT] val QUERY_RESULT_EXT: Int
webgl/extensions/EXTDisjointTimerQuery[JT] val TIMESTAMP_EXT: Int
webgl/extensions/EXTDisjointTimerQuery[JT] val TIME_ELAPSED_EXT: Int
webgl/extensions/EXTDisjointTimerQuery[JT] def beginQueryEXT(target: Int, query: WebGLTimerQueryEXT): Unit
webgl/extensions/EXTDisjointTimerQuery[JT] def createQueryEXT(): WebGLTimerQueryEXT
webgl/extensions/EXTDisjointTimerQuery[JT] def deleteQueryEXT(query: WebGLTimerQueryEXT): Unit
webgl/extensions/EXTDisjointTimerQuery[JT] def endQueryEXT(target: Int): Unit
webgl/extensions/EXTDisjointTimerQuery[JT] def getQueryEXT(target: Int, pname: Int): js.Any
webgl/extensions/EXTDisjointTimerQuery[JT] def getQueryObjectEXT(target: Int, pname: Int): js.Any
webgl/extensions/EXTDisjointTimerQuery[JT] def isQueryEXT(query: WebGLTimerQueryEXT): Boolean
webgl/extensions/EXTDisjointTimerQuery[JT] def queryCounterEXT(query: WebGLTimerQueryEXT, target: Int): Unit
webgl/extensions/EXTFragDepth[JT]
webgl/extensions/EXTShaderTextureLOD[JT]
webgl/extensions/EXTTextureFilterAnisotropic[JT] val MAX_TEXTURE_MAX_ANISOTROPY_EXT: Int
webgl/extensions/EXTTextureFilterAnisotropic[JT] val TEXTURE_MAX_ANISOTROPY_EXT: Int
webgl/extensions/EXTsRGB[JT] val FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: Int
webgl/extensions/EXTsRGB[JT] val SRGB8_ALPHA8_EXT: Int
webgl/extensions/EXTsRGB[JT] val SRGB_ALPHA_EXT: Int
webgl/extensions/EXTsRGB[JT] val SRGB_EXT: Int
webgl/extensions/OESElementIndexUint[JT]
webgl/extensions/OESStandardDerivatives[JT] val FRAGMENT_SHADER_DERIVATIVE_HINT_OES: Int
webgl/extensions/OESTextureFloat[JT]
webgl/extensions/OESTextureFloatLinear[JT]
webgl/extensions/OESTextureHalfFloat[JT] val HALF_FLOAT_OES: Int
webgl/extensions/OESTextureHalfFloatLinear[JT]
webgl/extensions/OESVertexArrayObject[JT] val VERTEX_ARRAY_BINDING_OES: Int
webgl/extensions/OESVertexArrayObject[JT] def bindVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES): Unit
webgl/extensions/OESVertexArrayObject[JT] def createVertexArrayOES(): WebGLVertexArrayObjectOES
webgl/extensions/OESVertexArrayObject[JT] def deleteVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES): Unit
webgl/extensions/OESVertexArrayObject[JT] def isVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES): Boolean
webgl/extensions/WEBGLColorBufferFloat[JT] val FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: Int
webgl/extensions/WEBGLColorBufferFloat[JT] val RGBA32F_EXT: Int
webgl/extensions/WEBGLColorBufferFloat[JT] val UNSIGNED_NORMALIZED_EXT: Int
webgl/extensions/WEBGLCompressedTextureETC1[JT] val COMPRESSED_RGB_ETC1_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT0_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT10_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT11_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT12_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT13_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT14_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT15_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT1_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT2_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT3_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT4_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT5_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT6_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT7_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT8_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT9_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER0_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER10_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER11_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER12_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER13_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER14_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER15_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER1_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER2_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER3_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER4_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER5_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER6_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER7_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER8_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER9_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val MAX_COLOR_ATTACHMENTS_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] val MAX_DRAW_BUFFERS_WEBGL: Int
webgl/extensions/WEBGLDrawBuffers[JT] def drawBuffersWEBGL(buffers: js.Array[Int]): Unit
webgl/extensions/WebGLCompressedTextureATC[JT] val COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL: Int
webgl/extensions/WebGLCompressedTextureATC[JT] val COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL: Int
webgl/extensions/WebGLCompressedTextureATC[JT] val COMPRESSED_RGB_ATC_WEBGL: Int
webgl/extensions/WebGLCompressedTexturePVRTC[JT] val COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: Int
webgl/extensions/WebGLCompressedTexturePVRTC[JT] val COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: Int
webgl/extensions/WebGLCompressedTexturePVRTC[JT] val COMPRESSED_RGB_PVRTC_2BPPV1_IMG: Int
webgl/extensions/WebGLCompressedTexturePVRTC[JT] val COMPRESSED_RGB_PVRTC_4BPPV1_IMG: Int
webgl/extensions/WebGLCompressedTextureS3TC[JT] val COMPRESSED_RGBA_S3TC_DXT1_EXT: Int
webgl/extensions/WebGLCompressedTextureS3TC[JT] val COMPRESSED_RGBA_S3TC_DXT3_EXT: Int
webgl/extensions/WebGLCompressedTextureS3TC[JT] val COMPRESSED_RGBA_S3TC_DXT5_EXT: Int
webgl/extensions/WebGLCompressedTextureS3TC[JT] val COMPRESSED_RGB_S3TC_DXT1_EXT: Int
webgl/extensions/WebGLDebugRendererInfo[JT] val UNMASKED_RENDERER_WEBGL: Int
webgl/extensions/WebGLDebugRendererInfo[JT] val UNMASKED_VENDOR_WEBGL: Int
webgl/extensions/WebGLDebugShaders[JT] def getTranslatedShaderSource(shader: WebGLShader): String
webgl/extensions/WebGLDepthTexture[JT] val UNSIGNED_INT_24_8_WEBGL: Int
webgl/extensions/WebGLLoseContext[JT] def loseContext(): Unit
webgl/extensions/WebGLLoseContext[JT] def restoreContext(): Unit
webgl/extensions/WebGLTimerQueryEXT[JT]
webgl/extensions/WebGLVertexArrayObjectOES[JT]
webgl/package[SO] type ActiveInfo = WebGLActiveInfo
webgl/package[SO] type Buffer = WebGLBuffer
webgl/package[SO] type ContextAttributes = WebGLContextAttributes
webgl/package[SO] type Framebuffer = WebGLFramebuffer
webgl/package[SO] type Program = WebGLProgram
webgl/package[SO] type Renderbuffer = WebGLRenderbuffer
webgl/package[SO] type RenderingContext = WebGLRenderingContext
webgl/package[SO] type Shader = WebGLShader
webgl/package[SO] type ShaderPrecisionFormat = WebGLShaderPrecisionFormat
webgl/package[SO] type Texture = WebGLTexture
webgl/package[SO] type UniformLocation = WebGLUniformLocation
webgl/package[SO] def RenderingContext = WebGLRenderingContext
webworkers[SO] type AbstractWorker = dom.AbstractWorker  (@deprecated in 2.0.0)
webworkers[SO] type DedicatedWorkerGlobalScope = dom.DedicatedWorkerGlobalScope  (@deprecated in 2.0.0)
webworkers[SO] type Worker = dom.Worker  (@deprecated in 2.0.0)
webworkers[SO] type WorkerGlobalScope = dom.WorkerGlobalScope  (@deprecated in 2.0.0)
webworkers[SO] type WorkerLocation = dom.WorkerLocation  (@deprecated in 2.0.0)
webworkers[SO] type WorkerNavigator = dom.WorkerNavigator  (@deprecated in 2.0.0)
webworkers[SO] def self: DedicatedWorkerGlobalScope  (@deprecated in 2.0.0)
webworkers.DedicatedWorkerGlobalScope[JO] def self: DedicatedWorkerGlobalScope  (@deprecated in 2.0.0)
