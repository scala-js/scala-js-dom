scala-js-dom API
================

This is generated automatically on compile via custom Scalafix rule 'GenerateApiReport'.

Flags:
  [J-] = JavaScript type
  [S-] = Scala type
  [-C] = Class
  [-T] = Trait
  [-O] = Object


crypto/AesCbcParams[JT] var iv: BufferSource
crypto/AesCbcParams[JT] var name: String
crypto/AesCbcParams[SO] def apply(name: String, iv: BufferSource): AesCbcParams
crypto/AesCfbParams[JT] var iv: BufferSource
crypto/AesCfbParams[JT] var name: String
crypto/AesCfbParams[SO] def apply(name: String, iv: BufferSource): AesCfbParams
crypto/AesCmacParams[JT] var length: Int
crypto/AesCmacParams[JT] var name: String
crypto/AesCmacParams[SO] def apply(name: String, length: Int): AesCmacParams
crypto/AesCtrParams[JT] var counter: BufferSource
crypto/AesCtrParams[JT] var length: Short
crypto/AesCtrParams[JT] var name: String
crypto/AesCtrParams[SO] def apply(name: String, counter: BufferSource, length: Short): AesCtrParams
crypto/AesDerivedKeyParams[JT] var length: Int
crypto/AesDerivedKeyParams[JT] var name: String
crypto/AesDerivedKeyParams[SO] def apply(name: String, length: Short): AesDerivedKeyParams
crypto/AesGcmParams[JT] var additionalData: BufferSource
crypto/AesGcmParams[JT] var iv: BufferSource
crypto/AesGcmParams[JT] var name: String
crypto/AesGcmParams[JT] var tagLength: Short
crypto/AesGcmParams[SO] def apply(name: String, iv: BufferSource, additionalData: BufferSource, tagLength: Short): AesGcmParams
crypto/AesKeyAlgorithm[JT] var length: Int
crypto/AesKeyAlgorithm[JT] var name: String
crypto/AesKeyAlgorithm[SO] def apply(name: String, length: Short): AesKeyAlgorithm
crypto/AesKeyGenParams[JT] var length: Int
crypto/AesKeyGenParams[JT] var name: String
crypto/AesKeyGenParams[SO] def apply(name: String, length: Short): AesKeyGenParams
crypto/Algorithm[JT] var name: String
crypto/ConcatParams[JT] var algorithmId: BufferSource
crypto/ConcatParams[JT] var hash: HashAlgorithmIdentifier
crypto/ConcatParams[JT] var name: String
crypto/ConcatParams[JT] var partyUInfo: BufferSource
crypto/ConcatParams[JT] var partyVInfo: BufferSource
crypto/ConcatParams[JT] var privateInfo: BufferSource
crypto/ConcatParams[JT] var publicInfo: BufferSource
crypto/ConcatParams[SO] def apply(name: String, hash: HashAlgorithmIdentifier, algorithmId: BufferSource, partyUInfo: BufferSource, partyVInfo: BufferSource, publicInfo: BufferSource, privateInfo: BufferSource): ConcatParams
crypto/Crypto[JT] def getRandomValues(array: ArrayBufferView): ArrayBufferView
crypto/Crypto[JT] val subtle: SubtleCrypto
crypto/CryptoKey[JT] val algorithm: KeyAlgorithm
crypto/CryptoKey[JT] val extractable: Boolean
crypto/CryptoKey[JT] val `type`: String
crypto/CryptoKey[JT] val usages: js.Array[KeyUsage]
crypto/CryptoKeyPair[JT] val privateKey: CryptoKey
crypto/CryptoKeyPair[JT] val publicKey: CryptoKey
crypto/DhImportKeyParams[JT] var generator: BigInteger
crypto/DhImportKeyParams[JT] var name: String
crypto/DhImportKeyParams[JT] var prime: BigInteger
crypto/DhImportKeyParams[SO] def apply(name: String, prime: BigInteger, generator: BigInteger): DhImportKeyParams
crypto/DhKeyAlgorithm[JT] var generator: BigInteger
crypto/DhKeyAlgorithm[JT] var name: String
crypto/DhKeyAlgorithm[JT] var prime: BigInteger
crypto/DhKeyAlgorithm[SO] def apply(name: String, prime: BigInteger, generator: BigInteger): DhKeyAlgorithm
crypto/DhKeyDeriveParams[JT] var name: String
crypto/DhKeyDeriveParams[JT] var public: CryptoKey
crypto/DhKeyDeriveParams[SO] def apply(name: String, public: CryptoKey): DhKeyDeriveParams
crypto/DhKeyGenParams[JT] var generator: BigInteger
crypto/DhKeyGenParams[JT] var name: String
crypto/DhKeyGenParams[JT] var prime: BigInteger
crypto/DhKeyGenParams[SO] def apply(name: String, prime: BigInteger, generator: BigInteger): DhKeyGenParams
crypto/EcKeyAlgorithm[JT] var name: String
crypto/EcKeyAlgorithm[JT] var namedCurve: String
crypto/EcKeyAlgorithm[SO] def apply(name: String, namedCurve: String): EcKeyAlgorithm
crypto/EcKeyGenParams[JT] var name: String
crypto/EcKeyGenParams[JT] var namedCurve: String
crypto/EcKeyGenParams[SO] def apply(name: String, namedCurve: String): EcKeyGenParams
crypto/EcKeyImportParams[JT] var name: String
crypto/EcKeyImportParams[JT] var namedCurve: String
crypto/EcKeyImportParams[SO] def apply(name: String, namedCurve: String): EcKeyImportParams
crypto/EcdhKeyDeriveParams[JT] var name: String
crypto/EcdhKeyDeriveParams[JT] var public: CryptoKey
crypto/EcdhKeyDeriveParams[SO] def apply(name: String, public: CryptoKey): EcdhKeyDeriveParams
crypto/EcdsaParams[JT] var hash: HashAlgorithmIdentifier
crypto/EcdsaParams[JT] var name: String
crypto/EcdsaParams[SO] def apply(name: String, hash: HashAlgorithmIdentifier): EcdsaParams
crypto/GlobalCrypto[JO] val crypto: Crypto
crypto/HashAlgorithm[JT] var name: String
crypto/HashAlgorithm[SO] val `SHA-1` = named("SHA-1")
crypto/HashAlgorithm[SO] val `SHA-256` = named("SHA-256")
crypto/HashAlgorithm[SO] val `SHA-384` = named("SHA-384")
crypto/HashAlgorithm[SO] val `SHA-512` = named("SHA-512")
crypto/HkdfCtrParams[JT] var context: BufferSource
crypto/HkdfCtrParams[JT] var hash: HashAlgorithmIdentifier
crypto/HkdfCtrParams[JT] var label: BufferSource
crypto/HkdfCtrParams[JT] var name: String
crypto/HkdfCtrParams[SO] def apply(name: String, hash: HashAlgorithmIdentifier, label: BufferSource, context: BufferSource): HkdfCtrParams
crypto/HmacImportParams[JT] var hash: HashAlgorithmIdentifier
crypto/HmacImportParams[JT] var length: Double
crypto/HmacImportParams[JT] var name: String
crypto/HmacImportParams[SO] def apply(name: String, hash: HashAlgorithmIdentifier, length: Long): HmacImportParams
crypto/HmacKeyAlgorithm[JT] var hash: HashAlgorithmIdentifier
crypto/HmacKeyAlgorithm[JT] var length: Double
crypto/HmacKeyAlgorithm[JT] var name: String
crypto/HmacKeyAlgorithm[SO] def apply(name: String, hash: HashAlgorithmIdentifier, length: Long): HmacKeyAlgorithm
crypto/HmacKeyGenParams[JT] var hash: HashAlgorithmIdentifier
crypto/HmacKeyGenParams[JT] var length: Double
crypto/HmacKeyGenParams[JT] var name: String
crypto/HmacKeyGenParams[SO] def apply(name: String, hash: HashAlgorithmIdentifier, length: Long): HmacKeyGenParams
crypto/JsonWebKey[JT] var alg: js.Array[String]
crypto/JsonWebKey[JT] var crv: String
crypto/JsonWebKey[JT] var d: String
crypto/JsonWebKey[JT] var dp: String
crypto/JsonWebKey[JT] var dq: String
crypto/JsonWebKey[JT] var e: String
crypto/JsonWebKey[JT] var ext: Boolean
crypto/JsonWebKey[JT] var k: String
crypto/JsonWebKey[JT] var key_ops: js.Array[String]
crypto/JsonWebKey[JT] var kty: String
crypto/JsonWebKey[JT] var n: String
crypto/JsonWebKey[JT] var oth: js.Array[String]
crypto/JsonWebKey[JT] var p: String
crypto/JsonWebKey[JT] var q: String
crypto/JsonWebKey[JT] var qi: String
crypto/JsonWebKey[JT] var use: String
crypto/JsonWebKey[JT] var x: String
crypto/JsonWebKey[JT] var y: String
crypto/KeyAlgorithm[JT] var name: String
crypto/KeyFormat[JT]
crypto/KeyFormat[SO] val jwk = "jwk".asInstanceOf[KeyFormat]
crypto/KeyFormat[SO] val pkcs8 = "pkcs8".asInstanceOf[KeyFormat]
crypto/KeyFormat[SO] val raw = "raw".asInstanceOf[KeyFormat]
crypto/KeyFormat[SO] val spki = "spki".asInstanceOf[KeyFormat]
crypto/KeyType[JT]
crypto/KeyType[SO] val `private` = "private".asInstanceOf[KeyType]
crypto/KeyType[SO] val public = "public".asInstanceOf[KeyType]
crypto/KeyType[SO] val secret = "secret".asInstanceOf[KeyType]
crypto/KeyUsage[JT]
crypto/KeyUsage[SO] val decrypt = "decrypt".asInstanceOf[KeyUsage]
crypto/KeyUsage[SO] val deriveBits = "deriveBits".asInstanceOf[KeyUsage]
crypto/KeyUsage[SO] val deriveKey = "deriveKey".asInstanceOf[KeyUsage]
crypto/KeyUsage[SO] val encrypt = "encrypt".asInstanceOf[KeyUsage]
crypto/KeyUsage[SO] val sign = "sign".asInstanceOf[KeyUsage]
crypto/KeyUsage[SO] val unwrapKey = "unwrapKey".asInstanceOf[KeyUsage]
crypto/KeyUsage[SO] val verify = "verify".asInstanceOf[KeyUsage]
crypto/KeyUsage[SO] val wrapKey = "wrapKey".asInstanceOf[KeyUsage]
crypto/Pbkdf2Params[JT] var hash: HashAlgorithmIdentifier
crypto/Pbkdf2Params[JT] var iterations: Double
crypto/Pbkdf2Params[JT] var name: String
crypto/Pbkdf2Params[JT] var salt: BufferSource
crypto/Pbkdf2Params[SO] def apply(name: String, salt: BufferSource, iterations: Long, hash: HashAlgorithmIdentifier): Pbkdf2Params
crypto/RSAPublicKey[JT] def e: String
crypto/RSAPublicKey[JT] def n: String
crypto/RsaHashedImportParams[JT] var hash: HashAlgorithmIdentifier
crypto/RsaHashedImportParams[JT] var name: String
crypto/RsaHashedImportParams[SO] def apply(name: String, hash: HashAlgorithmIdentifier): RsaHashedImportParams
crypto/RsaHashedKeyAlgorithm[JT] var hash: HashAlgorithmIdentifier
crypto/RsaHashedKeyAlgorithm[JT] var modulusLength: Double
crypto/RsaHashedKeyAlgorithm[JT] var name: String
crypto/RsaHashedKeyAlgorithm[JT] var publicExponent: BigInteger
crypto/RsaHashedKeyAlgorithm[SO] def `RSA-OAEP`(modulusLength: Long, publicExponent: BigInteger, hash: HashAlgorithmIdentifier): RsaHashedKeyAlgorithm
crypto/RsaHashedKeyAlgorithm[SO] def `RSA-PSS`(modulusLength: Long, publicExponent: BigInteger, hash: HashAlgorithmIdentifier): RsaHashedKeyAlgorithm
crypto/RsaHashedKeyAlgorithm[SO] def `RSASSA-PKCS1-v1_5`(modulusLength: Long, publicExponent: BigInteger, hash: HashAlgorithmIdentifier): RsaHashedKeyAlgorithm
crypto/RsaHashedKeyAlgorithm[SO] def apply(name: String, modulusLength: Long, publicExponent: BigInteger, hash: HashAlgorithmIdentifier): RsaHashedKeyAlgorithm
crypto/RsaHashedKeyGenParams[JT] var hash: HashAlgorithmIdentifier
crypto/RsaHashedKeyGenParams[JT] var modulusLength: Double
crypto/RsaHashedKeyGenParams[JT] var name: String
crypto/RsaHashedKeyGenParams[JT] var publicExponent: BigInteger
crypto/RsaHashedKeyGenParams[SO] def apply(name: String, modulusLength: Long, publicExponent: BigInteger, hash: HashAlgorithmIdentifier): RsaHashedKeyGenParams
crypto/RsaKeyAlgorithm[JT] var modulusLength: Double
crypto/RsaKeyAlgorithm[JT] var name: String
crypto/RsaKeyAlgorithm[JT] var publicExponent: BigInteger
crypto/RsaKeyAlgorithm[SO] def apply(name: String, modulusLength: Long, publicExponent: BigInteger): RsaKeyAlgorithm
crypto/RsaKeyGenParams[JT] var modulusLength: Double
crypto/RsaKeyGenParams[JT] var name: String
crypto/RsaKeyGenParams[JT] var publicExponent: BigInteger
crypto/RsaKeyGenParams[SO] def apply(name: String, modulusLength: Long, publicExponent: BigInteger): RsaKeyGenParams
crypto/RsaOaepParams[JT] var label: BufferSource
crypto/RsaOaepParams[JT] var name: String
crypto/RsaOaepParams[SO] def apply(name: String, label: BufferSource): RsaOaepParams
crypto/RsaOtherPrimesInfo[JT] var d: String
crypto/RsaOtherPrimesInfo[JT] var r: String
crypto/RsaOtherPrimesInfo[JT] var t: String
crypto/RsaPssParams[JT] var name: String
crypto/RsaPssParams[JT] var saltLength: Double
crypto/RsaPssParams[SO] def apply(name: String, saltLength: Long): RsaPssParams
crypto/SubtleCrypto[JT] def decrypt(algorithm: AlgorithmIdentifier, key: CryptoKey, data: BufferSource): js.Promise[js.Any]
crypto/SubtleCrypto[JT] def deriveBits(algorithm: AlgorithmIdentifier, baseKey: CryptoKey, length: Double): js.Promise[js.Any]
crypto/SubtleCrypto[JT] def deriveKey(algorithm: AlgorithmIdentifier, baseKey: CryptoKey, derivedKeyType: KeyAlgorithmIdentifier, extractable: Boolean, keyUsages: js.Array[KeyUsage]): js.Promise[js.Any]
crypto/SubtleCrypto[JT] def digest(algorithm: HashAlgorithmIdentifier, data: BufferSource): js.Promise[js.Any]
crypto/SubtleCrypto[JT] def encrypt(algorithm: AlgorithmIdentifier, key: CryptoKey, data: BufferSource): js.Promise[js.Any]
crypto/SubtleCrypto[JT] def exportKey(format: KeyFormat, key: CryptoKey): js.Promise[js.Any]
crypto/SubtleCrypto[JT] def generateKey(algorithm: KeyAlgorithmIdentifier, extractable: Boolean, keyUsages: js.Array[KeyUsage]): js.Promise[js.Any]
crypto/SubtleCrypto[JT] def importKey(format: KeyFormat, keyData: BufferSource, algorithm: KeyAlgorithmIdentifier, extractable: Boolean, keyUsages: js.Array[KeyUsage]): js.Promise[CryptoKey]
crypto/SubtleCrypto[JT] def importKey(format: KeyFormat, keyData: JsonWebKey, algorithm: KeyAlgorithmIdentifier, extractable: Boolean, keyUsages: js.Array[KeyUsage]): js.Promise[CryptoKey]
crypto/SubtleCrypto[JT] def sign(algorithm: AlgorithmIdentifier, key: CryptoKey, data: BufferSource): js.Promise[js.Any]
crypto/SubtleCrypto[JT] def unwrapKey(format: String, wrappedKey: BufferSource, unwrappingKey: CryptoKey, unwrapAlgorithm: AlgorithmIdentifier, unwrappedKeyAlgorithm: AlgorithmIdentifier, extractable: Boolean, keyUsages: js.Array[KeyUsage]): js.Promise[js.Any]
crypto/SubtleCrypto[JT] def verify(algorithm: AlgorithmIdentifier, key: CryptoKey, signature: BufferSource, data: BufferSource): js.Promise[js.Any]
crypto/SubtleCrypto[JT] def wrapKey(format: KeyFormat, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: AlgorithmIdentifier): js.Promise[js.Any]
crypto/package[SO] type AlgorithmIdentifier = Algorithm | String
crypto/package[SO] type BigInteger = Uint8Array
crypto/package[SO] type HashAlgorithmIdentifier = HashAlgorithm | String
crypto/package[SO] type KeyAlgorithmIdentifier = KeyAlgorithm | String
crypto/package[SO] implicit def arrayBuffer2BufferSource(b: ArrayBuffer): BufferSource
crypto/package[SO] implicit def arrayBufferView2BufferSource(b: ArrayBufferView): BufferSource
crypto/package[SO] def crypto = GlobalCrypto.crypto
crypto/package.BufferSource[JT]
css[SO] type FontFaceRule = raw.CSSFontFaceRule
css[SO] type ImportRule = raw.CSSImportRule
css[SO] type KeyframeRule = raw.CSSKeyframeRule
css[SO] type MediaRule = raw.CSSMediaRule
css[SO] type NamespaceRule = raw.CSSNamespaceRule
css[SO] type PageRule = raw.CSSPageRule
css[SO] type Rule = raw.CSSRule
css[SO] type RuleList = raw.CSSRuleList
css[SO] type StyleDeclaration = raw.CSSStyleDeclaration
css[SO] type StyleRule = raw.CSSStyleRule
css[SO] type StyleSheet = raw.CSSStyleSheet
css[SO] def CSS = raw.CSS
css[SO] def Rule = raw.CSSRule
experimental/AbortController[JC] def abort(): Unit
experimental/AbortController[JC] val signal: AbortSignal
experimental/AbortSignal[JT] def aborted: Boolean
experimental/AbortSignal[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/AbortSignal[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/AbortSignal[JT] def dispatchEvent(evt: Event): Boolean
experimental/AbortSignal[JT] var onabort: js.Function0[Any]
experimental/AbortSignal[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/AbortSignal[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/Body[JT] def arrayBuffer(): js.Promise[ArrayBuffer]
experimental/Body[JT] def blob(): js.Promise[Blob]
experimental/Body[JT] def bodyUsed: Boolean
experimental/Body[JT] def formData(): js.Promise[FormData]
experimental/Body[JT] def json(): js.Promise[js.Any]
experimental/Body[JT] def text(): js.Promise[String]
experimental/Chunk[JT] def done: Boolean
experimental/Chunk[JT] def value: T
experimental/Fetch[JO] def fetch(info: RequestInfo, init: RequestInit = null): js.Promise[Response]
experimental/FileReaderSync[JC] def readAsArrayBuffer(blob: Blob): ArrayBuffer
experimental/FileReaderSync[JC] def readAsDataURL(blob: Blob): URL
experimental/FileReaderSync[JC] def readAsText(blob: Blob, encoding: String?): String
experimental/Fullscreen[SO] def exitFullscreen(): js.UndefOr[js.Promise[Unit]]
experimental/Fullscreen[SO] def fullscreenElement: Element
experimental/Fullscreen[SO] def fullscreenEnabled: Boolean
experimental/Fullscreen[SO] var onfullscreenchange: js.Function1[Event, _]
experimental/Fullscreen[SO] var onfullscreenerror: js.Function1[Event, _]
experimental/Fullscreen[SO] def requestFullscreen(): js.UndefOr[js.Promise[Unit]]
experimental/Fullscreen[SO] implicit def toFullscreenDocument(d: Document): FullscreenDocument
experimental/Fullscreen[SO] implicit def toFullscreenElement(e: Element): FullscreenElement
experimental/Fullscreen.FullscreenDocument[JT] def exitFullscreen(): js.UndefOr[js.Promise[Unit]]
experimental/Fullscreen.FullscreenDocument[JT] def fullscreenElement: Element
experimental/Fullscreen.FullscreenDocument[JT] def fullscreenEnabled: Boolean
experimental/Fullscreen.FullscreenDocument[JT] var onfullscreenchange: js.Function1[Event, _]
experimental/Fullscreen.FullscreenDocument[JT] var onfullscreenerror: js.Function1[Event, _]
experimental/Fullscreen.FullscreenElement[JT] def requestFullscreen(): js.UndefOr[js.Promise[Unit]]
experimental/Headers[JC] def append(name: ByteString, value: ByteString): Unit
experimental/Headers[JC] def delete(name: ByteString): Unit
experimental/Headers[JC] def get(name: ByteString): ByteString
experimental/Headers[JC] def getAll(name: ByteString): Sequence[ByteString]
experimental/Headers[JC] def has(name: ByteString): Boolean
experimental/Headers[JC] @JSName(js.Symbol.iterator) def jsIterator(): js.Iterator[js.Array[ByteString]]
experimental/Headers[JC] def set(name: ByteString, value: ByteString): Unit
experimental/HttpMethod[JT]
experimental/HttpMethod[SO] val DELETE = "DELETE".asInstanceOf[HttpMethod]
experimental/HttpMethod[SO] val GET = "GET".asInstanceOf[HttpMethod]
experimental/HttpMethod[SO] val HEAD = "HEAD".asInstanceOf[HttpMethod]
experimental/HttpMethod[SO] val OPTIONS = "OPTIONS".asInstanceOf[HttpMethod]
experimental/HttpMethod[SO] val PATCH = "PATCH".asInstanceOf[HttpMethod]
experimental/HttpMethod[SO] val POST = "POST".asInstanceOf[HttpMethod]
experimental/HttpMethod[SO] val PUT = "PUT".asInstanceOf[HttpMethod]
experimental/HttpMethod[SO] val QUERY = "QUERY".asInstanceOf[HttpMethod]
experimental/Notification[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/Notification[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/Notification[JC] val body: String
experimental/Notification[JC] def close(): Unit
experimental/Notification[JC] val data: js.Object
experimental/Notification[JC] val dir: String
experimental/Notification[JC] def dispatchEvent(evt: Event): Boolean
experimental/Notification[JC] val icon: String
experimental/Notification[JC] val lang: String
experimental/Notification[JC] val noscreen: Boolean
experimental/Notification[JC] var onclick: js.Function0[Any]
experimental/Notification[JC] var onerror: js.Function0[Any]
experimental/Notification[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/Notification[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/Notification[JC] val renotify: Boolean
experimental/Notification[JC] val silent: Boolean
experimental/Notification[JC] val sound: String
experimental/Notification[JC] val sticky: Boolean
experimental/Notification[JC] val tag: String
experimental/Notification[JC] val vibrate: js.Array[Double]
experimental/Notification[JO] val permission: String
experimental/Notification[JO] def requestPermission(callback: js.Function1[String, Any]): Unit
experimental/NotificationOptions[JT] val body: String
experimental/NotificationOptions[JT] val dir: String
experimental/NotificationOptions[JT] val icon: String
experimental/NotificationOptions[JT] val lang: String
experimental/NotificationOptions[JT] val noscreen: Boolean
experimental/NotificationOptions[JT] val onclick: js.Function0[Any]
experimental/NotificationOptions[JT] val onerror: js.Function0[Any]
experimental/NotificationOptions[JT] val renotify: Boolean
experimental/NotificationOptions[JT] val silent: Boolean
experimental/NotificationOptions[JT] val sound: String
experimental/NotificationOptions[JT] val sticky: Boolean
experimental/NotificationOptions[JT] val tag: String
experimental/NotificationOptions[JT] val vibrate: js.Array[Double]
experimental/NotificationOptions[SO] def apply(body: js.UndefOr[String] = js.undefined, dir: js.UndefOr[String] = js.undefined, icon: js.UndefOr[String] = js.undefined, lang: js.UndefOr[String] = js.undefined, noscreen: js.UndefOr[Boolean] = js.undefined, renotify: js.UndefOr[Boolean] = js.undefined, silent: js.UndefOr[Boolean] = js.undefined, sound: js.UndefOr[String] = js.undefined, sticky: js.UndefOr[Boolean] = js.undefined, tag: js.UndefOr[String] = js.undefined, onclick: js.UndefOr[js.Function0[Any]] = js.undefined, onerror: js.UndefOr[js.Function0[Any]] = js.undefined, vibrate: js.UndefOr[js.Array[Double]] = js.undefined): NotificationOptions
experimental/PointerLock[SO] def exitPointerLock(): Unit
experimental/PointerLock[SO] def movementX: Double
experimental/PointerLock[SO] def movementY: Double
experimental/PointerLock[SO] var onpointerlockchange: js.Function1[Event, _]
experimental/PointerLock[SO] var onpointerlockerror: js.Function1[Event, _]
experimental/PointerLock[SO] def pointerLockElement: Element
experimental/PointerLock[SO] def requestPointerLock(): Unit
experimental/PointerLock[SO] implicit def toPointerLockDocument(document: Document): PointerLockDocument
experimental/PointerLock[SO] implicit def toPointerLockElement(element: Element): PointerLockElement
experimental/PointerLock[SO] implicit def toPointerLockMouseEvent(me: MouseEvent): PointerLockMouseEvent
experimental/PointerLock.PointerLockDocument[JT] def exitPointerLock(): Unit
experimental/PointerLock.PointerLockDocument[JT] var onpointerlockchange: js.Function1[Event, _]
experimental/PointerLock.PointerLockDocument[JT] var onpointerlockerror: js.Function1[Event, _]
experimental/PointerLock.PointerLockDocument[JT] def pointerLockElement: Element
experimental/PointerLock.PointerLockElement[JT] def requestPointerLock(): Unit
experimental/PointerLock.PointerLockMouseEvent[JT] def movementX: Double
experimental/PointerLock.PointerLockMouseEvent[JT] def movementY: Double
experimental/ReadableStream[JT] def cancel(reason: js.UndefOr[Any] = js.undefined): js.Promise[Unit]
experimental/ReadableStream[JT] def getReader(): ReadableStreamReader[T]
experimental/ReadableStream[JT] def locked: Boolean
experimental/ReadableStream[JT] def pipeThrough[U](pair: Any, options: Any = js.undefined): ReadableStream[U]
experimental/ReadableStream[JT] def pipeTo(dest: WriteableStream[T], options: Any = js.undefined): Unit
experimental/ReadableStream[JT] def tee(): js.Array[_ <: ReadableStream[T]]
experimental/ReadableStreamController[JC] def close(): Unit
experimental/ReadableStreamController[JC] def desiredSize: Int
experimental/ReadableStreamController[JC] def enqueue(chunk: Chunk[T]): js.UndefOr[Int]
experimental/ReadableStreamController[JC] def error(e: Any): Unit
experimental/ReadableStreamReader[JC] def cancel(reason: Any): js.Promise[Any]
experimental/ReadableStreamReader[JC] def closed: js.Promise[ReadableStreamReader[T]]
experimental/ReadableStreamReader[JC] def read(): js.Promise[Chunk[T]]
experimental/ReadableStreamReader[JC] def releaseLock(): Unit
experimental/ReferrerPolicy[JT]
experimental/ReferrerPolicy[SO] val empty = "".asInstanceOf[ReferrerPolicy]
experimental/ReferrerPolicy[SO] val `no-referrer` = "no-referrer".asInstanceOf[ReferrerPolicy]
experimental/ReferrerPolicy[SO] val `no-referrer-when-downgrade` = "no-referrer-when-downgrade".asInstanceOf[ReferrerPolicy]
experimental/ReferrerPolicy[SO] val `origin-only` = "origin-only".asInstanceOf[ReferrerPolicy]
experimental/ReferrerPolicy[SO] val `origin-when-cross-origin` = "origin-when-cross-origin".asInstanceOf[ReferrerPolicy]
experimental/ReferrerPolicy[SO] val `unsafe-url` = "unsafe-url".asInstanceOf[ReferrerPolicy]
experimental/Request[JC] def cache: RequestCache
experimental/Request[JC] def credentials: RequestCredentials
experimental/Request[JC] def destination: RequestDestination
experimental/Request[JC] def headers: Headers
experimental/Request[JC] def integrity: String
experimental/Request[JC] def keepalive: Boolean
experimental/Request[JC] @JSName("type") def mediaType: RequestType
experimental/Request[JC] def method: HttpMethod
experimental/Request[JC] def mode: RequestMode
experimental/Request[JC] def redirect: RequestRedirect
experimental/Request[JC] def referrer: String
experimental/Request[JC] def referrerPolicy: ReferrerPolicy
experimental/Request[JC] def signal: AbortSignal
experimental/Request[JC] def url: String
experimental/RequestCache[JT]
experimental/RequestCache[SO] val default = "default".asInstanceOf[RequestCache]
experimental/RequestCache[SO] val `force-cache` = "force-cache".asInstanceOf[RequestCache]
experimental/RequestCache[SO] val `no-cache` = "no-cache".asInstanceOf[RequestCache]
experimental/RequestCache[SO] val `no-store` = "no-store".asInstanceOf[RequestCache]
experimental/RequestCache[SO] val `only-if-cached` = "only-if-cached".asInstanceOf[RequestCache]
experimental/RequestCache[SO] val reload = "reload".asInstanceOf[RequestCache]
experimental/RequestCredentials[JT]
experimental/RequestCredentials[SO] val include = "include".asInstanceOf[RequestCredentials]
experimental/RequestCredentials[SO] val omit = "omit".asInstanceOf[RequestCredentials]
experimental/RequestCredentials[SO] val `same-origin` = "same-origin".asInstanceOf[RequestCredentials]
experimental/RequestDestination[JT]
experimental/RequestDestination[SO] val document = "document".asInstanceOf[RequestDestination]
experimental/RequestDestination[SO] val empty = "".asInstanceOf[RequestDestination]
experimental/RequestDestination[SO] val sharedworker = "sharedworker".asInstanceOf[RequestDestination]
experimental/RequestDestination[SO] val subresource = "subresource".asInstanceOf[RequestDestination]
experimental/RequestDestination[SO] val unknown = "unknown".asInstanceOf[RequestDestination]
experimental/RequestDestination[SO] val worker = "worker".asInstanceOf[RequestDestination]
experimental/RequestInit[JT] var body: js.UndefOr[BodyInit]
experimental/RequestInit[JT] var cache: js.UndefOr[RequestCache]
experimental/RequestInit[JT] var credentials: js.UndefOr[RequestCredentials]
experimental/RequestInit[JT] var headers: js.UndefOr[HeadersInit]
experimental/RequestInit[JT] var integrity: js.UndefOr[String]
experimental/RequestInit[JT] var keepalive: js.UndefOr[Boolean]
experimental/RequestInit[JT] var method: js.UndefOr[HttpMethod]
experimental/RequestInit[JT] var mode: js.UndefOr[RequestMode]
experimental/RequestInit[JT] var redirect: js.UndefOr[RequestRedirect]
experimental/RequestInit[JT] var referrer: js.UndefOr[String]
experimental/RequestInit[JT] var referrerPolicy: js.UndefOr[ReferrerPolicy]
experimental/RequestInit[JT] var signal: js.UndefOr[AbortSignal]
experimental/RequestInit[JT] var window: js.UndefOr[Null]
experimental/RequestMode[JT]
experimental/RequestMode[SO] val cors = "cors".asInstanceOf[RequestMode]
experimental/RequestMode[SO] val navigate = "navigate".asInstanceOf[RequestMode]
experimental/RequestMode[SO] val `no-cors` = "no-cors".asInstanceOf[RequestMode]
experimental/RequestMode[SO] val `same-origin` = "same-origin".asInstanceOf[RequestMode]
experimental/RequestRedirect[JT]
experimental/RequestRedirect[SO] val error = "error".asInstanceOf[RequestRedirect]
experimental/RequestRedirect[SO] val follow = "follow".asInstanceOf[RequestRedirect]
experimental/RequestRedirect[SO] val manual = "manual".asInstanceOf[RequestRedirect]
experimental/RequestType[JT]
experimental/RequestType[SO] val audio = "audio".asInstanceOf[RequestType]
experimental/RequestType[SO] val empty = "".asInstanceOf[RequestType]
experimental/RequestType[SO] val font = "font".asInstanceOf[RequestType]
experimental/RequestType[SO] val image = "image".asInstanceOf[RequestType]
experimental/RequestType[SO] val script = "script".asInstanceOf[RequestType]
experimental/RequestType[SO] val style = "style".asInstanceOf[RequestType]
experimental/RequestType[SO] val track = "track".asInstanceOf[RequestType]
experimental/RequestType[SO] val video = "video".asInstanceOf[RequestType]
experimental/Response[JC] def arrayBuffer(): js.Promise[ArrayBuffer]
experimental/Response[JC] def blob(): js.Promise[Blob]
experimental/Response[JC] val body: ReadableStream[Uint8Array]
experimental/Response[JC] def bodyUsed: Boolean
experimental/Response[JC] override def clone(): Response
experimental/Response[JC] def formData(): js.Promise[FormData]
experimental/Response[JC] val headers: Headers
experimental/Response[JC] def json(): js.Promise[js.Any]
experimental/Response[JC] def ok: Boolean
experimental/Response[JC] val status: Int
experimental/Response[JC] def statusText: ByteString
experimental/Response[JC] def text(): js.Promise[String]
experimental/Response[JC] def `type`: ResponseType
experimental/Response[JC] def url: String
experimental/Response[JO] def error(): Response
experimental/Response[JO] def redirect(url: String, status: Int = 302): Response
experimental/ResponseInit[JT] var headers: HeadersInit
experimental/ResponseInit[JT] var status: Int
experimental/ResponseInit[JT] var statusText: ByteString
experimental/ResponseInit[SO] def apply(_status: Int = 200, _statusText: ByteString = "OK", _headers: HeadersInit = js.Dictionary[String]()): ResponseInit
experimental/ResponseInit[SO] var headers = _headers
experimental/ResponseInit[SO] var status = _status
experimental/ResponseInit[SO] var statusText = _statusText
experimental/ResponseType[JT]
experimental/ResponseType[SO] val basic = "basic".asInstanceOf[ResponseType]
experimental/ResponseType[SO] val cors = "cors".asInstanceOf[ResponseType]
experimental/ResponseType[SO] val default = "default".asInstanceOf[ResponseType]
experimental/ResponseType[SO] val error = "error".asInstanceOf[ResponseType]
experimental/ResponseType[SO] val opaque = "opaque".asInstanceOf[ResponseType]
experimental/ResponseType[SO] val opaqueredirect = "opaqueredirect".asInstanceOf[ResponseType]
experimental/URL[JC] var hash: String
experimental/URL[JC] var host: String
experimental/URL[JC] var hostname: String
experimental/URL[JC] var href: String
experimental/URL[JC] def origin: String
experimental/URL[JC] var password: String
experimental/URL[JC] var pathname: String
experimental/URL[JC] var port: String
experimental/URL[JC] var protocol: String
experimental/URL[JC] var search: String
experimental/URL[JC] var searchParams: URLSearchParams
experimental/URL[JC] var username: String
experimental/URLSearchParams[JC] def append(name: String, value: String): Unit
experimental/URLSearchParams[JC] def delete(name: String): Unit
experimental/URLSearchParams[JC] def entries(): js.Iterator[js.Tuple2[String, String]]
experimental/URLSearchParams[JC] def forEach(callback: js.Function2[String, String, Unit]): Unit
experimental/URLSearchParams[JC] def get(name: String): String
experimental/URLSearchParams[JC] def getAll(name: String): Sequence[String]
experimental/URLSearchParams[JC] def has(name: String): Boolean
experimental/URLSearchParams[JC] @JSName(js.Symbol.iterator) override def jsIterator(): js.Iterator[js.Tuple2[String, String]]
experimental/URLSearchParams[JC] def keys(): js.Iterator[String]
experimental/URLSearchParams[JC] def set(name: String, value: String): Unit
experimental/URLSearchParams[JC] def sort(): Unit
experimental/URLSearchParams[JC] def values(): js.Iterator[String]
experimental/Vibration[SO] implicit def toVibration(n: org.scalajs.dom.Navigator): VibrationNavigator
experimental/Vibration[SO] def vibrate(duration: Double): Boolean
experimental/Vibration[SO] def vibrate(pattern: js.Array[Double]): Boolean
experimental/Vibration.VibrationNavigator[JT] def vibrate(duration: Double): Boolean
experimental/Vibration.VibrationNavigator[JT] def vibrate(pattern: js.Array[Double]): Boolean
experimental/WriteableState[JT]
experimental/WriteableState[SO] val closed = "closed".asInstanceOf[WriteableState]
experimental/WriteableState[SO] val closing = "closing".asInstanceOf[WriteableState]
experimental/WriteableState[SO] val errored = "errored".asInstanceOf[WriteableState]
experimental/WriteableState[SO] val waiting = "waiting".asInstanceOf[WriteableState]
experimental/WriteableState[SO] val writable = "writable".asInstanceOf[WriteableState]
experimental/WriteableStream[JT] def abort(reason: js.UndefOr[Any] = js.undefined): js.Promise[Unit]
experimental/WriteableStream[JT] def close(): js.Promise[WriteableStream[T]]
experimental/WriteableStream[JT] val closed: js.Promise[WriteableStream[T]]
experimental/WriteableStream[JT] val ready: js.Promise[WriteableStream[T]]
experimental/WriteableStream[JT] def state: WriteableState
experimental/WriteableStream[JT] def write(chunk: Chunk[T]): js.Promise[Any]
experimental/beacon/package[SO] def sendBeacon(url: String, data: BodyInit = null): Boolean
experimental/beacon/package[SO] implicit def toBeaconNavigator(n: Navigator): BeaconNavigator
experimental/beacon/package[SO] implicit def toBeaconWorkerNavigator(n: WorkerNavigator): BeaconWorkerNavigator
experimental/beacon/package.BeaconNavigator[JT] def sendBeacon(url: String, data: BodyInit = null): Boolean
experimental/beacon/package.BeaconWorkerNavigator[JT] def sendBeacon(url: String, data: BodyInit = null): Boolean
experimental/cachestorage/Cache[JC] def add(request: RequestInfo): js.Promise[Unit]
experimental/cachestorage/Cache[JC] def addAll(requests: js.Array[RequestInfo]): js.Promise[Unit]
experimental/cachestorage/Cache[JC] def delete(request: RequestInfo, options: js.UndefOr[CacheQueryOptions]?): js.Promise[Boolean]
experimental/cachestorage/Cache[JC] def keys(request: js.UndefOr[RequestInfo]?, options: js.UndefOr[CacheQueryOptions]?): js.Promise[js.Array[Request]]
experimental/cachestorage/Cache[JC] def `match`(request: RequestInfo, options: js.UndefOr[CacheQueryOptions]?): js.Promise[js.UndefOr[Response]]
experimental/cachestorage/Cache[JC] def matchAll(request: RequestInfo?, options: js.UndefOr[CacheQueryOptions]?): js.Promise[js.Array[Response]]
experimental/cachestorage/Cache[JC] def put(request: RequestInfo, response: Response): js.Promise[Unit]
experimental/cachestorage/CacheQueryOptions[JT] var cacheName: String
experimental/cachestorage/CacheQueryOptions[JT] var ignoreMethod: Boolean
experimental/cachestorage/CacheQueryOptions[JT] var ignoreSearch: Boolean
experimental/cachestorage/CacheQueryOptions[JT] var ignoreVary: Boolean
experimental/cachestorage/CacheStorage[JT] def delete(cacheName: String): js.Promise[Boolean]
experimental/cachestorage/CacheStorage[JT] def has(cacheName: String): js.Promise[Boolean]
experimental/cachestorage/CacheStorage[JT] def keys(): js.Promise[js.Array[String]]
experimental/cachestorage/CacheStorage[JT] def `match`(request: RequestInfo, options: CacheQueryOptions?): js.Promise[js.Any]
experimental/cachestorage/CacheStorage[JT] def open(cacheName: String): js.Promise[Cache]
experimental/deviceorientation/DeviceAcceleration[JT] val x: Double
experimental/deviceorientation/DeviceAcceleration[JT] val y: Double
experimental/deviceorientation/DeviceAcceleration[JT] val z: Double
experimental/deviceorientation/DeviceMotionEvent[JC] val acceleration: DeviceAcceleration
experimental/deviceorientation/DeviceMotionEvent[JC] val accelerationIncludingGravity: DeviceAcceleration
experimental/deviceorientation/DeviceMotionEvent[JC] def bubbles: Boolean
experimental/deviceorientation/DeviceMotionEvent[JC] def cancelBubble: Boolean
experimental/deviceorientation/DeviceMotionEvent[JC] def cancelable: Boolean
experimental/deviceorientation/DeviceMotionEvent[JC] def currentTarget: EventTarget
experimental/deviceorientation/DeviceMotionEvent[JC] def defaultPrevented: Boolean
experimental/deviceorientation/DeviceMotionEvent[JC] def eventPhase: Int
experimental/deviceorientation/DeviceMotionEvent[JC] val interval: Double
experimental/deviceorientation/DeviceMotionEvent[JC] def isTrusted: Boolean
experimental/deviceorientation/DeviceMotionEvent[JC] def preventDefault(): Unit
experimental/deviceorientation/DeviceMotionEvent[JC] val rotationRate: DeviceRotationRate
experimental/deviceorientation/DeviceMotionEvent[JC] def stopImmediatePropagation(): Unit
experimental/deviceorientation/DeviceMotionEvent[JC] def stopPropagation(): Unit
experimental/deviceorientation/DeviceMotionEvent[JC] def target: EventTarget
experimental/deviceorientation/DeviceMotionEvent[JC] def timeStamp: Double
experimental/deviceorientation/DeviceMotionEvent[JC] def `type`: String
experimental/deviceorientation/DeviceMotionEventInit[JT] val acceleration: js.UndefOr[DeviceAcceleration]
experimental/deviceorientation/DeviceMotionEventInit[JT] val accelerationIncludingGravity: js.UndefOr[DeviceAcceleration]
experimental/deviceorientation/DeviceMotionEventInit[JT] var bubbles: js.UndefOr[Boolean]
experimental/deviceorientation/DeviceMotionEventInit[JT] var cancelable: js.UndefOr[Boolean]
experimental/deviceorientation/DeviceMotionEventInit[JT] var composed: js.UndefOr[Boolean]
experimental/deviceorientation/DeviceMotionEventInit[JT] val interval: js.UndefOr[Double]
experimental/deviceorientation/DeviceMotionEventInit[JT] val rotationRate: js.UndefOr[DeviceRotationRate]
experimental/deviceorientation/DeviceMotionEventInit[JT] var scoped: js.UndefOr[Boolean]
experimental/deviceorientation/DeviceOrientationEvent[JC] val absolute: Boolean
experimental/deviceorientation/DeviceOrientationEvent[JC] val alpha: Double
experimental/deviceorientation/DeviceOrientationEvent[JC] val beta: Double
experimental/deviceorientation/DeviceOrientationEvent[JC] def bubbles: Boolean
experimental/deviceorientation/DeviceOrientationEvent[JC] def cancelBubble: Boolean
experimental/deviceorientation/DeviceOrientationEvent[JC] def cancelable: Boolean
experimental/deviceorientation/DeviceOrientationEvent[JC] def currentTarget: EventTarget
experimental/deviceorientation/DeviceOrientationEvent[JC] def defaultPrevented: Boolean
experimental/deviceorientation/DeviceOrientationEvent[JC] def eventPhase: Int
experimental/deviceorientation/DeviceOrientationEvent[JC] val gamma: Double
experimental/deviceorientation/DeviceOrientationEvent[JC] def isTrusted: Boolean
experimental/deviceorientation/DeviceOrientationEvent[JC] def preventDefault(): Unit
experimental/deviceorientation/DeviceOrientationEvent[JC] def stopImmediatePropagation(): Unit
experimental/deviceorientation/DeviceOrientationEvent[JC] def stopPropagation(): Unit
experimental/deviceorientation/DeviceOrientationEvent[JC] def target: EventTarget
experimental/deviceorientation/DeviceOrientationEvent[JC] def timeStamp: Double
experimental/deviceorientation/DeviceOrientationEvent[JC] def `type`: String
experimental/deviceorientation/DeviceOrientationEventInit[JT] var absolute: js.UndefOr[Boolean]
experimental/deviceorientation/DeviceOrientationEventInit[JT] var alpha: js.UndefOr[Double]
experimental/deviceorientation/DeviceOrientationEventInit[JT] var beta: js.UndefOr[Double]
experimental/deviceorientation/DeviceOrientationEventInit[JT] var bubbles: js.UndefOr[Boolean]
experimental/deviceorientation/DeviceOrientationEventInit[JT] var cancelable: js.UndefOr[Boolean]
experimental/deviceorientation/DeviceOrientationEventInit[JT] var composed: js.UndefOr[Boolean]
experimental/deviceorientation/DeviceOrientationEventInit[JT] var gamma: js.UndefOr[Double]
experimental/deviceorientation/DeviceOrientationEventInit[JT] var scoped: js.UndefOr[Boolean]
experimental/deviceorientation/DeviceRotationRate[JT] val alpha: Double
experimental/deviceorientation/DeviceRotationRate[JT] val beta: Double
experimental/deviceorientation/DeviceRotationRate[JT] val gamma: Double
experimental/domparser/DOMParser[JC] def parseFromString(string: String, supportedType: SupportedType): Document
experimental/domparser/SupportedType[JT]
experimental/domparser/SupportedType[SO] val `application/xhtml+xml` = "application/xhtml+xml".asInstanceOf[SupportedType]
experimental/domparser/SupportedType[SO] val `application/xml` = "application/xml".asInstanceOf[SupportedType]
experimental/domparser/SupportedType[SO] val `image/svg+xml` = "image/svg+xml".asInstanceOf[SupportedType]
experimental/domparser/SupportedType[SO] val `text/html` = "text/html".asInstanceOf[SupportedType]
experimental/domparser/SupportedType[SO] val `text/xml` = "text/xml".asInstanceOf[SupportedType]
experimental/gamepad/Gamepad[JT] val axes: js.Array[Double]
experimental/gamepad/Gamepad[JT] val buttons: js.Array[GamepadButton]
experimental/gamepad/Gamepad[JT] val connected: Boolean
experimental/gamepad/Gamepad[JT] val id: String
experimental/gamepad/Gamepad[JT] val index: Double
experimental/gamepad/Gamepad[JT] val mapping: GamepadMappingType
experimental/gamepad/Gamepad[JT] val timestamp: Double
experimental/gamepad/GamepadButton[JT] val pressed: Boolean
experimental/gamepad/GamepadButton[JT] val value: Double
experimental/gamepad/GamepadEvent[JC] def bubbles: Boolean
experimental/gamepad/GamepadEvent[JC] def cancelBubble: Boolean
experimental/gamepad/GamepadEvent[JC] def cancelable: Boolean
experimental/gamepad/GamepadEvent[JC] def currentTarget: EventTarget
experimental/gamepad/GamepadEvent[JC] def defaultPrevented: Boolean
experimental/gamepad/GamepadEvent[JC] def eventPhase: Int
experimental/gamepad/GamepadEvent[JC] val gamepad: Gamepad
experimental/gamepad/GamepadEvent[JC] def isTrusted: Boolean
experimental/gamepad/GamepadEvent[JC] def preventDefault(): Unit
experimental/gamepad/GamepadEvent[JC] def stopImmediatePropagation(): Unit
experimental/gamepad/GamepadEvent[JC] def stopPropagation(): Unit
experimental/gamepad/GamepadEvent[JC] def target: EventTarget
experimental/gamepad/GamepadEvent[JC] def timeStamp: Double
experimental/gamepad/GamepadEvent[JC] def `type`: String
experimental/gamepad/GamepadEventInit[JT] var bubbles: js.UndefOr[Boolean]
experimental/gamepad/GamepadEventInit[JT] var cancelable: js.UndefOr[Boolean]
experimental/gamepad/GamepadEventInit[JT] var composed: js.UndefOr[Boolean]
experimental/gamepad/GamepadEventInit[JT] var gamepad: js.UndefOr[Gamepad]
experimental/gamepad/GamepadEventInit[JT] var scoped: js.UndefOr[Boolean]
experimental/gamepad/GamepadMappingType[JT]
experimental/gamepad/GamepadNavigator[JT] def getGamepads(): js.Array[Gamepad]
experimental/gamepad/package[SO] final val `standard` = "standard".asInstanceOf[GamepadMappingType]
experimental/gamepad/package[SO] implicit def toGamepad(navigator: dom.raw.Navigator): GamepadNavigator
experimental/gamepad/package[SO] final val `unknown` = "".asInstanceOf[GamepadMappingType]
experimental/intl/Collator[JC] def compare(string1: String, string2: String): Double
experimental/intl/Collator[JC] def resolvedOptions(): CollatorOptions
experimental/intl/Collator[JC] def supportedLocalesOf(locales: String | js.Array[String], options: js.Any): js.Array[String]
experimental/intl/CollatorOptions[JT] val caseFirst: js.UndefOr[String]
experimental/intl/CollatorOptions[JT] val ignorePunctuation: js.UndefOr[Boolean]
experimental/intl/CollatorOptions[JT] val localeMatcher: js.UndefOr[String]
experimental/intl/CollatorOptions[JT] val numeric: js.UndefOr[Boolean]
experimental/intl/CollatorOptions[JT] val sensitivity: js.UndefOr[String]
experimental/intl/CollatorOptions[JT] val usage: js.UndefOr[String]
experimental/intl/CollatorOptions[SO] def apply(localeMatcher: js.UndefOr[String] = js.undefined, usage: js.UndefOr[String] = js.undefined, sensitivity: js.UndefOr[String] = js.undefined, ignorePunctuation: js.UndefOr[Boolean] = js.undefined, numeric: js.UndefOr[Boolean] = js.undefined, caseFirst: js.UndefOr[String] = js.undefined): CollatorOptions
experimental/intl/DateTimeFormat[JC] def format(date: js.Date): String
experimental/intl/DateTimeFormat[JC] def resolvedOptions(): DateTimeFormatOptions
experimental/intl/DateTimeFormat[JC] def supportedLocalesOf(locales: String | js.Array[String], options: js.Any): js.Array[String]
experimental/intl/DateTimeFormatOptions[JT] val day: js.UndefOr[String]
experimental/intl/DateTimeFormatOptions[JT] val era: js.UndefOr[String]
experimental/intl/DateTimeFormatOptions[JT] val formatMatcher: js.UndefOr[String]
experimental/intl/DateTimeFormatOptions[JT] val hour: js.UndefOr[String]
experimental/intl/DateTimeFormatOptions[JT] val hour12: js.UndefOr[Boolean]
experimental/intl/DateTimeFormatOptions[JT] val localeMatcher: js.UndefOr[String]
experimental/intl/DateTimeFormatOptions[JT] val minute: js.UndefOr[String]
experimental/intl/DateTimeFormatOptions[JT] val month: js.UndefOr[String]
experimental/intl/DateTimeFormatOptions[JT] val second: js.UndefOr[String]
experimental/intl/DateTimeFormatOptions[JT] val timeZone: js.UndefOr[String]
experimental/intl/DateTimeFormatOptions[JT] val timeZoneName: js.UndefOr[String]
experimental/intl/DateTimeFormatOptions[JT] val weekday: js.UndefOr[String]
experimental/intl/DateTimeFormatOptions[JT] val year: js.UndefOr[String]
experimental/intl/DateTimeFormatOptions[SO] def apply(localeMatcher: js.UndefOr[String] = js.undefined, timeZone: js.UndefOr[String] = js.undefined, hour12: js.UndefOr[Boolean] = js.undefined, formatMatcher: js.UndefOr[String] = js.undefined, weekday: js.UndefOr[String] = js.undefined, era: js.UndefOr[String] = js.undefined, year: js.UndefOr[String] = js.undefined, month: js.UndefOr[String] = js.undefined, day: js.UndefOr[String] = js.undefined, hour: js.UndefOr[String] = js.undefined, minute: js.UndefOr[String] = js.undefined, second: js.UndefOr[String] = js.undefined, timeZoneName: js.UndefOr[String] = js.undefined): DateTimeFormatOptions
experimental/intl/NumberFormat[JC] def format(number: Double): String
experimental/intl/NumberFormat[JC] def resolvedOptions(): NumberFormatOptions
experimental/intl/NumberFormat[JC] def supportedLocalesOf(locales: String | js.Array[String], options: js.Any): js.Array[String]
experimental/intl/NumberFormatOptions[JT] val currency: js.UndefOr[String]
experimental/intl/NumberFormatOptions[JT] val currencyDisplay: js.UndefOr[String]
experimental/intl/NumberFormatOptions[JT] val localeMatcher: js.UndefOr[String]
experimental/intl/NumberFormatOptions[JT] val maximumFractionDigits: js.UndefOr[Double]
experimental/intl/NumberFormatOptions[JT] val maximumSignificantDigits: js.UndefOr[Double]
experimental/intl/NumberFormatOptions[JT] val minimumFractionDigits: js.UndefOr[Double]
experimental/intl/NumberFormatOptions[JT] val minimumIntegerDigits: js.UndefOr[Double]
experimental/intl/NumberFormatOptions[JT] val minimumSignificantDigits: js.UndefOr[Double]
experimental/intl/NumberFormatOptions[JT] val style: js.UndefOr[String]
experimental/intl/NumberFormatOptions[JT] val useGrouping: js.UndefOr[Boolean]
experimental/intl/NumberFormatOptions[SO] def apply(localeMatcher: js.UndefOr[String] = js.undefined, style: js.UndefOr[String] = js.undefined, currency: js.UndefOr[String] = js.undefined, currencyDisplay: js.UndefOr[String] = js.undefined, useGrouping: js.UndefOr[Boolean] = js.undefined, minimumIntegerDigits: js.UndefOr[Double] = js.undefined, minimumFractionDigits: js.UndefOr[Double] = js.undefined, maximumFractionDigits: js.UndefOr[Double] = js.undefined, minimumSignificantDigits: js.UndefOr[Double] = js.undefined, maximumSignificantDigits: js.UndefOr[Double] = js.undefined): NumberFormatOptions
experimental/mediastream/AudioTrack[JT] var enabled: Boolean
experimental/mediastream/AudioTrack[JT] val id: String
experimental/mediastream/AudioTrack[JT] val kind: String
experimental/mediastream/AudioTrack[JT] val label: String
experimental/mediastream/AudioTrack[JT] val language: String
experimental/mediastream/AudioTrackList[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/AudioTrackList[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/AudioTrackList[JT] @JSBracketAccess def apply(index: Double): AudioTrack
experimental/mediastream/AudioTrackList[JT] def dispatchEvent(evt: Event): Boolean
experimental/mediastream/AudioTrackList[JT] def getTrackById(id: String): AudioTrack
experimental/mediastream/AudioTrackList[JT] def length: Double
experimental/mediastream/AudioTrackList[JT] var onaddtrack: js.Function1[Event, Any]
experimental/mediastream/AudioTrackList[JT] var onchange: js.Function1[Event, Any]
experimental/mediastream/AudioTrackList[JT] var onremovetrack: js.Function1[Event, Any]
experimental/mediastream/AudioTrackList[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/AudioTrackList[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/MediaDeviceInfo[JT] val deviceId: String
experimental/mediastream/MediaDeviceInfo[JT] val groupId: String
experimental/mediastream/MediaDeviceInfo[JT] val kind: MediaDeviceKind
experimental/mediastream/MediaDeviceInfo[JT] val label: String
experimental/mediastream/MediaDeviceInfo[SO] def apply(deviceId: js.UndefOr[String] = js.undefined, groupId: js.UndefOr[String] = js.undefined, kind: js.UndefOr[String] = js.undefined, label: js.UndefOr[String] = js.undefined): MediaDeviceInfo
experimental/mediastream/MediaDeviceKind[JT]
experimental/mediastream/MediaDeviceKind[SO] val audioinput = "audioinput".asInstanceOf[MediaDeviceKind]
experimental/mediastream/MediaDeviceKind[SO] val audiooutput = "audiooutput".asInstanceOf[MediaDeviceKind]
experimental/mediastream/MediaDeviceKind[SO] val videoinput = "videoinput".asInstanceOf[MediaDeviceKind]
experimental/mediastream/MediaDevices[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/MediaDevices[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/MediaDevices[JT] def dispatchEvent(evt: Event): Boolean
experimental/mediastream/MediaDevices[JT] def enumerateDevices(): js.Promise[js.Array[MediaDeviceInfo]]
experimental/mediastream/MediaDevices[JT] def getSupportedConstraints(): MediaTrackSupportedConstraints
experimental/mediastream/MediaDevices[JT] def getUserMedia(constraints: MediaStreamConstraints): js.Promise[MediaStream]
experimental/mediastream/MediaDevices[JT] var ondevicechange: js.Function1[Event, Any]
experimental/mediastream/MediaDevices[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/MediaDevices[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/MediaSource[JC] def activeSourceBuffers: SourceBufferList
experimental/mediastream/MediaSource[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/MediaSource[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/MediaSource[JC] def addSourceBuffer(mimeType: String): SourceBuffer
experimental/mediastream/MediaSource[JC] def clearLiveSeekableRange(): Unit
experimental/mediastream/MediaSource[JC] def dispatchEvent(evt: Event): Boolean
experimental/mediastream/MediaSource[JC] var duration: Double
experimental/mediastream/MediaSource[JC] def endOfStream(error: EndOfStreamError?): Unit
experimental/mediastream/MediaSource[JC] var onsourceclose: js.Function1[Event, Any]
experimental/mediastream/MediaSource[JC] var onsourceended: js.Function1[Event, Any]
experimental/mediastream/MediaSource[JC] var onsourceopen: js.Function1[Event, Any]
experimental/mediastream/MediaSource[JC] def readyState: ReadyState
experimental/mediastream/MediaSource[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/MediaSource[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/MediaSource[JC] def removeSourceBuffer(sourceBuffer: SourceBuffer): Unit
experimental/mediastream/MediaSource[JC] def setLiveSeekableRange(start: Double, end: Double): Unit
experimental/mediastream/MediaSource[JC] def sourceBuffers: SourceBufferList
experimental/mediastream/MediaSource[JO] def isTypeSupported(mediaType: String): Boolean
experimental/mediastream/MediaStream[JC] val active: Boolean
experimental/mediastream/MediaStream[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/MediaStream[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/MediaStream[JC] def addTrack(track: MediaStreamTrack): Unit
experimental/mediastream/MediaStream[JC] override def clone(): MediaStream
experimental/mediastream/MediaStream[JC] def dispatchEvent(evt: Event): Boolean
experimental/mediastream/MediaStream[JC] def getAudioTracks(): js.Array[MediaStreamTrack]
experimental/mediastream/MediaStream[JC] def getTrackById(trackId: String): MediaStreamTrack
experimental/mediastream/MediaStream[JC] def getTracks(): js.Array[MediaStreamTrack]
experimental/mediastream/MediaStream[JC] def getVideoTracks(): js.Array[MediaStreamTrack]
experimental/mediastream/MediaStream[JC] val id: String
experimental/mediastream/MediaStream[JC] var onaddtrack: js.Function1[Event, Any]
experimental/mediastream/MediaStream[JC] var onremovetrack: js.Function1[Event, Any]
experimental/mediastream/MediaStream[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/MediaStream[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/MediaStream[JC] def removeTrack(track: MediaStreamTrack): Unit
experimental/mediastream/MediaStreamConstraints[JT] var audio: Boolean | MediaTrackConstraints
experimental/mediastream/MediaStreamConstraints[JT] var peerIdentity: String
experimental/mediastream/MediaStreamConstraints[JT] var video: Boolean | MediaTrackConstraints
experimental/mediastream/MediaStreamConstraints[SO] def apply(video: js.UndefOr[Boolean | MediaTrackConstraints] = js.undefined, audio: js.UndefOr[Boolean | MediaTrackConstraints] = js.undefined, peerIdentity: js.UndefOr[String] = js.undefined): MediaStreamConstraints
experimental/mediastream/MediaStreamTrack[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/MediaStreamTrack[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/MediaStreamTrack[JT] def applyConstraints(constraints: MediaTrackConstraints): js.Promise[Unit]
experimental/mediastream/MediaStreamTrack[JT] override def clone(): MediaStreamTrack
experimental/mediastream/MediaStreamTrack[JT] def dispatchEvent(evt: Event): Boolean
experimental/mediastream/MediaStreamTrack[JT] var enabled: Boolean
experimental/mediastream/MediaStreamTrack[JT] def getCapabilities(): js.Any
experimental/mediastream/MediaStreamTrack[JT] def getConstraints(): MediaTrackConstraints
experimental/mediastream/MediaStreamTrack[JT] def getSettings(): js.Any
experimental/mediastream/MediaStreamTrack[JT] val id: String
experimental/mediastream/MediaStreamTrack[JT] val kind: String
experimental/mediastream/MediaStreamTrack[JT] val label: String
experimental/mediastream/MediaStreamTrack[JT] val muted: Boolean
experimental/mediastream/MediaStreamTrack[JT] var onended: js.Function1[Event, Any]
experimental/mediastream/MediaStreamTrack[JT] var onmute: js.Function1[Event, Any]
experimental/mediastream/MediaStreamTrack[JT] var onoverconstrained: js.Function1[Event, Any]
experimental/mediastream/MediaStreamTrack[JT] var onstarted: js.Function1[Event, Any]
experimental/mediastream/MediaStreamTrack[JT] var onunmute: js.Function1[Event, Any]
experimental/mediastream/MediaStreamTrack[JT] val readonly: Boolean
experimental/mediastream/MediaStreamTrack[JT] val readyState: MediaStreamTrackState
experimental/mediastream/MediaStreamTrack[JT] val remote: Boolean
experimental/mediastream/MediaStreamTrack[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/MediaStreamTrack[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/MediaStreamTrack[JT] def stop(): Unit
experimental/mediastream/MediaStreamTrack[SO] def apply(enabled: js.UndefOr[Boolean] = js.undefined, id: js.UndefOr[String] = js.undefined, kind: js.UndefOr[String] = js.undefined, label: js.UndefOr[String] = js.undefined, muted: js.UndefOr[Boolean] = js.undefined, readonly: js.UndefOr[Boolean] = js.undefined, readyState: js.UndefOr[String] = js.undefined, remote: js.UndefOr[Boolean] = js.undefined, onstarted: js.UndefOr[js.Function0[Any]] = js.undefined, onmute: js.UndefOr[js.Function0[Any]] = js.undefined, onunmute: js.UndefOr[js.Function0[Any]] = js.undefined, onoverconstrained: js.UndefOr[js.Function0[Any]] = js.undefined, oneended: js.UndefOr[js.Function0[Any]] = js.undefined): MediaStreamTrack
experimental/mediastream/MediaStreamTrackEvent[JC] def bubbles: Boolean
experimental/mediastream/MediaStreamTrackEvent[JC] def cancelBubble: Boolean
experimental/mediastream/MediaStreamTrackEvent[JC] def cancelable: Boolean
experimental/mediastream/MediaStreamTrackEvent[JC] def currentTarget: EventTarget
experimental/mediastream/MediaStreamTrackEvent[JC] def defaultPrevented: Boolean
experimental/mediastream/MediaStreamTrackEvent[JC] def eventPhase: Int
experimental/mediastream/MediaStreamTrackEvent[JC] def isTrusted: Boolean
experimental/mediastream/MediaStreamTrackEvent[JC] def preventDefault(): Unit
experimental/mediastream/MediaStreamTrackEvent[JC] def stopImmediatePropagation(): Unit
experimental/mediastream/MediaStreamTrackEvent[JC] def stopPropagation(): Unit
experimental/mediastream/MediaStreamTrackEvent[JC] def target: EventTarget
experimental/mediastream/MediaStreamTrackEvent[JC] def timeStamp: Double
experimental/mediastream/MediaStreamTrackEvent[JC] val track: MediaStreamTrack
experimental/mediastream/MediaStreamTrackEvent[JC] def `type`: String
experimental/mediastream/MediaStreamTrackEventInit[JT] var bubbles: js.UndefOr[Boolean]
experimental/mediastream/MediaStreamTrackEventInit[JT] var cancelable: js.UndefOr[Boolean]
experimental/mediastream/MediaStreamTrackEventInit[JT] var composed: js.UndefOr[Boolean]
experimental/mediastream/MediaStreamTrackEventInit[JT] var scoped: js.UndefOr[Boolean]
experimental/mediastream/MediaStreamTrackEventInit[JT] var track: js.UndefOr[MediaStreamTrack]
experimental/mediastream/MediaStreamTrackState[JT]
experimental/mediastream/MediaStreamTrackState[SO] val ended = "ended".asInstanceOf[MediaStreamTrackState]
experimental/mediastream/MediaStreamTrackState[SO] val live = "live".asInstanceOf[MediaStreamTrackState]
experimental/mediastream/MediaTrackConstraintSet[JT] var aspectRatio: Double
experimental/mediastream/MediaTrackConstraintSet[JT] var deviceId: String
experimental/mediastream/MediaTrackConstraintSet[JT] var echoCancellation: Boolean
experimental/mediastream/MediaTrackConstraintSet[JT] var facingMode: String
experimental/mediastream/MediaTrackConstraintSet[JT] var frameRate: Double
experimental/mediastream/MediaTrackConstraintSet[JT] var groupId: String
experimental/mediastream/MediaTrackConstraintSet[JT] var height: Double
experimental/mediastream/MediaTrackConstraintSet[JT] var sampleRate: Double
experimental/mediastream/MediaTrackConstraintSet[JT] var sampleSize: Double
experimental/mediastream/MediaTrackConstraintSet[JT] var volume: Double
experimental/mediastream/MediaTrackConstraintSet[JT] var width: Double
experimental/mediastream/MediaTrackConstraintSet[SO] def apply(width: js.UndefOr[Double] = js.undefined, height: js.UndefOr[Double] = js.undefined, aspectRatio: js.UndefOr[Double] = js.undefined, frameRate: js.UndefOr[Double] = js.undefined, facingMode: js.UndefOr[String] = js.undefined, volume: js.UndefOr[Double] = js.undefined, sampleRate: js.UndefOr[Double] = js.undefined, sampleSize: js.UndefOr[Double] = js.undefined, echoCancellation: js.UndefOr[Boolean] = js.undefined, deviceId: js.UndefOr[String] = js.undefined, groupId: js.UndefOr[String] = js.undefined): MediaTrackConstraintSet
experimental/mediastream/MediaTrackConstraints[JT] var advanced: js.Array[MediaTrackConstraintSet]
experimental/mediastream/MediaTrackConstraints[JT] var aspectRatio: Double
experimental/mediastream/MediaTrackConstraints[JT] var deviceId: String
experimental/mediastream/MediaTrackConstraints[JT] var echoCancellation: Boolean
experimental/mediastream/MediaTrackConstraints[JT] var facingMode: String
experimental/mediastream/MediaTrackConstraints[JT] var frameRate: Double
experimental/mediastream/MediaTrackConstraints[JT] var groupId: String
experimental/mediastream/MediaTrackConstraints[JT] var height: Double
experimental/mediastream/MediaTrackConstraints[JT] var sampleRate: Double
experimental/mediastream/MediaTrackConstraints[JT] var sampleSize: Double
experimental/mediastream/MediaTrackConstraints[JT] var volume: Double
experimental/mediastream/MediaTrackConstraints[JT] var width: Double
experimental/mediastream/MediaTrackConstraints[SO] def apply(advanced: js.UndefOr[js.Array[MediaTrackConstraintSet]] = js.undefined): MediaTrackConstraints
experimental/mediastream/MediaTrackSettings[JT] var aspectRatio: js.UndefOr[Double]
experimental/mediastream/MediaTrackSettings[JT] var channelCount: js.UndefOr[Double]
experimental/mediastream/MediaTrackSettings[JT] var deviceId: js.UndefOr[String]
experimental/mediastream/MediaTrackSettings[JT] var echoCancellation: js.UndefOr[Boolean]
experimental/mediastream/MediaTrackSettings[JT] var facingMode: js.UndefOr[String]
experimental/mediastream/MediaTrackSettings[JT] var frameRate: js.UndefOr[Double]
experimental/mediastream/MediaTrackSettings[JT] var groupId: js.UndefOr[String]
experimental/mediastream/MediaTrackSettings[JT] var height: js.UndefOr[Double]
experimental/mediastream/MediaTrackSettings[JT] var latency: js.UndefOr[Double]
experimental/mediastream/MediaTrackSettings[JT] var sampleRate: js.UndefOr[Double]
experimental/mediastream/MediaTrackSettings[JT] var sampleSize: js.UndefOr[Double]
experimental/mediastream/MediaTrackSettings[JT] var volume: js.UndefOr[Double]
experimental/mediastream/MediaTrackSettings[JT] var width: js.UndefOr[Double]
experimental/mediastream/MediaTrackSupportedConstraints[JT] var aspectRatio: js.UndefOr[Boolean]
experimental/mediastream/MediaTrackSupportedConstraints[JT] var channelCount: js.UndefOr[Boolean]
experimental/mediastream/MediaTrackSupportedConstraints[JT] var deviceId: js.UndefOr[Boolean]
experimental/mediastream/MediaTrackSupportedConstraints[JT] var echoCancellation: js.UndefOr[Boolean]
experimental/mediastream/MediaTrackSupportedConstraints[JT] var facingMode: js.UndefOr[Boolean]
experimental/mediastream/MediaTrackSupportedConstraints[JT] var frameRate: js.UndefOr[Boolean]
experimental/mediastream/MediaTrackSupportedConstraints[JT] var groupId: js.UndefOr[Boolean]
experimental/mediastream/MediaTrackSupportedConstraints[JT] var height: js.UndefOr[Boolean]
experimental/mediastream/MediaTrackSupportedConstraints[JT] var latency: js.UndefOr[Boolean]
experimental/mediastream/MediaTrackSupportedConstraints[JT] var sampleRate: js.UndefOr[Boolean]
experimental/mediastream/MediaTrackSupportedConstraints[JT] var sampleSize: js.UndefOr[Boolean]
experimental/mediastream/MediaTrackSupportedConstraints[JT] var volume: js.UndefOr[Boolean]
experimental/mediastream/MediaTrackSupportedConstraints[JT] var width: js.UndefOr[Boolean]
experimental/mediastream/SourceBuffer[JT] def abort(): Unit
experimental/mediastream/SourceBuffer[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/SourceBuffer[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/SourceBuffer[JT] def appendBuffer(data: BufferSource): Unit
experimental/mediastream/SourceBuffer[JT] var appendWindowEnd: Double
experimental/mediastream/SourceBuffer[JT] var appendWindowStart: Double
experimental/mediastream/SourceBuffer[JT] def audioTracks: AudioTrackList
experimental/mediastream/SourceBuffer[JT] def buffered: TimeRanges
experimental/mediastream/SourceBuffer[JT] def dispatchEvent(evt: Event): Boolean
experimental/mediastream/SourceBuffer[JT] var mode: AppendMode
experimental/mediastream/SourceBuffer[JT] var onabort: js.Function1[Event, Any]
experimental/mediastream/SourceBuffer[JT] var onerror: js.Function1[Event, Any]
experimental/mediastream/SourceBuffer[JT] var onupdate: js.Function1[Event, Any]
experimental/mediastream/SourceBuffer[JT] var onupdateend: js.Function1[Event, Any]
experimental/mediastream/SourceBuffer[JT] var onupdatestart: js.Function1[Event, Any]
experimental/mediastream/SourceBuffer[JT] def remove(start: Double, end: Double): Unit
experimental/mediastream/SourceBuffer[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/SourceBuffer[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/SourceBuffer[JT] def textTracks: TextTrackList
experimental/mediastream/SourceBuffer[JT] var timestampOffset: Double
experimental/mediastream/SourceBuffer[JT] def updating: Boolean
experimental/mediastream/SourceBuffer[JT] def videoTracks: VideoTrackList
experimental/mediastream/SourceBufferList[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/SourceBufferList[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/SourceBufferList[JT] @JSBracketAccess def apply(index: Double): SourceBuffer
experimental/mediastream/SourceBufferList[JT] def dispatchEvent(evt: Event): Boolean
experimental/mediastream/SourceBufferList[JT] def length: Double
experimental/mediastream/SourceBufferList[JT] var onaddsourcebuffer: js.Function1[Event, Any]
experimental/mediastream/SourceBufferList[JT] var onremovesourcebuffer: js.Function1[Event, Any]
experimental/mediastream/SourceBufferList[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/SourceBufferList[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/TextTrack[JT] def activeCues: TextTrackCueList
experimental/mediastream/TextTrack[JT] def addCue(cue: TextTrackCue): Unit
experimental/mediastream/TextTrack[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/TextTrack[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/TextTrack[JT] def cues: TextTrackCueList
experimental/mediastream/TextTrack[JT] def dispatchEvent(evt: Event): Boolean
experimental/mediastream/TextTrack[JT] val id: String
experimental/mediastream/TextTrack[JT] val inBandMetadataTrackDispatchType: String
experimental/mediastream/TextTrack[JT] val kind: String
experimental/mediastream/TextTrack[JT] val label: String
experimental/mediastream/TextTrack[JT] val language: String
experimental/mediastream/TextTrack[JT] var mode: TextTrackMode
experimental/mediastream/TextTrack[JT] var oncuechange: js.Function1[Event, Any]
experimental/mediastream/TextTrack[JT] def removeCue(cue: TextTrackCue): Unit
experimental/mediastream/TextTrack[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/TextTrack[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/TextTrackCue[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/TextTrackCue[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/TextTrackCue[JT] def dispatchEvent(evt: Event): Boolean
experimental/mediastream/TextTrackCue[JT] var endTime: Double
experimental/mediastream/TextTrackCue[JT] var id: String
experimental/mediastream/TextTrackCue[JT] var onenter: js.Function1[Event, Any]
experimental/mediastream/TextTrackCue[JT] var onexit: js.Function1[Event, Any]
experimental/mediastream/TextTrackCue[JT] var pauseOnExit: Boolean
experimental/mediastream/TextTrackCue[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/TextTrackCue[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/TextTrackCue[JT] var startTime: Double
experimental/mediastream/TextTrackCue[JT] def track: TextTrack
experimental/mediastream/TextTrackCueList[JT] @JSBracketAccess def apply(index: Double): TextTrackCue
experimental/mediastream/TextTrackCueList[JT] def getCueById(id: String): TextTrackCue
experimental/mediastream/TextTrackCueList[JT] def length: Double
experimental/mediastream/TextTrackList[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/TextTrackList[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/TextTrackList[JT] @JSBracketAccess def apply(index: Double): VideoTrack
experimental/mediastream/TextTrackList[JT] def dispatchEvent(evt: Event): Boolean
experimental/mediastream/TextTrackList[JT] def getTrackById(id: String): TextTrack
experimental/mediastream/TextTrackList[JT] def length: Double
experimental/mediastream/TextTrackList[JT] var onaddtrack: js.Function1[Event, Any]
experimental/mediastream/TextTrackList[JT] var onchange: js.Function1[Event, Any]
experimental/mediastream/TextTrackList[JT] var onremovetrack: js.Function1[Event, Any]
experimental/mediastream/TextTrackList[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/TextTrackList[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/VideoTrack[JT] val id: String
experimental/mediastream/VideoTrack[JT] val kind: String
experimental/mediastream/VideoTrack[JT] val label: String
experimental/mediastream/VideoTrack[JT] val language: String
experimental/mediastream/VideoTrack[JT] var selected: Boolean
experimental/mediastream/VideoTrackList[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/VideoTrackList[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/VideoTrackList[JT] @JSBracketAccess def apply(index: Double): VideoTrack
experimental/mediastream/VideoTrackList[JT] def dispatchEvent(evt: Event): Boolean
experimental/mediastream/VideoTrackList[JT] def getTrackById(id: String): VideoTrack
experimental/mediastream/VideoTrackList[JT] def length: Double
experimental/mediastream/VideoTrackList[JT] var onaddtrack: js.Function1[Event, Any]
experimental/mediastream/VideoTrackList[JT] var onchange: js.Function1[Event, Any]
experimental/mediastream/VideoTrackList[JT] var onremovetrack: js.Function1[Event, Any]
experimental/mediastream/VideoTrackList[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/mediastream/VideoTrackList[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/mediastream/VideoTrackList[JT] def selectedIndex: Double
experimental/mediastream/package[SO] type AppendMode = String
experimental/mediastream/package[SO] type BufferSource = js.typedarray.ArrayBufferView | js.typedarray.ArrayBuffer
experimental/mediastream/package[SO] type EndOfStreamError = String
experimental/mediastream/package[SO] type ReadyState = String
experimental/mediastream/package[SO] type TextTrackMode = String
experimental/package[SO] type BodyInit = Blob | BufferSource | FormData | String
experimental/package[SO] type ByteString = String
experimental/package[SO] type HeadersInit = Headers | Sequence[Sequence[ByteString]] | OpenEndedDictionary[ByteString]
experimental/package[SO] type OpenEndedDictionary[T] = js.Dictionary[T]
experimental/package[SO] type RequestInfo = String | Request
experimental/package[SO] type Sequence[T] = js.Array[T]
experimental/permissions/package[SO] def apply(permissionName: PermissionName): PermissionDescriptor
experimental/permissions/package[SO] def apply(permissionUserVisibleOnly: Boolean): PushPermissionDescriptor
experimental/permissions/package[SO] val denied = "denied".asInstanceOf[PermissionState]
experimental/permissions/package[SO] val geolocation = "geolocation".asInstanceOf[PermissionName]
experimental/permissions/package[SO] val granted = "granted".asInstanceOf[PermissionState]
experimental/permissions/package[SO] val midi = "midi".asInstanceOf[PermissionName]
experimental/permissions/package[SO] val name = PermissionName.push
experimental/permissions/package[SO] val name = permissionName
experimental/permissions/package[SO] val name: PermissionName
experimental/permissions/package[SO] val notifications = "notifications".asInstanceOf[PermissionName]
experimental/permissions/package[SO] var onchange: js.Function1[dom.Event, _]
experimental/permissions/package[SO] val permissions: Permissions
experimental/permissions/package[SO] val `persistent-storage` = "persistent-storage".asInstanceOf[PermissionName]
experimental/permissions/package[SO] val prompt = "prompt".asInstanceOf[PermissionState]
experimental/permissions/package[SO] val push = "push".asInstanceOf[PermissionName]
experimental/permissions/package[SO] def query(permissionDescriptor: PermissionDescriptor): js.Promise[PermissionStatus]
experimental/permissions/package[SO] val state: PermissionState
experimental/permissions/package[SO] implicit def toPermissions(navigator: dom.raw.Navigator): PermissionsNavigator
experimental/permissions/package[SO] val userVisibleOnly = permissionUserVisibleOnly
experimental/permissions/package[SO] val userVisibleOnly: Boolean
experimental/permissions/package.PermissionDescriptor[JT] val name: PermissionName
experimental/permissions/package.PermissionDescriptor[SO] def apply(permissionName: PermissionName): PermissionDescriptor
experimental/permissions/package.PermissionDescriptor[SO] val name = permissionName
experimental/permissions/package.PermissionName[JT]
experimental/permissions/package.PermissionName[SO] val geolocation = "geolocation".asInstanceOf[PermissionName]
experimental/permissions/package.PermissionName[SO] val midi = "midi".asInstanceOf[PermissionName]
experimental/permissions/package.PermissionName[SO] val notifications = "notifications".asInstanceOf[PermissionName]
experimental/permissions/package.PermissionName[SO] val `persistent-storage` = "persistent-storage".asInstanceOf[PermissionName]
experimental/permissions/package.PermissionName[SO] val push = "push".asInstanceOf[PermissionName]
experimental/permissions/package.PermissionState[JT]
experimental/permissions/package.PermissionState[SO] val denied = "denied".asInstanceOf[PermissionState]
experimental/permissions/package.PermissionState[SO] val granted = "granted".asInstanceOf[PermissionState]
experimental/permissions/package.PermissionState[SO] val prompt = "prompt".asInstanceOf[PermissionState]
experimental/permissions/package.PermissionStatus[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/permissions/package.PermissionStatus[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/permissions/package.PermissionStatus[JT] def dispatchEvent(evt: Event): Boolean
experimental/permissions/package.PermissionStatus[JT] var onchange: js.Function1[dom.Event, _]
experimental/permissions/package.PermissionStatus[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/permissions/package.PermissionStatus[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/permissions/package.PermissionStatus[JT] val state: PermissionState
experimental/permissions/package.Permissions[JT] def query(permissionDescriptor: PermissionDescriptor): js.Promise[PermissionStatus]
experimental/permissions/package.PermissionsNavigator[JT] val permissions: Permissions
experimental/permissions/package.PushPermissionDescriptor[JT] val name: PermissionName
experimental/permissions/package.PushPermissionDescriptor[JT] val userVisibleOnly: Boolean
experimental/permissions/package.PushPermissionDescriptor[SO] def apply(permissionUserVisibleOnly: Boolean): PushPermissionDescriptor
experimental/permissions/package.PushPermissionDescriptor[SO] val name = PermissionName.push
experimental/permissions/package.PushPermissionDescriptor[SO] val userVisibleOnly = permissionUserVisibleOnly
experimental/push/PushEncryptionKeyName[JT]
experimental/push/PushEncryptionKeyName[SO] val auth = "auth".asInstanceOf[PushEncryptionKeyName]
experimental/push/PushEncryptionKeyName[SO] val p256dh = "p256dh".asInstanceOf[PushEncryptionKeyName]
experimental/push/PushEvent[JT] def bubbles: Boolean
experimental/push/PushEvent[JT] def cancelBubble: Boolean
experimental/push/PushEvent[JT] def cancelable: Boolean
experimental/push/PushEvent[JT] def currentTarget: EventTarget
experimental/push/PushEvent[JT] val data: PushMessageData
experimental/push/PushEvent[JT] def defaultPrevented: Boolean
experimental/push/PushEvent[JT] def eventPhase: Int
experimental/push/PushEvent[JT] def isTrusted: Boolean
experimental/push/PushEvent[JT] def preventDefault(): Unit
experimental/push/PushEvent[JT] def stopImmediatePropagation(): Unit
experimental/push/PushEvent[JT] def stopPropagation(): Unit
experimental/push/PushEvent[JT] def target: EventTarget
experimental/push/PushEvent[JT] def timeStamp: Double
experimental/push/PushEvent[JT] def `type`: String
experimental/push/PushEvent[JT] def waitUntil(promise: js.Promise[Any]): Unit
experimental/push/PushManager[JT] def getSubscription(): js.Promise[PushSubscription]
experimental/push/PushManager[JT] def permissionState(options: PushSubscriptionOptions?): js.Promise[PushPermissionState]
experimental/push/PushManager[JT] def subscribe(options: PushSubscriptionOptions?): js.Promise[PushSubscription]
experimental/push/PushMessageData[JT] def arrayBuffer(): ArrayBuffer
experimental/push/PushMessageData[JT] def blob(): Blob
experimental/push/PushMessageData[JT] def json(): js.Any
experimental/push/PushMessageData[JT] def text(): String
experimental/push/PushPermissionState[JT]
experimental/push/PushPermissionState[SO] val denied = "denied".asInstanceOf[PushPermissionState]
experimental/push/PushPermissionState[SO] val granted = "granted".asInstanceOf[PushPermissionState]
experimental/push/PushPermissionState[SO] val prompt = "prompt".asInstanceOf[PushPermissionState]
experimental/push/PushSubscription[JT] val endpoint: String
experimental/push/PushSubscription[JT] val expirationTime: java.lang.Double
experimental/push/PushSubscription[JT] def getKey(name: PushEncryptionKeyName): ArrayBuffer
experimental/push/PushSubscription[JT] val options: PushSubscriptionOptions
experimental/push/PushSubscription[JT] def toJSON(): PushSubscriptionJSON
experimental/push/PushSubscription[JT] def unsubscribe(): js.Promise[Boolean]
experimental/push/PushSubscriptionJSON[JT] val endpoint: String
experimental/push/PushSubscriptionJSON[JT] val expirationTime: java.lang.Double
experimental/push/PushSubscriptionJSON[JT] val keys: js.Dictionary[String]
experimental/push/PushSubscriptionOptions[JT] var applicationServerKey: js.UndefOr[Uint8Array]
experimental/push/PushSubscriptionOptions[JT] var userVisibleOnly: js.UndefOr[Boolean]
experimental/push/package[SO] var onpush: js.Function1[PushEvent, _]
experimental/push/package[SO] var onpushsubscriptionchange: js.Function1[PushEvent, _]
experimental/push/package[SO] val pushManager: PushManager
experimental/push/package[SO] implicit def pushServiceWorkerGlobalScope(swgs: ServiceWorkerGlobalScope): PushServiceWorkerGlobalScope
experimental/push/package[SO] implicit def pushServiceWorkerRegistration(swr: ServiceWorkerRegistration): PushServiceWorkerRegistration
experimental/push/package.PushServiceWorkerGlobalScope[JT] var onpush: js.Function1[PushEvent, _]
experimental/push/package.PushServiceWorkerGlobalScope[JT] var onpushsubscriptionchange: js.Function1[PushEvent, _]
experimental/push/package.PushServiceWorkerRegistration[JT] val pushManager: PushManager
experimental/serviceworkers/Cache[JC] def add(request: RequestInfo): js.Promise[Unit]  (@deprecated in 1.2.0)
experimental/serviceworkers/Cache[JC] def addAll(requests: js.Array[RequestInfo]): js.Promise[Unit]  (@deprecated in 1.2.0)
experimental/serviceworkers/Cache[JC] def delete(request: RequestInfo, options: js.UndefOr[CacheQueryOptions]?): js.Promise[Boolean]  (@deprecated in 1.2.0)
experimental/serviceworkers/Cache[JC] def keys(request: js.UndefOr[RequestInfo]?, options: js.UndefOr[CacheQueryOptions]?): js.Promise[js.Array[Request]]  (@deprecated in 1.2.0)
experimental/serviceworkers/Cache[JC] def `match`(request: RequestInfo, options: js.UndefOr[CacheQueryOptions]?): js.Promise[js.UndefOr[Response]]  (@deprecated in 1.2.0)
experimental/serviceworkers/Cache[JC] def matchAll(request: RequestInfo?, options: js.UndefOr[CacheQueryOptions]?): js.Promise[js.Array[Response]]  (@deprecated in 1.2.0)
experimental/serviceworkers/Cache[JC] def put(request: RequestInfo, response: Response): js.Promise[Unit]  (@deprecated in 1.2.0)
experimental/serviceworkers/CacheQueryOptions[JT] var cacheName: String  (@deprecated in 1.2.0)
experimental/serviceworkers/CacheQueryOptions[JT] var ignoreMethod: Boolean  (@deprecated in 1.2.0)
experimental/serviceworkers/CacheQueryOptions[JT] var ignoreSearch: Boolean  (@deprecated in 1.2.0)
experimental/serviceworkers/CacheQueryOptions[JT] var ignoreVary: Boolean  (@deprecated in 1.2.0)
experimental/serviceworkers/CacheStorage[JT] def delete(cacheName: String): js.Promise[Boolean]  (@deprecated in 1.2.0)
experimental/serviceworkers/CacheStorage[JT] def has(cacheName: String): js.Promise[Boolean]  (@deprecated in 1.2.0)
experimental/serviceworkers/CacheStorage[JT] def keys(): js.Promise[js.Array[String]]  (@deprecated in 1.2.0)
experimental/serviceworkers/CacheStorage[JT] def `match`(request: RequestInfo, options: CacheQueryOptions?): js.Promise[js.Any]  (@deprecated in 1.2.0)
experimental/serviceworkers/CacheStorage[JT] def open(cacheName: String): js.Promise[Cache]  (@deprecated in 1.2.0)
experimental/serviceworkers/CanvasProxy[JT] def setContext(context: RenderingContext): Unit
experimental/serviceworkers/Client[JT] def frameType: FrameType
experimental/serviceworkers/Client[JT] def id: String
experimental/serviceworkers/Client[JT] def postMessage(message: Any, transfer: Sequence[Transferable] = null): Unit
experimental/serviceworkers/Client[JT] def url: String
experimental/serviceworkers/ClientQueryOptions[JT] var includeUncontrolled: Boolean
experimental/serviceworkers/ClientQueryOptions[JT] var `type`: ClientType
experimental/serviceworkers/ClientType[JT]
experimental/serviceworkers/ClientType[SO] val all = "all".asInstanceOf[ClientType]
experimental/serviceworkers/ClientType[SO] val sharedworker = "sharedworker".asInstanceOf[ClientType]
experimental/serviceworkers/ClientType[SO] val window = "window".asInstanceOf[ClientType]
experimental/serviceworkers/ClientType[SO] val worker = "worker".asInstanceOf[ClientType]
experimental/serviceworkers/Clients[JT] def claim(): js.Promise[Unit]
experimental/serviceworkers/Clients[JT] def get(id: String): js.Promise[js.UndefOr[Client]]
experimental/serviceworkers/Clients[JT] def matchAll(options: js.UndefOr[ClientQueryOptions]?): js.Promise[js.Array[Client]]
experimental/serviceworkers/Clients[JT] def openWindow(url: String): js.Promise[WindowClient]
experimental/serviceworkers/ExtendableEvent[JC] def bubbles: Boolean
experimental/serviceworkers/ExtendableEvent[JC] def cancelBubble: Boolean
experimental/serviceworkers/ExtendableEvent[JC] def cancelable: Boolean
experimental/serviceworkers/ExtendableEvent[JC] def currentTarget: EventTarget
experimental/serviceworkers/ExtendableEvent[JC] def defaultPrevented: Boolean
experimental/serviceworkers/ExtendableEvent[JC] def eventPhase: Int
experimental/serviceworkers/ExtendableEvent[JC] def isTrusted: Boolean
experimental/serviceworkers/ExtendableEvent[JC] def preventDefault(): Unit
experimental/serviceworkers/ExtendableEvent[JC] def stopImmediatePropagation(): Unit
experimental/serviceworkers/ExtendableEvent[JC] def stopPropagation(): Unit
experimental/serviceworkers/ExtendableEvent[JC] def target: EventTarget
experimental/serviceworkers/ExtendableEvent[JC] def timeStamp: Double
experimental/serviceworkers/ExtendableEvent[JC] def `type`: String
experimental/serviceworkers/ExtendableEvent[JC] def waitUntil(promise: js.Promise[Any]): Unit
experimental/serviceworkers/ExtendableEventInit[JT] var bubbles: js.UndefOr[Boolean]
experimental/serviceworkers/ExtendableEventInit[JT] var cancelable: js.UndefOr[Boolean]
experimental/serviceworkers/ExtendableEventInit[JT] var composed: js.UndefOr[Boolean]
experimental/serviceworkers/ExtendableEventInit[JT] var scoped: js.UndefOr[Boolean]
experimental/serviceworkers/ExtendableMessageEvent[JC] def bubbles: Boolean
experimental/serviceworkers/ExtendableMessageEvent[JC] def cancelBubble: Boolean
experimental/serviceworkers/ExtendableMessageEvent[JC] def cancelable: Boolean
experimental/serviceworkers/ExtendableMessageEvent[JC] def currentTarget: EventTarget
experimental/serviceworkers/ExtendableMessageEvent[JC] val data: Any
experimental/serviceworkers/ExtendableMessageEvent[JC] def defaultPrevented: Boolean
experimental/serviceworkers/ExtendableMessageEvent[JC] def eventPhase: Int
experimental/serviceworkers/ExtendableMessageEvent[JC] def isTrusted: Boolean
experimental/serviceworkers/ExtendableMessageEvent[JC] val lastEventId: String
experimental/serviceworkers/ExtendableMessageEvent[JC] val origin: String
experimental/serviceworkers/ExtendableMessageEvent[JC] def ports: js.Array[MessagePort]
experimental/serviceworkers/ExtendableMessageEvent[JC] def preventDefault(): Unit
experimental/serviceworkers/ExtendableMessageEvent[JC] def source: ServiceWorker | MessagePort
experimental/serviceworkers/ExtendableMessageEvent[JC] def stopImmediatePropagation(): Unit
experimental/serviceworkers/ExtendableMessageEvent[JC] def stopPropagation(): Unit
experimental/serviceworkers/ExtendableMessageEvent[JC] def target: EventTarget
experimental/serviceworkers/ExtendableMessageEvent[JC] def timeStamp: Double
experimental/serviceworkers/ExtendableMessageEvent[JC] def `type`: String
experimental/serviceworkers/ExtendableMessageEvent[JC] def waitUntil(promise: js.Promise[Any]): Unit
experimental/serviceworkers/ExtendableMessageEventInit[JT] var bubbles: js.UndefOr[Boolean]
experimental/serviceworkers/ExtendableMessageEventInit[JT] var cancelable: js.UndefOr[Boolean]
experimental/serviceworkers/ExtendableMessageEventInit[JT] var composed: js.UndefOr[Boolean]
experimental/serviceworkers/ExtendableMessageEventInit[JT] var data: js.UndefOr[Any]
experimental/serviceworkers/ExtendableMessageEventInit[JT] var lastEventId: js.UndefOr[String]
experimental/serviceworkers/ExtendableMessageEventInit[JT] var origin: js.UndefOr[String]
experimental/serviceworkers/ExtendableMessageEventInit[JT] var ports: js.UndefOr[js.Array[MessagePort]]
experimental/serviceworkers/ExtendableMessageEventInit[JT] var scoped: js.UndefOr[Boolean]
experimental/serviceworkers/ExtendableMessageEventInit[JT] var source: js.UndefOr[Client | ServiceWorker | MessagePort]
experimental/serviceworkers/FetchEvent[JC] def bubbles: Boolean
experimental/serviceworkers/FetchEvent[JC] def cancelBubble: Boolean
experimental/serviceworkers/FetchEvent[JC] def cancelable: Boolean
experimental/serviceworkers/FetchEvent[JC] def clientId: String
experimental/serviceworkers/FetchEvent[JC] def currentTarget: EventTarget
experimental/serviceworkers/FetchEvent[JC] def defaultPrevented: Boolean
experimental/serviceworkers/FetchEvent[JC] def eventPhase: Int
experimental/serviceworkers/FetchEvent[JC] def isReload: Boolean
experimental/serviceworkers/FetchEvent[JC] def isTrusted: Boolean
experimental/serviceworkers/FetchEvent[JC] def preloadResponse: js.Promise[js.UndefOr[Response]]
experimental/serviceworkers/FetchEvent[JC] def preventDefault(): Unit
experimental/serviceworkers/FetchEvent[JC] def replacesClientId: String
experimental/serviceworkers/FetchEvent[JC] def request: Request
experimental/serviceworkers/FetchEvent[JC] def respondWith(promisedResponse: Response | js.Promise[Response]): Unit
experimental/serviceworkers/FetchEvent[JC] def resultingClientId: String
experimental/serviceworkers/FetchEvent[JC] def stopImmediatePropagation(): Unit
experimental/serviceworkers/FetchEvent[JC] def stopPropagation(): Unit
experimental/serviceworkers/FetchEvent[JC] def target: EventTarget
experimental/serviceworkers/FetchEvent[JC] def timeStamp: Double
experimental/serviceworkers/FetchEvent[JC] def `type`: String
experimental/serviceworkers/FetchEvent[JC] def waitUntil(promise: js.Promise[Any]): Unit
experimental/serviceworkers/FetchEventInit[JT] var bubbles: js.UndefOr[Boolean]
experimental/serviceworkers/FetchEventInit[JT] var cancelable: js.UndefOr[Boolean]
experimental/serviceworkers/FetchEventInit[JT] var clientId: js.UndefOr[String]
experimental/serviceworkers/FetchEventInit[JT] var composed: js.UndefOr[Boolean]
experimental/serviceworkers/FetchEventInit[JT] var isReload: js.UndefOr[Boolean]
experimental/serviceworkers/FetchEventInit[JT] var request: js.UndefOr[Request]
experimental/serviceworkers/FetchEventInit[JT] var scoped: js.UndefOr[Boolean]
experimental/serviceworkers/FrameType[JT]
experimental/serviceworkers/FrameType[SO] val auxiliary = "auxiliary".asInstanceOf[FrameType]
experimental/serviceworkers/FrameType[SO] val nested = "nested".asInstanceOf[FrameType]
experimental/serviceworkers/FrameType[SO] val none = "none".asInstanceOf[FrameType]
experimental/serviceworkers/FrameType[SO] val `top-level` = "top-level".asInstanceOf[FrameType]
experimental/serviceworkers/GetNotificationOptions[JT] var tag: js.UndefOr[String]
experimental/serviceworkers/ServiceWorker[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/serviceworkers/ServiceWorker[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/serviceworkers/ServiceWorker[JT] def dispatchEvent(evt: Event): Boolean
experimental/serviceworkers/ServiceWorker[JT] var onstatechange: js.Function1[Event, _]
experimental/serviceworkers/ServiceWorker[JT] def postMessage(message: js.Any, transfer: js.Array[Transferable]?): Unit
experimental/serviceworkers/ServiceWorker[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/serviceworkers/ServiceWorker[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/serviceworkers/ServiceWorker[JT] def scriptURL: String
experimental/serviceworkers/ServiceWorker[JT] def state: String
experimental/serviceworkers/ServiceWorkerContainer[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/serviceworkers/ServiceWorkerContainer[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/serviceworkers/ServiceWorkerContainer[JT] def controller: ServiceWorker
experimental/serviceworkers/ServiceWorkerContainer[JT] def dispatchEvent(evt: Event): Boolean
experimental/serviceworkers/ServiceWorkerContainer[JT] def getRegistration(scope: String = ""): js.Promise[js.UndefOr[ServiceWorkerRegistration]]
experimental/serviceworkers/ServiceWorkerContainer[JT] def getRegistrations(): js.Promise[js.Array[ServiceWorkerRegistration]]
experimental/serviceworkers/ServiceWorkerContainer[JT] var oncontrollerchange: js.Function1[Event, _]
experimental/serviceworkers/ServiceWorkerContainer[JT] var onmessage: js.Function1[MessageEvent, _]
experimental/serviceworkers/ServiceWorkerContainer[JT] def ready: js.Promise[ServiceWorkerRegistration]
experimental/serviceworkers/ServiceWorkerContainer[JT] def register(scriptURL: String, options: js.Object = new js.Object()): js.Promise[ServiceWorkerRegistration]
experimental/serviceworkers/ServiceWorkerContainer[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/serviceworkers/ServiceWorkerContainer[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/serviceworkers/ServiceWorkerGlobalScope[JO] def self: ServiceWorkerGlobalScope
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def atob(encodedString: String): String
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def btoa(rawString: String): String
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def caches: js.UndefOr[CacheStorage]
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def clearInterval(handle: Int): Unit
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def clearTimeout(handle: Int): Unit
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def clients: Clients
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def close(): Unit
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput): js.Promise[ImageBitmap]
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double): js.Promise[ImageBitmap]
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def crossOriginIsolated: Boolean
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def dispatchEvent(evt: Event): Boolean
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def fetch(info: RequestInfo, init: RequestInit = null): js.Promise[Response]
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def importScripts(urls: js.Array[String]): Unit
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def indexedDB: js.UndefOr[IDBFactory]
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def isSecureContext: Boolean
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def location: WorkerLocation
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def navigator: WorkerNavigator
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] var onError: js.Function1[ErrorEvent, _]
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] var onactivate: js.Function1[ExtendableEvent, _]
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] var onfetch: js.Function1[FetchEvent, _]
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] var oninstall: js.Function1[ExtendableEvent, _]
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] var onlanguagechange: js.Function1[Event, _]
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] var onmessage: js.Function1[MessageEvent, _]
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] var onoffline: js.Function1[Event, _]
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] var ononline: js.Function1[Event, _]
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def origin: String
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def queueMicrotask(function: js.Function0[Any]): Unit
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def registration: ServiceWorkerRegistration
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def self: this.type
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def setInterval(handler: js.Function0[Any], timeout: Double): Int
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def setTimeout(handler: js.Function0[Any], timeout: Double): Int
experimental/serviceworkers/ServiceWorkerGlobalScope[JT] def skipWaiting(): js.Promise[Unit]
experimental/serviceworkers/ServiceWorkerMessageEventInit[JT] var bubbles: js.UndefOr[Boolean]
experimental/serviceworkers/ServiceWorkerMessageEventInit[JT] var cancelable: js.UndefOr[Boolean]
experimental/serviceworkers/ServiceWorkerMessageEventInit[JT] var composed: js.UndefOr[Boolean]
experimental/serviceworkers/ServiceWorkerMessageEventInit[JT] var data: js.UndefOr[Any]
experimental/serviceworkers/ServiceWorkerMessageEventInit[JT] var lastEventId: js.UndefOr[String]
experimental/serviceworkers/ServiceWorkerMessageEventInit[JT] var origin: js.UndefOr[String]
experimental/serviceworkers/ServiceWorkerMessageEventInit[JT] var ports: js.UndefOr[js.Array[MessagePort]]
experimental/serviceworkers/ServiceWorkerMessageEventInit[JT] var scoped: js.UndefOr[Boolean]
experimental/serviceworkers/ServiceWorkerMessageEventInit[JT] var source: js.UndefOr[ServiceWorker | MessagePort]
experimental/serviceworkers/ServiceWorkerRegistration[JT] var active: ServiceWorker
experimental/serviceworkers/ServiceWorkerRegistration[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/serviceworkers/ServiceWorkerRegistration[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/serviceworkers/ServiceWorkerRegistration[JT] def dispatchEvent(evt: Event): Boolean
experimental/serviceworkers/ServiceWorkerRegistration[JT] def getNotifications(options: GetNotificationOptions = ???): js.Promise[Sequence[Notification]]
experimental/serviceworkers/ServiceWorkerRegistration[JT] var installing: ServiceWorker
experimental/serviceworkers/ServiceWorkerRegistration[JT] var onupdatefound: js.Function1[Event, _]
experimental/serviceworkers/ServiceWorkerRegistration[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/serviceworkers/ServiceWorkerRegistration[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/serviceworkers/ServiceWorkerRegistration[JT] var scope: String
experimental/serviceworkers/ServiceWorkerRegistration[JT] def showNotification(title: String, options: NotificationOptions = ???): js.Promise[Unit]
experimental/serviceworkers/ServiceWorkerRegistration[JT] def unregister(): js.Promise[Boolean]
experimental/serviceworkers/ServiceWorkerRegistration[JT] def update(): js.Promise[Unit]
experimental/serviceworkers/ServiceWorkerRegistration[JT] var waiting: ServiceWorker
experimental/serviceworkers/ServiceWorkerState[JT]
experimental/serviceworkers/ServiceWorkerState[SO] val activated = "activated".asInstanceOf[ServiceWorkerState]
experimental/serviceworkers/ServiceWorkerState[SO] val activating = "activating".asInstanceOf[ServiceWorkerState]
experimental/serviceworkers/ServiceWorkerState[SO] val installed = "installed".asInstanceOf[ServiceWorkerState]
experimental/serviceworkers/ServiceWorkerState[SO] val installing = "installing".asInstanceOf[ServiceWorkerState]
experimental/serviceworkers/ServiceWorkerState[SO] val redundant = "redundant".asInstanceOf[ServiceWorkerState]
experimental/serviceworkers/WindowClient[JT] def focus(): js.Promise[WindowClient]
experimental/serviceworkers/WindowClient[JT] def focused: Boolean
experimental/serviceworkers/WindowClient[JT] def frameType: FrameType
experimental/serviceworkers/WindowClient[JT] def id: String
experimental/serviceworkers/WindowClient[JT] def navigate(url: String): js.Promise[WindowClient]
experimental/serviceworkers/WindowClient[JT] def postMessage(message: Any, transfer: Sequence[Transferable] = null): Unit
experimental/serviceworkers/WindowClient[JT] def url: String
experimental/serviceworkers/WindowClient[JT] def visibilityState: String
experimental/serviceworkers/package[SO] type Transferable = org.scalajs.dom.raw.Transferable | CanvasProxy
experimental/serviceworkers/package[SO] val serviceWorker: ServiceWorkerContainer
experimental/serviceworkers/package[SO] implicit def toServiceWorkerNavigator(n: Navigator): ServiceWorkerNavigator
experimental/serviceworkers/package.ServiceWorkerNavigator[JT] val serviceWorker: ServiceWorkerContainer
experimental/sharedworkers/SharedWorker[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/sharedworkers/SharedWorker[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/sharedworkers/SharedWorker[JC] def dispatchEvent(evt: Event): Boolean
experimental/sharedworkers/SharedWorker[JC] var onerror: js.Function1[ErrorEvent, _]
experimental/sharedworkers/SharedWorker[JC] def port: MessagePort
experimental/sharedworkers/SharedWorker[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/sharedworkers/SharedWorker[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/sharedworkers/SharedWorkerGlobalScope[JO] def self: SharedWorkerGlobalScope
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def applicationCache: ApplicationCache
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def atob(encodedString: String): String
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def btoa(rawString: String): String
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def caches: js.UndefOr[CacheStorage]
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def clearInterval(handle: Int): Unit
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def clearTimeout(handle: Int): Unit
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def close(): Unit
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput): js.Promise[ImageBitmap]
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double): js.Promise[ImageBitmap]
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def crossOriginIsolated: Boolean
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def dispatchEvent(evt: Event): Boolean
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def fetch(info: RequestInfo, init: RequestInit = null): js.Promise[Response]
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def importScripts(urls: js.Array[String]): Unit
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def indexedDB: js.UndefOr[IDBFactory]
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def isSecureContext: Boolean
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def location: WorkerLocation
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def name: String
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def navigator: WorkerNavigator
experimental/sharedworkers/SharedWorkerGlobalScope[JT] var onError: js.Function1[ErrorEvent, _]
experimental/sharedworkers/SharedWorkerGlobalScope[JT] var onconnect: js.Function1[ExtendableMessageEvent, _]
experimental/sharedworkers/SharedWorkerGlobalScope[JT] var onlanguagechange: js.Function1[Event, _]
experimental/sharedworkers/SharedWorkerGlobalScope[JT] var onoffline: js.Function1[Event, _]
experimental/sharedworkers/SharedWorkerGlobalScope[JT] var ononline: js.Function1[Event, _]
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def origin: String
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def queueMicrotask(function: js.Function0[Any]): Unit
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def self: this.type
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def setInterval(handler: js.Function0[Any], timeout: Double): Int
experimental/sharedworkers/SharedWorkerGlobalScope[JT] def setTimeout(handler: js.Function0[Any], timeout: Double): Int
experimental/storage/package[SO] def estimate(): js.Promise[StorageEstimate]
experimental/storage/package[SO] def persist(): js.Promise[Boolean]
experimental/storage/package[SO] def persisted(): js.Promise[Boolean]
experimental/storage/package[SO] val quota: Double
experimental/storage/package[SO] val storage: StorageManager
experimental/storage/package[SO] implicit def toNavigatorStorage(navigator: dom.Navigator): NavigatorStorage
experimental/storage/package[SO] val usage: Double
experimental/storage/package.NavigatorStorage[JT] val storage: StorageManager
experimental/storage/package.StorageEstimate[JT] val quota: Double
experimental/storage/package.StorageEstimate[JT] val usage: Double
experimental/storage/package.StorageManager[JT] def estimate(): js.Promise[StorageEstimate]
experimental/storage/package.StorageManager[JT] def persist(): js.Promise[Boolean]
experimental/storage/package.StorageManager[JT] def persisted(): js.Promise[Boolean]
experimental/webgl/ANGLE_instanced_arrays[SO]
experimental/webgl/EXT_blend_minmax[SO]
experimental/webgl/EXT_color_buffer_half_float[SO]
experimental/webgl/EXT_disjoint_timer_query[SO]
experimental/webgl/EXT_frag_depth[SO]
experimental/webgl/EXT_sRGB[SO]
experimental/webgl/EXT_shader_texture_lod[SO]
experimental/webgl/EXT_texture_filter_anisotropic[SO]
experimental/webgl/OES_element_index_uint[SO]
experimental/webgl/OES_standard_derivatives[SO]
experimental/webgl/OES_texture_float[SO]
experimental/webgl/OES_texture_float_linear[SO]
experimental/webgl/OES_texture_half_float[SO]
experimental/webgl/OES_texture_half_float_linear[SO]
experimental/webgl/OES_vertex_array_object[SO]
experimental/webgl/WEBGL_color_buffer_float[SO]
experimental/webgl/WEBGL_compressed_texture_atc[SO]
experimental/webgl/WEBGL_compressed_texture_etc1[SO]
experimental/webgl/WEBGL_compressed_texture_pvrtc[SO]
experimental/webgl/WEBGL_compressed_texture_s3tc[SO]
experimental/webgl/WEBGL_debug_renderer_info[SO]
experimental/webgl/WEBGL_debug_shaders[SO]
experimental/webgl/WEBGL_depth_texture[SO]
experimental/webgl/WEBGL_draw_buffers[SO]
experimental/webgl/WEBGL_lose_context[SO]
experimental/webgl/WebGLExtensionIdentifier[SC]
experimental/webgl/extensions/ANGLEInstancedArrays[JT] val VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: Int
experimental/webgl/extensions/ANGLEInstancedArrays[JT] def drawArraysInstancedANGLE(mode: Int, first: Int, count: Int, primcount: Int): Unit
experimental/webgl/extensions/ANGLEInstancedArrays[JT] def drawElementsInstancedANGLE(mode: Int, count: Int, `type`: Int, offset: Int, primcount: Int): Unit
experimental/webgl/extensions/ANGLEInstancedArrays[JT] def vertexAttribDivisorANGLE(index: Int, divisor: Int): Unit
experimental/webgl/extensions/EXTBlendMinmax[JT] val MAX_EXT: Int
experimental/webgl/extensions/EXTBlendMinmax[JT] val MIN_EXT: Int
experimental/webgl/extensions/EXTColorBufferHalfFloat[JT] val FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: Int
experimental/webgl/extensions/EXTColorBufferHalfFloat[JT] val RGB16F_EXT: Int
experimental/webgl/extensions/EXTColorBufferHalfFloat[JT] val RGBA16F_EXT: Int
experimental/webgl/extensions/EXTColorBufferHalfFloat[JT] val UNSIGNED_NORMALIZED_EXT: Int
experimental/webgl/extensions/EXTDisjointTimerQuery[JT] val CURRENT_QUERY_EXT: Int
experimental/webgl/extensions/EXTDisjointTimerQuery[JT] val GPU_DISJOINT_EXT: Int
experimental/webgl/extensions/EXTDisjointTimerQuery[JT] val QUERY_COUNTER_BITS_EXT: Int
experimental/webgl/extensions/EXTDisjointTimerQuery[JT] val QUERY_RESULT_AVAILABLE_EXT: Int
experimental/webgl/extensions/EXTDisjointTimerQuery[JT] val QUERY_RESULT_EXT: Int
experimental/webgl/extensions/EXTDisjointTimerQuery[JT] val TIMESTAMP_EXT: Int
experimental/webgl/extensions/EXTDisjointTimerQuery[JT] val TIME_ELAPSED_EXT: Int
experimental/webgl/extensions/EXTDisjointTimerQuery[JT] def beginQueryEXT(target: Int, query: WebGLTimerQueryEXT): Unit
experimental/webgl/extensions/EXTDisjointTimerQuery[JT] def createQueryEXT(): WebGLTimerQueryEXT
experimental/webgl/extensions/EXTDisjointTimerQuery[JT] def deleteQueryEXT(query: WebGLTimerQueryEXT): Unit
experimental/webgl/extensions/EXTDisjointTimerQuery[JT] def endQueryEXT(target: Int): Unit
experimental/webgl/extensions/EXTDisjointTimerQuery[JT] def getQueryEXT(target: Int, pname: Int): js.Any
experimental/webgl/extensions/EXTDisjointTimerQuery[JT] def getQueryObjectEXT(target: Int, pname: Int): js.Any
experimental/webgl/extensions/EXTDisjointTimerQuery[JT] def isQueryEXT(query: WebGLTimerQueryEXT): Boolean
experimental/webgl/extensions/EXTDisjointTimerQuery[JT] def queryCounterEXT(query: WebGLTimerQueryEXT, target: Int): Unit
experimental/webgl/extensions/EXTFragDepth[JT]
experimental/webgl/extensions/EXTShaderTextureLOD[JT]
experimental/webgl/extensions/EXTTextureFilterAnisotropic[JT] val MAX_TEXTURE_MAX_ANISOTROPY_EXT: Int
experimental/webgl/extensions/EXTTextureFilterAnisotropic[JT] val TEXTURE_MAX_ANISOTROPY_EXT: Int
experimental/webgl/extensions/EXTsRGB[JT] val FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: Int
experimental/webgl/extensions/EXTsRGB[JT] val SRGB8_ALPHA8_EXT: Int
experimental/webgl/extensions/EXTsRGB[JT] val SRGB_ALPHA_EXT: Int
experimental/webgl/extensions/EXTsRGB[JT] val SRGB_EXT: Int
experimental/webgl/extensions/OESElementIndexUint[JT]
experimental/webgl/extensions/OESStandardDerivatives[JT] val FRAGMENT_SHADER_DERIVATIVE_HINT_OES: Int
experimental/webgl/extensions/OESTextureFloat[JT]
experimental/webgl/extensions/OESTextureFloatLinear[JT]
experimental/webgl/extensions/OESTextureHalfFloat[JT] val HALF_FLOAT_OES: Int
experimental/webgl/extensions/OESTextureHalfFloatLinear[JT]
experimental/webgl/extensions/OESVertexArrayObject[JT] val VERTEX_ARRAY_BINDING_OES: Int
experimental/webgl/extensions/OESVertexArrayObject[JT] def bindVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES): Unit
experimental/webgl/extensions/OESVertexArrayObject[JT] def createVertexArrayOES(): WebGLVertexArrayObjectOES
experimental/webgl/extensions/OESVertexArrayObject[JT] def deleteVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES): Unit
experimental/webgl/extensions/OESVertexArrayObject[JT] def isVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES): Boolean
experimental/webgl/extensions/WEBGLColorBufferFloat[JT] val FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: Int
experimental/webgl/extensions/WEBGLColorBufferFloat[JT] val RGBA32F_EXT: Int
experimental/webgl/extensions/WEBGLColorBufferFloat[JT] val UNSIGNED_NORMALIZED_EXT: Int
experimental/webgl/extensions/WEBGLCompressedTextureETC1[JT] val COMPRESSED_RGB_ETC1_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT0_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT10_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT11_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT12_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT13_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT14_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT15_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT1_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT2_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT3_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT4_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT5_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT6_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT7_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT8_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val COLOR_ATTACHMENT9_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER0_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER10_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER11_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER12_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER13_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER14_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER15_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER1_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER2_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER3_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER4_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER5_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER6_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER7_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER8_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER9_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val MAX_COLOR_ATTACHMENTS_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val MAX_DRAW_BUFFERS_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] def drawBuffersWEBGL(buffers: js.Array[Int]): Unit
experimental/webgl/extensions/WebGLCompressedTextureATC[JT] val COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL: Int
experimental/webgl/extensions/WebGLCompressedTextureATC[JT] val COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL: Int
experimental/webgl/extensions/WebGLCompressedTextureATC[JT] val COMPRESSED_RGB_ATC_WEBGL: Int
experimental/webgl/extensions/WebGLCompressedTexturePVRTC[JT] val COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: Int
experimental/webgl/extensions/WebGLCompressedTexturePVRTC[JT] val COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: Int
experimental/webgl/extensions/WebGLCompressedTexturePVRTC[JT] val COMPRESSED_RGB_PVRTC_2BPPV1_IMG: Int
experimental/webgl/extensions/WebGLCompressedTexturePVRTC[JT] val COMPRESSED_RGB_PVRTC_4BPPV1_IMG: Int
experimental/webgl/extensions/WebGLCompressedTextureS3TC[JT] val COMPRESSED_RGBA_S3TC_DXT1_EXT: Int
experimental/webgl/extensions/WebGLCompressedTextureS3TC[JT] val COMPRESSED_RGBA_S3TC_DXT3_EXT: Int
experimental/webgl/extensions/WebGLCompressedTextureS3TC[JT] val COMPRESSED_RGBA_S3TC_DXT5_EXT: Int
experimental/webgl/extensions/WebGLCompressedTextureS3TC[JT] val COMPRESSED_RGB_S3TC_DXT1_EXT: Int
experimental/webgl/extensions/WebGLDebugRendererInfo[JT] val UNMASKED_RENDERER_WEBGL: Int
experimental/webgl/extensions/WebGLDebugRendererInfo[JT] val UNMASKED_VENDOR_WEBGL: Int
experimental/webgl/extensions/WebGLDebugShaders[JT] def getTranslatedShaderSource(shader: WebGLShader): String
experimental/webgl/extensions/WebGLDepthTexture[JT] val UNSIGNED_INT_24_8_WEBGL: Int
experimental/webgl/extensions/WebGLLoseContext[JT] def loseContext(): Unit
experimental/webgl/extensions/WebGLLoseContext[JT] def restoreContext(): Unit
experimental/webgl/extensions/WebGLTimerQueryEXT[JT]
experimental/webgl/extensions/WebGLVertexArrayObjectOES[JT]
experimental/webgl/package[SO] def getExtension[T](id: WebGLExtensionIdentifier[T]): js.UndefOr[T]
experimental/webgl/package.WebGLRenderingContextOps[SC] def getExtension[T](id: WebGLExtensionIdentifier[T]): js.UndefOr[T]
experimental/webrtc/MediaStreamEventInit[JT] var bubbles: js.UndefOr[Boolean]
experimental/webrtc/MediaStreamEventInit[JT] var cancelable: js.UndefOr[Boolean]
experimental/webrtc/MediaStreamEventInit[JT] var composed: js.UndefOr[Boolean]
experimental/webrtc/MediaStreamEventInit[JT] var scoped: js.UndefOr[Boolean]
experimental/webrtc/MediaStreamEventInit[JT] var stream: js.UndefOr[MediaStream]
experimental/webrtc/RTCBundlePolicy[JT]
experimental/webrtc/RTCBundlePolicy[SO] val balanced = "balanced".asInstanceOf[RTCBundlePolicy]
experimental/webrtc/RTCBundlePolicy[SO] val `max-bundle` = "max-bundle".asInstanceOf[RTCBundlePolicy]
experimental/webrtc/RTCBundlePolicy[SO] val `max-compat` = "max-compat".asInstanceOf[RTCBundlePolicy]
experimental/webrtc/RTCConfiguration[JT] var bundlePolicy: RTCBundlePolicy
experimental/webrtc/RTCConfiguration[JT] var iceServers: js.Array[RTCIceServer]
experimental/webrtc/RTCConfiguration[JT] var iceTransportPolicy: RTCIceTransportPolicy
experimental/webrtc/RTCConfiguration[JT] var peerIdentity: String
experimental/webrtc/RTCConfiguration[SO] def apply(iceServers: js.UndefOr[js.Array[RTCIceServer]] = js.undefined, iceTransportPolicy: js.UndefOr[RTCIceTransportPolicy] = js.undefined, bundlePolicy: js.UndefOr[RTCBundlePolicy] = js.undefined, peerIdentity: js.UndefOr[String] = js.undefined): RTCConfiguration
experimental/webrtc/RTCDTMFSender[JT] val canInsertDTMF: Boolean
experimental/webrtc/RTCDTMFSender[JT] val duration: Double
experimental/webrtc/RTCDTMFSender[JT] def insertDTMF(tones: String?, duration: Double?, interToneGap: Double?): Unit
experimental/webrtc/RTCDTMFSender[JT] val interToneGap: Double
experimental/webrtc/RTCDTMFSender[JT] var ontonechange: js.Function1[Event, Any]
experimental/webrtc/RTCDTMFSender[JT] val toneBuffer: String
experimental/webrtc/RTCDTMFSender[JT] val track: MediaStreamTrack
experimental/webrtc/RTCDataChannel[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/webrtc/RTCDataChannel[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/webrtc/RTCDataChannel[JT] var binaryType: String
experimental/webrtc/RTCDataChannel[JT] def bufferedAmount: Double
experimental/webrtc/RTCDataChannel[JT] def close(): Unit
experimental/webrtc/RTCDataChannel[JT] def dispatchEvent(evt: Event): Boolean
experimental/webrtc/RTCDataChannel[JT] val id: Double
experimental/webrtc/RTCDataChannel[JT] val label: String
experimental/webrtc/RTCDataChannel[JT] val maxPacketLifeTime: Double
experimental/webrtc/RTCDataChannel[JT] val maxRetransmits: Double
experimental/webrtc/RTCDataChannel[JT] val negotiated: Boolean
experimental/webrtc/RTCDataChannel[JT] var onclose: js.Function1[Event, Any]
experimental/webrtc/RTCDataChannel[JT] var onerror: js.Function1[Event, Any]
experimental/webrtc/RTCDataChannel[JT] var onmessage: js.Function1[MessageEvent, Any]
experimental/webrtc/RTCDataChannel[JT] var onopen: js.Function1[Event, Any]
experimental/webrtc/RTCDataChannel[JT] val ordered: Boolean
experimental/webrtc/RTCDataChannel[JT] val protocol: String
experimental/webrtc/RTCDataChannel[JT] def readyState: RTCDataChannelState
experimental/webrtc/RTCDataChannel[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/webrtc/RTCDataChannel[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/webrtc/RTCDataChannel[JT] def send(data: String | Blob | ArrayBuffer | ArrayBufferView): Unit
experimental/webrtc/RTCDataChannelEvent[JC] def bubbles: Boolean
experimental/webrtc/RTCDataChannelEvent[JC] def cancelBubble: Boolean
experimental/webrtc/RTCDataChannelEvent[JC] def cancelable: Boolean
experimental/webrtc/RTCDataChannelEvent[JC] val channel: RTCDataChannel
experimental/webrtc/RTCDataChannelEvent[JC] def currentTarget: EventTarget
experimental/webrtc/RTCDataChannelEvent[JC] def defaultPrevented: Boolean
experimental/webrtc/RTCDataChannelEvent[JC] def eventPhase: Int
experimental/webrtc/RTCDataChannelEvent[JC] def isTrusted: Boolean
experimental/webrtc/RTCDataChannelEvent[JC] def preventDefault(): Unit
experimental/webrtc/RTCDataChannelEvent[JC] def stopImmediatePropagation(): Unit
experimental/webrtc/RTCDataChannelEvent[JC] def stopPropagation(): Unit
experimental/webrtc/RTCDataChannelEvent[JC] def target: EventTarget
experimental/webrtc/RTCDataChannelEvent[JC] def timeStamp: Double
experimental/webrtc/RTCDataChannelEvent[JC] def `type`: String
experimental/webrtc/RTCDataChannelEventInit[JT] var bubbles: js.UndefOr[Boolean]
experimental/webrtc/RTCDataChannelEventInit[JT] var cancelable: js.UndefOr[Boolean]
experimental/webrtc/RTCDataChannelEventInit[JT] var channel: js.UndefOr[RTCDataChannel]
experimental/webrtc/RTCDataChannelEventInit[JT] var composed: js.UndefOr[Boolean]
experimental/webrtc/RTCDataChannelEventInit[JT] var scoped: js.UndefOr[Boolean]
experimental/webrtc/RTCDataChannelInit[JT] var id: Double
experimental/webrtc/RTCDataChannelInit[JT] var maxPacketLifeTime: Double
experimental/webrtc/RTCDataChannelInit[JT] var maxRetransmits: Double
experimental/webrtc/RTCDataChannelInit[JT] var negotiated: Boolean
experimental/webrtc/RTCDataChannelInit[JT] var ordered: Boolean
experimental/webrtc/RTCDataChannelInit[JT] var protocol: String
experimental/webrtc/RTCDataChannelInit[SO] def apply(ordered: js.UndefOr[Boolean] = js.undefined, maxPacketLifeTime: js.UndefOr[Double] = js.undefined, maxRetransmits: js.UndefOr[Double] = js.undefined, protocol: js.UndefOr[String] = js.undefined, negotiated: js.UndefOr[Boolean] = js.undefined, id: js.UndefOr[Double] = js.undefined): RTCDataChannelInit
experimental/webrtc/RTCDataChannelState[JT]
experimental/webrtc/RTCDataChannelState[SO] val closed = "closed".asInstanceOf[RTCDataChannelState]
experimental/webrtc/RTCDataChannelState[SO] val closing = "closing".asInstanceOf[RTCDataChannelState]
experimental/webrtc/RTCDataChannelState[SO] val connecting = "connecting".asInstanceOf[RTCDataChannelState]
experimental/webrtc/RTCDataChannelState[SO] val open = "open".asInstanceOf[RTCDataChannelState]
experimental/webrtc/RTCIceCandidate[JC] var candidate: String
experimental/webrtc/RTCIceCandidate[JC] var sdpMLineIndex: Double
experimental/webrtc/RTCIceCandidate[JC] var sdpMid: String
experimental/webrtc/RTCIceCandidateInit[JT] var candidate: String
experimental/webrtc/RTCIceCandidateInit[JT] var sdpMLineIndex: Double
experimental/webrtc/RTCIceCandidateInit[JT] var sdpMid: String
experimental/webrtc/RTCIceCandidateInit[SO] def apply(candidate: js.UndefOr[String] = js.undefined, sdpMid: js.UndefOr[String] = js.undefined, sdpMLineIndex: js.UndefOr[Double] = js.undefined): RTCIceCandidateInit
experimental/webrtc/RTCIceConnectionState[JT]
experimental/webrtc/RTCIceConnectionState[SO] val checking = "checking".asInstanceOf[RTCIceConnectionState]
experimental/webrtc/RTCIceConnectionState[SO] val closed = "closed".asInstanceOf[RTCIceConnectionState]
experimental/webrtc/RTCIceConnectionState[SO] val completed = "completed".asInstanceOf[RTCIceConnectionState]
experimental/webrtc/RTCIceConnectionState[SO] val connected = "connected".asInstanceOf[RTCIceConnectionState]
experimental/webrtc/RTCIceConnectionState[SO] val disconnected = "disconnected".asInstanceOf[RTCIceConnectionState]
experimental/webrtc/RTCIceConnectionState[SO] val failed = "failed".asInstanceOf[RTCIceConnectionState]
experimental/webrtc/RTCIceConnectionState[SO] val `new` = "new".asInstanceOf[RTCIceConnectionState]
experimental/webrtc/RTCIceGatheringState[JT]
experimental/webrtc/RTCIceGatheringState[SO] val complete = "complete".asInstanceOf[RTCIceGatheringState]
experimental/webrtc/RTCIceGatheringState[SO] val gathering = "gathering".asInstanceOf[RTCIceGatheringState]
experimental/webrtc/RTCIceGatheringState[SO] val `new` = "new".asInstanceOf[RTCIceGatheringState]
experimental/webrtc/RTCIceServer[JT] var credential: String
experimental/webrtc/RTCIceServer[JT] var urls: String | js.Array[String]
experimental/webrtc/RTCIceServer[JT] var username: String
experimental/webrtc/RTCIceServer[SO] def apply(urls: js.UndefOr[String | js.Array[String]] = js.undefined, username: js.UndefOr[String] = js.undefined, credential: js.UndefOr[String] = js.undefined): RTCIceServer
experimental/webrtc/RTCIceTransportPolicy[JT]
experimental/webrtc/RTCIceTransportPolicy[SO] val all = "all".asInstanceOf[RTCIceTransportPolicy]
experimental/webrtc/RTCIceTransportPolicy[SO] val none = "none".asInstanceOf[RTCIceTransportPolicy]
experimental/webrtc/RTCIceTransportPolicy[SO] val relay = "relay".asInstanceOf[RTCIceTransportPolicy]
experimental/webrtc/RTCIdentityAssertion[JT] val idp: String
experimental/webrtc/RTCIdentityAssertion[JT] val name: String
experimental/webrtc/RTCIdentityAssertion[SO] def apply(idp: js.UndefOr[String] = js.undefined, name: js.UndefOr[String] = js.undefined): RTCIdentityAssertion
experimental/webrtc/RTCOfferOptions[JT] var iceRestart: Boolean
experimental/webrtc/RTCOfferOptions[JT] var offerToReceiveAudio: Double
experimental/webrtc/RTCOfferOptions[JT] var offerToReceiveVideo: Double
experimental/webrtc/RTCOfferOptions[JT] var voiceActivityDetection: Boolean
experimental/webrtc/RTCOfferOptions[SO] def apply(iceRestart: js.UndefOr[Boolean] = js.undefined, offerToReceiveAudio: js.UndefOr[Double] = js.undefined, offerToReceiveVideo: js.UndefOr[Double] = js.undefined, voiceActivityDetection: js.UndefOr[Boolean] = js.undefined): RTCOfferOptions
experimental/webrtc/RTCPeerConnection[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/webrtc/RTCPeerConnection[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/webrtc/RTCPeerConnection[JC] def addIceCandidate(candidate: RTCIceCandidate): js.Promise[Unit]
experimental/webrtc/RTCPeerConnection[JC] def addStream(stream: MediaStream): Unit
experimental/webrtc/RTCPeerConnection[JC] val canTrickleIceCandidates: js.Any
experimental/webrtc/RTCPeerConnection[JC] def close(): Unit
experimental/webrtc/RTCPeerConnection[JC] def createAnswer(): js.Promise[RTCSessionDescription]
experimental/webrtc/RTCPeerConnection[JC] def createDTMFSender(track: MediaStreamTrack): RTCDTMFSender
experimental/webrtc/RTCPeerConnection[JC] def createDataChannel(label: String, dataChannelDict: RTCDataChannelInit): RTCDataChannel
experimental/webrtc/RTCPeerConnection[JC] def createOffer(options: RTCOfferOptions?): js.Promise[RTCSessionDescription]
experimental/webrtc/RTCPeerConnection[JC] def dispatchEvent(evt: Event): Boolean
experimental/webrtc/RTCPeerConnection[JC] def getConfiguration(): RTCConfiguration
experimental/webrtc/RTCPeerConnection[JC] def getIdentityAssertion(): js.Promise[Unit]
experimental/webrtc/RTCPeerConnection[JC] def getLocalStreams(): js.Array[MediaStream]
experimental/webrtc/RTCPeerConnection[JC] def getRemoteStreams(): js.Array[MediaStream]
experimental/webrtc/RTCPeerConnection[JC] def getStats(selector: MediaStreamTrack, callback: js.Function1[RTCStatsReport, Any], error: js.Function1[DOMException, Any]): RTCStatsReport
experimental/webrtc/RTCPeerConnection[JC] def getStreamById(id: String): MediaStream
experimental/webrtc/RTCPeerConnection[JC] def iceConnectionState: RTCIceConnectionState
experimental/webrtc/RTCPeerConnection[JC] def iceGatheringState: RTCIceGatheringState
experimental/webrtc/RTCPeerConnection[JC] def localDescription: RTCSessionDescription
experimental/webrtc/RTCPeerConnection[JC] var ondatachannel: js.Function1[RTCDataChannelEvent, Any]
experimental/webrtc/RTCPeerConnection[JC] var onicecandidate: js.Function1[RTCPeerConnectionIceEvent, Any]
experimental/webrtc/RTCPeerConnection[JC] var oniceconnectionstatechange: js.Function1[Event, Any]
experimental/webrtc/RTCPeerConnection[JC] var onidentityresult: js.Function1[Event, Any]
experimental/webrtc/RTCPeerConnection[JC] var onidpassertionerror: js.Function1[Event, Any]
experimental/webrtc/RTCPeerConnection[JC] var onidpvalidationerror: js.Function1[Event, Any]
experimental/webrtc/RTCPeerConnection[JC] var onnegotiationneeded: js.Function1[Event, Any]
experimental/webrtc/RTCPeerConnection[JC] var onpeeridentity: js.Function1[Event, Any]
experimental/webrtc/RTCPeerConnection[JC] var onremovetrack: js.Function1[MediaStreamTrackEvent, Any]
experimental/webrtc/RTCPeerConnection[JC] var onsignalingstatechange: js.Function1[Event, Any]
experimental/webrtc/RTCPeerConnection[JC] var ontrack: js.Function1[MediaStreamTrackEvent, Any]
experimental/webrtc/RTCPeerConnection[JC] val peerIdentity: RTCIdentityAssertion
experimental/webrtc/RTCPeerConnection[JC] def remoteDescription: RTCSessionDescription
experimental/webrtc/RTCPeerConnection[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
experimental/webrtc/RTCPeerConnection[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
experimental/webrtc/RTCPeerConnection[JC] def removeStream(stream: MediaStream): Unit
experimental/webrtc/RTCPeerConnection[JC] def setIdentityProvider(provider: String, protocol: String?, usernameHint: String?): Unit
experimental/webrtc/RTCPeerConnection[JC] def setLocalDescription(description: RTCSessionDescription): js.Promise[Unit]
experimental/webrtc/RTCPeerConnection[JC] def setRemoteDescription(description: RTCSessionDescription): js.Promise[Unit]
experimental/webrtc/RTCPeerConnection[JC] def signalingState: RTCSignalingState
experimental/webrtc/RTCPeerConnection[JC] def updateIce(configuration: RTCConfiguration): Unit
experimental/webrtc/RTCPeerConnectionIceEvent[JC] def bubbles: Boolean
experimental/webrtc/RTCPeerConnectionIceEvent[JC] def cancelBubble: Boolean
experimental/webrtc/RTCPeerConnectionIceEvent[JC] def cancelable: Boolean
experimental/webrtc/RTCPeerConnectionIceEvent[JC] var candidate: RTCIceCandidate
experimental/webrtc/RTCPeerConnectionIceEvent[JC] def currentTarget: EventTarget
experimental/webrtc/RTCPeerConnectionIceEvent[JC] def defaultPrevented: Boolean
experimental/webrtc/RTCPeerConnectionIceEvent[JC] def eventPhase: Int
experimental/webrtc/RTCPeerConnectionIceEvent[JC] def isTrusted: Boolean
experimental/webrtc/RTCPeerConnectionIceEvent[JC] def preventDefault(): Unit
experimental/webrtc/RTCPeerConnectionIceEvent[JC] def stopImmediatePropagation(): Unit
experimental/webrtc/RTCPeerConnectionIceEvent[JC] def stopPropagation(): Unit
experimental/webrtc/RTCPeerConnectionIceEvent[JC] def target: EventTarget
experimental/webrtc/RTCPeerConnectionIceEvent[JC] def timeStamp: Double
experimental/webrtc/RTCPeerConnectionIceEvent[JC] def `type`: String
experimental/webrtc/RTCPeerConnectionIceEventInit[JT] var bubbles: js.UndefOr[Boolean]
experimental/webrtc/RTCPeerConnectionIceEventInit[JT] var cancelable: js.UndefOr[Boolean]
experimental/webrtc/RTCPeerConnectionIceEventInit[JT] var candidate: js.UndefOr[RTCIceCandidate]
experimental/webrtc/RTCPeerConnectionIceEventInit[JT] var composed: js.UndefOr[Boolean]
experimental/webrtc/RTCPeerConnectionIceEventInit[JT] var scoped: js.UndefOr[Boolean]
experimental/webrtc/RTCSdpType[JT]
experimental/webrtc/RTCSdpType[SO] val answer = "answer".asInstanceOf[RTCSdpType]
experimental/webrtc/RTCSdpType[SO] val offer = "offer".asInstanceOf[RTCSdpType]
experimental/webrtc/RTCSdpType[SO] val pranswer = "pranswer".asInstanceOf[RTCSdpType]
experimental/webrtc/RTCSessionDescription[JC] var sdp: String
experimental/webrtc/RTCSessionDescription[JC] var `type`: RTCSdpType
experimental/webrtc/RTCSessionDescriptionInit[JT] var sdp: String
experimental/webrtc/RTCSessionDescriptionInit[JT] var `type`: RTCSdpType
experimental/webrtc/RTCSessionDescriptionInit[SO] def apply(`type`: js.UndefOr[RTCSdpType] = js.undefined, sdp: js.UndefOr[String] = js.undefined): RTCSessionDescriptionInit
experimental/webrtc/RTCSignalingState[JT]
experimental/webrtc/RTCSignalingState[SO] val closed = "closed".asInstanceOf[RTCSignalingState]
experimental/webrtc/RTCSignalingState[SO] val `have-local-offer` = "have-local-offer".asInstanceOf[RTCSignalingState]
experimental/webrtc/RTCSignalingState[SO] val `have-local-pranswer` = "have-local-pranswer".asInstanceOf[RTCSignalingState]
experimental/webrtc/RTCSignalingState[SO] val `have-remote-offer` = "have-remote-offer".asInstanceOf[RTCSignalingState]
experimental/webrtc/RTCSignalingState[SO] val `have-remote-pranswer` = "have-remote-pranswer".asInstanceOf[RTCSignalingState]
experimental/webrtc/RTCSignalingState[SO] val stable = "stable".asInstanceOf[RTCSignalingState]
experimental/webrtc/RTCStats[JT] var id: String
experimental/webrtc/RTCStats[JT] var timestamp: Double
experimental/webrtc/RTCStats[JT] var `type`: RTCStatsType
experimental/webrtc/RTCStatsReport[JT] def apply(id: String): RTCStats
experimental/webrtc/RTCStatsType[JT]
experimental/webrtc/RTCStatsType[SO] val `inbound-rtp` = "inbound-rtp".asInstanceOf[RTCStatsType]
experimental/webrtc/RTCStatsType[SO] val `outbound-rtp` = "outbound-rtp".asInstanceOf[RTCStatsType]
experimental/webrtc/package[SO] def mediaDevices: MediaDevices
experimental/webrtc/package[SO] implicit def toWebRTC(n: org.scalajs.dom.Navigator): NavigatorMediaStream
experimental/webrtc/package.NavigatorMediaStream[JT] def mediaDevices: MediaDevices
ext/Ajax[SO] def apply(method: String, url: String, data: InputData, timeout: Int, headers: Map[String, String], withCredentials: Boolean, responseType: String): Future[dom.XMLHttpRequest]
ext/Ajax[SO] implicit def arrayBufferView2ajax(b: ArrayBufferView): InputData
ext/Ajax[SO] implicit def blob2ajax(b: Blob): InputData
ext/Ajax[SO] implicit def byteBuffer2ajax(data: ByteBuffer): InputData
ext/Ajax[SO] def delete(url: String, data: InputData = null, timeout: Int = 0, headers: Map[String, String] = Map.empty, withCredentials: Boolean = false, responseType: String = "") = { apply("DELETE", url, data, timeout, headers, withCredentials, responseType) }
ext/Ajax[SO] implicit def formdata2ajax(b: FormData): InputData
ext/Ajax[SO] def get(url: String, data: InputData = null, timeout: Int = 0, headers: Map[String, String] = Map.empty, withCredentials: Boolean = false, responseType: String = "") = { apply("GET", url, data, timeout, headers, withCredentials, responseType) }
ext/Ajax[SO] def patch(url: String, data: InputData = null, timeout: Int = 0, headers: Map[String, String] = Map.empty, withCredentials: Boolean = false, responseType: String = "") = { apply("PATCH", url, data, timeout, headers, withCredentials, responseType) }
ext/Ajax[SO] def post(url: String, data: InputData = null, timeout: Int = 0, headers: Map[String, String] = Map.empty, withCredentials: Boolean = false, responseType: String = "") = { apply("POST", url, data, timeout, headers, withCredentials, responseType) }
ext/Ajax[SO] def put(url: String, data: InputData = null, timeout: Int = 0, headers: Map[String, String] = Map.empty, withCredentials: Boolean = false, responseType: String = "") = { apply("PUT", url, data, timeout, headers, withCredentials, responseType) }
ext/Ajax[SO] implicit def str2ajax(s: String): InputData
ext/Ajax.InputData[JT]
ext/Ajax.InputData[SO] implicit def arrayBufferView2ajax(b: ArrayBufferView): InputData
ext/Ajax.InputData[SO] implicit def blob2ajax(b: Blob): InputData
ext/Ajax.InputData[SO] implicit def byteBuffer2ajax(data: ByteBuffer): InputData
ext/Ajax.InputData[SO] implicit def formdata2ajax(b: FormData): InputData
ext/Ajax.InputData[SO] implicit def str2ajax(s: String): InputData
ext/AjaxException[SC] def isTimeout = xhr.status = = 0 && xhr.readyState = = 4
ext/Color[SC] def *(c: Color) = Color(r * c.r, g * c.g, b * c.b)
ext/Color[SC] def +(c: Color) = Color(r + c.r, g + c.g, b + c.b)
ext/Color[SC] def toHex: String
ext/Color[SC] override def toString() = s"rgb($r, $g, $b)"
ext/Color[SO] val Black = Color(0, 0, 0)
ext/Color[SO] val Blue = Color(0, 0, 255)
ext/Color[SO] val Cyan = Color(0, 255, 255)
ext/Color[SO] val Green = Color(0, 255, 0)
ext/Color[SO] val LongHex = s"#($d$d)($d$d)($d$d)".r
ext/Color[SO] val Magenta = Color(255, 0, 255)
ext/Color[SO] val RGB = "rgb\\((\\d+), (\\d+), (\\d+)\\)".r
ext/Color[SO] val Red = Color(255, 0, 0)
ext/Color[SO] val ShortHex = s"#($d)($d)($d)".r
ext/Color[SO] val White = Color(255, 255, 255)
ext/Color[SO] val Yellow = Color(255, 255, 0)
ext/Color[SO] val all = Seq( White, Red, Green, Blue, Cyan, Magenta, Yellow, Black )
ext/Color[SO] def apply(s: String): Color
ext/Color[SO] val d = "[0-9a-zA-Z]"
ext/Color[SO] def hex(x: String) = Integer.parseInt(x, 16)
ext/EasySeq[SC] def apply(x: Int) = jsApply(x)
ext/EasySeq[SC] def hasNext: scala.Boolean
ext/EasySeq[SC] def iterator = new Iterator[T] { var index = 0 def hasNext: scala.Boolean = index < jsLength def next() = { val res = jsApply(index) index + = 1 res } }
ext/EasySeq[SC] def length = jsLength
ext/EasySeq[SC] def next() = { val res = jsApply(index) index + = 1 res }
ext/Image[SO] def createBase64Svg(s: String) = { val img = dom.document.createElement("img").asInstanceOf[html.Image] img.src = "data:image/svg+xml;base64, " + s img }
ext/KeyCode[SO] final val A = 65
ext/KeyCode[SO] final val Alt = 18
ext/KeyCode[SO] final val B = 66
ext/KeyCode[SO] final val Backspace = 8
ext/KeyCode[SO] final val C = 67
ext/KeyCode[SO] final val CapsLock = 20
ext/KeyCode[SO] final val Ctrl = 17
ext/KeyCode[SO] final val D = 68
ext/KeyCode[SO] final val Delete = 46
ext/KeyCode[SO] final val Down = 40
ext/KeyCode[SO] final val E = 69
ext/KeyCode[SO] final val End = 35
ext/KeyCode[SO] final val Enter = 13
ext/KeyCode[SO] final val Escape = 27
ext/KeyCode[SO] final val F = 70
ext/KeyCode[SO] final val F1 = 112
ext/KeyCode[SO] final val F10 = 121
ext/KeyCode[SO] final val F11 = 122
ext/KeyCode[SO] final val F12 = 123
ext/KeyCode[SO] final val F2 = 113
ext/KeyCode[SO] final val F3 = 114
ext/KeyCode[SO] final val F4 = 115
ext/KeyCode[SO] final val F5 = 116
ext/KeyCode[SO] final val F6 = 117
ext/KeyCode[SO] final val F7 = 118
ext/KeyCode[SO] final val F8 = 119
ext/KeyCode[SO] final val F9 = 120
ext/KeyCode[SO] final val G = 71
ext/KeyCode[SO] final val H = 72
ext/KeyCode[SO] final val Home = 36
ext/KeyCode[SO] final val I = 73
ext/KeyCode[SO] final val Insert = 45
ext/KeyCode[SO] final val J = 74
ext/KeyCode[SO] final val K = 75
ext/KeyCode[SO] final val L = 76
ext/KeyCode[SO] final val Left = 37
ext/KeyCode[SO] final val M = 77
ext/KeyCode[SO] final val N = 78
ext/KeyCode[SO] final val Num0 = 48
ext/KeyCode[SO] final val Num1 = 49
ext/KeyCode[SO] final val Num2 = 50
ext/KeyCode[SO] final val Num3 = 51
ext/KeyCode[SO] final val Num4 = 52
ext/KeyCode[SO] final val Num5 = 53
ext/KeyCode[SO] final val Num6 = 54
ext/KeyCode[SO] final val Num7 = 55
ext/KeyCode[SO] final val Num8 = 56
ext/KeyCode[SO] final val Num9 = 57
ext/KeyCode[SO] final val O = 79
ext/KeyCode[SO] final val P = 80
ext/KeyCode[SO] final val PageDown = 34
ext/KeyCode[SO] final val PageUp = 33
ext/KeyCode[SO] final val Pause = 19
ext/KeyCode[SO] final val Q = 81
ext/KeyCode[SO] final val R = 82
ext/KeyCode[SO] final val Right = 39
ext/KeyCode[SO] final val S = 83
ext/KeyCode[SO] final val Shift = 16
ext/KeyCode[SO] final val Space = 32
ext/KeyCode[SO] final val T = 84
ext/KeyCode[SO] final val Tab = 9
ext/KeyCode[SO] final val U = 85
ext/KeyCode[SO] final val Up = 38
ext/KeyCode[SO] final val V = 86
ext/KeyCode[SO] final val W = 87
ext/KeyCode[SO] final val X = 88
ext/KeyCode[SO] final val Y = 89
ext/KeyCode[SO] final val Z = 90
ext/KeyLocation[SO] final val Left = KeyboardEvent.DOM_KEY_LOCATION_LEFT
ext/KeyLocation[SO] final val NumPad = KeyboardEvent.DOM_KEY_LOCATION_NUMPAD
ext/KeyLocation[SO] final val Right = KeyboardEvent.DOM_KEY_LOCATION_RIGHT
ext/KeyLocation[SO] final val Standard = KeyboardEvent.DOM_KEY_LOCATION_STANDARD
ext/KeyValue[SO] final val Accept = "Accept"
ext/KeyValue[SO] final val Again = "Again"
ext/KeyValue[SO] final val AllCandidates = "AllCandidates"
ext/KeyValue[SO] final val Alphanumeric = "Alphanumeric"
ext/KeyValue[SO] final val Alt = "Alt"
ext/KeyValue[SO] final val AltGraph = "AltGraph"
ext/KeyValue[SO] final val ArrowDown = "ArrowDown"
ext/KeyValue[SO] final val ArrowLeft = "ArrowLeft"
ext/KeyValue[SO] final val ArrowRight = "ArrowRight"
ext/KeyValue[SO] final val ArrowUp = "ArrowUp"
ext/KeyValue[SO] final val Attn = "Attn"
ext/KeyValue[SO] final val AudioBalanceLeft = "AudioBalanceLeft"
ext/KeyValue[SO] final val AudioBalanceRight = "AudioBalanceRight"
ext/KeyValue[SO] final val AudioBassBoostDown = "AudioBassBoostDown"
ext/KeyValue[SO] final val AudioBassBoostUp = "AudioBassBoostUp"
ext/KeyValue[SO] final val AudioFaderFront = "AudioFaderFront"
ext/KeyValue[SO] final val AudioFaderRear = "AudioFaderRear"
ext/KeyValue[SO] final val AudioSurroundModeNext = "AudioSurroundModeNext"
ext/KeyValue[SO] final val Backspace = "Backspace"
ext/KeyValue[SO] final val BrightnessDown = "BrightnessDown"
ext/KeyValue[SO] final val BrightnessUp = "BrightnessUp"
ext/KeyValue[SO] final val BrowserBack = "BrowserBack"
ext/KeyValue[SO] final val BrowserFavorites = "BrowserFavorites"
ext/KeyValue[SO] final val BrowserForward = "BrowserForward"
ext/KeyValue[SO] final val BrowserHome = "BrowserHome"
ext/KeyValue[SO] final val BrowserRefresh = "BrowserRefresh"
ext/KeyValue[SO] final val BrowserSearch = "BrowserSearch"
ext/KeyValue[SO] final val BrowserStop = "BrowserStop"
ext/KeyValue[SO] final val Camera = "Camera"
ext/KeyValue[SO] final val Cancel = "Cancel"
ext/KeyValue[SO] final val CapsLock = "CapsLock"
ext/KeyValue[SO] final val ChannelDown = "ChannelDown"
ext/KeyValue[SO] final val ChannelUp = "ChannelUp"
ext/KeyValue[SO] final val Clear = "Clear"
ext/KeyValue[SO] final val Close = "Close"
ext/KeyValue[SO] final val ClosedCaptionToggle = "ClosedCaptionToggle"
ext/KeyValue[SO] final val CodeInput = "CodeInput"
ext/KeyValue[SO] final val ColorF0Red = "ColorF0Red"
ext/KeyValue[SO] final val ColorF1Green = "ColorF1Green"
ext/KeyValue[SO] final val ColorF2Yellow = "ColorF2Yellow"
ext/KeyValue[SO] final val ColorF3Blue = "ColorF3Blue"
ext/KeyValue[SO] final val ColorF4Grey = "ColorF4Grey"
ext/KeyValue[SO] final val ColorF5Brown = "ColorF5Brown"
ext/KeyValue[SO] final val Compose = "Compose"
ext/KeyValue[SO] final val ContextMenu = "ContextMenu"
ext/KeyValue[SO] final val Control = "Control"
ext/KeyValue[SO] final val Convert = "Convert"
ext/KeyValue[SO] final val Copy = "Copy"
ext/KeyValue[SO] final val CrSel = "CrSel"
ext/KeyValue[SO] final val Cut = "Cut"
ext/KeyValue[SO] final val Delete = "Delete"
ext/KeyValue[SO] final val Dimmer = "Dimmer"
ext/KeyValue[SO] final val DisplaySwap = "DisplaySwap"
ext/KeyValue[SO] final val Eisu = "Eisu"
ext/KeyValue[SO] final val Eject = "Eject"
ext/KeyValue[SO] final val End = "End"
ext/KeyValue[SO] final val Enter = "Enter"
ext/KeyValue[SO] final val EraseEof = "EraseEof"
ext/KeyValue[SO] final val Escape = "Escape"
ext/KeyValue[SO] final val ExSel = "ExSel"
ext/KeyValue[SO] final val Execute = "Execute"
ext/KeyValue[SO] final val Exit = "Exit"
ext/KeyValue[SO] final val F1 = "F1"
ext/KeyValue[SO] final val F10 = "F10"
ext/KeyValue[SO] final val F11 = "F11"
ext/KeyValue[SO] final val F12 = "F12"
ext/KeyValue[SO] final val F2 = "F2"
ext/KeyValue[SO] final val F3 = "F3"
ext/KeyValue[SO] final val F4 = "F4"
ext/KeyValue[SO] final val F5 = "F5"
ext/KeyValue[SO] final val F6 = "F6"
ext/KeyValue[SO] final val F7 = "F7"
ext/KeyValue[SO] final val F8 = "F8"
ext/KeyValue[SO] final val F9 = "F9"
ext/KeyValue[SO] final val FavoriteClear0 = "FavoriteClear0"
ext/KeyValue[SO] final val FavoriteClear1 = "FavoriteClear1"
ext/KeyValue[SO] final val FavoriteClear2 = "FavoriteClear2"
ext/KeyValue[SO] final val FavoriteClear3 = "FavoriteClear3"
ext/KeyValue[SO] final val FavoriteRecall0 = "FavoriteRecall0"
ext/KeyValue[SO] final val FavoriteRecall1 = "FavoriteRecall1"
ext/KeyValue[SO] final val FavoriteRecall2 = "FavoriteRecall2"
ext/KeyValue[SO] final val FavoriteRecall3 = "FavoriteRecall3"
ext/KeyValue[SO] final val FavoriteStore0 = "FavoriteStore0"
ext/KeyValue[SO] final val FavoriteStore1 = "FavoriteStore1"
ext/KeyValue[SO] final val FavoriteStore2 = "FavoriteStore2"
ext/KeyValue[SO] final val FavoriteStore3 = "FavoriteStore3"
ext/KeyValue[SO] final val FinalMode = "FinalMode"
ext/KeyValue[SO] final val Find = "Find"
ext/KeyValue[SO] final val Fn = "Fn"
ext/KeyValue[SO] final val FnLock = "FnLock"
ext/KeyValue[SO] final val GroupFirst = "GroupFirst"
ext/KeyValue[SO] final val GroupLast = "GroupLast"
ext/KeyValue[SO] final val GroupNext = "GroupNext"
ext/KeyValue[SO] final val GroupPrevious = "GroupPrevious"
ext/KeyValue[SO] final val Guide = "Guide"
ext/KeyValue[SO] final val GuideNextDay = "GuideNextDay"
ext/KeyValue[SO] final val GuidePreviousDay = "GuidePreviousDay"
ext/KeyValue[SO] final val HangulMode = "HangulMode"
ext/KeyValue[SO] final val HanjaMode = "HanjaMode"
ext/KeyValue[SO] final val Hankaku = "Hankaku"
ext/KeyValue[SO] final val Help = "Help"
ext/KeyValue[SO] final val Hibernate = "Hibernate"
ext/KeyValue[SO] final val Hiragana = "Hiragana"
ext/KeyValue[SO] final val HiraganaKatakana = "HiraganaKatakana"
ext/KeyValue[SO] final val Home = "Home"
ext/KeyValue[SO] final val Hyper = "Hyper"
ext/KeyValue[SO] final val Info = "Info"
ext/KeyValue[SO] final val Insert = "Insert"
ext/KeyValue[SO] final val InstantReplay = "InstantReplay"
ext/KeyValue[SO] final val JunjaMode = "JunjaMode"
ext/KeyValue[SO] final val KanaMode = "KanaMode"
ext/KeyValue[SO] final val KanjiMode = "KanjiMode"
ext/KeyValue[SO] final val Katakana = "Katakana"
ext/KeyValue[SO] final val LaunchCalculator = "LaunchCalculator"
ext/KeyValue[SO] final val LaunchCalendar = "LaunchCalendar"
ext/KeyValue[SO] final val LaunchMail = "LaunchMail"
ext/KeyValue[SO] final val LaunchMediaPlayer = "LaunchMediaPlayer"
ext/KeyValue[SO] final val LaunchMusicPlayer = "LaunchMusicPlayer"
ext/KeyValue[SO] final val LaunchMyComputer = "LaunchMyComputer"
ext/KeyValue[SO] final val LaunchScreenSaver = "LaunchScreenSaver"
ext/KeyValue[SO] final val LaunchSpreadsheet = "LaunchSpreadsheet"
ext/KeyValue[SO] final val LaunchWebBrowser = "LaunchWebBrowser"
ext/KeyValue[SO] final val LaunchWebCam = "LaunchWebCam"
ext/KeyValue[SO] final val LaunchWordProcessor = "LaunchWordProcessor"
ext/KeyValue[SO] final val Link = "Link"
ext/KeyValue[SO] final val ListProgram = "ListProgram"
ext/KeyValue[SO] final val LiveContent = "LiveContent"
ext/KeyValue[SO] final val Lock = "Lock"
ext/KeyValue[SO] final val LogOff = "LogOff"
ext/KeyValue[SO] final val MailForward = "MailForward"
ext/KeyValue[SO] final val MailReply = "MailReply"
ext/KeyValue[SO] final val MailSend = "MailSend"
ext/KeyValue[SO] final val MediaApps = "MediaApps"
ext/KeyValue[SO] final val MediaFastForward = "MediaFastForward"
ext/KeyValue[SO] final val MediaLast = "MediaLast"
ext/KeyValue[SO] final val MediaPause = "MediaPause"
ext/KeyValue[SO] final val MediaPlay = "MediaPlay"
ext/KeyValue[SO] final val MediaPlayPause = "MediaPlayPause"
ext/KeyValue[SO] final val MediaRecord = "MediaRecord"
ext/KeyValue[SO] final val MediaRewind = "MediaRewind"
ext/KeyValue[SO] final val MediaSelect = "MediaSelect"
ext/KeyValue[SO] final val MediaSkip = "MediaSkip"
ext/KeyValue[SO] final val MediaStop = "MediaStop"
ext/KeyValue[SO] final val MediaTrackNext = "MediaTrackNext"
ext/KeyValue[SO] final val MediaTrackPrevious = "MediaTrackPrevious"
ext/KeyValue[SO] final val Meta = "Meta"
ext/KeyValue[SO] final val ModeChange = "ModeChange"
ext/KeyValue[SO] final val New = "New"
ext/KeyValue[SO] final val NextCandidate = "NextCandidate"
ext/KeyValue[SO] final val NextFavoriteChannel = "NextFavoriteChannel"
ext/KeyValue[SO] final val NextUserProfile = "NextUserProfile"
ext/KeyValue[SO] final val NonConvert = "NonConvert"
ext/KeyValue[SO] final val NumLock = "NumLock"
ext/KeyValue[SO] final val OS = "OS"
ext/KeyValue[SO] final val OnDemand = "OnDemand"
ext/KeyValue[SO] final val Open = "Open"
ext/KeyValue[SO] final val PageDown = "PageDown"
ext/KeyValue[SO] final val PageUp = "PageUp"
ext/KeyValue[SO] final val Paste = "Paste"
ext/KeyValue[SO] final val Pause = "Pause"
ext/KeyValue[SO] final val PinPDown = "PinPDown"
ext/KeyValue[SO] final val PinPMove = "PinPMove"
ext/KeyValue[SO] final val PinPToggle = "PinPToggle"
ext/KeyValue[SO] final val PinPUp = "PinPUp"
ext/KeyValue[SO] final val Play = "Play"
ext/KeyValue[SO] final val PlaySpeedDown = "PlaySpeedDown"
ext/KeyValue[SO] final val PlaySpeedReset = "PlaySpeedReset"
ext/KeyValue[SO] final val PlaySpeedUp = "PlaySpeedUp"
ext/KeyValue[SO] final val Power = "Power"
ext/KeyValue[SO] final val PowerOff = "PowerOff"
ext/KeyValue[SO] final val PreviousCandidate = "PreviousCandidate"
ext/KeyValue[SO] final val Print = "Print"
ext/KeyValue[SO] final val PrintScreen = "PrintScreen"
ext/KeyValue[SO] final val Process = "Process"
ext/KeyValue[SO] final val Props = "Props"
ext/KeyValue[SO] final val RandomToggle = "RandomToggle"
ext/KeyValue[SO] final val RcLowBattery = "RcLowBattery"
ext/KeyValue[SO] final val RecordSpeedNext = "RecordSpeedNext"
ext/KeyValue[SO] final val Redo = "Redo"
ext/KeyValue[SO] final val RfBypass = "RfBypass"
ext/KeyValue[SO] final val RomanCharacters = "RomanCharacters"
ext/KeyValue[SO] final val Save = "Save"
ext/KeyValue[SO] final val ScanChannelsToggle = "ScanChannelsToggle"
ext/KeyValue[SO] final val ScreenModeNext = "ScreenModeNext"
ext/KeyValue[SO] final val ScrollLock = "ScrollLock"
ext/KeyValue[SO] final val Separator = "Separator"
ext/KeyValue[SO] final val Settings = "Settings"
ext/KeyValue[SO] final val Shift = "Shift"
ext/KeyValue[SO] final val SingleCandidate = "SingleCandidate"
ext/KeyValue[SO] final val Soft1 = "Soft1"
ext/KeyValue[SO] final val Soft2 = "Soft2"
ext/KeyValue[SO] final val Soft3 = "Soft3"
ext/KeyValue[SO] final val Soft4 = "Soft4"
ext/KeyValue[SO] final val Spacebar = " "
ext/KeyValue[SO] final val SpellCheck = "SpellCheck"
ext/KeyValue[SO] final val SplitScreenToggle = "SplitScreenToggle"
ext/KeyValue[SO] final val Standby = "Standby"
ext/KeyValue[SO] final val Subtitle = "Subtitle"
ext/KeyValue[SO] final val Super = "Super"
ext/KeyValue[SO] final val Symbol = "Symbol"
ext/KeyValue[SO] final val SymbolLock = "SymbolLock"
ext/KeyValue[SO] final val Tab = "Tab"
ext/KeyValue[SO] final val Teletext = "Teletext"
ext/KeyValue[SO] final val Undo = "Undo"
ext/KeyValue[SO] final val Unidentified = "Unidentified"
ext/KeyValue[SO] final val VideoModeNext = "VideoModeNext"
ext/KeyValue[SO] final val VolumeDown = "VolumeDown"
ext/KeyValue[SO] final val VolumeMute = "VolumeMute"
ext/KeyValue[SO] final val VolumeUp = "VolumeUp"
ext/KeyValue[SO] final val WakeUp = "WakeUp"
ext/KeyValue[SO] final val Wink = "Wink"
ext/KeyValue[SO] final val Zenkaku = "Zenkaku"
ext/KeyValue[SO] final val ZenkakuHankaku = "ZenkakuHankaku"
ext/KeyValue[SO] final val ZoomIn = "ZoomIn"
ext/KeyValue[SO] final val ZoomOut = "ZoomOut"
ext/KeyValue[SO] final val ZoomToggle = "ZoomToggle"
ext/KeyValue.Application[SO] final val LaunchCalculator = "LaunchCalculator"
ext/KeyValue.Application[SO] final val LaunchCalendar = "LaunchCalendar"
ext/KeyValue.Application[SO] final val LaunchMail = "LaunchMail"
ext/KeyValue.Application[SO] final val LaunchMediaPlayer = "LaunchMediaPlayer"
ext/KeyValue.Application[SO] final val LaunchMusicPlayer = "LaunchMusicPlayer"
ext/KeyValue.Application[SO] final val LaunchMyComputer = "LaunchMyComputer"
ext/KeyValue.Application[SO] final val LaunchScreenSaver = "LaunchScreenSaver"
ext/KeyValue.Application[SO] final val LaunchSpreadsheet = "LaunchSpreadsheet"
ext/KeyValue.Application[SO] final val LaunchWebBrowser = "LaunchWebBrowser"
ext/KeyValue.Application[SO] final val LaunchWebCam = "LaunchWebCam"
ext/KeyValue.Application[SO] final val LaunchWordProcessor = "LaunchWordProcessor"
ext/KeyValue.Device[SO] final val BrightnessDown = "BrightnessDown"
ext/KeyValue.Device[SO] final val BrightnessUp = "BrightnessUp"
ext/KeyValue.Device[SO] final val Camera = "Camera"
ext/KeyValue.Device[SO] final val Eject = "Eject"
ext/KeyValue.Device[SO] final val Hibernate = "Hibernate"
ext/KeyValue.Device[SO] final val LogOff = "LogOff"
ext/KeyValue.Device[SO] final val Power = "Power"
ext/KeyValue.Device[SO] final val PowerOff = "PowerOff"
ext/KeyValue.Device[SO] final val PrintScreen = "PrintScreen"
ext/KeyValue.Device[SO] final val Standby = "Standby"
ext/KeyValue.Device[SO] final val WakeUp = "WakeUp"
ext/KeyValue.IME[SO] final val AllCandidates = "AllCandidates"
ext/KeyValue.IME[SO] final val Alphanumeric = "Alphanumeric"
ext/KeyValue.IME[SO] final val CodeInput = "CodeInput"
ext/KeyValue.IME[SO] final val Compose = "Compose"
ext/KeyValue.IME[SO] final val Convert = "Convert"
ext/KeyValue.IME[SO] final val Eisu = "Eisu"
ext/KeyValue.IME[SO] final val FinalMode = "FinalMode"
ext/KeyValue.IME[SO] final val GroupFirst = "GroupFirst"
ext/KeyValue.IME[SO] final val GroupLast = "GroupLast"
ext/KeyValue.IME[SO] final val GroupNext = "GroupNext"
ext/KeyValue.IME[SO] final val GroupPrevious = "GroupPrevious"
ext/KeyValue.IME[SO] final val HangulMode = "HangulMode"
ext/KeyValue.IME[SO] final val HanjaMode = "HanjaMode"
ext/KeyValue.IME[SO] final val Hankaku = "Hankaku"
ext/KeyValue.IME[SO] final val Hiragana = "Hiragana"
ext/KeyValue.IME[SO] final val HiraganaKatakana = "HiraganaKatakana"
ext/KeyValue.IME[SO] final val JunjaMode = "JunjaMode"
ext/KeyValue.IME[SO] final val KanaMode = "KanaMode"
ext/KeyValue.IME[SO] final val KanjiMode = "KanjiMode"
ext/KeyValue.IME[SO] final val Katakana = "Katakana"
ext/KeyValue.IME[SO] final val ModeChange = "ModeChange"
ext/KeyValue.IME[SO] final val NextCandidate = "NextCandidate"
ext/KeyValue.IME[SO] final val NonConvert = "NonConvert"
ext/KeyValue.IME[SO] final val PreviousCandidate = "PreviousCandidate"
ext/KeyValue.IME[SO] final val Process = "Process"
ext/KeyValue.IME[SO] final val RomanCharacters = "RomanCharacters"
ext/KeyValue.IME[SO] final val SingleCandidate = "SingleCandidate"
ext/KeyValue.IME[SO] final val Zenkaku = "Zenkaku"
ext/KeyValue.IME[SO] final val ZenkakuHankaku = "ZenkakuHankaku"
ext/KeyValue.MediaControl[SO] final val AudioBalanceLeft = "AudioBalanceLeft"
ext/KeyValue.MediaControl[SO] final val AudioBalanceRight = "AudioBalanceRight"
ext/KeyValue.MediaControl[SO] final val AudioBassBoostDown = "AudioBassBoostDown"
ext/KeyValue.MediaControl[SO] final val AudioBassBoostUp = "AudioBassBoostUp"
ext/KeyValue.MediaControl[SO] final val AudioFaderFront = "AudioFaderFront"
ext/KeyValue.MediaControl[SO] final val AudioFaderRear = "AudioFaderRear"
ext/KeyValue.MediaControl[SO] final val AudioSurroundModeNext = "AudioSurroundModeNext"
ext/KeyValue.MediaControl[SO] final val ChannelDown = "ChannelDown"
ext/KeyValue.MediaControl[SO] final val ChannelUp = "ChannelUp"
ext/KeyValue.MediaControl[SO] final val ClosedCaptionToggle = "ClosedCaptionToggle"
ext/KeyValue.MediaControl[SO] final val ColorF0Red = "ColorF0Red"
ext/KeyValue.MediaControl[SO] final val ColorF1Green = "ColorF1Green"
ext/KeyValue.MediaControl[SO] final val ColorF2Yellow = "ColorF2Yellow"
ext/KeyValue.MediaControl[SO] final val ColorF3Blue = "ColorF3Blue"
ext/KeyValue.MediaControl[SO] final val ColorF4Grey = "ColorF4Grey"
ext/KeyValue.MediaControl[SO] final val ColorF5Brown = "ColorF5Brown"
ext/KeyValue.MediaControl[SO] final val Dimmer = "Dimmer"
ext/KeyValue.MediaControl[SO] final val DisplaySwap = "DisplaySwap"
ext/KeyValue.MediaControl[SO] final val Exit = "Exit"
ext/KeyValue.MediaControl[SO] final val FavoriteClear0 = "FavoriteClear0"
ext/KeyValue.MediaControl[SO] final val FavoriteClear1 = "FavoriteClear1"
ext/KeyValue.MediaControl[SO] final val FavoriteClear2 = "FavoriteClear2"
ext/KeyValue.MediaControl[SO] final val FavoriteClear3 = "FavoriteClear3"
ext/KeyValue.MediaControl[SO] final val FavoriteRecall0 = "FavoriteRecall0"
ext/KeyValue.MediaControl[SO] final val FavoriteRecall1 = "FavoriteRecall1"
ext/KeyValue.MediaControl[SO] final val FavoriteRecall2 = "FavoriteRecall2"
ext/KeyValue.MediaControl[SO] final val FavoriteRecall3 = "FavoriteRecall3"
ext/KeyValue.MediaControl[SO] final val FavoriteStore0 = "FavoriteStore0"
ext/KeyValue.MediaControl[SO] final val FavoriteStore1 = "FavoriteStore1"
ext/KeyValue.MediaControl[SO] final val FavoriteStore2 = "FavoriteStore2"
ext/KeyValue.MediaControl[SO] final val FavoriteStore3 = "FavoriteStore3"
ext/KeyValue.MediaControl[SO] final val Guide = "Guide"
ext/KeyValue.MediaControl[SO] final val GuideNextDay = "GuideNextDay"
ext/KeyValue.MediaControl[SO] final val GuidePreviousDay = "GuidePreviousDay"
ext/KeyValue.MediaControl[SO] final val Info = "Info"
ext/KeyValue.MediaControl[SO] final val InstantReplay = "InstantReplay"
ext/KeyValue.MediaControl[SO] final val Link = "Link"
ext/KeyValue.MediaControl[SO] final val ListProgram = "ListProgram"
ext/KeyValue.MediaControl[SO] final val LiveContent = "LiveContent"
ext/KeyValue.MediaControl[SO] final val Lock = "Lock"
ext/KeyValue.MediaControl[SO] final val MediaApps = "MediaApps"
ext/KeyValue.MediaControl[SO] final val MediaFastForward = "MediaFastForward"
ext/KeyValue.MediaControl[SO] final val MediaLast = "MediaLast"
ext/KeyValue.MediaControl[SO] final val MediaPause = "MediaPause"
ext/KeyValue.MediaControl[SO] final val MediaPlay = "MediaPlay"
ext/KeyValue.MediaControl[SO] final val MediaRecord = "MediaRecord"
ext/KeyValue.MediaControl[SO] final val MediaRewind = "MediaRewind"
ext/KeyValue.MediaControl[SO] final val MediaSkip = "MediaSkip"
ext/KeyValue.MediaControl[SO] final val NextFavoriteChannel = "NextFavoriteChannel"
ext/KeyValue.MediaControl[SO] final val NextUserProfile = "NextUserProfile"
ext/KeyValue.MediaControl[SO] final val OnDemand = "OnDemand"
ext/KeyValue.MediaControl[SO] final val PinPDown = "PinPDown"
ext/KeyValue.MediaControl[SO] final val PinPMove = "PinPMove"
ext/KeyValue.MediaControl[SO] final val PinPToggle = "PinPToggle"
ext/KeyValue.MediaControl[SO] final val PinPUp = "PinPUp"
ext/KeyValue.MediaControl[SO] final val PlaySpeedDown = "PlaySpeedDown"
ext/KeyValue.MediaControl[SO] final val PlaySpeedReset = "PlaySpeedReset"
ext/KeyValue.MediaControl[SO] final val PlaySpeedUp = "PlaySpeedUp"
ext/KeyValue.MediaControl[SO] final val RandomToggle = "RandomToggle"
ext/KeyValue.MediaControl[SO] final val RcLowBattery = "RcLowBattery"
ext/KeyValue.MediaControl[SO] final val RecordSpeedNext = "RecordSpeedNext"
ext/KeyValue.MediaControl[SO] final val RfBypass = "RfBypass"
ext/KeyValue.MediaControl[SO] final val ScanChannelsToggle = "ScanChannelsToggle"
ext/KeyValue.MediaControl[SO] final val ScreenModeNext = "ScreenModeNext"
ext/KeyValue.MediaControl[SO] final val Settings = "Settings"
ext/KeyValue.MediaControl[SO] final val SplitScreenToggle = "SplitScreenToggle"
ext/KeyValue.MediaControl[SO] final val Subtitle = "Subtitle"
ext/KeyValue.MediaControl[SO] final val Teletext = "Teletext"
ext/KeyValue.MediaControl[SO] final val VideoModeNext = "VideoModeNext"
ext/KeyValue.MediaControl[SO] final val Wink = "Wink"
ext/KeyValue.MediaControl[SO] final val ZoomToggle = "ZoomToggle"
ext/KeyValue.Multimedia[SO] final val Close = "Close"
ext/KeyValue.Multimedia[SO] final val MailForward = "MailForward"
ext/KeyValue.Multimedia[SO] final val MailReply = "MailReply"
ext/KeyValue.Multimedia[SO] final val MailSend = "MailSend"
ext/KeyValue.Multimedia[SO] final val MediaPlayPause = "MediaPlayPause"
ext/KeyValue.Multimedia[SO] final val MediaSelect = "MediaSelect"
ext/KeyValue.Multimedia[SO] final val MediaStop = "MediaStop"
ext/KeyValue.Multimedia[SO] final val MediaTrackNext = "MediaTrackNext"
ext/KeyValue.Multimedia[SO] final val MediaTrackPrevious = "MediaTrackPrevious"
ext/KeyValue.Multimedia[SO] final val New = "New"
ext/KeyValue.Multimedia[SO] final val Open = "Open"
ext/KeyValue.Multimedia[SO] final val Print = "Print"
ext/KeyValue.Multimedia[SO] final val Save = "Save"
ext/KeyValue.Multimedia[SO] final val SpellCheck = "SpellCheck"
ext/KeyValue.Multimedia[SO] final val VolumeDown = "VolumeDown"
ext/KeyValue.Multimedia[SO] final val VolumeMute = "VolumeMute"
ext/KeyValue.Multimedia[SO] final val VolumeUp = "VolumeUp"
ext/LocalStorage[SO] def apply(key: String): Option[String]
ext/LocalStorage[SO] def clear(): Unit
ext/LocalStorage[SO] def key(index: Int): Option[String]
ext/LocalStorage[SO] def length: Int
ext/LocalStorage[SO] def remove(key: String): Unit
ext/LocalStorage[SO] def update(key: String, data: String): Unit
ext/NamedNodeMapMap[SC] override def addOne(kv: (String, Attr)): this.type
ext/NamedNodeMapMap[SC] override def clear(): Unit
ext/NamedNodeMapMap[SC] override def get(key: String): Option[Attr]
ext/NamedNodeMapMap[SC] override def hasNext: Boolean
ext/NamedNodeMapMap[SC] override def iterator: Iterator[(String, Attr)]
ext/NamedNodeMapMap[SC] def length: Int
ext/NamedNodeMapMap[SC] override def next(): (String, Attr)
ext/NamedNodeMapMap[SC] override def subtractOne(key: String): this.type
ext/SessionStorage[SO] def apply(key: String): Option[String]
ext/SessionStorage[SO] def clear(): Unit
ext/SessionStorage[SO] def key(index: Int): Option[String]
ext/SessionStorage[SO] def length: Int
ext/SessionStorage[SO] def remove(key: String): Unit
ext/SessionStorage[SO] def update(key: String, data: String): Unit
ext/Storage[SC] def apply(key: String): Option[String]
ext/Storage[SC] def clear(): Unit
ext/Storage[SC] def key(index: Int): Option[String]
ext/Storage[SC] def length: Int
ext/Storage[SC] def remove(key: String): Unit
ext/Storage[SC] def update(key: String, data: String): Unit
ext/TouchEvents[JT] var ontouchcancel: js.Function1[raw.TouchEvent, _]
ext/TouchEvents[JT] var ontouchend: js.Function1[raw.TouchEvent, _]
ext/TouchEvents[JT] var ontouchmove: js.Function1[raw.TouchEvent, _]
ext/TouchEvents[JT] var ontouchstart: js.Function1[raw.TouchEvent, _]
ext/TouchEvents[SO] implicit def HTMLDocumentToTouchEvents(html: raw.HTMLDocument): TouchEvents
ext/TouchEvents[SO] implicit def WindowToTouchEvents(window: raw.Window): TouchEvents
ext/package[SO] def cast[T] = x.asInstanceOf[T]
ext/package[SO] implicit def color2String(c: Color): String
ext/package[SO] def fillCircle(x: Double, y: Double, r: Double) = { prepCircle(x, y, r) ctx.fill() }
ext/package[SO] def fillPath(points: (Double, Double)*) = { prepPath(points) ctx.fill() }
ext/package[SO] implicit def pimpAnimatedLength(x: svg.AnimatedLength): Double
ext/package[SO] implicit def pimpAnimatedNumber(x: svg.AnimatedNumber): Double
ext/package[SO] implicit def pimpNamedNodeMap(namedNodeMap: NamedNodeMap): NamedNodeMapMap
ext/package[SO] implicit def pimpRichAnimatedLength(x: svg.AnimatedLength): runtime.RichDouble
ext/package[SO] implicit def pimpRichAnimatedNumber(x: svg.AnimatedNumber): runtime.RichDouble
ext/package[SO] def prepCircle(x: Double, y: Double, r: Double) = { ctx.beginPath() ctx.arc(x, y, r, 0, math.Pi * 2) }
ext/package[SO] def prepPath(points: Seq[(Double, Double)], closed: Boolean = true) = { ctx.beginPath() if (closed) ctx.moveTo(points.last._1, points.last._2) for (p <- points) { ctx.lineTo(p._1, p._2) } }
ext/package[SO] def strokeCircle(x: Double, y: Double, r: Double) = { prepCircle(x, y, r) ctx.stroke() }
ext/package[SO] def strokePath(points: (Double, Double)*) = { prepPath(points) ctx.stroke() }
ext/package[SO] def strokePathOpen(points: (Double, Double)*) = { prepPath(points, closed = false) ctx.stroke() }
ext/package.Castable[SC] def cast[T] = x.asInstanceOf[T]
ext/package.PimpedHtmlCollection[SC] def apply(x: Int) = jsApply(x)
ext/package.PimpedHtmlCollection[SC] def hasNext: scala.Boolean
ext/package.PimpedHtmlCollection[SC] def iterator = new Iterator[T] { var index = 0 def hasNext: scala.Boolean = index < jsLength def next() = { val res = jsApply(index) index + = 1 res } }
ext/package.PimpedHtmlCollection[SC] def length = jsLength
ext/package.PimpedHtmlCollection[SC] def next() = { val res = jsApply(index) index + = 1 res }
ext/package.PimpedNodeList[SC] def apply(x: Int) = jsApply(x)
ext/package.PimpedNodeList[SC] def hasNext: scala.Boolean
ext/package.PimpedNodeList[SC] def iterator = new Iterator[T] { var index = 0 def hasNext: scala.Boolean = index < jsLength def next() = { val res = jsApply(index) index + = 1 res } }
ext/package.PimpedNodeList[SC] def length = jsLength
ext/package.PimpedNodeList[SC] def next() = { val res = jsApply(index) index + = 1 res }
ext/package.PimpedSVGTransformList[SC] def apply(x: Int) = jsApply(x)
ext/package.PimpedSVGTransformList[SC] def hasNext: scala.Boolean
ext/package.PimpedSVGTransformList[SC] def iterator = new Iterator[T] { var index = 0 def hasNext: scala.Boolean = index < jsLength def next() = { val res = jsApply(index) index + = 1 res } }
ext/package.PimpedSVGTransformList[SC] def length = jsLength
ext/package.PimpedSVGTransformList[SC] def next() = { val res = jsApply(index) index + = 1 res }
ext/package.PimpedTouchList[SC] def apply(x: Int) = jsApply(x)
ext/package.PimpedTouchList[SC] def hasNext: scala.Boolean
ext/package.PimpedTouchList[SC] def iterator = new Iterator[T] { var index = 0 def hasNext: scala.Boolean = index < jsLength def next() = { val res = jsApply(index) index + = 1 res } }
ext/package.PimpedTouchList[SC] def length = jsLength
ext/package.PimpedTouchList[SC] def next() = { val res = jsApply(index) index + = 1 res }
ext/package.pimpedContext[SC] def fillCircle(x: Double, y: Double, r: Double) = { prepCircle(x, y, r) ctx.fill() }
ext/package.pimpedContext[SC] def fillPath(points: (Double, Double)*) = { prepPath(points) ctx.fill() }
ext/package.pimpedContext[SC] def prepCircle(x: Double, y: Double, r: Double) = { ctx.beginPath() ctx.arc(x, y, r, 0, math.Pi * 2) }
ext/package.pimpedContext[SC] def prepPath(points: Seq[(Double, Double)], closed: Boolean = true) = { ctx.beginPath() if (closed) ctx.moveTo(points.last._1, points.last._2) for (p <- points) { ctx.lineTo(p._1, p._2) } }
ext/package.pimpedContext[SC] def strokeCircle(x: Double, y: Double, r: Double) = { prepCircle(x, y, r) ctx.stroke() }
ext/package.pimpedContext[SC] def strokePath(points: (Double, Double)*) = { prepPath(points) ctx.stroke() }
ext/package.pimpedContext[SC] def strokePathOpen(points: (Double, Double)*) = { prepPath(points, closed = false) ctx.stroke() }
html[SO] type Anchor = raw.HTMLAnchorElement
html[SO] type Area = raw.HTMLAreaElement
html[SO] type Audio = raw.HTMLAudioElement
html[SO] type BR = raw.HTMLBRElement
html[SO] type Base = raw.HTMLBaseElement
html[SO] type Body = raw.HTMLBodyElement
html[SO] type Button = raw.HTMLButtonElement
html[SO] type Canvas = raw.HTMLCanvasElement
html[SO] type Collection = raw.HTMLCollection
html[SO] type DList = raw.HTMLDListElement
html[SO] type DataList = raw.HTMLDataListElement
html[SO] type Div = raw.HTMLDivElement
html[SO] type Document = raw.HTMLDocument
html[SO] type Element = raw.HTMLElement
html[SO] type Embed = raw.HTMLEmbedElement
html[SO] type FieldSet = raw.HTMLFieldSetElement
html[SO] type Form = raw.HTMLFormElement
html[SO] type HR = raw.HTMLHRElement
html[SO] type Head = raw.HTMLHeadElement
html[SO] type Heading = raw.HTMLHeadingElement
html[SO] type Html = raw.HTMLHtmlElement
html[SO] type IFrame = raw.HTMLIFrameElement
html[SO] type Image = raw.HTMLImageElement
html[SO] type Input = raw.HTMLInputElement
html[SO] type LI = raw.HTMLLIElement
html[SO] type Label = raw.HTMLLabelElement
html[SO] type Legend = raw.HTMLLegendElement
html[SO] type Link = raw.HTMLLinkElement
html[SO] type Map = raw.HTMLMapElement
html[SO] type Media = raw.HTMLMediaElement
html[SO] type Menu = raw.HTMLMenuElement
html[SO] type Meta = raw.HTMLMetaElement
html[SO] type Mod = raw.HTMLModElement
html[SO] type OList = raw.HTMLOListElement
html[SO] type Object = raw.HTMLObjectElement
html[SO] type OptGroup = raw.HTMLOptGroupElement
html[SO] type Option = raw.HTMLOptionElement
html[SO] type Paragraph = raw.HTMLParagraphElement
html[SO] type Param = raw.HTMLParamElement
html[SO] type Pre = raw.HTMLPreElement
html[SO] type Progress = raw.HTMLProgressElement
html[SO] type Quote = raw.HTMLQuoteElement
html[SO] type Script = raw.HTMLScriptElement
html[SO] type Select = raw.HTMLSelectElement
html[SO] type Source = raw.HTMLSourceElement
html[SO] type Span = raw.HTMLSpanElement
html[SO] type Style = raw.HTMLStyleElement
html[SO] type Table = raw.HTMLTableElement
html[SO] type TableAlignment = raw.HTMLTableAlignment
html[SO] type TableCaption = raw.HTMLTableCaptionElement
html[SO] type TableCell = raw.HTMLTableCellElement
html[SO] type TableCol = raw.HTMLTableColElement
html[SO] type TableRow = raw.HTMLTableRowElement
html[SO] type TableSection = raw.HTMLTableSectionElement
html[SO] type TextArea = raw.HTMLTextAreaElement
html[SO] type Title = raw.HTMLTitleElement
html[SO] type Track = raw.HTMLTrackElement
html[SO] type UList = raw.HTMLUListElement
html[SO] type Unknown = raw.HTMLUnknownElement
html[SO] type Video = raw.HTMLVideoElement
html[SO] def Media = raw.HTMLMediaElement
idb[SO] type Cursor = raw.IDBCursor
idb[SO] type CursorWithValue = raw.IDBCursorWithValue
idb[SO] type Database = raw.IDBDatabase
idb[SO] type Environment = raw.IDBEnvironment  (@deprecated in 1.2.0)
idb[SO] type Factory = raw.IDBFactory
idb[SO] type Index = raw.IDBIndex
idb[SO] type KeyRange = raw.IDBKeyRange
idb[SO] type ObjectStore = raw.IDBObjectStore
idb[SO] type OpenDBRequest = raw.IDBOpenDBRequest
idb[SO] type Request = raw.IDBRequest
idb[SO] type Transaction = raw.IDBTransaction
idb[SO] type VersionChangeEvent = raw.IDBVersionChangeEvent
idb[SO] def Cursor = raw.IDBCursor
idb[SO] def KeyRange = raw.IDBKeyRange
idb[SO] def Transaction = raw.IDBTransaction
package[SO] type AnalyserNode = raw.AnalyserNode
package[SO] type AnimationEvent = raw.AnimationEvent
package[SO] type ApplicationCache = raw.ApplicationCache
package[SO] type Attr = raw.Attr
package[SO] type AudioBuffer = raw.AudioBuffer
package[SO] type AudioBufferSourceNode = raw.AudioBufferSourceNode
package[SO] type AudioContext = raw.AudioContext
package[SO] type AudioDestinationNode = raw.AudioDestinationNode
package[SO] type AudioListener = raw.AudioListener
package[SO] type AudioNode = raw.AudioNode
package[SO] type AudioParam = raw.AudioParam
package[SO] type AudioTrack = raw.AudioTrack
package[SO] type AudioTrackList = raw.AudioTrackList
package[SO] type BeforeUnloadEvent = raw.BeforeUnloadEvent
package[SO] type BiquadFilterNode = raw.BiquadFilterNode
package[SO] type Blob = raw.Blob
package[SO] type BlobPropertyBag = raw.BlobPropertyBag
package[SO] type CDATASection = raw.CDATASection
package[SO] type CanvasGradient = raw.CanvasGradient
package[SO] type CanvasPattern = raw.CanvasPattern
package[SO] type CanvasRenderingContext2D = raw.CanvasRenderingContext2D
package[SO] type ChannelMergerNode = raw.ChannelMergerNode
package[SO] type ChannelSplitterNode = raw.ChannelSplitterNode
package[SO] type CharacterData = raw.CharacterData
package[SO] type ClientRect = raw.ClientRect
package[SO] type ClientRectList = raw.ClientRectList
package[SO] type ClipboardEvent = raw.ClipboardEvent
package[SO] type ClipboardEventInit = raw.ClipboardEventInit
package[SO] type CloseEvent = raw.CloseEvent
package[SO] type Comment = raw.Comment
package[SO] type CompositionEvent = raw.CompositionEvent
package[SO] type Console = raw.Console
package[SO] type ConvolverNode = raw.ConvolverNode
package[SO] type Coordinates = raw.Coordinates
package[SO] type CustomEvent = raw.CustomEvent
package[SO] type DOMException = raw.DOMException
package[SO] type DOMImplementation = raw.DOMImplementation
package[SO] type DOMList[T] = raw.DOMList[T]
package[SO] type DOMParser = raw.DOMParser
package[SO] type DOMSettableTokenList = raw.DOMSettableTokenList
package[SO] type DOMStringList = raw.DOMStringList
package[SO] type DOMTokenList = raw.DOMTokenList
package[SO] type DataTransfer = raw.DataTransfer
package[SO] type DelayNode = raw.DelayNode
package[SO] type Document = raw.Document
package[SO] type DocumentEvent = raw.DocumentEvent
package[SO] type DocumentFragment = raw.DocumentFragment
package[SO] type DocumentType = raw.DocumentType
package[SO] type DragEvent = raw.DragEvent
package[SO] type DynamicsCompressorNode = raw.DynamicsCompressorNode
package[SO] type Element = raw.Element
package[SO] type ErrorEvent = raw.ErrorEvent
package[SO] type Event = raw.Event
package[SO] type EventException = raw.EventException
package[SO] type EventSource = raw.EventSource
package[SO] type EventTarget = raw.EventTarget
package[SO] type External = raw.External
package[SO] type File = raw.File
package[SO] type FileList = raw.FileList
package[SO] type FileReader = raw.FileReader
package[SO] type FocusEvent = raw.FocusEvent
package[SO] type FormData = raw.FormData
package[SO] type GainNode = raw.GainNode
package[SO] type Geolocation = raw.Geolocation
package[SO] type HashChangeEvent = raw.HashChangeEvent
package[SO] type History = raw.History
package[SO] type ImageData = raw.ImageData
package[SO] type KeyboardEvent = raw.KeyboardEvent
package[SO] type KeyboardEventInit = raw.KeyboardEventInit
package[SO] type LinkStyle = raw.LinkStyle
package[SO] type Location = raw.Location
package[SO] type MediaElementAudioSourceNode = raw.MediaElementAudioSourceNode
package[SO] type MediaError = raw.MediaError
package[SO] type MediaList = raw.MediaList
package[SO] type MediaQueryList = raw.MediaQueryList
package[SO] type MediaQueryListListener = raw.MediaQueryListListener
package[SO] type MediaStreamAudioDestinationNode = raw.MediaStreamAudioDestinationNode
package[SO] type MediaStreamAudioSourceNode = raw.MediaStreamAudioSourceNode
package[SO] type MessageChannel = raw.MessageChannel
package[SO] type MessageEvent = raw.MessageEvent
package[SO] type MessagePort = raw.MessagePort
package[SO] type ModifierKeyEvent = raw.ModifierKeyEvent
package[SO] type MouseEvent = raw.MouseEvent
package[SO] type MutationObserver = raw.MutationObserver
package[SO] type MutationObserverInit = raw.MutationObserverInit
package[SO] type MutationRecord = raw.MutationRecord
package[SO] type NamedNodeMap = raw.NamedNodeMap
package[SO] type Navigator = raw.Navigator
package[SO] type NavigatorContentUtils = raw.NavigatorContentUtils
package[SO] type NavigatorGeolocation = raw.NavigatorGeolocation
package[SO] type NavigatorID = raw.NavigatorID
package[SO] type NavigatorLanguage = raw.NavigatorLanguage
package[SO] type NavigatorOnLine = raw.NavigatorOnLine
package[SO] type NavigatorStorageUtils = raw.NavigatorStorageUtils
package[SO] type Node = raw.Node
package[SO] type NodeFilter = raw.NodeFilter
package[SO] type NodeIterator = raw.NodeIterator
package[SO] type NodeList = raw.NodeList
package[SO] type NodeListOf[TNode <: Node] = raw.NodeListOf[TNode]
package[SO] type NodeSelector = raw.NodeSelector
package[SO] type OfflineAudioContext = raw.OfflineAudioContext
package[SO] type OscillatorNode = raw.OscillatorNode
package[SO] type PannerNode = raw.PannerNode
package[SO] type ParentNode = raw.ParentNode
package[SO] type Performance = raw.Performance
package[SO] type PerformanceEntry = raw.PerformanceEntry
package[SO] type PerformanceMark = raw.PerformanceMark
package[SO] type PerformanceMeasure = raw.PerformanceMeasure
package[SO] type PerformanceNavigation = raw.PerformanceNavigation
package[SO] type PerformanceResourceTiming = raw.PerformanceResourceTiming
package[SO] type PerformanceTiming = raw.PerformanceTiming
package[SO] type PeriodicWave = raw.PeriodicWave
package[SO] type PointerEvent = raw.PointerEvent
package[SO] type PointerEventInit = raw.PointerEventInit
package[SO] type PopStateEvent = raw.PopStateEvent
package[SO] type Position = raw.Position
package[SO] type PositionError = raw.PositionError
package[SO] type PositionOptions = raw.PositionOptions
package[SO] type ProcessingInstruction = raw.ProcessingInstruction
package[SO] type ProgressEvent = raw.ProgressEvent
package[SO] type Range = raw.Range
package[SO] type Screen = raw.Screen
package[SO] type Selection = raw.Selection
package[SO] type StereoPannerNode = raw.StereoPannerNode
package[SO] type Storage = raw.Storage
package[SO] type StorageEvent = raw.StorageEvent
package[SO] type StyleMedia = raw.StyleMedia
package[SO] type StyleSheet = raw.StyleSheet
package[SO] type StyleSheetList = raw.StyleSheetList
package[SO] type Text = raw.Text
package[SO] type TextEvent = raw.TextEvent
package[SO] type TextMetrics = raw.TextMetrics
package[SO] type TextTrack = raw.TextTrack
package[SO] type TextTrackCue = raw.TextTrackCue
package[SO] type TextTrackCueList = raw.TextTrackCueList
package[SO] type TextTrackList = raw.TextTrackList
package[SO] type TimeRanges = raw.TimeRanges
package[SO] type Touch = raw.Touch
package[SO] type TouchEvent = raw.TouchEvent
package[SO] type TouchList = raw.TouchList
package[SO] type TrackEvent = raw.TrackEvent
package[SO] type Transferable = raw.Transferable
package[SO] type TransitionEvent = raw.TransitionEvent
package[SO] type TreeWalker = raw.TreeWalker
package[SO] type UIEvent = raw.UIEvent
package[SO] type ValidityState = raw.ValidityState
package[SO] type VisibilityState = raw.VisibilityState
package[SO] type WaveShaperNode = raw.WaveShaperNode
package[SO] type WebSocket = raw.WebSocket
package[SO] type WheelEvent = raw.WheelEvent
package[SO] type Window = raw.Window
package[SO] type WindowBase64 = raw.WindowBase64
package[SO] type WindowConsole = raw.WindowConsole
package[SO] type WindowLocalStorage = raw.WindowLocalStorage
package[SO] type WindowSessionStorage = raw.WindowSessionStorage
package[SO] type WindowTimers = raw.WindowTimers
package[SO] type XMLHttpRequest = raw.XMLHttpRequest
package[SO] type XMLHttpRequestEventTarget = raw.XMLHttpRequestEventTarget
package[SO] type XMLSerializer = raw.XMLSerializer
package[SO] type XPathNSResolver = raw.XPathNSResolver
package[SO] type XPathResult = raw.XPathResult
package[SO] lazy val ApplicationCache: raw.ApplicationCache.type
package[SO] lazy val Blob: raw.Blob.type
package[SO] lazy val BlobPropertyBag: raw.BlobPropertyBag.type
package[SO] lazy val DOMException: raw.DOMException.type
package[SO] lazy val Event: raw.Event.type
package[SO] lazy val EventException: raw.EventException.type
package[SO] lazy val EventSource: raw.EventSource.type
package[SO] lazy val FileReader: raw.FileReader.type
package[SO] lazy val FormData: raw.FormData.type
package[SO] lazy val KeyboardEvent: raw.KeyboardEvent.type
package[SO] lazy val MediaError: raw.MediaError.type
package[SO] lazy val MutationObserverInit: raw.MutationObserverInit.type
package[SO] lazy val Node: raw.Node.type
package[SO] lazy val NodeFilter: raw.NodeFilter.type
package[SO] lazy val PerformanceNavigation: raw.PerformanceNavigation.type
package[SO] lazy val PositionError: raw.PositionError.type
package[SO] lazy val Range: raw.Range.type
package[SO] lazy val TextEvent: raw.TextEvent.type
package[SO] lazy val TextTrack: raw.TextTrack.type
package[SO] lazy val URL: raw.URL.type
package[SO] lazy val VisibilityState: raw.VisibilityState.type
package[SO] lazy val WebSocket: raw.WebSocket.type
package[SO] lazy val WheelEvent: raw.WheelEvent.type
package[SO] lazy val XMLHttpRequest: raw.XMLHttpRequest.type
package[SO] lazy val XPathResult: raw.XPathResult.type
package[SO] lazy val console: Console
package[SO] lazy val document: html.Document
package[SO] lazy val window: Window
raw/AbstractWorker[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/AbstractWorker[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/AbstractWorker[JT] def dispatchEvent(evt: Event): Boolean
raw/AbstractWorker[JT] var onerror: js.Function1[ErrorEvent, _]
raw/AbstractWorker[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/AbstractWorker[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/AnalyserNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/AnalyserNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/AnalyserNode[JT] var channelCount: Int
raw/AnalyserNode[JT] var channelCountMode: Int
raw/AnalyserNode[JT] var channelInterpretation: String
raw/AnalyserNode[JT] def connect(audioNode: AudioNode): Unit
raw/AnalyserNode[JT] def connect(audioParam: AudioParam): Unit
raw/AnalyserNode[JT] val context: AudioContext
raw/AnalyserNode[JT] def disconnect(output: AudioNode?): Unit
raw/AnalyserNode[JT] def dispatchEvent(evt: Event): Boolean
raw/AnalyserNode[JT] var fftSize: Int
raw/AnalyserNode[JT] val frequencyBinCount: Int
raw/AnalyserNode[JT] def getByteFrequencyData(array: js.typedarray.Uint8Array): Unit
raw/AnalyserNode[JT] def getByteTimeDomainData(array: js.typedarray.Uint8Array): Unit
raw/AnalyserNode[JT] def getFloatFrequencyData(array: js.typedarray.Float32Array): Unit
raw/AnalyserNode[JT] def getFloatTimeDomainData(array: js.typedarray.Float32Array): Unit
raw/AnalyserNode[JT] var maxDecibels: Double
raw/AnalyserNode[JT] var minDecibels: Double
raw/AnalyserNode[JT] val numberOfInputs: Int
raw/AnalyserNode[JT] val numberOfOutputs: Int
raw/AnalyserNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/AnalyserNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/AnalyserNode[JT] var smoothingTimeConstant: Double
raw/AnimationEvent[JT] def animationName: String
raw/AnimationEvent[JT] def bubbles: Boolean
raw/AnimationEvent[JT] def cancelBubble: Boolean
raw/AnimationEvent[JT] def cancelable: Boolean
raw/AnimationEvent[JT] def currentTarget: EventTarget
raw/AnimationEvent[JT] def defaultPrevented: Boolean
raw/AnimationEvent[JT] def elapsedTime: Double
raw/AnimationEvent[JT] def eventPhase: Int
raw/AnimationEvent[JT] def isTrusted: Boolean
raw/AnimationEvent[JT] def preventDefault(): Unit
raw/AnimationEvent[JT] def stopImmediatePropagation(): Unit
raw/AnimationEvent[JT] def stopPropagation(): Unit
raw/AnimationEvent[JT] def target: EventTarget
raw/AnimationEvent[JT] def timeStamp: Double
raw/AnimationEvent[JT] def `type`: String
raw/ApplicationCache[JO] val CHECKING: Int
raw/ApplicationCache[JO] val DOWNLOADING: Int
raw/ApplicationCache[JO] val IDLE: Int
raw/ApplicationCache[JO] val OBSOLETE: Int
raw/ApplicationCache[JO] val UNCACHED: Int
raw/ApplicationCache[JO] val UPDATEREADY: Int
raw/ApplicationCache[JT] def abort(): Unit
raw/ApplicationCache[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/ApplicationCache[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/ApplicationCache[JT] def dispatchEvent(evt: Event): Boolean
raw/ApplicationCache[JT] var oncached: js.Function1[Event, _]
raw/ApplicationCache[JT] var onchecking: js.Function1[Event, _]
raw/ApplicationCache[JT] var ondownloading: js.Function1[Event, _]
raw/ApplicationCache[JT] var onerror: js.Function1[ErrorEvent, _]
raw/ApplicationCache[JT] var onnoupdate: js.Function1[Event, _]
raw/ApplicationCache[JT] var onobsolete: js.Function1[Event, _]
raw/ApplicationCache[JT] var onprogress: js.Function1[ProgressEvent, _]
raw/ApplicationCache[JT] var onupdateready: js.Function1[Event, _]
raw/ApplicationCache[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/ApplicationCache[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/ApplicationCache[JT] def status: Int
raw/ApplicationCache[JT] def swapCache(): Unit
raw/ApplicationCache[JT] def update(): Unit
raw/Attr[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/Attr[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Attr[JC] def appendChild(newChild: Node): Node
raw/Attr[JC] def attributes: NamedNodeMap
raw/Attr[JC] def childNodes: NodeList
raw/Attr[JC] def cloneNode(deep: Boolean?): Node
raw/Attr[JC] def compareDocumentPosition(other: Node): Int
raw/Attr[JC] def contains(otherNode: Node): Boolean
raw/Attr[JC] def dispatchEvent(evt: Event): Boolean
raw/Attr[JC] def firstChild: Node
raw/Attr[JC] def hasAttributes(): Boolean
raw/Attr[JC] def hasChildNodes(): Boolean
raw/Attr[JC] var innerText: String
raw/Attr[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/Attr[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/Attr[JC] def isEqualNode(arg: Node): Boolean
raw/Attr[JC] def isSameNode(other: Node): Boolean
raw/Attr[JC] def isSupported(feature: String, version: String): Boolean
raw/Attr[JC] def lastChild: Node
raw/Attr[JC] def localName: String
raw/Attr[JC] def lookupNamespaceURI(prefix: String): String
raw/Attr[JC] def lookupPrefix(namespaceURI: String): String
raw/Attr[JC] def name: String
raw/Attr[JC] def namespaceURI: String
raw/Attr[JC] def nextSibling: Node
raw/Attr[JC] def nodeName: String
raw/Attr[JC] def nodeType: Int
raw/Attr[JC] var nodeValue: String
raw/Attr[JC] def normalize(): Unit
raw/Attr[JC] def ownerDocument: Document
raw/Attr[JC] def ownerElement: Element
raw/Attr[JC] def parentNode: Node
raw/Attr[JC] def prefix: String
raw/Attr[JC] def previousSibling: Node
raw/Attr[JC] def removeChild(oldChild: Node): Node
raw/Attr[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/Attr[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Attr[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/Attr[JC] def specified: Boolean
raw/Attr[JC] var textContent: String
raw/Attr[JC] var value: String
raw/AudioBuffer[JT] def copyFromChannel(destination: js.typedarray.Float32Array, channelNumber: Int, startInChannel: Int): Unit
raw/AudioBuffer[JT] def copyToChannel(source: js.typedarray.Float32Array, channelNumber: Int, startInChannel: Int): Unit
raw/AudioBuffer[JT] val duration: Double
raw/AudioBuffer[JT] def getChannelData(channel: Int): js.typedarray.Float32Array
raw/AudioBuffer[JT] val length: Int
raw/AudioBuffer[JT] val numberOfChannels: Int
raw/AudioBuffer[JT] val sampleRate: Double
raw/AudioBufferSourceNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/AudioBufferSourceNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/AudioBufferSourceNode[JT] var buffer: AudioBuffer
raw/AudioBufferSourceNode[JT] var channelCount: Int
raw/AudioBufferSourceNode[JT] var channelCountMode: Int
raw/AudioBufferSourceNode[JT] var channelInterpretation: String
raw/AudioBufferSourceNode[JT] def connect(audioNode: AudioNode): Unit
raw/AudioBufferSourceNode[JT] def connect(audioParam: AudioParam): Unit
raw/AudioBufferSourceNode[JT] val context: AudioContext
raw/AudioBufferSourceNode[JT] def disconnect(output: AudioNode?): Unit
raw/AudioBufferSourceNode[JT] def dispatchEvent(evt: Event): Boolean
raw/AudioBufferSourceNode[JT] var loop: Boolean
raw/AudioBufferSourceNode[JT] var loopEnd: Double
raw/AudioBufferSourceNode[JT] var loopStart: Double
raw/AudioBufferSourceNode[JT] val numberOfInputs: Int
raw/AudioBufferSourceNode[JT] val numberOfOutputs: Int
raw/AudioBufferSourceNode[JT] var onended: js.Function1[Event, _]
raw/AudioBufferSourceNode[JT] val playbackRate: AudioParam
raw/AudioBufferSourceNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/AudioBufferSourceNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/AudioBufferSourceNode[JT] def start(when: Double = 0.0d, offset: Double = 0.0d, duration: Double?): Unit
raw/AudioBufferSourceNode[JT] def stop(when: Double = 0.0d): Unit
raw/AudioContext[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/AudioContext[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/AudioContext[JC] def close(): js.Promise[Unit]
raw/AudioContext[JC] def createAnalyser(): AnalyserNode
raw/AudioContext[JC] def createBiquadFilter(): BiquadFilterNode
raw/AudioContext[JC] def createBuffer(numOfChannels: Int, length: Int, sampleRate: Int): AudioBuffer
raw/AudioContext[JC] def createBufferSource(): AudioBufferSourceNode
raw/AudioContext[JC] def createChannelMerger(numberOfInputs: Int = 6): ChannelMergerNode
raw/AudioContext[JC] def createChannelSplitter(numberOfOutputs: Int = 6): ChannelSplitterNode
raw/AudioContext[JC] def createConvolver(): ConvolverNode
raw/AudioContext[JC] def createDelay(maxDelayTime: Int): DelayNode
raw/AudioContext[JC] def createDynamicsCompressor(): DynamicsCompressorNode
raw/AudioContext[JC] def createGain(): GainNode
raw/AudioContext[JC] def createMediaElementSource(myMediaElement: HTMLMediaElement): MediaElementAudioSourceNode
raw/AudioContext[JC] def createMediaStreamDestination(): MediaStreamAudioDestinationNode
raw/AudioContext[JC] def createMediaStreamSource(stream: MediaStream): MediaStreamAudioSourceNode
raw/AudioContext[JC] def createOscillator(): OscillatorNode
raw/AudioContext[JC] def createPanner(): PannerNode
raw/AudioContext[JC] def createPeriodicWave(real: js.typedarray.Float32Array, imag: js.typedarray.Float32Array): PeriodicWave
raw/AudioContext[JC] def createStereoPanner(): StereoPannerNode
raw/AudioContext[JC] def createWaveShaper(): WaveShaperNode
raw/AudioContext[JC] def currentTime: Double
raw/AudioContext[JC] def decodeAudioData(audioData: js.typedarray.ArrayBuffer, successCallback: js.Function1[AudioBuffer, _]?, errorCallback: js.Function0[_]?): js.Promise[AudioBuffer]
raw/AudioContext[JC] val destination: AudioDestinationNode
raw/AudioContext[JC] def dispatchEvent(evt: Event): Boolean
raw/AudioContext[JC] val listener: AudioListener
raw/AudioContext[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/AudioContext[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/AudioContext[JC] def resume(): js.Promise[Unit]
raw/AudioContext[JC] val sampleRate: Double
raw/AudioContext[JC] def state: String
raw/AudioContext[JC] def suspend(): js.Promise[Unit]
raw/AudioDestinationNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/AudioDestinationNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/AudioDestinationNode[JT] var channelCount: Int
raw/AudioDestinationNode[JT] var channelCountMode: Int
raw/AudioDestinationNode[JT] var channelInterpretation: String
raw/AudioDestinationNode[JT] def connect(audioNode: AudioNode): Unit
raw/AudioDestinationNode[JT] def connect(audioParam: AudioParam): Unit
raw/AudioDestinationNode[JT] val context: AudioContext
raw/AudioDestinationNode[JT] def disconnect(output: AudioNode?): Unit
raw/AudioDestinationNode[JT] def dispatchEvent(evt: Event): Boolean
raw/AudioDestinationNode[JT] var maxChannelCount: Int
raw/AudioDestinationNode[JT] val numberOfInputs: Int
raw/AudioDestinationNode[JT] val numberOfOutputs: Int
raw/AudioDestinationNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/AudioDestinationNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/AudioListener[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/AudioListener[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/AudioListener[JT] var channelCount: Int
raw/AudioListener[JT] var channelCountMode: Int
raw/AudioListener[JT] var channelInterpretation: String
raw/AudioListener[JT] def connect(audioNode: AudioNode): Unit
raw/AudioListener[JT] def connect(audioParam: AudioParam): Unit
raw/AudioListener[JT] val context: AudioContext
raw/AudioListener[JT] def disconnect(output: AudioNode?): Unit
raw/AudioListener[JT] def dispatchEvent(evt: Event): Boolean
raw/AudioListener[JT] var dopplerFactor: Double
raw/AudioListener[JT] val numberOfInputs: Int
raw/AudioListener[JT] val numberOfOutputs: Int
raw/AudioListener[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/AudioListener[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/AudioListener[JT] def setOrientation(x: Double = 0.0d, y: Double = 0.0d, z: Double = -1.0d, xUp: Double = 0.0d, yUp: Double = 1.0d, zUp: Double = 0.0d): Unit
raw/AudioListener[JT] def setPosition(x: Double = 0.0d, y: Double = 0.0d, z: Double = 0.0d): Unit
raw/AudioListener[JT] var speedOfSound: Double
raw/AudioNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/AudioNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/AudioNode[JT] var channelCount: Int
raw/AudioNode[JT] var channelCountMode: Int
raw/AudioNode[JT] var channelInterpretation: String
raw/AudioNode[JT] def connect(audioNode: AudioNode): Unit
raw/AudioNode[JT] def connect(audioParam: AudioParam): Unit
raw/AudioNode[JT] val context: AudioContext
raw/AudioNode[JT] def disconnect(output: AudioNode?): Unit
raw/AudioNode[JT] def dispatchEvent(evt: Event): Boolean
raw/AudioNode[JT] val numberOfInputs: Int
raw/AudioNode[JT] val numberOfOutputs: Int
raw/AudioNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/AudioNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/AudioParam[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/AudioParam[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/AudioParam[JT] def cancelScheduledValues(startTime: Double): Unit
raw/AudioParam[JT] var channelCount: Int
raw/AudioParam[JT] var channelCountMode: Int
raw/AudioParam[JT] var channelInterpretation: String
raw/AudioParam[JT] def connect(audioNode: AudioNode): Unit
raw/AudioParam[JT] def connect(audioParam: AudioParam): Unit
raw/AudioParam[JT] val context: AudioContext
raw/AudioParam[JT] val defaultValue: Double
raw/AudioParam[JT] def disconnect(output: AudioNode?): Unit
raw/AudioParam[JT] def dispatchEvent(evt: Event): Boolean
raw/AudioParam[JT] def exponentialRampToValueAtTime(value: Double, endTime: Double): Unit
raw/AudioParam[JT] def linearRampToValueAtTime(value: Double, endTime: Double): Unit
raw/AudioParam[JT] val numberOfInputs: Int
raw/AudioParam[JT] val numberOfOutputs: Int
raw/AudioParam[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/AudioParam[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/AudioParam[JT] def setTargetAtTime(target: Double, startTime: Double, timeConstant: Double): Unit
raw/AudioParam[JT] def setValueAtTime(value: Double, startTime: Double): Unit
raw/AudioParam[JT] def setValueCurveAtTime(values: js.typedarray.Float32Array, startTime: Double, duration: Double): Unit
raw/AudioParam[JT] var value: Double
raw/AudioTrack[JT] var enabled: Boolean
raw/AudioTrack[JT] val id: String
raw/AudioTrack[JT] val kind: String
raw/AudioTrack[JT] val label: String
raw/AudioTrack[JT] val language: String
raw/AudioTrackList[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/AudioTrackList[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/AudioTrackList[JT] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): T
raw/AudioTrackList[JT] def dispatchEvent(evt: Event): Boolean
raw/AudioTrackList[JT] def getTrackById(id: String): AudioTrack
raw/AudioTrackList[JT] def item(index: Int): T
raw/AudioTrackList[JT] def length: Int
raw/AudioTrackList[JT] var onaddtrack: js.Function1[TrackEvent, _]
raw/AudioTrackList[JT] var onchange: js.Function1[js.Any, _]
raw/AudioTrackList[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/AudioTrackList[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/AudioTrackList[JT] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: T): Unit
raw/BeforeUnloadEvent[JC] def bubbles: Boolean
raw/BeforeUnloadEvent[JC] def cancelBubble: Boolean
raw/BeforeUnloadEvent[JC] def cancelable: Boolean
raw/BeforeUnloadEvent[JC] def currentTarget: EventTarget
raw/BeforeUnloadEvent[JC] def defaultPrevented: Boolean
raw/BeforeUnloadEvent[JC] def eventPhase: Int
raw/BeforeUnloadEvent[JC] def isTrusted: Boolean
raw/BeforeUnloadEvent[JC] def preventDefault(): Unit
raw/BeforeUnloadEvent[JC] var returnValue: String
raw/BeforeUnloadEvent[JC] def stopImmediatePropagation(): Unit
raw/BeforeUnloadEvent[JC] def stopPropagation(): Unit
raw/BeforeUnloadEvent[JC] def target: EventTarget
raw/BeforeUnloadEvent[JC] def timeStamp: Double
raw/BeforeUnloadEvent[JC] def `type`: String
raw/BiquadFilterNode[JT] val Q: AudioParam
raw/BiquadFilterNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/BiquadFilterNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/BiquadFilterNode[JT] var channelCount: Int
raw/BiquadFilterNode[JT] var channelCountMode: Int
raw/BiquadFilterNode[JT] var channelInterpretation: String
raw/BiquadFilterNode[JT] def connect(audioNode: AudioNode): Unit
raw/BiquadFilterNode[JT] def connect(audioParam: AudioParam): Unit
raw/BiquadFilterNode[JT] val context: AudioContext
raw/BiquadFilterNode[JT] val detune: AudioParam
raw/BiquadFilterNode[JT] def disconnect(output: AudioNode?): Unit
raw/BiquadFilterNode[JT] def dispatchEvent(evt: Event): Boolean
raw/BiquadFilterNode[JT] val frequency: AudioParam
raw/BiquadFilterNode[JT] val gain: AudioParam
raw/BiquadFilterNode[JT] def getFrequencyResponse(frequencyHz: js.typedarray.Float32Array, magResponse: js.typedarray.Float32Array, phaseResponse: js.typedarray.Float32Array): Unit
raw/BiquadFilterNode[JT] val numberOfInputs: Int
raw/BiquadFilterNode[JT] val numberOfOutputs: Int
raw/BiquadFilterNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/BiquadFilterNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/BiquadFilterNode[JT] var `type`: String
raw/Blob[JC] def arrayBuffer(): js.Promise[ArrayBuffer]
raw/Blob[JC] def close(): Unit  (@deprecated in 1.2.0)
raw/Blob[JC] def size: Double
raw/Blob[JC] def slice(start: Double?, end: Double?, contentType: String?): Blob
raw/Blob[JC] def stream(): ReadableStream[Byte]
raw/Blob[JC] def text(): js.Promise[String]
raw/Blob[JC] def `type`: String
raw/Blob[JO]
raw/BlobPropertyBag[JT] def endings: String
raw/BlobPropertyBag[JT] def `type`: String
raw/BlobPropertyBag[SO] def apply(`type`: js.UndefOr[String] = js.undefined): BlobPropertyBag
raw/CDATASection[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/CDATASection[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/CDATASection[JC] def appendChild(newChild: Node): Node
raw/CDATASection[JC] def appendData(arg: String): Unit
raw/CDATASection[JC] def attributes: NamedNodeMap
raw/CDATASection[JC] def childNodes: NodeList
raw/CDATASection[JC] def cloneNode(deep: Boolean?): Node
raw/CDATASection[JC] def compareDocumentPosition(other: Node): Int
raw/CDATASection[JC] def contains(otherNode: Node): Boolean
raw/CDATASection[JC] var data: String
raw/CDATASection[JC] def deleteData(offset: Int, count: Int): Unit
raw/CDATASection[JC] def dispatchEvent(evt: Event): Boolean
raw/CDATASection[JC] def firstChild: Node
raw/CDATASection[JC] def hasAttributes(): Boolean
raw/CDATASection[JC] def hasChildNodes(): Boolean
raw/CDATASection[JC] var innerText: String
raw/CDATASection[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/CDATASection[JC] def insertData(offset: Int, arg: String): Unit
raw/CDATASection[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/CDATASection[JC] def isEqualNode(arg: Node): Boolean
raw/CDATASection[JC] def isSameNode(other: Node): Boolean
raw/CDATASection[JC] def isSupported(feature: String, version: String): Boolean
raw/CDATASection[JC] def lastChild: Node
raw/CDATASection[JC] def length: Int
raw/CDATASection[JC] def localName: String
raw/CDATASection[JC] def lookupNamespaceURI(prefix: String): String
raw/CDATASection[JC] def lookupPrefix(namespaceURI: String): String
raw/CDATASection[JC] def namespaceURI: String
raw/CDATASection[JC] def nextElementSibling: Element
raw/CDATASection[JC] def nextSibling: Node
raw/CDATASection[JC] def nodeName: String
raw/CDATASection[JC] def nodeType: Int
raw/CDATASection[JC] var nodeValue: String
raw/CDATASection[JC] def normalize(): Unit
raw/CDATASection[JC] def ownerDocument: Document
raw/CDATASection[JC] def parentNode: Node
raw/CDATASection[JC] def previousElementSibling: Element
raw/CDATASection[JC] def previousSibling: Node
raw/CDATASection[JC] def removeChild(oldChild: Node): Node
raw/CDATASection[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/CDATASection[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/CDATASection[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/CDATASection[JC] def replaceData(offset: Int, count: Int, arg: String): Unit
raw/CDATASection[JC] def splitText(offset: Int): Text
raw/CDATASection[JC] def substringData(offset: Int, count: Int): String
raw/CDATASection[JC] var textContent: String
raw/CDATASection[JC] def wholeText: String
raw/CSS[JO] def supports(propertyName: String, value: String): Boolean
raw/CSS[JO] def supports(supportCondition: String): Boolean
raw/CSSFontFaceRule[JC] var CHARSET_RULE: Int
raw/CSSFontFaceRule[JC] var FONT_FACE_RULE: Int
raw/CSSFontFaceRule[JC] var IMPORT_RULE: Int
raw/CSSFontFaceRule[JC] var KEYFRAMES_RULE: Int
raw/CSSFontFaceRule[JC] var KEYFRAME_RULE: Int
raw/CSSFontFaceRule[JC] var MEDIA_RULE: Int
raw/CSSFontFaceRule[JC] var NAMESPACE_RULE: Int
raw/CSSFontFaceRule[JC] var PAGE_RULE: Int
raw/CSSFontFaceRule[JC] var STYLE_RULE: Int
raw/CSSFontFaceRule[JC] var UNKNOWN_RULE: Int
raw/CSSFontFaceRule[JC] var VIEWPORT_RULE: Int
raw/CSSFontFaceRule[JC] var cssText: String
raw/CSSFontFaceRule[JC] var parentRule: CSSRule
raw/CSSFontFaceRule[JC] var parentStyleSheet: CSSStyleSheet
raw/CSSFontFaceRule[JC] var style: CSSStyleDeclaration
raw/CSSFontFaceRule[JC] var `type`: Int
raw/CSSImportRule[JC] var CHARSET_RULE: Int
raw/CSSImportRule[JC] var FONT_FACE_RULE: Int
raw/CSSImportRule[JC] var IMPORT_RULE: Int
raw/CSSImportRule[JC] var KEYFRAMES_RULE: Int
raw/CSSImportRule[JC] var KEYFRAME_RULE: Int
raw/CSSImportRule[JC] var MEDIA_RULE: Int
raw/CSSImportRule[JC] var NAMESPACE_RULE: Int
raw/CSSImportRule[JC] var PAGE_RULE: Int
raw/CSSImportRule[JC] var STYLE_RULE: Int
raw/CSSImportRule[JC] var UNKNOWN_RULE: Int
raw/CSSImportRule[JC] var VIEWPORT_RULE: Int
raw/CSSImportRule[JC] var cssText: String
raw/CSSImportRule[JC] var href: String
raw/CSSImportRule[JC] var media: MediaList
raw/CSSImportRule[JC] var parentRule: CSSRule
raw/CSSImportRule[JC] var parentStyleSheet: CSSStyleSheet
raw/CSSImportRule[JC] var styleSheet: CSSStyleSheet
raw/CSSImportRule[JC] var `type`: Int
raw/CSSKeyframeRule[JC] var CHARSET_RULE: Int
raw/CSSKeyframeRule[JC] var FONT_FACE_RULE: Int
raw/CSSKeyframeRule[JC] var IMPORT_RULE: Int
raw/CSSKeyframeRule[JC] var KEYFRAMES_RULE: Int
raw/CSSKeyframeRule[JC] var KEYFRAME_RULE: Int
raw/CSSKeyframeRule[JC] var MEDIA_RULE: Int
raw/CSSKeyframeRule[JC] var NAMESPACE_RULE: Int
raw/CSSKeyframeRule[JC] var PAGE_RULE: Int
raw/CSSKeyframeRule[JC] var STYLE_RULE: Int
raw/CSSKeyframeRule[JC] var UNKNOWN_RULE: Int
raw/CSSKeyframeRule[JC] var VIEWPORT_RULE: Int
raw/CSSKeyframeRule[JC] var cssText: String
raw/CSSKeyframeRule[JC] var keyText: String
raw/CSSKeyframeRule[JC] var parentRule: CSSRule
raw/CSSKeyframeRule[JC] var parentStyleSheet: CSSStyleSheet
raw/CSSKeyframeRule[JC] var style: CSSStyleDeclaration
raw/CSSKeyframeRule[JC] var `type`: Int
raw/CSSKeyframesRule[JC] var CHARSET_RULE: Int
raw/CSSKeyframesRule[JC] var FONT_FACE_RULE: Int
raw/CSSKeyframesRule[JC] var IMPORT_RULE: Int
raw/CSSKeyframesRule[JC] var KEYFRAMES_RULE: Int
raw/CSSKeyframesRule[JC] var KEYFRAME_RULE: Int
raw/CSSKeyframesRule[JC] var MEDIA_RULE: Int
raw/CSSKeyframesRule[JC] var NAMESPACE_RULE: Int
raw/CSSKeyframesRule[JC] var PAGE_RULE: Int
raw/CSSKeyframesRule[JC] var STYLE_RULE: Int
raw/CSSKeyframesRule[JC] var UNKNOWN_RULE: Int
raw/CSSKeyframesRule[JC] var VIEWPORT_RULE: Int
raw/CSSKeyframesRule[JC] def appendRule(rule: String): Unit
raw/CSSKeyframesRule[JC] var cssRules: CSSRuleList
raw/CSSKeyframesRule[JC] var cssText: String
raw/CSSKeyframesRule[JC] def deleteRule(rule: String): Unit
raw/CSSKeyframesRule[JC] def findRule(rule: String): CSSKeyframeRule
raw/CSSKeyframesRule[JC] var name: String
raw/CSSKeyframesRule[JC] var parentRule: CSSRule
raw/CSSKeyframesRule[JC] var parentStyleSheet: CSSStyleSheet
raw/CSSKeyframesRule[JC] var `type`: Int
raw/CSSMediaRule[JC] var CHARSET_RULE: Int
raw/CSSMediaRule[JC] var FONT_FACE_RULE: Int
raw/CSSMediaRule[JC] var IMPORT_RULE: Int
raw/CSSMediaRule[JC] var KEYFRAMES_RULE: Int
raw/CSSMediaRule[JC] var KEYFRAME_RULE: Int
raw/CSSMediaRule[JC] var MEDIA_RULE: Int
raw/CSSMediaRule[JC] var NAMESPACE_RULE: Int
raw/CSSMediaRule[JC] var PAGE_RULE: Int
raw/CSSMediaRule[JC] var STYLE_RULE: Int
raw/CSSMediaRule[JC] var UNKNOWN_RULE: Int
raw/CSSMediaRule[JC] var VIEWPORT_RULE: Int
raw/CSSMediaRule[JC] var cssRules: CSSRuleList
raw/CSSMediaRule[JC] var cssText: String
raw/CSSMediaRule[JC] def deleteRule(index: Int?): Unit
raw/CSSMediaRule[JC] def insertRule(rule: String, index: Int?): Int
raw/CSSMediaRule[JC] var media: MediaList
raw/CSSMediaRule[JC] var parentRule: CSSRule
raw/CSSMediaRule[JC] var parentStyleSheet: CSSStyleSheet
raw/CSSMediaRule[JC] var `type`: Int
raw/CSSNamespaceRule[JC] var CHARSET_RULE: Int
raw/CSSNamespaceRule[JC] var FONT_FACE_RULE: Int
raw/CSSNamespaceRule[JC] var IMPORT_RULE: Int
raw/CSSNamespaceRule[JC] var KEYFRAMES_RULE: Int
raw/CSSNamespaceRule[JC] var KEYFRAME_RULE: Int
raw/CSSNamespaceRule[JC] var MEDIA_RULE: Int
raw/CSSNamespaceRule[JC] var NAMESPACE_RULE: Int
raw/CSSNamespaceRule[JC] var PAGE_RULE: Int
raw/CSSNamespaceRule[JC] var STYLE_RULE: Int
raw/CSSNamespaceRule[JC] var UNKNOWN_RULE: Int
raw/CSSNamespaceRule[JC] var VIEWPORT_RULE: Int
raw/CSSNamespaceRule[JC] var cssText: String
raw/CSSNamespaceRule[JC] var namespaceURI: String
raw/CSSNamespaceRule[JC] var parentRule: CSSRule
raw/CSSNamespaceRule[JC] var parentStyleSheet: CSSStyleSheet
raw/CSSNamespaceRule[JC] var prefix: String
raw/CSSNamespaceRule[JC] var `type`: Int
raw/CSSPageRule[JC] var CHARSET_RULE: Int
raw/CSSPageRule[JC] var FONT_FACE_RULE: Int
raw/CSSPageRule[JC] var IMPORT_RULE: Int
raw/CSSPageRule[JC] var KEYFRAMES_RULE: Int
raw/CSSPageRule[JC] var KEYFRAME_RULE: Int
raw/CSSPageRule[JC] var MEDIA_RULE: Int
raw/CSSPageRule[JC] var NAMESPACE_RULE: Int
raw/CSSPageRule[JC] var PAGE_RULE: Int
raw/CSSPageRule[JC] var STYLE_RULE: Int
raw/CSSPageRule[JC] var UNKNOWN_RULE: Int
raw/CSSPageRule[JC] var VIEWPORT_RULE: Int
raw/CSSPageRule[JC] var cssText: String
raw/CSSPageRule[JC] var parentRule: CSSRule
raw/CSSPageRule[JC] var parentStyleSheet: CSSStyleSheet
raw/CSSPageRule[JC] var pseudoClass: String
raw/CSSPageRule[JC] var selector: String
raw/CSSPageRule[JC] var selectorText: String
raw/CSSPageRule[JC] var style: CSSStyleDeclaration
raw/CSSPageRule[JC] var `type`: Int
raw/CSSRule[JC] var CHARSET_RULE: Int
raw/CSSRule[JC] var FONT_FACE_RULE: Int
raw/CSSRule[JC] var IMPORT_RULE: Int
raw/CSSRule[JC] var KEYFRAMES_RULE: Int
raw/CSSRule[JC] var KEYFRAME_RULE: Int
raw/CSSRule[JC] var MEDIA_RULE: Int
raw/CSSRule[JC] var NAMESPACE_RULE: Int
raw/CSSRule[JC] var PAGE_RULE: Int
raw/CSSRule[JC] var STYLE_RULE: Int
raw/CSSRule[JC] var UNKNOWN_RULE: Int
raw/CSSRule[JC] var VIEWPORT_RULE: Int
raw/CSSRule[JC] var cssText: String
raw/CSSRule[JC] var parentRule: CSSRule
raw/CSSRule[JC] var parentStyleSheet: CSSStyleSheet
raw/CSSRule[JC] var `type`: Int
raw/CSSRule[JO] var CHARSET_RULE: Int
raw/CSSRule[JO] var FONT_FACE_RULE: Int
raw/CSSRule[JO] var IMPORT_RULE: Int
raw/CSSRule[JO] var MEDIA_RULE: Int
raw/CSSRule[JO] var NAMESPACE_RULE: Int
raw/CSSRule[JO] var PAGE_RULE: Int
raw/CSSRule[JO] var STYLE_RULE: Int
raw/CSSRule[JO] var UNKNOWN_RULE: Int
raw/CSSRuleList[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): T
raw/CSSRuleList[JC] def item(index: Int): T
raw/CSSRuleList[JC] def length: Int
raw/CSSRuleList[JC] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: T): Unit
raw/CSSStyleDeclaration[JC] var alignmentBaseline: String
raw/CSSStyleDeclaration[JC] var animation: String
raw/CSSStyleDeclaration[JC] var animationDelay: String
raw/CSSStyleDeclaration[JC] var animationDirection: String
raw/CSSStyleDeclaration[JC] var animationDuration: String
raw/CSSStyleDeclaration[JC] var animationFillMode: String
raw/CSSStyleDeclaration[JC] var animationIterationCount: String
raw/CSSStyleDeclaration[JC] var animationName: String
raw/CSSStyleDeclaration[JC] var animationPlayState: String
raw/CSSStyleDeclaration[JC] var animationTimingFunction: String
raw/CSSStyleDeclaration[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): String
raw/CSSStyleDeclaration[JC] var backfaceVisibility: String
raw/CSSStyleDeclaration[JC] var background: String
raw/CSSStyleDeclaration[JC] var backgroundAttachment: String
raw/CSSStyleDeclaration[JC] var backgroundClip: String
raw/CSSStyleDeclaration[JC] var backgroundColor: String
raw/CSSStyleDeclaration[JC] var backgroundImage: String
raw/CSSStyleDeclaration[JC] var backgroundOrigin: String
raw/CSSStyleDeclaration[JC] var backgroundPosition: String
raw/CSSStyleDeclaration[JC] var backgroundRepeat: String
raw/CSSStyleDeclaration[JC] var backgroundSize: String
raw/CSSStyleDeclaration[JC] var baselineShift: String
raw/CSSStyleDeclaration[JC] var border: String
raw/CSSStyleDeclaration[JC] var borderBottom: String
raw/CSSStyleDeclaration[JC] var borderBottomColor: String
raw/CSSStyleDeclaration[JC] var borderBottomLeftRadius: String
raw/CSSStyleDeclaration[JC] var borderBottomRightRadius: String
raw/CSSStyleDeclaration[JC] var borderBottomStyle: String
raw/CSSStyleDeclaration[JC] var borderBottomWidth: String
raw/CSSStyleDeclaration[JC] var borderCollapse: String
raw/CSSStyleDeclaration[JC] var borderColor: String
raw/CSSStyleDeclaration[JC] var borderLeft: String
raw/CSSStyleDeclaration[JC] var borderLeftColor: String
raw/CSSStyleDeclaration[JC] var borderLeftStyle: String
raw/CSSStyleDeclaration[JC] var borderLeftWidth: String
raw/CSSStyleDeclaration[JC] var borderRadius: String
raw/CSSStyleDeclaration[JC] var borderRight: String
raw/CSSStyleDeclaration[JC] var borderRightColor: String
raw/CSSStyleDeclaration[JC] var borderRightStyle: String
raw/CSSStyleDeclaration[JC] var borderRightWidth: String
raw/CSSStyleDeclaration[JC] var borderSpacing: String
raw/CSSStyleDeclaration[JC] var borderStyle: String
raw/CSSStyleDeclaration[JC] var borderTop: String
raw/CSSStyleDeclaration[JC] var borderTopColor: String
raw/CSSStyleDeclaration[JC] var borderTopLeftRadius: String
raw/CSSStyleDeclaration[JC] var borderTopRightRadius: String
raw/CSSStyleDeclaration[JC] var borderTopStyle: String
raw/CSSStyleDeclaration[JC] var borderTopWidth: String
raw/CSSStyleDeclaration[JC] var borderWidth: String
raw/CSSStyleDeclaration[JC] var bottom: String
raw/CSSStyleDeclaration[JC] var boxShadow: String
raw/CSSStyleDeclaration[JC] var boxSizing: String
raw/CSSStyleDeclaration[JC] var breakAfter: String
raw/CSSStyleDeclaration[JC] var breakBefore: String
raw/CSSStyleDeclaration[JC] var breakInside: String
raw/CSSStyleDeclaration[JC] var captionSide: String
raw/CSSStyleDeclaration[JC] var clear: String
raw/CSSStyleDeclaration[JC] var clip: String
raw/CSSStyleDeclaration[JC] var clipPath: String
raw/CSSStyleDeclaration[JC] var clipRule: String
raw/CSSStyleDeclaration[JC] var color: String
raw/CSSStyleDeclaration[JC] var colorInterpolationFilters: String
raw/CSSStyleDeclaration[JC] var columnCount: js.Any
raw/CSSStyleDeclaration[JC] var columnFill: String
raw/CSSStyleDeclaration[JC] var columnGap: js.Any
raw/CSSStyleDeclaration[JC] var columnRule: String
raw/CSSStyleDeclaration[JC] var columnRuleColor: js.Any
raw/CSSStyleDeclaration[JC] var columnRuleStyle: String
raw/CSSStyleDeclaration[JC] var columnRuleWidth: js.Any
raw/CSSStyleDeclaration[JC] var columnSpan: String
raw/CSSStyleDeclaration[JC] var columnWidth: js.Any
raw/CSSStyleDeclaration[JC] var columns: String
raw/CSSStyleDeclaration[JC] var content: String
raw/CSSStyleDeclaration[JC] var counterIncrement: String
raw/CSSStyleDeclaration[JC] var counterReset: String
raw/CSSStyleDeclaration[JC] var cssFloat: String
raw/CSSStyleDeclaration[JC] var cssText: String
raw/CSSStyleDeclaration[JC] var cursor: String
raw/CSSStyleDeclaration[JC] var direction: String
raw/CSSStyleDeclaration[JC] var display: String
raw/CSSStyleDeclaration[JC] var dominantBaseline: String
raw/CSSStyleDeclaration[JC] var emptyCells: String
raw/CSSStyleDeclaration[JC] var enableBackground: String
raw/CSSStyleDeclaration[JC] var fill: String
raw/CSSStyleDeclaration[JC] var fillOpacity: String
raw/CSSStyleDeclaration[JC] var fillRule: String
raw/CSSStyleDeclaration[JC] var floodColor: String
raw/CSSStyleDeclaration[JC] var floodOpacity: String
raw/CSSStyleDeclaration[JC] var font: String
raw/CSSStyleDeclaration[JC] var fontFamily: String
raw/CSSStyleDeclaration[JC] var fontFeatureSettings: String
raw/CSSStyleDeclaration[JC] var fontSize: String
raw/CSSStyleDeclaration[JC] var fontSizeAdjust: String
raw/CSSStyleDeclaration[JC] var fontStretch: String
raw/CSSStyleDeclaration[JC] var fontStyle: String
raw/CSSStyleDeclaration[JC] var fontVariant: String
raw/CSSStyleDeclaration[JC] var fontWeight: String
raw/CSSStyleDeclaration[JC] def getPropertyPriority(propertyName: String): String
raw/CSSStyleDeclaration[JC] def getPropertyValue(propertyName: String): String
raw/CSSStyleDeclaration[JC] var glyphOrientationHorizontal: String
raw/CSSStyleDeclaration[JC] var glyphOrientationVertical: String
raw/CSSStyleDeclaration[JC] var height: String
raw/CSSStyleDeclaration[JC] def item(index: Int): String
raw/CSSStyleDeclaration[JC] var kerning: String
raw/CSSStyleDeclaration[JC] var left: String
raw/CSSStyleDeclaration[JC] var length: Int
raw/CSSStyleDeclaration[JC] var letterSpacing: String
raw/CSSStyleDeclaration[JC] var lightingColor: String
raw/CSSStyleDeclaration[JC] var lineHeight: String
raw/CSSStyleDeclaration[JC] var listStyle: String
raw/CSSStyleDeclaration[JC] var listStyleImage: String
raw/CSSStyleDeclaration[JC] var listStylePosition: String
raw/CSSStyleDeclaration[JC] var listStyleType: String
raw/CSSStyleDeclaration[JC] var margin: String
raw/CSSStyleDeclaration[JC] var marginBottom: String
raw/CSSStyleDeclaration[JC] var marginLeft: String
raw/CSSStyleDeclaration[JC] var marginRight: String
raw/CSSStyleDeclaration[JC] var marginTop: String
raw/CSSStyleDeclaration[JC] var marker: String
raw/CSSStyleDeclaration[JC] var markerEnd: String
raw/CSSStyleDeclaration[JC] var markerMid: String
raw/CSSStyleDeclaration[JC] var markerStart: String
raw/CSSStyleDeclaration[JC] var mask: String
raw/CSSStyleDeclaration[JC] var maxHeight: String
raw/CSSStyleDeclaration[JC] var maxWidth: String
raw/CSSStyleDeclaration[JC] var minHeight: String
raw/CSSStyleDeclaration[JC] var minWidth: String
raw/CSSStyleDeclaration[JC] var opacity: String
raw/CSSStyleDeclaration[JC] var orphans: String
raw/CSSStyleDeclaration[JC] var outline: String
raw/CSSStyleDeclaration[JC] var outlineColor: String
raw/CSSStyleDeclaration[JC] var outlineStyle: String
raw/CSSStyleDeclaration[JC] var outlineWidth: String
raw/CSSStyleDeclaration[JC] var overflow: String
raw/CSSStyleDeclaration[JC] var overflowX: String
raw/CSSStyleDeclaration[JC] var overflowY: String
raw/CSSStyleDeclaration[JC] var padding: String
raw/CSSStyleDeclaration[JC] var paddingBottom: String
raw/CSSStyleDeclaration[JC] var paddingLeft: String
raw/CSSStyleDeclaration[JC] var paddingRight: String
raw/CSSStyleDeclaration[JC] var paddingTop: String
raw/CSSStyleDeclaration[JC] var pageBreakAfter: String
raw/CSSStyleDeclaration[JC] var pageBreakBefore: String
raw/CSSStyleDeclaration[JC] var pageBreakInside: String
raw/CSSStyleDeclaration[JC] var parentRule: CSSRule
raw/CSSStyleDeclaration[JC] var perspective: String
raw/CSSStyleDeclaration[JC] var perspectiveOrigin: String
raw/CSSStyleDeclaration[JC] var pointerEvents: String
raw/CSSStyleDeclaration[JC] var position: String
raw/CSSStyleDeclaration[JC] var quotes: String
raw/CSSStyleDeclaration[JC] def removeProperty(propertyName: String): String
raw/CSSStyleDeclaration[JC] var right: String
raw/CSSStyleDeclaration[JC] var rubyAlign: String
raw/CSSStyleDeclaration[JC] var rubyOverhang: String
raw/CSSStyleDeclaration[JC] var rubyPosition: String
raw/CSSStyleDeclaration[JC] def setProperty(propertyName: String, value: String, priority: String?): Unit
raw/CSSStyleDeclaration[JC] var stopColor: String
raw/CSSStyleDeclaration[JC] var stopOpacity: String
raw/CSSStyleDeclaration[JC] var stroke: String
raw/CSSStyleDeclaration[JC] var strokeDasharray: String
raw/CSSStyleDeclaration[JC] var strokeDashoffset: String
raw/CSSStyleDeclaration[JC] var strokeLinecap: String
raw/CSSStyleDeclaration[JC] var strokeLinejoin: String
raw/CSSStyleDeclaration[JC] var strokeMiterlimit: String
raw/CSSStyleDeclaration[JC] var strokeOpacity: String
raw/CSSStyleDeclaration[JC] var strokeWidth: String
raw/CSSStyleDeclaration[JC] var tableLayout: String
raw/CSSStyleDeclaration[JC] var textAlign: String
raw/CSSStyleDeclaration[JC] var textAlignLast: String
raw/CSSStyleDeclaration[JC] var textAnchor: String
raw/CSSStyleDeclaration[JC] var textDecoration: String
raw/CSSStyleDeclaration[JC] var textIndent: String
raw/CSSStyleDeclaration[JC] var textJustify: String
raw/CSSStyleDeclaration[JC] var textOverflow: String
raw/CSSStyleDeclaration[JC] var textShadow: String
raw/CSSStyleDeclaration[JC] var textTransform: String
raw/CSSStyleDeclaration[JC] var textUnderlinePosition: String
raw/CSSStyleDeclaration[JC] var top: String
raw/CSSStyleDeclaration[JC] var transform: String
raw/CSSStyleDeclaration[JC] var transformOrigin: String
raw/CSSStyleDeclaration[JC] var transformStyle: String
raw/CSSStyleDeclaration[JC] var transition: String
raw/CSSStyleDeclaration[JC] var transitionDelay: String
raw/CSSStyleDeclaration[JC] var transitionDuration: String
raw/CSSStyleDeclaration[JC] var transitionProperty: String
raw/CSSStyleDeclaration[JC] var transitionTimingFunction: String
raw/CSSStyleDeclaration[JC] var unicodeBidi: String
raw/CSSStyleDeclaration[JC] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: String): Unit
raw/CSSStyleDeclaration[JC] var verticalAlign: String
raw/CSSStyleDeclaration[JC] var visibility: String
raw/CSSStyleDeclaration[JC] var whiteSpace: String
raw/CSSStyleDeclaration[JC] var widows: String
raw/CSSStyleDeclaration[JC] var width: String
raw/CSSStyleDeclaration[JC] var wordBreak: String
raw/CSSStyleDeclaration[JC] var wordSpacing: String
raw/CSSStyleDeclaration[JC] var wordWrap: String
raw/CSSStyleDeclaration[JC] var zIndex: String
raw/CSSStyleRule[JC] var CHARSET_RULE: Int
raw/CSSStyleRule[JC] var FONT_FACE_RULE: Int
raw/CSSStyleRule[JC] var IMPORT_RULE: Int
raw/CSSStyleRule[JC] var KEYFRAMES_RULE: Int
raw/CSSStyleRule[JC] var KEYFRAME_RULE: Int
raw/CSSStyleRule[JC] var MEDIA_RULE: Int
raw/CSSStyleRule[JC] var NAMESPACE_RULE: Int
raw/CSSStyleRule[JC] var PAGE_RULE: Int
raw/CSSStyleRule[JC] var STYLE_RULE: Int
raw/CSSStyleRule[JC] var UNKNOWN_RULE: Int
raw/CSSStyleRule[JC] var VIEWPORT_RULE: Int
raw/CSSStyleRule[JC] var cssText: String
raw/CSSStyleRule[JC] var parentRule: CSSRule
raw/CSSStyleRule[JC] var parentStyleSheet: CSSStyleSheet
raw/CSSStyleRule[JC] var readOnly: Boolean
raw/CSSStyleRule[JC] var selectorText: String
raw/CSSStyleRule[JC] val style: CSSStyleDeclaration
raw/CSSStyleRule[JC] var `type`: Int
raw/CSSStyleSheet[JC] def addImport(bstrURL: String, lIndex: Int?): Int
raw/CSSStyleSheet[JC] def addPageRule(bstrSelector: String, bstrStyle: String, lIndex: Int?): Int
raw/CSSStyleSheet[JC] def addRule(bstrSelector: String, bstrStyle: String?, lIndex: Int?): Int
raw/CSSStyleSheet[JC] var cssRules: CSSRuleList
raw/CSSStyleSheet[JC] var cssText: String
raw/CSSStyleSheet[JC] def deleteRule(index: Int?): Unit
raw/CSSStyleSheet[JC] def disabled: Boolean
raw/CSSStyleSheet[JC] def href: String
raw/CSSStyleSheet[JC] var id: String
raw/CSSStyleSheet[JC] var imports: StyleSheetList
raw/CSSStyleSheet[JC] def insertRule(rule: String, index: Int?): Int
raw/CSSStyleSheet[JC] var isAlternate: Boolean
raw/CSSStyleSheet[JC] var isPrefAlternate: Boolean
raw/CSSStyleSheet[JC] def media: MediaList
raw/CSSStyleSheet[JC] def ownerNode: Node
raw/CSSStyleSheet[JC] var ownerRule: CSSRule
raw/CSSStyleSheet[JC] var owningElement: Element
raw/CSSStyleSheet[JC] def parentStyleSheet: StyleSheet
raw/CSSStyleSheet[JC] var readOnly: Boolean
raw/CSSStyleSheet[JC] def removeImport(lIndex: Int): Unit
raw/CSSStyleSheet[JC] def removeRule(lIndex: Int): Unit
raw/CSSStyleSheet[JC] def title: String
raw/CSSStyleSheet[JC] def `type`: String
raw/CanvasGradient[JC] def addColorStop(offset: Double, color: String): Unit
raw/CanvasPattern[JC]
raw/CanvasRenderingContext2D[JC] def arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double): Unit
raw/CanvasRenderingContext2D[JC] def arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean): Unit
raw/CanvasRenderingContext2D[JC] def arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double): Unit
raw/CanvasRenderingContext2D[JC] def beginPath(): Unit
raw/CanvasRenderingContext2D[JC] def bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double): Unit
raw/CanvasRenderingContext2D[JC] var canvas: HTMLCanvasElement
raw/CanvasRenderingContext2D[JC] def clearRect(x: Double, y: Double, w: Double, h: Double): Unit
raw/CanvasRenderingContext2D[JC] def clip(fillRule: String?): Unit
raw/CanvasRenderingContext2D[JC] def closePath(): Unit
raw/CanvasRenderingContext2D[JC] def createImageData(imageDataOrSw: js.Any, sh: Double?): ImageData
raw/CanvasRenderingContext2D[JC] def createLinearGradient(x0: Double, y0: Double, x1: Double, y1: Double): CanvasGradient
raw/CanvasRenderingContext2D[JC] def createPattern(image: HTMLElement, repetition: String): CanvasPattern
raw/CanvasRenderingContext2D[JC] def createRadialGradient(x0: Double, y0: Double, r0: Double, x1: Double, y1: Double, r1: Double): CanvasGradient
raw/CanvasRenderingContext2D[JC] def drawImage(image: HTMLElement, offsetX: Double, offsetY: Double, width: Double?, height: Double?, canvasOffsetX: Double?, canvasOffsetY: Double?, canvasImageWidth: Double?, canvasImageHeight: Double?): Unit
raw/CanvasRenderingContext2D[JC] def ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = false): Unit
raw/CanvasRenderingContext2D[JC] def fill(): Unit
raw/CanvasRenderingContext2D[JC] def fillRect(x: Double, y: Double, w: Double, h: Double): Unit
raw/CanvasRenderingContext2D[JC] var fillStyle: js.Any
raw/CanvasRenderingContext2D[JC] def fillText(text: String, x: Double, y: Double, maxWidth: Double?): Unit
raw/CanvasRenderingContext2D[JC] var font: String
raw/CanvasRenderingContext2D[JC] def getImageData(sx: Double, sy: Double, sw: Double, sh: Double): ImageData
raw/CanvasRenderingContext2D[JC] def getLineDash(): js.Array[Double]
raw/CanvasRenderingContext2D[JC] var globalAlpha: Double
raw/CanvasRenderingContext2D[JC] var globalCompositeOperation: String
raw/CanvasRenderingContext2D[JC] var imageSmoothingEnabled: Boolean
raw/CanvasRenderingContext2D[JC] def isPointInPath(x: Double, y: Double): Boolean
raw/CanvasRenderingContext2D[JC] def isPointInPath(x: Double, y: Double, fillRule: String): Boolean
raw/CanvasRenderingContext2D[JC] var lineCap: String
raw/CanvasRenderingContext2D[JC] var lineDashOffset: Double
raw/CanvasRenderingContext2D[JC] var lineJoin: String
raw/CanvasRenderingContext2D[JC] def lineTo(x: Double, y: Double): Unit
raw/CanvasRenderingContext2D[JC] var lineWidth: Double
raw/CanvasRenderingContext2D[JC] def measureText(text: String): TextMetrics
raw/CanvasRenderingContext2D[JC] var miterLimit: Double
raw/CanvasRenderingContext2D[JC] def moveTo(x: Double, y: Double): Unit
raw/CanvasRenderingContext2D[JC] def putImageData(imagedata: ImageData, dx: Double, dy: Double, dirtyX: Double?, dirtyY: Double?, dirtyWidth: Double?, dirtyHeight: Double?): Unit
raw/CanvasRenderingContext2D[JC] def quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double): Unit
raw/CanvasRenderingContext2D[JC] def rect(x: Double, y: Double, w: Double, h: Double): Unit
raw/CanvasRenderingContext2D[JC] def restore(): Unit
raw/CanvasRenderingContext2D[JC] def rotate(angle: Double): Unit
raw/CanvasRenderingContext2D[JC] def save(): Unit
raw/CanvasRenderingContext2D[JC] def scale(x: Double, y: Double): Unit
raw/CanvasRenderingContext2D[JC] def setLineDash(segments: js.Array[Double]): Unit
raw/CanvasRenderingContext2D[JC] def setTransform(m11: Double, m12: Double, m21: Double, m22: Double, dx: Double, dy: Double): Unit
raw/CanvasRenderingContext2D[JC] var shadowBlur: Double
raw/CanvasRenderingContext2D[JC] var shadowColor: String
raw/CanvasRenderingContext2D[JC] var shadowOffsetX: Double
raw/CanvasRenderingContext2D[JC] var shadowOffsetY: Double
raw/CanvasRenderingContext2D[JC] def stroke(): Unit
raw/CanvasRenderingContext2D[JC] def strokeRect(x: Double, y: Double, w: Double, h: Double): Unit
raw/CanvasRenderingContext2D[JC] var strokeStyle: js.Any
raw/CanvasRenderingContext2D[JC] def strokeText(text: String, x: Double, y: Double, maxWidth: Double?): Unit
raw/CanvasRenderingContext2D[JC] var textAlign: String
raw/CanvasRenderingContext2D[JC] var textBaseline: String
raw/CanvasRenderingContext2D[JC] def transform(m11: Double, m12: Double, m21: Double, m22: Double, dx: Double, dy: Double): Unit
raw/CanvasRenderingContext2D[JC] def translate(x: Double, y: Double): Unit
raw/ChannelMergerNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/ChannelMergerNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/ChannelMergerNode[JT] var channelCount: Int
raw/ChannelMergerNode[JT] var channelCountMode: Int
raw/ChannelMergerNode[JT] var channelInterpretation: String
raw/ChannelMergerNode[JT] def connect(audioNode: AudioNode): Unit
raw/ChannelMergerNode[JT] def connect(audioParam: AudioParam): Unit
raw/ChannelMergerNode[JT] val context: AudioContext
raw/ChannelMergerNode[JT] def disconnect(output: AudioNode?): Unit
raw/ChannelMergerNode[JT] def dispatchEvent(evt: Event): Boolean
raw/ChannelMergerNode[JT] val numberOfInputs: Int
raw/ChannelMergerNode[JT] val numberOfOutputs: Int
raw/ChannelMergerNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/ChannelMergerNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/ChannelSplitterNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/ChannelSplitterNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/ChannelSplitterNode[JT] var channelCount: Int
raw/ChannelSplitterNode[JT] var channelCountMode: Int
raw/ChannelSplitterNode[JT] var channelInterpretation: String
raw/ChannelSplitterNode[JT] def connect(audioNode: AudioNode): Unit
raw/ChannelSplitterNode[JT] def connect(audioParam: AudioParam): Unit
raw/ChannelSplitterNode[JT] val context: AudioContext
raw/ChannelSplitterNode[JT] def disconnect(output: AudioNode?): Unit
raw/ChannelSplitterNode[JT] def dispatchEvent(evt: Event): Boolean
raw/ChannelSplitterNode[JT] val numberOfInputs: Int
raw/ChannelSplitterNode[JT] val numberOfOutputs: Int
raw/ChannelSplitterNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/ChannelSplitterNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/CharacterData[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/CharacterData[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/CharacterData[JC] def appendChild(newChild: Node): Node
raw/CharacterData[JC] def appendData(arg: String): Unit
raw/CharacterData[JC] def attributes: NamedNodeMap
raw/CharacterData[JC] def childNodes: NodeList
raw/CharacterData[JC] def cloneNode(deep: Boolean?): Node
raw/CharacterData[JC] def compareDocumentPosition(other: Node): Int
raw/CharacterData[JC] def contains(otherNode: Node): Boolean
raw/CharacterData[JC] var data: String
raw/CharacterData[JC] def deleteData(offset: Int, count: Int): Unit
raw/CharacterData[JC] def dispatchEvent(evt: Event): Boolean
raw/CharacterData[JC] def firstChild: Node
raw/CharacterData[JC] def hasAttributes(): Boolean
raw/CharacterData[JC] def hasChildNodes(): Boolean
raw/CharacterData[JC] var innerText: String
raw/CharacterData[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/CharacterData[JC] def insertData(offset: Int, arg: String): Unit
raw/CharacterData[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/CharacterData[JC] def isEqualNode(arg: Node): Boolean
raw/CharacterData[JC] def isSameNode(other: Node): Boolean
raw/CharacterData[JC] def isSupported(feature: String, version: String): Boolean
raw/CharacterData[JC] def lastChild: Node
raw/CharacterData[JC] def length: Int
raw/CharacterData[JC] def localName: String
raw/CharacterData[JC] def lookupNamespaceURI(prefix: String): String
raw/CharacterData[JC] def lookupPrefix(namespaceURI: String): String
raw/CharacterData[JC] def namespaceURI: String
raw/CharacterData[JC] def nextElementSibling: Element
raw/CharacterData[JC] def nextSibling: Node
raw/CharacterData[JC] def nodeName: String
raw/CharacterData[JC] def nodeType: Int
raw/CharacterData[JC] var nodeValue: String
raw/CharacterData[JC] def normalize(): Unit
raw/CharacterData[JC] def ownerDocument: Document
raw/CharacterData[JC] def parentNode: Node
raw/CharacterData[JC] def previousElementSibling: Element
raw/CharacterData[JC] def previousSibling: Node
raw/CharacterData[JC] def removeChild(oldChild: Node): Node
raw/CharacterData[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/CharacterData[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/CharacterData[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/CharacterData[JC] def replaceData(offset: Int, count: Int, arg: String): Unit
raw/CharacterData[JC] def substringData(offset: Int, count: Int): String
raw/CharacterData[JC] var textContent: String
raw/ClientRect[JC] var bottom: Double
raw/ClientRect[JC] var height: Double
raw/ClientRect[JC] var left: Double
raw/ClientRect[JC] var right: Double
raw/ClientRect[JC] var top: Double
raw/ClientRect[JC] var width: Double
raw/ClientRectList[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): T
raw/ClientRectList[JC] def item(index: Int): T
raw/ClientRectList[JC] def length: Int
raw/ClientRectList[JC] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: T): Unit
raw/Clipboard[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/Clipboard[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Clipboard[JT] def dispatchEvent(evt: Event): Boolean
raw/Clipboard[JT] def read(): js.Promise[DataTransfer]
raw/Clipboard[JT] def readText(): js.Promise[String]
raw/Clipboard[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/Clipboard[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Clipboard[JT] def write(data: DataTransfer): js.Promise[Unit]
raw/Clipboard[JT] def writeText(newClipText: String): js.Promise[Unit]
raw/ClipboardEvent[JC] def bubbles: Boolean
raw/ClipboardEvent[JC] def cancelBubble: Boolean
raw/ClipboardEvent[JC] def cancelable: Boolean
raw/ClipboardEvent[JC] def clipboardData: DataTransfer
raw/ClipboardEvent[JC] def currentTarget: EventTarget
raw/ClipboardEvent[JC] def defaultPrevented: Boolean
raw/ClipboardEvent[JC] def eventPhase: Int
raw/ClipboardEvent[JC] def isTrusted: Boolean
raw/ClipboardEvent[JC] def preventDefault(): Unit
raw/ClipboardEvent[JC] def stopImmediatePropagation(): Unit
raw/ClipboardEvent[JC] def stopPropagation(): Unit
raw/ClipboardEvent[JC] def target: EventTarget
raw/ClipboardEvent[JC] def timeStamp: Double
raw/ClipboardEvent[JC] def `type`: String
raw/ClipboardEventInit[JT] var bubbles: js.UndefOr[Boolean]
raw/ClipboardEventInit[JT] var cancelable: js.UndefOr[Boolean]
raw/ClipboardEventInit[JT] var composed: js.UndefOr[Boolean]
raw/ClipboardEventInit[JT] var data: js.UndefOr[String]
raw/ClipboardEventInit[JT] var dataType: js.UndefOr[String]
raw/ClipboardEventInit[JT] var scoped: js.UndefOr[Boolean]
raw/CloseEvent[JT] def bubbles: Boolean
raw/CloseEvent[JT] def cancelBubble: Boolean
raw/CloseEvent[JT] def cancelable: Boolean
raw/CloseEvent[JT] def code: Int
raw/CloseEvent[JT] def currentTarget: EventTarget
raw/CloseEvent[JT] def defaultPrevented: Boolean
raw/CloseEvent[JT] def eventPhase: Int
raw/CloseEvent[JT] def isTrusted: Boolean
raw/CloseEvent[JT] def preventDefault(): Unit
raw/CloseEvent[JT] def reason: String
raw/CloseEvent[JT] def stopImmediatePropagation(): Unit
raw/CloseEvent[JT] def stopPropagation(): Unit
raw/CloseEvent[JT] def target: EventTarget
raw/CloseEvent[JT] def timeStamp: Double
raw/CloseEvent[JT] def `type`: String
raw/CloseEvent[JT] def wasClean: Boolean
raw/Comment[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/Comment[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Comment[JC] def appendChild(newChild: Node): Node
raw/Comment[JC] def appendData(arg: String): Unit
raw/Comment[JC] def attributes: NamedNodeMap
raw/Comment[JC] def childNodes: NodeList
raw/Comment[JC] def cloneNode(deep: Boolean?): Node
raw/Comment[JC] def compareDocumentPosition(other: Node): Int
raw/Comment[JC] def contains(otherNode: Node): Boolean
raw/Comment[JC] var data: String
raw/Comment[JC] def deleteData(offset: Int, count: Int): Unit
raw/Comment[JC] def dispatchEvent(evt: Event): Boolean
raw/Comment[JC] def firstChild: Node
raw/Comment[JC] def hasAttributes(): Boolean
raw/Comment[JC] def hasChildNodes(): Boolean
raw/Comment[JC] var innerText: String
raw/Comment[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/Comment[JC] def insertData(offset: Int, arg: String): Unit
raw/Comment[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/Comment[JC] def isEqualNode(arg: Node): Boolean
raw/Comment[JC] def isSameNode(other: Node): Boolean
raw/Comment[JC] def isSupported(feature: String, version: String): Boolean
raw/Comment[JC] def lastChild: Node
raw/Comment[JC] def length: Int
raw/Comment[JC] def localName: String
raw/Comment[JC] def lookupNamespaceURI(prefix: String): String
raw/Comment[JC] def lookupPrefix(namespaceURI: String): String
raw/Comment[JC] def namespaceURI: String
raw/Comment[JC] def nextElementSibling: Element
raw/Comment[JC] def nextSibling: Node
raw/Comment[JC] def nodeName: String
raw/Comment[JC] def nodeType: Int
raw/Comment[JC] var nodeValue: String
raw/Comment[JC] def normalize(): Unit
raw/Comment[JC] def ownerDocument: Document
raw/Comment[JC] def parentNode: Node
raw/Comment[JC] def previousElementSibling: Element
raw/Comment[JC] def previousSibling: Node
raw/Comment[JC] def removeChild(oldChild: Node): Node
raw/Comment[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/Comment[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Comment[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/Comment[JC] def replaceData(offset: Int, count: Int, arg: String): Unit
raw/Comment[JC] def substringData(offset: Int, count: Int): String
raw/Comment[JC] var text: String
raw/Comment[JC] var textContent: String
raw/CompositionEvent[JC] def bubbles: Boolean
raw/CompositionEvent[JC] def cancelBubble: Boolean
raw/CompositionEvent[JC] def cancelable: Boolean
raw/CompositionEvent[JC] def currentTarget: EventTarget
raw/CompositionEvent[JC] def data: String
raw/CompositionEvent[JC] def defaultPrevented: Boolean
raw/CompositionEvent[JC] def detail: Int
raw/CompositionEvent[JC] def eventPhase: Int
raw/CompositionEvent[JC] def isTrusted: Boolean
raw/CompositionEvent[JC] def locale: String
raw/CompositionEvent[JC] def preventDefault(): Unit
raw/CompositionEvent[JC] def stopImmediatePropagation(): Unit
raw/CompositionEvent[JC] def stopPropagation(): Unit
raw/CompositionEvent[JC] def target: EventTarget
raw/CompositionEvent[JC] def timeStamp: Double
raw/CompositionEvent[JC] def `type`: String
raw/CompositionEvent[JC] def view: Window
raw/CompositionEventInit[JT] var bubbles: js.UndefOr[Boolean]
raw/CompositionEventInit[JT] var cancelable: js.UndefOr[Boolean]
raw/CompositionEventInit[JT] var composed: js.UndefOr[Boolean]
raw/CompositionEventInit[JT] var data: js.UndefOr[String]
raw/CompositionEventInit[JT] val detail: js.UndefOr[Int]
raw/CompositionEventInit[JT] var locale: js.UndefOr[String]
raw/CompositionEventInit[JT] var scoped: js.UndefOr[Boolean]
raw/CompositionEventInit[JT] val view: js.UndefOr[Window]
raw/Console[JT] def assert(test: Boolean, message: String, optionalParams: Any*): Unit
raw/Console[JT] def clear(): Unit
raw/Console[JT] def count(label: String = "default"): Unit
raw/Console[JT] def countReset(label: String = "default"): Unit
raw/Console[JT] def debug(message: Any, optionalParams: Any*): Unit
raw/Console[JT] def dir(value: Any, optionalParams: Any*): Unit
raw/Console[JT] def dirxml(value: Any): Unit
raw/Console[JT] def error(message: Any, optionalParams: Any*): Unit
raw/Console[JT] def group(label: js.UndefOr[String] = js.undefined): Unit
raw/Console[JT] def groupCollapsed(label: js.UndefOr[String] = js.undefined): Unit
raw/Console[JT] def groupEnd(): Unit
raw/Console[JT] def info(message: Any, optionalParams: Any*): Unit
raw/Console[JT] def log(message: Any, optionalParams: Any*): Unit
raw/Console[JT] def profile(reportName: String?): Unit
raw/Console[JT] def profileEnd(): Unit
raw/Console[JT] def table(data: js.Object | js.Array[_], columns: js.UndefOr[Int] = js.undefined): Unit
raw/Console[JT] def time(label: String): Unit
raw/Console[JT] def timeEnd(label: String): Unit
raw/Console[JT] def trace(): Unit
raw/Console[JT] def warn(message: Any, optionalParams: Any*): Unit
raw/ConvertToBlobOptions[JT] var quality: js.UndefOr[Double]
raw/ConvertToBlobOptions[JT] var `type`: js.UndefOr[String]
raw/ConvolverNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/ConvolverNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/ConvolverNode[JT] var buffer: AudioBuffer
raw/ConvolverNode[JT] var channelCount: Int
raw/ConvolverNode[JT] var channelCountMode: Int
raw/ConvolverNode[JT] var channelInterpretation: String
raw/ConvolverNode[JT] def connect(audioNode: AudioNode): Unit
raw/ConvolverNode[JT] def connect(audioParam: AudioParam): Unit
raw/ConvolverNode[JT] val context: AudioContext
raw/ConvolverNode[JT] def disconnect(output: AudioNode?): Unit
raw/ConvolverNode[JT] def dispatchEvent(evt: Event): Boolean
raw/ConvolverNode[JT] var normalize: Boolean
raw/ConvolverNode[JT] val numberOfInputs: Int
raw/ConvolverNode[JT] val numberOfOutputs: Int
raw/ConvolverNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/ConvolverNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Coordinates[JT] def accuracy: Double
raw/Coordinates[JT] def altitude: Double
raw/Coordinates[JT] def altitudeAccuracy: Double
raw/Coordinates[JT] def heading: Double
raw/Coordinates[JT] def latitude: Double
raw/Coordinates[JT] def longitude: Double
raw/Coordinates[JT] def speed: Double
raw/CreateImageBitmapOptions[JT] var colorSpaceConversion: js.UndefOr[String]
raw/CreateImageBitmapOptions[JT] var imageOrientation: js.UndefOr[String]
raw/CreateImageBitmapOptions[JT] var premultiplyAlpha: js.UndefOr[String]
raw/CreateImageBitmapOptions[JT] var resizeHeight: js.UndefOr[Double]
raw/CreateImageBitmapOptions[JT] var resizeQuality: js.UndefOr[String]
raw/CreateImageBitmapOptions[JT] var resizeWidth: js.UndefOr[Double]
raw/CustomEvent[JC] def bubbles: Boolean
raw/CustomEvent[JC] def cancelBubble: Boolean
raw/CustomEvent[JC] def cancelable: Boolean
raw/CustomEvent[JC] def currentTarget: EventTarget
raw/CustomEvent[JC] def defaultPrevented: Boolean
raw/CustomEvent[JC] def detail: Any
raw/CustomEvent[JC] def eventPhase: Int
raw/CustomEvent[JC] def isTrusted: Boolean
raw/CustomEvent[JC] def preventDefault(): Unit
raw/CustomEvent[JC] def stopImmediatePropagation(): Unit
raw/CustomEvent[JC] def stopPropagation(): Unit
raw/CustomEvent[JC] def target: EventTarget
raw/CustomEvent[JC] def timeStamp: Double
raw/CustomEvent[JC] def `type`: String
raw/CustomEventInit[JT] var bubbles: js.UndefOr[Boolean]
raw/CustomEventInit[JT] var cancelable: js.UndefOr[Boolean]
raw/CustomEventInit[JT] var composed: js.UndefOr[Boolean]
raw/CustomEventInit[JT] var detail: js.UndefOr[Any]
raw/CustomEventInit[JT] var scoped: js.UndefOr[Boolean]
raw/DOMException[JC] def message: String
raw/DOMException[JC] def name: String
raw/DOMException[JO] val ABORT_ERR: Int
raw/DOMException[JO] val DATA_CLONE_ERR: Int
raw/DOMException[JO] val DOMSTRING_SIZE_ERR: Int
raw/DOMException[JO] val HIERARCHY_REQUEST_ERR: Int
raw/DOMException[JO] val INDEX_SIZE_ERR: Int
raw/DOMException[JO] val INUSE_ATTRIBUTE_ERR: Int
raw/DOMException[JO] val INVALID_ACCESS_ERR: Int
raw/DOMException[JO] val INVALID_CHARACTER_ERR: Int
raw/DOMException[JO] val INVALID_MODIFICATION_ERR: Int
raw/DOMException[JO] val INVALID_NODE_TYPE_ERR: Int
raw/DOMException[JO] val INVALID_STATE_ERR: Int
raw/DOMException[JO] val NAMESPACE_ERR: Int
raw/DOMException[JO] val NETWORK_ERR: Int
raw/DOMException[JO] val NOT_FOUND_ERR: Int
raw/DOMException[JO] val NOT_SUPPORTED_ERR: Int
raw/DOMException[JO] val NO_DATA_ALLOWED_ERR: Int
raw/DOMException[JO] val NO_MODIFICATION_ALLOWED_ERR: Int
raw/DOMException[JO] val QUOTA_EXCEEDED_ERR: Int
raw/DOMException[JO] val SECURITY_ERR: Int
raw/DOMException[JO] val SYNTAX_ERR: Int
raw/DOMException[JO] val TIMEOUT_ERR: Int
raw/DOMException[JO] val TYPE_MISMATCH_ERR: Int
raw/DOMException[JO] val URL_MISMATCH_ERR: Int
raw/DOMException[JO] val VALIDATION_ERR: Int
raw/DOMException[JO] val WRONG_DOCUMENT_ERR: Int
raw/DOMImplementation[JC] def createDocument(namespaceURI: String, qualifiedName: String, doctype: DocumentType): Document
raw/DOMImplementation[JC] def createDocumentType(qualifiedName: String, publicId: String, systemId: String): DocumentType
raw/DOMImplementation[JC] def createHTMLDocument(title: String): Document
raw/DOMImplementation[JC] def hasFeature(feature: String): Boolean
raw/DOMImplementation[JC] def hasFeature(feature: String, version: String): Boolean
raw/DOMList[JT] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): T
raw/DOMList[JT] def item(index: Int): T
raw/DOMList[JT] def length: Int
raw/DOMList[JT] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: T): Unit
raw/DOMParser[JC] def parseFromString(source: String, mimeType: String): Document
raw/DOMSettableTokenList[JT] def add(token: String): Unit
raw/DOMSettableTokenList[JT] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): T
raw/DOMSettableTokenList[JT] def contains(token: String): Boolean
raw/DOMSettableTokenList[JT] def item(index: Int): T
raw/DOMSettableTokenList[JT] def length: Int
raw/DOMSettableTokenList[JT] def remove(token: String): Unit
raw/DOMSettableTokenList[JT] def toggle(token: String): Boolean
raw/DOMSettableTokenList[JT] def toggle(token: String, force: Boolean): Boolean
raw/DOMSettableTokenList[JT] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: T): Unit
raw/DOMSettableTokenList[JT] def value: String
raw/DOMStringList[JT] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): T
raw/DOMStringList[JT] def contains(str: String): Boolean
raw/DOMStringList[JT] def item(index: Int): T
raw/DOMStringList[JT] def length: Int
raw/DOMStringList[JT] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: T): Unit
raw/DOMTokenList[JT] def add(token: String): Unit
raw/DOMTokenList[JT] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): T
raw/DOMTokenList[JT] def contains(token: String): Boolean
raw/DOMTokenList[JT] def item(index: Int): T
raw/DOMTokenList[JT] def length: Int
raw/DOMTokenList[JT] def remove(token: String): Unit
raw/DOMTokenList[JT] def toggle(token: String): Boolean
raw/DOMTokenList[JT] def toggle(token: String, force: Boolean): Boolean
raw/DOMTokenList[JT] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: T): Unit
raw/DataTransfer[JT] def clearData(format: String?): Unit
raw/DataTransfer[JT] var dropEffect: String
raw/DataTransfer[JT] var effectAllowed: String
raw/DataTransfer[JT] def files: FileList
raw/DataTransfer[JT] def getData(format: String): String
raw/DataTransfer[JT] def setData(format: String, data: String): Unit
raw/DataTransfer[JT] def setDragImage(image: Element, x: Double, y: Double): Unit
raw/DataTransfer[JT] def types: js.Array[String]
raw/DedicatedWorkerGlobalScope[JO] def self: DedicatedWorkerGlobalScope
raw/DedicatedWorkerGlobalScope[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/DedicatedWorkerGlobalScope[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/DedicatedWorkerGlobalScope[JT] def atob(encodedString: String): String
raw/DedicatedWorkerGlobalScope[JT] def btoa(rawString: String): String
raw/DedicatedWorkerGlobalScope[JT] def caches: js.UndefOr[CacheStorage]
raw/DedicatedWorkerGlobalScope[JT] def clearInterval(handle: Int): Unit
raw/DedicatedWorkerGlobalScope[JT] def clearTimeout(handle: Int): Unit
raw/DedicatedWorkerGlobalScope[JT] def close(): Unit
raw/DedicatedWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput): js.Promise[ImageBitmap]
raw/DedicatedWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
raw/DedicatedWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double): js.Promise[ImageBitmap]
raw/DedicatedWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
raw/DedicatedWorkerGlobalScope[JT] def crossOriginIsolated: Boolean
raw/DedicatedWorkerGlobalScope[JT] def dispatchEvent(evt: Event): Boolean
raw/DedicatedWorkerGlobalScope[JT] def fetch(info: RequestInfo, init: RequestInit = null): js.Promise[Response]
raw/DedicatedWorkerGlobalScope[JT] def importScripts(urls: js.Array[String]): Unit
raw/DedicatedWorkerGlobalScope[JT] def indexedDB: js.UndefOr[IDBFactory]
raw/DedicatedWorkerGlobalScope[JT] def isSecureContext: Boolean
raw/DedicatedWorkerGlobalScope[JT] def location: WorkerLocation
raw/DedicatedWorkerGlobalScope[JT] def navigator: WorkerNavigator
raw/DedicatedWorkerGlobalScope[JT] var onError: js.Function1[ErrorEvent, _]
raw/DedicatedWorkerGlobalScope[JT] var onlanguagechange: js.Function1[Event, _]
raw/DedicatedWorkerGlobalScope[JT] var onmessage: js.Function1[MessageEvent, _]
raw/DedicatedWorkerGlobalScope[JT] var onoffline: js.Function1[Event, _]
raw/DedicatedWorkerGlobalScope[JT] var ononline: js.Function1[Event, _]
raw/DedicatedWorkerGlobalScope[JT] def origin: String
raw/DedicatedWorkerGlobalScope[JT] def postMessage(aMessage: js.Any, transferList: js.UndefOr[js.Array[Transferable]]?): Unit
raw/DedicatedWorkerGlobalScope[JT] def queueMicrotask(function: js.Function0[Any]): Unit
raw/DedicatedWorkerGlobalScope[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/DedicatedWorkerGlobalScope[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/DedicatedWorkerGlobalScope[JT] def self: this.type
raw/DedicatedWorkerGlobalScope[JT] def setInterval(handler: js.Function0[Any], timeout: Double): Int
raw/DedicatedWorkerGlobalScope[JT] def setTimeout(handler: js.Function0[Any], timeout: Double): Int
raw/DelayNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/DelayNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/DelayNode[JT] var channelCount: Int
raw/DelayNode[JT] var channelCountMode: Int
raw/DelayNode[JT] var channelInterpretation: String
raw/DelayNode[JT] def connect(audioNode: AudioNode): Unit
raw/DelayNode[JT] def connect(audioParam: AudioParam): Unit
raw/DelayNode[JT] val context: AudioContext
raw/DelayNode[JT] val delayTime: AudioParam
raw/DelayNode[JT] def disconnect(output: AudioNode?): Unit
raw/DelayNode[JT] def dispatchEvent(evt: Event): Boolean
raw/DelayNode[JT] val numberOfInputs: Int
raw/DelayNode[JT] val numberOfOutputs: Int
raw/DelayNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/DelayNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Document[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/Document[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Document[JC] def adoptNode(source: Node): Node
raw/Document[JC] def appendChild(newChild: Node): Node
raw/Document[JC] def attributes: NamedNodeMap
raw/Document[JC] def characterSet: String
raw/Document[JC] def childElementCount: Int
raw/Document[JC] def childNodes: NodeList
raw/Document[JC] def children: HTMLCollection
raw/Document[JC] def cloneNode(deep: Boolean?): Node
raw/Document[JC] def compareDocumentPosition(other: Node): Int
raw/Document[JC] def contains(otherNode: Node): Boolean
raw/Document[JC] def createAttribute(name: String): Attr
raw/Document[JC] def createAttributeNS(namespaceURI: String, qualifiedName: String): Attr
raw/Document[JC] def createCDATASection(data: String): CDATASection
raw/Document[JC] def createComment(data: String): Comment
raw/Document[JC] def createDocumentFragment(): DocumentFragment
raw/Document[JC] def createElement(tagName: String): Element
raw/Document[JC] def createElementNS(namespaceURI: String, qualifiedName: String): Element
raw/Document[JC] def createEvent(eventInterface: String): Event
raw/Document[JC] def createNSResolver(node: Node): XPathNSResolver
raw/Document[JC] def createNodeIterator(root: Node, whatToShow: Int, filter: NodeFilter, entityReferenceExpansion: Boolean): NodeIterator
raw/Document[JC] def createProcessingInstruction(target: String, data: String): ProcessingInstruction
raw/Document[JC] def createRange(): Range
raw/Document[JC] def createStyleSheet(href: String?, index: Int?): CSSStyleSheet
raw/Document[JC] def createTextNode(data: String): Text
raw/Document[JC] def createTreeWalker(root: Node, whatToShow: Int, filter: NodeFilter, entityReferenceExpansion: Boolean): TreeWalker
raw/Document[JC] def dispatchEvent(evt: Event): Boolean
raw/Document[JC] def doctype: DocumentType
raw/Document[JC] def documentElement: Element
raw/Document[JC] def documentURI: String
raw/Document[JC] def elementFromPoint(x: Double, y: Double): Element
raw/Document[JC] def evaluate(xpathExpression: String, contextNode: Node, namespaceResolver: XPathNSResolver, resultType: Int, result: XPathResult): XPathResult
raw/Document[JC] def evaluate(xpathExpression: String, contextNode: Node, namespaceResolver: js.Function1[String, String], resultType: Int, result: XPathResult): XPathResult
raw/Document[JC] def exitFullscreen(): js.Promise[Unit]
raw/Document[JC] def firstChild: Node
raw/Document[JC] def firstElementChild: Element
raw/Document[JC] def fullscreenElement: Element
raw/Document[JC] def fullscreenEnabled: Boolean
raw/Document[JC] def getElementById(elementId: String): Element
raw/Document[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/Document[JC] def getElementsByName(elementName: String): NodeList
raw/Document[JC] def getElementsByTagName(name: String): HTMLCollection
raw/Document[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/Document[JC] def hasAttributes(): Boolean
raw/Document[JC] def hasChildNodes(): Boolean
raw/Document[JC] def hidden: Boolean
raw/Document[JC] def implementation: DOMImplementation
raw/Document[JC] def importNode(importedNode: Node, deep: Boolean): Node
raw/Document[JC] var innerText: String
raw/Document[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/Document[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/Document[JC] def isEqualNode(arg: Node): Boolean
raw/Document[JC] def isSameNode(other: Node): Boolean
raw/Document[JC] def isSupported(feature: String, version: String): Boolean
raw/Document[JC] def lastChild: Node
raw/Document[JC] def lastElementChild: Element
raw/Document[JC] def lastModified: String
raw/Document[JC] def localName: String
raw/Document[JC] def lookupNamespaceURI(prefix: String): String
raw/Document[JC] def lookupPrefix(namespaceURI: String): String
raw/Document[JC] def namespaceURI: String
raw/Document[JC] def nextSibling: Node
raw/Document[JC] def nodeName: String
raw/Document[JC] def nodeType: Int
raw/Document[JC] var nodeValue: String
raw/Document[JC] def normalize(): Unit
raw/Document[JC] var onfullscreenchange: js.Function1[Event, _]
raw/Document[JC] var onfullscreenerror: js.Function1[Event, _]
raw/Document[JC] def ownerDocument: Document
raw/Document[JC] def parentNode: Node
raw/Document[JC] def previousSibling: Node
raw/Document[JC] def querySelector(selectors: String): Element
raw/Document[JC] def querySelectorAll(selectors: String): NodeList
raw/Document[JC] def removeChild(oldChild: Node): Node
raw/Document[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/Document[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Document[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/Document[JC] def replaceChildren(nodes: Node | String*): Unit
raw/Document[JC] def styleSheets: StyleSheetList
raw/Document[JC] var textContent: String
raw/Document[JC] def visibilityState: VisibilityState | String
raw/Document[JC] var visibilitychange: js.Function1[Event, _]
raw/DocumentEvent[JT] def createEvent(eventInterface: String): Event
raw/DocumentFragment[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/DocumentFragment[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/DocumentFragment[JC] def appendChild(newChild: Node): Node
raw/DocumentFragment[JC] def attributes: NamedNodeMap
raw/DocumentFragment[JC] def childNodes: NodeList
raw/DocumentFragment[JC] def cloneNode(deep: Boolean?): Node
raw/DocumentFragment[JC] def compareDocumentPosition(other: Node): Int
raw/DocumentFragment[JC] def contains(otherNode: Node): Boolean
raw/DocumentFragment[JC] def dispatchEvent(evt: Event): Boolean
raw/DocumentFragment[JC] def firstChild: Node
raw/DocumentFragment[JC] def hasAttributes(): Boolean
raw/DocumentFragment[JC] def hasChildNodes(): Boolean
raw/DocumentFragment[JC] var innerText: String
raw/DocumentFragment[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/DocumentFragment[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/DocumentFragment[JC] def isEqualNode(arg: Node): Boolean
raw/DocumentFragment[JC] def isSameNode(other: Node): Boolean
raw/DocumentFragment[JC] def isSupported(feature: String, version: String): Boolean
raw/DocumentFragment[JC] def lastChild: Node
raw/DocumentFragment[JC] def localName: String
raw/DocumentFragment[JC] def lookupNamespaceURI(prefix: String): String
raw/DocumentFragment[JC] def lookupPrefix(namespaceURI: String): String
raw/DocumentFragment[JC] def namespaceURI: String
raw/DocumentFragment[JC] def nextSibling: Node
raw/DocumentFragment[JC] def nodeName: String
raw/DocumentFragment[JC] def nodeType: Int
raw/DocumentFragment[JC] var nodeValue: String
raw/DocumentFragment[JC] def normalize(): Unit
raw/DocumentFragment[JC] def ownerDocument: Document
raw/DocumentFragment[JC] def parentNode: Node
raw/DocumentFragment[JC] def previousSibling: Node
raw/DocumentFragment[JC] def querySelector(selectors: String): Element
raw/DocumentFragment[JC] def querySelectorAll(selectors: String): NodeList
raw/DocumentFragment[JC] def removeChild(oldChild: Node): Node
raw/DocumentFragment[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/DocumentFragment[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/DocumentFragment[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/DocumentFragment[JC] var textContent: String
raw/DocumentType[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/DocumentType[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/DocumentType[JC] def appendChild(newChild: Node): Node
raw/DocumentType[JC] def attributes: NamedNodeMap
raw/DocumentType[JC] def childNodes: NodeList
raw/DocumentType[JC] def cloneNode(deep: Boolean?): Node
raw/DocumentType[JC] def compareDocumentPosition(other: Node): Int
raw/DocumentType[JC] def contains(otherNode: Node): Boolean
raw/DocumentType[JC] def dispatchEvent(evt: Event): Boolean
raw/DocumentType[JC] def firstChild: Node
raw/DocumentType[JC] def hasAttributes(): Boolean
raw/DocumentType[JC] def hasChildNodes(): Boolean
raw/DocumentType[JC] var innerText: String
raw/DocumentType[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/DocumentType[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/DocumentType[JC] def isEqualNode(arg: Node): Boolean
raw/DocumentType[JC] def isSameNode(other: Node): Boolean
raw/DocumentType[JC] def isSupported(feature: String, version: String): Boolean
raw/DocumentType[JC] def lastChild: Node
raw/DocumentType[JC] def localName: String
raw/DocumentType[JC] def lookupNamespaceURI(prefix: String): String
raw/DocumentType[JC] def lookupPrefix(namespaceURI: String): String
raw/DocumentType[JC] def name: String
raw/DocumentType[JC] def namespaceURI: String
raw/DocumentType[JC] def nextSibling: Node
raw/DocumentType[JC] def nodeName: String
raw/DocumentType[JC] def nodeType: Int
raw/DocumentType[JC] var nodeValue: String
raw/DocumentType[JC] def normalize(): Unit
raw/DocumentType[JC] def ownerDocument: Document
raw/DocumentType[JC] def parentNode: Node
raw/DocumentType[JC] def previousSibling: Node
raw/DocumentType[JC] def publicId: String
raw/DocumentType[JC] def removeChild(oldChild: Node): Node
raw/DocumentType[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/DocumentType[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/DocumentType[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/DocumentType[JC] def systemId: String
raw/DocumentType[JC] var textContent: String
raw/DragEffect[SO] final val All = "all"
raw/DragEffect[SO] final val Copy = "copy"
raw/DragEffect[SO] final val CopyLink = "copyLink"
raw/DragEffect[SO] final val CopyMove = "copyMove"
raw/DragEffect[SO] final val Link = "link"
raw/DragEffect[SO] final val LinkMove = "linkMove"
raw/DragEffect[SO] final val Move = "move"
raw/DragEffect[SO] final val None = "none"
raw/DragEvent[JT] def altKey: Boolean
raw/DragEvent[JT] def bubbles: Boolean
raw/DragEvent[JT] def button: Int
raw/DragEvent[JT] def buttons: Int
raw/DragEvent[JT] def cancelBubble: Boolean
raw/DragEvent[JT] def cancelable: Boolean
raw/DragEvent[JT] def clientX: Double
raw/DragEvent[JT] def clientY: Double
raw/DragEvent[JT] def ctrlKey: Boolean
raw/DragEvent[JT] def currentTarget: EventTarget
raw/DragEvent[JT] def dataTransfer: DataTransfer
raw/DragEvent[JT] def defaultPrevented: Boolean
raw/DragEvent[JT] def detail: Int
raw/DragEvent[JT] def eventPhase: Int
raw/DragEvent[JT] def getModifierState(keyArg: String): Boolean
raw/DragEvent[JT] def isTrusted: Boolean
raw/DragEvent[JT] def metaKey: Boolean
raw/DragEvent[JT] def pageX: Double
raw/DragEvent[JT] def pageY: Double
raw/DragEvent[JT] def preventDefault(): Unit
raw/DragEvent[JT] def relatedTarget: EventTarget
raw/DragEvent[JT] def screenX: Double
raw/DragEvent[JT] def screenY: Double
raw/DragEvent[JT] def shiftKey: Boolean
raw/DragEvent[JT] def stopImmediatePropagation(): Unit
raw/DragEvent[JT] def stopPropagation(): Unit
raw/DragEvent[JT] def target: EventTarget
raw/DragEvent[JT] def timeStamp: Double
raw/DragEvent[JT] def `type`: String
raw/DragEvent[JT] def view: Window
raw/DynamicsCompressorNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/DynamicsCompressorNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/DynamicsCompressorNode[JT] val attack: AudioParam
raw/DynamicsCompressorNode[JT] var channelCount: Int
raw/DynamicsCompressorNode[JT] var channelCountMode: Int
raw/DynamicsCompressorNode[JT] var channelInterpretation: String
raw/DynamicsCompressorNode[JT] def connect(audioNode: AudioNode): Unit
raw/DynamicsCompressorNode[JT] def connect(audioParam: AudioParam): Unit
raw/DynamicsCompressorNode[JT] val context: AudioContext
raw/DynamicsCompressorNode[JT] def disconnect(output: AudioNode?): Unit
raw/DynamicsCompressorNode[JT] def dispatchEvent(evt: Event): Boolean
raw/DynamicsCompressorNode[JT] val knee: AudioParam
raw/DynamicsCompressorNode[JT] val numberOfInputs: Int
raw/DynamicsCompressorNode[JT] val numberOfOutputs: Int
raw/DynamicsCompressorNode[JT] val ratio: AudioParam
raw/DynamicsCompressorNode[JT] val reduction: AudioParam
raw/DynamicsCompressorNode[JT] val release: AudioParam
raw/DynamicsCompressorNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/DynamicsCompressorNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/DynamicsCompressorNode[JT] val threshold: AudioParam
raw/Element[JC] var accessKey: String
raw/Element[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/Element[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Element[JC] def appendChild(newChild: Node): Node
raw/Element[JC] def attributes: NamedNodeMap
raw/Element[JC] def childElementCount: Int
raw/Element[JC] def childNodes: NodeList
raw/Element[JC] def children: HTMLCollection
raw/Element[JC] var classList: DOMTokenList
raw/Element[JC] def clientHeight: Int
raw/Element[JC] def clientLeft: Int
raw/Element[JC] def clientTop: Int
raw/Element[JC] def clientWidth: Int
raw/Element[JC] def cloneNode(deep: Boolean?): Node
raw/Element[JC] def compareDocumentPosition(other: Node): Int
raw/Element[JC] def contains(otherNode: Node): Boolean
raw/Element[JC] def dispatchEvent(evt: Event): Boolean
raw/Element[JC] def firstChild: Node
raw/Element[JC] def firstElementChild: Element
raw/Element[JC] def getAttribute(name: String): String
raw/Element[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/Element[JC] def getAttributeNode(name: String): Attr
raw/Element[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/Element[JC] def getBoundingClientRect(): ClientRect
raw/Element[JC] def getClientRects(): ClientRectList
raw/Element[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/Element[JC] def getElementsByTagName(name: String): HTMLCollection
raw/Element[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/Element[JC] def hasAttribute(name: String): Boolean
raw/Element[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/Element[JC] def hasAttributes(): Boolean
raw/Element[JC] def hasChildNodes(): Boolean
raw/Element[JC] var id: String
raw/Element[JC] var innerHTML: String
raw/Element[JC] var innerText: String
raw/Element[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/Element[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/Element[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/Element[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/Element[JC] def isEqualNode(arg: Node): Boolean
raw/Element[JC] def isSameNode(other: Node): Boolean
raw/Element[JC] def isSupported(feature: String, version: String): Boolean
raw/Element[JC] def lastChild: Node
raw/Element[JC] def lastElementChild: Element
raw/Element[JC] def localName: String
raw/Element[JC] def lookupNamespaceURI(prefix: String): String
raw/Element[JC] def lookupPrefix(namespaceURI: String): String
raw/Element[JC] def matches(selector: String): Boolean
raw/Element[JC] def namespaceURI: String
raw/Element[JC] def nextElementSibling: Element
raw/Element[JC] def nextSibling: Node
raw/Element[JC] def nodeName: String
raw/Element[JC] def nodeType: Int
raw/Element[JC] var nodeValue: String
raw/Element[JC] def normalize(): Unit
raw/Element[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/Element[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/Element[JC] var onfullscreenchange: js.Function1[Event, _]
raw/Element[JC] var onfullscreenerror: js.Function1[Event, _]
raw/Element[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/Element[JC] var outerHTML: String
raw/Element[JC] def ownerDocument: Document
raw/Element[JC] def parentNode: Node
raw/Element[JC] def prefix: String
raw/Element[JC] def previousElementSibling: Element
raw/Element[JC] def previousSibling: Node
raw/Element[JC] def querySelector(selectors: String): Element
raw/Element[JC] def querySelectorAll(selectors: String): NodeList
raw/Element[JC] def removeAttribute(name: String): Unit
raw/Element[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/Element[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/Element[JC] def removeChild(oldChild: Node): Node
raw/Element[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/Element[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Element[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/Element[JC] def replaceChildren(nodes: Node | String*): Unit
raw/Element[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/Element[JC] def scrollHeight: Int
raw/Element[JC] def scrollIntoView(top: Boolean?): Unit
raw/Element[JC] var scrollLeft: Double
raw/Element[JC] var scrollTop: Double
raw/Element[JC] def scrollWidth: Int
raw/Element[JC] def setAttribute(name: String, value: String): Unit
raw/Element[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/Element[JC] def setAttributeNode(newAttr: Attr): Attr
raw/Element[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/Element[JC] def tagName: String
raw/Element[JC] var textContent: String
raw/ErrorEvent[JT] def bubbles: Boolean
raw/ErrorEvent[JT] def cancelBubble: Boolean
raw/ErrorEvent[JT] def cancelable: Boolean
raw/ErrorEvent[JT] def colno: Int
raw/ErrorEvent[JT] def currentTarget: EventTarget
raw/ErrorEvent[JT] def defaultPrevented: Boolean
raw/ErrorEvent[JT] def eventPhase: Int
raw/ErrorEvent[JT] def filename: String
raw/ErrorEvent[JT] def isTrusted: Boolean
raw/ErrorEvent[JT] def lineno: Int
raw/ErrorEvent[JT] def message: String
raw/ErrorEvent[JT] def preventDefault(): Unit
raw/ErrorEvent[JT] def stopImmediatePropagation(): Unit
raw/ErrorEvent[JT] def stopPropagation(): Unit
raw/ErrorEvent[JT] def target: EventTarget
raw/ErrorEvent[JT] def timeStamp: Double
raw/ErrorEvent[JT] def `type`: String
raw/Event[JC] def bubbles: Boolean
raw/Event[JC] def cancelBubble: Boolean
raw/Event[JC] def cancelable: Boolean
raw/Event[JC] def currentTarget: EventTarget
raw/Event[JC] def defaultPrevented: Boolean
raw/Event[JC] def eventPhase: Int
raw/Event[JC] def isTrusted: Boolean
raw/Event[JC] def preventDefault(): Unit
raw/Event[JC] def stopImmediatePropagation(): Unit
raw/Event[JC] def stopPropagation(): Unit
raw/Event[JC] def target: EventTarget
raw/Event[JC] def timeStamp: Double
raw/Event[JC] def `type`: String
raw/Event[JO] def AT_TARGET: Int
raw/Event[JO] def BUBBLING_PHASE: Int
raw/Event[JO] def CAPTURING_PHASE: Int
raw/EventException[JO] val DISPATCH_REQUEST_ERR: Int
raw/EventException[JO] val UNSPECIFIED_EVENT_TYPE_ERR: Int
raw/EventException[JT] def code: Int
raw/EventException[JT] def message: String
raw/EventException[JT] def name: String
raw/EventInit[JT] var bubbles: js.UndefOr[Boolean]
raw/EventInit[JT] var cancelable: js.UndefOr[Boolean]
raw/EventInit[JT] var composed: js.UndefOr[Boolean]
raw/EventInit[JT] var scoped: js.UndefOr[Boolean]
raw/EventListenerOptions[JT] var capture: js.UndefOr[Boolean]
raw/EventListenerOptions[JT] var once: js.UndefOr[Boolean]
raw/EventListenerOptions[JT] var passive: js.UndefOr[Boolean]
raw/EventSource[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/EventSource[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/EventSource[JC] def close(): Unit
raw/EventSource[JC] def dispatchEvent(evt: Event): Boolean
raw/EventSource[JC] var onerror: js.Function1[Event, _]
raw/EventSource[JC] var onmessage: js.Function1[MessageEvent, _]
raw/EventSource[JC] var onopen: js.Function1[Event, _]
raw/EventSource[JC] def readyState: Int
raw/EventSource[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/EventSource[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/EventSource[JC] def url: String
raw/EventSource[JC] def withCredentials: Boolean
raw/EventSource[JO] val CLOSED: Int
raw/EventSource[JO] val CONNECTING: Int
raw/EventSource[JO] val OPEN: Int
raw/EventTarget[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/EventTarget[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/EventTarget[JC] def dispatchEvent(evt: Event): Boolean
raw/EventTarget[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/EventTarget[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/External[JT]
raw/File[JC] def arrayBuffer(): js.Promise[ArrayBuffer]
raw/File[JC] def close(): Unit  (@deprecated in 1.2.0)
raw/File[JC] def name: String
raw/File[JC] def size: Double
raw/File[JC] def slice(start: Double?, end: Double?, contentType: String?): Blob
raw/File[JC] def stream(): ReadableStream[Byte]
raw/File[JC] def text(): js.Promise[String]
raw/File[JC] def `type`: String
raw/FileList[JT] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): T
raw/FileList[JT] def item(index: Int): T
raw/FileList[JT] def length: Int
raw/FileList[JT] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: T): Unit
raw/FileReader[JC] def abort(): Unit
raw/FileReader[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/FileReader[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/FileReader[JC] def dispatchEvent(evt: Event): Boolean
raw/FileReader[JC] def error: DOMException
raw/FileReader[JC] var onabort: js.Function1[ProgressEvent, _]
raw/FileReader[JC] var onerror: js.Function1[ProgressEvent, _]
raw/FileReader[JC] var onload: js.Function1[ProgressEvent, _]
raw/FileReader[JC] var onloadend: js.Function1[ProgressEvent, _]
raw/FileReader[JC] var onloadstart: js.Function1[ProgressEvent, _]
raw/FileReader[JC] var onprogress: js.Function1[ProgressEvent, _]
raw/FileReader[JC] def readAsArrayBuffer(blob: Blob): Unit
raw/FileReader[JC] def readAsDataURL(blob: Blob): Unit
raw/FileReader[JC] def readAsText(blob: Blob, encoding: String = "UTF-8"): Unit
raw/FileReader[JC] def readyState: Short
raw/FileReader[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/FileReader[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/FileReader[JC] def result: js.Any
raw/FileReader[JO] val DONE: Short
raw/FileReader[JO] val EMPTY: Short
raw/FileReader[JO] val LOADING: Short
raw/FocusEvent[JC] def bubbles: Boolean
raw/FocusEvent[JC] def cancelBubble: Boolean
raw/FocusEvent[JC] def cancelable: Boolean
raw/FocusEvent[JC] def currentTarget: EventTarget
raw/FocusEvent[JC] def defaultPrevented: Boolean
raw/FocusEvent[JC] def detail: Int
raw/FocusEvent[JC] def eventPhase: Int
raw/FocusEvent[JC] def isTrusted: Boolean
raw/FocusEvent[JC] def preventDefault(): Unit
raw/FocusEvent[JC] def relatedTarget: EventTarget
raw/FocusEvent[JC] def stopImmediatePropagation(): Unit
raw/FocusEvent[JC] def stopPropagation(): Unit
raw/FocusEvent[JC] def target: EventTarget
raw/FocusEvent[JC] def timeStamp: Double
raw/FocusEvent[JC] def `type`: String
raw/FocusEvent[JC] def view: Window
raw/FocusEventInit[JT] var bubbles: js.UndefOr[Boolean]
raw/FocusEventInit[JT] var cancelable: js.UndefOr[Boolean]
raw/FocusEventInit[JT] var composed: js.UndefOr[Boolean]
raw/FocusEventInit[JT] val detail: js.UndefOr[Int]
raw/FocusEventInit[JT] val relatedTarget: js.UndefOr[EventTarget]
raw/FocusEventInit[JT] var scoped: js.UndefOr[Boolean]
raw/FocusEventInit[JT] val view: js.UndefOr[Window]
raw/FormData[JC] def append(name: js.Any, value: js.Any, blobName: String?): Unit
raw/FormData[JO]
raw/FullscreenOptions[JT] var navigationUI: js.UndefOr[String]
raw/GainNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/GainNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/GainNode[JT] var channelCount: Int
raw/GainNode[JT] var channelCountMode: Int
raw/GainNode[JT] var channelInterpretation: String
raw/GainNode[JT] def connect(audioNode: AudioNode): Unit
raw/GainNode[JT] def connect(audioParam: AudioParam): Unit
raw/GainNode[JT] val context: AudioContext
raw/GainNode[JT] def disconnect(output: AudioNode?): Unit
raw/GainNode[JT] def dispatchEvent(evt: Event): Boolean
raw/GainNode[JT] val gain: AudioParam
raw/GainNode[JT] val numberOfInputs: Int
raw/GainNode[JT] val numberOfOutputs: Int
raw/GainNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/GainNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Geolocation[JT] def clearWatch(watchId: Int): Unit
raw/Geolocation[JT] def getCurrentPosition(successCallback: js.Function1[Position, _]): Unit
raw/Geolocation[JT] def getCurrentPosition(successCallback: js.Function1[Position, _], errorCallback: js.Function1[PositionError, _], options: PositionOptions?): Unit
raw/Geolocation[JT] def watchPosition(successCallback: js.Function1[Position, _], errorCallback: js.Function1[PositionError, _]?, options: PositionOptions?): Int
raw/GetSVGDocument[JT] def getSVGDocument(): Document
raw/HTMLAnchorElement[JC] var accessKey: String
raw/HTMLAnchorElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLAnchorElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLAnchorElement[JC] def appendChild(newChild: Node): Node
raw/HTMLAnchorElement[JC] def attributes: NamedNodeMap
raw/HTMLAnchorElement[JC] def blur(): Unit
raw/HTMLAnchorElement[JC] var charset: String
raw/HTMLAnchorElement[JC] def childElementCount: Int
raw/HTMLAnchorElement[JC] def childNodes: NodeList
raw/HTMLAnchorElement[JC] def children: HTMLCollection
raw/HTMLAnchorElement[JC] var classList: DOMTokenList
raw/HTMLAnchorElement[JC] var className: String
raw/HTMLAnchorElement[JC] def click(): Unit
raw/HTMLAnchorElement[JC] def clientHeight: Int
raw/HTMLAnchorElement[JC] def clientLeft: Int
raw/HTMLAnchorElement[JC] def clientTop: Int
raw/HTMLAnchorElement[JC] def clientWidth: Int
raw/HTMLAnchorElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLAnchorElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLAnchorElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLAnchorElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLAnchorElement[JC] var contentEditable: String
raw/HTMLAnchorElement[JC] def dataset: js.Dictionary[String]
raw/HTMLAnchorElement[JC] var dir: String
raw/HTMLAnchorElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLAnchorElement[JC] var draggable: Boolean
raw/HTMLAnchorElement[JC] var filters: Object
raw/HTMLAnchorElement[JC] def firstChild: Node
raw/HTMLAnchorElement[JC] def firstElementChild: Element
raw/HTMLAnchorElement[JC] def focus(): Unit
raw/HTMLAnchorElement[JC] def getAttribute(name: String): String
raw/HTMLAnchorElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLAnchorElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLAnchorElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLAnchorElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLAnchorElement[JC] def getClientRects(): ClientRectList
raw/HTMLAnchorElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLAnchorElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLAnchorElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLAnchorElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLAnchorElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLAnchorElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLAnchorElement[JC] def hasAttributes(): Boolean
raw/HTMLAnchorElement[JC] def hasChildNodes(): Boolean
raw/HTMLAnchorElement[JC] var hash: String
raw/HTMLAnchorElement[JC] var host: String
raw/HTMLAnchorElement[JC] var hostname: String
raw/HTMLAnchorElement[JC] var href: String
raw/HTMLAnchorElement[JC] var hreflang: String
raw/HTMLAnchorElement[JC] var id: String
raw/HTMLAnchorElement[JC] var innerHTML: String
raw/HTMLAnchorElement[JC] var innerText: String
raw/HTMLAnchorElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLAnchorElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLAnchorElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLAnchorElement[JC] def isContentEditable: Boolean
raw/HTMLAnchorElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLAnchorElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLAnchorElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLAnchorElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLAnchorElement[JC] var lang: String
raw/HTMLAnchorElement[JC] def lastChild: Node
raw/HTMLAnchorElement[JC] def lastElementChild: Element
raw/HTMLAnchorElement[JC] def localName: String
raw/HTMLAnchorElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLAnchorElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLAnchorElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLAnchorElement[JC] def matches(selector: String): Boolean
raw/HTMLAnchorElement[JC] var mimeType: String
raw/HTMLAnchorElement[JC] def namespaceURI: String
raw/HTMLAnchorElement[JC] def nextElementSibling: Element
raw/HTMLAnchorElement[JC] def nextSibling: Node
raw/HTMLAnchorElement[JC] def nodeName: String
raw/HTMLAnchorElement[JC] def nodeType: Int
raw/HTMLAnchorElement[JC] var nodeValue: String
raw/HTMLAnchorElement[JC] def normalize(): Unit
raw/HTMLAnchorElement[JC] def offsetHeight: Double
raw/HTMLAnchorElement[JC] def offsetLeft: Double
raw/HTMLAnchorElement[JC] def offsetParent: Element
raw/HTMLAnchorElement[JC] def offsetTop: Double
raw/HTMLAnchorElement[JC] def offsetWidth: Double
raw/HTMLAnchorElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLAnchorElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLAnchorElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLAnchorElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLAnchorElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLAnchorElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLAnchorElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLAnchorElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLAnchorElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLAnchorElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLAnchorElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLAnchorElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLAnchorElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLAnchorElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLAnchorElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLAnchorElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLAnchorElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLAnchorElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLAnchorElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLAnchorElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLAnchorElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLAnchorElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onended: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLAnchorElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLAnchorElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLAnchorElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLAnchorElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLAnchorElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLAnchorElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLAnchorElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLAnchorElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLAnchorElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLAnchorElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLAnchorElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLAnchorElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLAnchorElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLAnchorElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLAnchorElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLAnchorElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLAnchorElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLAnchorElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLAnchorElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLAnchorElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLAnchorElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLAnchorElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLAnchorElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLAnchorElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLAnchorElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLAnchorElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLAnchorElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLAnchorElement[JC] var outerHTML: String
raw/HTMLAnchorElement[JC] def ownerDocument: Document
raw/HTMLAnchorElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLAnchorElement[JC] var parentElement: HTMLElement
raw/HTMLAnchorElement[JC] def parentNode: Node
raw/HTMLAnchorElement[JC] var pathname: String
raw/HTMLAnchorElement[JC] var port: String
raw/HTMLAnchorElement[JC] def prefix: String
raw/HTMLAnchorElement[JC] def previousElementSibling: Element
raw/HTMLAnchorElement[JC] def previousSibling: Node
raw/HTMLAnchorElement[JC] var protocol: String
raw/HTMLAnchorElement[JC] def querySelector(selectors: String): Element
raw/HTMLAnchorElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLAnchorElement[JC] var readyState: js.Any
raw/HTMLAnchorElement[JC] var recordNumber: js.Any
raw/HTMLAnchorElement[JC] var rel: String
raw/HTMLAnchorElement[JC] def removeAttribute(name: String): Unit
raw/HTMLAnchorElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLAnchorElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLAnchorElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLAnchorElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLAnchorElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLAnchorElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLAnchorElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLAnchorElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLAnchorElement[JC] def scrollHeight: Int
raw/HTMLAnchorElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLAnchorElement[JC] var scrollLeft: Double
raw/HTMLAnchorElement[JC] var scrollTop: Double
raw/HTMLAnchorElement[JC] def scrollWidth: Int
raw/HTMLAnchorElement[JC] var search: String
raw/HTMLAnchorElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLAnchorElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLAnchorElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLAnchorElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLAnchorElement[JC] var spellcheck: Boolean
raw/HTMLAnchorElement[JC] def style: CSSStyleDeclaration
raw/HTMLAnchorElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLAnchorElement[JC] def style_ = (value: String): Unit
raw/HTMLAnchorElement[JC] var tabIndex: Int
raw/HTMLAnchorElement[JC] def tagName: String
raw/HTMLAnchorElement[JC] var target: String
raw/HTMLAnchorElement[JC] var text: String
raw/HTMLAnchorElement[JC] var textContent: String
raw/HTMLAnchorElement[JC] var title: String
raw/HTMLAnchorElement[JC] var `type`: String
raw/HTMLAreaElement[JC] var accessKey: String
raw/HTMLAreaElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLAreaElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLAreaElement[JC] var alt: String
raw/HTMLAreaElement[JC] def appendChild(newChild: Node): Node
raw/HTMLAreaElement[JC] def attributes: NamedNodeMap
raw/HTMLAreaElement[JC] def blur(): Unit
raw/HTMLAreaElement[JC] def childElementCount: Int
raw/HTMLAreaElement[JC] def childNodes: NodeList
raw/HTMLAreaElement[JC] def children: HTMLCollection
raw/HTMLAreaElement[JC] var classList: DOMTokenList
raw/HTMLAreaElement[JC] var className: String
raw/HTMLAreaElement[JC] def click(): Unit
raw/HTMLAreaElement[JC] def clientHeight: Int
raw/HTMLAreaElement[JC] def clientLeft: Int
raw/HTMLAreaElement[JC] def clientTop: Int
raw/HTMLAreaElement[JC] def clientWidth: Int
raw/HTMLAreaElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLAreaElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLAreaElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLAreaElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLAreaElement[JC] var contentEditable: String
raw/HTMLAreaElement[JC] var coords: String
raw/HTMLAreaElement[JC] def dataset: js.Dictionary[String]
raw/HTMLAreaElement[JC] var dir: String
raw/HTMLAreaElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLAreaElement[JC] var draggable: Boolean
raw/HTMLAreaElement[JC] var filters: Object
raw/HTMLAreaElement[JC] def firstChild: Node
raw/HTMLAreaElement[JC] def firstElementChild: Element
raw/HTMLAreaElement[JC] def focus(): Unit
raw/HTMLAreaElement[JC] def getAttribute(name: String): String
raw/HTMLAreaElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLAreaElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLAreaElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLAreaElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLAreaElement[JC] def getClientRects(): ClientRectList
raw/HTMLAreaElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLAreaElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLAreaElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLAreaElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLAreaElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLAreaElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLAreaElement[JC] def hasAttributes(): Boolean
raw/HTMLAreaElement[JC] def hasChildNodes(): Boolean
raw/HTMLAreaElement[JC] var hash: String
raw/HTMLAreaElement[JC] var host: String
raw/HTMLAreaElement[JC] var hostname: String
raw/HTMLAreaElement[JC] var href: String
raw/HTMLAreaElement[JC] var id: String
raw/HTMLAreaElement[JC] var innerHTML: String
raw/HTMLAreaElement[JC] var innerText: String
raw/HTMLAreaElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLAreaElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLAreaElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLAreaElement[JC] def isContentEditable: Boolean
raw/HTMLAreaElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLAreaElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLAreaElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLAreaElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLAreaElement[JC] var lang: String
raw/HTMLAreaElement[JC] def lastChild: Node
raw/HTMLAreaElement[JC] def lastElementChild: Element
raw/HTMLAreaElement[JC] def localName: String
raw/HTMLAreaElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLAreaElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLAreaElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLAreaElement[JC] def matches(selector: String): Boolean
raw/HTMLAreaElement[JC] def namespaceURI: String
raw/HTMLAreaElement[JC] def nextElementSibling: Element
raw/HTMLAreaElement[JC] def nextSibling: Node
raw/HTMLAreaElement[JC] def nodeName: String
raw/HTMLAreaElement[JC] def nodeType: Int
raw/HTMLAreaElement[JC] var nodeValue: String
raw/HTMLAreaElement[JC] def normalize(): Unit
raw/HTMLAreaElement[JC] def offsetHeight: Double
raw/HTMLAreaElement[JC] def offsetLeft: Double
raw/HTMLAreaElement[JC] def offsetParent: Element
raw/HTMLAreaElement[JC] def offsetTop: Double
raw/HTMLAreaElement[JC] def offsetWidth: Double
raw/HTMLAreaElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLAreaElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLAreaElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLAreaElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLAreaElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLAreaElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLAreaElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLAreaElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLAreaElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLAreaElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLAreaElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLAreaElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLAreaElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLAreaElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLAreaElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLAreaElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLAreaElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLAreaElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLAreaElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLAreaElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLAreaElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLAreaElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onended: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLAreaElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLAreaElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLAreaElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLAreaElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLAreaElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLAreaElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLAreaElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLAreaElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLAreaElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLAreaElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLAreaElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLAreaElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLAreaElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLAreaElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLAreaElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLAreaElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLAreaElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLAreaElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLAreaElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLAreaElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLAreaElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLAreaElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLAreaElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLAreaElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLAreaElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLAreaElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLAreaElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLAreaElement[JC] var outerHTML: String
raw/HTMLAreaElement[JC] def ownerDocument: Document
raw/HTMLAreaElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLAreaElement[JC] var parentElement: HTMLElement
raw/HTMLAreaElement[JC] def parentNode: Node
raw/HTMLAreaElement[JC] var pathname: String
raw/HTMLAreaElement[JC] var port: String
raw/HTMLAreaElement[JC] def prefix: String
raw/HTMLAreaElement[JC] def previousElementSibling: Element
raw/HTMLAreaElement[JC] def previousSibling: Node
raw/HTMLAreaElement[JC] var protocol: String
raw/HTMLAreaElement[JC] def querySelector(selectors: String): Element
raw/HTMLAreaElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLAreaElement[JC] var readyState: js.Any
raw/HTMLAreaElement[JC] var recordNumber: js.Any
raw/HTMLAreaElement[JC] def removeAttribute(name: String): Unit
raw/HTMLAreaElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLAreaElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLAreaElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLAreaElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLAreaElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLAreaElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLAreaElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLAreaElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLAreaElement[JC] def scrollHeight: Int
raw/HTMLAreaElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLAreaElement[JC] var scrollLeft: Double
raw/HTMLAreaElement[JC] var scrollTop: Double
raw/HTMLAreaElement[JC] def scrollWidth: Int
raw/HTMLAreaElement[JC] var search: String
raw/HTMLAreaElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLAreaElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLAreaElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLAreaElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLAreaElement[JC] var shape: String
raw/HTMLAreaElement[JC] var spellcheck: Boolean
raw/HTMLAreaElement[JC] def style: CSSStyleDeclaration
raw/HTMLAreaElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLAreaElement[JC] def style_ = (value: String): Unit
raw/HTMLAreaElement[JC] var tabIndex: Int
raw/HTMLAreaElement[JC] def tagName: String
raw/HTMLAreaElement[JC] var target: String
raw/HTMLAreaElement[JC] var textContent: String
raw/HTMLAreaElement[JC] var title: String
raw/HTMLAudioElement[JC] var accessKey: String
raw/HTMLAudioElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLAudioElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLAudioElement[JC] def appendChild(newChild: Node): Node
raw/HTMLAudioElement[JC] def attributes: NamedNodeMap
raw/HTMLAudioElement[JC] def audioTracks: AudioTrackList
raw/HTMLAudioElement[JC] var autoplay: Boolean
raw/HTMLAudioElement[JC] def blur(): Unit
raw/HTMLAudioElement[JC] def buffered: TimeRanges
raw/HTMLAudioElement[JC] def canPlayType(`type`: String): String
raw/HTMLAudioElement[JC] def childElementCount: Int
raw/HTMLAudioElement[JC] def childNodes: NodeList
raw/HTMLAudioElement[JC] def children: HTMLCollection
raw/HTMLAudioElement[JC] var classList: DOMTokenList
raw/HTMLAudioElement[JC] var className: String
raw/HTMLAudioElement[JC] def click(): Unit
raw/HTMLAudioElement[JC] def clientHeight: Int
raw/HTMLAudioElement[JC] def clientLeft: Int
raw/HTMLAudioElement[JC] def clientTop: Int
raw/HTMLAudioElement[JC] def clientWidth: Int
raw/HTMLAudioElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLAudioElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLAudioElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLAudioElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLAudioElement[JC] var contentEditable: String
raw/HTMLAudioElement[JC] var controls: Boolean
raw/HTMLAudioElement[JC] def currentSrc: String
raw/HTMLAudioElement[JC] var currentTime: Double
raw/HTMLAudioElement[JC] def dataset: js.Dictionary[String]
raw/HTMLAudioElement[JC] var defaultPlaybackRate: Double
raw/HTMLAudioElement[JC] var dir: String
raw/HTMLAudioElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLAudioElement[JC] var draggable: Boolean
raw/HTMLAudioElement[JC] def duration: Double
raw/HTMLAudioElement[JC] def ended: Boolean
raw/HTMLAudioElement[JC] def error: MediaError
raw/HTMLAudioElement[JC] var filters: Object
raw/HTMLAudioElement[JC] def firstChild: Node
raw/HTMLAudioElement[JC] def firstElementChild: Element
raw/HTMLAudioElement[JC] def focus(): Unit
raw/HTMLAudioElement[JC] def getAttribute(name: String): String
raw/HTMLAudioElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLAudioElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLAudioElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLAudioElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLAudioElement[JC] def getClientRects(): ClientRectList
raw/HTMLAudioElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLAudioElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLAudioElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLAudioElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLAudioElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLAudioElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLAudioElement[JC] def hasAttributes(): Boolean
raw/HTMLAudioElement[JC] def hasChildNodes(): Boolean
raw/HTMLAudioElement[JC] var id: String
raw/HTMLAudioElement[JC] def initialTime: Double
raw/HTMLAudioElement[JC] var innerHTML: String
raw/HTMLAudioElement[JC] var innerText: String
raw/HTMLAudioElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLAudioElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLAudioElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLAudioElement[JC] def isContentEditable: Boolean
raw/HTMLAudioElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLAudioElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLAudioElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLAudioElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLAudioElement[JC] var lang: String
raw/HTMLAudioElement[JC] def lastChild: Node
raw/HTMLAudioElement[JC] def lastElementChild: Element
raw/HTMLAudioElement[JC] def load(): Unit
raw/HTMLAudioElement[JC] def localName: String
raw/HTMLAudioElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLAudioElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLAudioElement[JC] var loop: Boolean
raw/HTMLAudioElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLAudioElement[JC] def matches(selector: String): Boolean
raw/HTMLAudioElement[JC] var muted: Boolean
raw/HTMLAudioElement[JC] def namespaceURI: String
raw/HTMLAudioElement[JC] def networkState: Int
raw/HTMLAudioElement[JC] def nextElementSibling: Element
raw/HTMLAudioElement[JC] def nextSibling: Node
raw/HTMLAudioElement[JC] def nodeName: String
raw/HTMLAudioElement[JC] def nodeType: Int
raw/HTMLAudioElement[JC] var nodeValue: String
raw/HTMLAudioElement[JC] def normalize(): Unit
raw/HTMLAudioElement[JC] def offsetHeight: Double
raw/HTMLAudioElement[JC] def offsetLeft: Double
raw/HTMLAudioElement[JC] def offsetParent: Element
raw/HTMLAudioElement[JC] def offsetTop: Double
raw/HTMLAudioElement[JC] def offsetWidth: Double
raw/HTMLAudioElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLAudioElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLAudioElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLAudioElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLAudioElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLAudioElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLAudioElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLAudioElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLAudioElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLAudioElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLAudioElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLAudioElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLAudioElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLAudioElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLAudioElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLAudioElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLAudioElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLAudioElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLAudioElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLAudioElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLAudioElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLAudioElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onended: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLAudioElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLAudioElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLAudioElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLAudioElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLAudioElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLAudioElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLAudioElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLAudioElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLAudioElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLAudioElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLAudioElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLAudioElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLAudioElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLAudioElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLAudioElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLAudioElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLAudioElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLAudioElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLAudioElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLAudioElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLAudioElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLAudioElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLAudioElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLAudioElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLAudioElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLAudioElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLAudioElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLAudioElement[JC] var outerHTML: String
raw/HTMLAudioElement[JC] def ownerDocument: Document
raw/HTMLAudioElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLAudioElement[JC] var parentElement: HTMLElement
raw/HTMLAudioElement[JC] def parentNode: Node
raw/HTMLAudioElement[JC] def pause(): Unit
raw/HTMLAudioElement[JC] def paused: Boolean
raw/HTMLAudioElement[JC] def play(): js.UndefOr[js.Promise[Unit]]
raw/HTMLAudioElement[JC] var playbackRate: Double
raw/HTMLAudioElement[JC] def played: TimeRanges
raw/HTMLAudioElement[JC] def prefix: String
raw/HTMLAudioElement[JC] var preload: String
raw/HTMLAudioElement[JC] def previousElementSibling: Element
raw/HTMLAudioElement[JC] def previousSibling: Node
raw/HTMLAudioElement[JC] def querySelector(selectors: String): Element
raw/HTMLAudioElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLAudioElement[JC] var readyState: js.Any
raw/HTMLAudioElement[JC] var recordNumber: js.Any
raw/HTMLAudioElement[JC] def removeAttribute(name: String): Unit
raw/HTMLAudioElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLAudioElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLAudioElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLAudioElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLAudioElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLAudioElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLAudioElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLAudioElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLAudioElement[JC] def scrollHeight: Int
raw/HTMLAudioElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLAudioElement[JC] var scrollLeft: Double
raw/HTMLAudioElement[JC] var scrollTop: Double
raw/HTMLAudioElement[JC] def scrollWidth: Int
raw/HTMLAudioElement[JC] def seekable: TimeRanges
raw/HTMLAudioElement[JC] def seeking: Boolean
raw/HTMLAudioElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLAudioElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLAudioElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLAudioElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLAudioElement[JC] var spellcheck: Boolean
raw/HTMLAudioElement[JC] var src: String
raw/HTMLAudioElement[JC] var srcObject: js.UndefOr[MediaStream | MediaSource | Blob]
raw/HTMLAudioElement[JC] def style: CSSStyleDeclaration
raw/HTMLAudioElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLAudioElement[JC] def style_ = (value: String): Unit
raw/HTMLAudioElement[JC] var tabIndex: Int
raw/HTMLAudioElement[JC] def tagName: String
raw/HTMLAudioElement[JC] var textContent: String
raw/HTMLAudioElement[JC] def textTracks: TextTrackList
raw/HTMLAudioElement[JC] var title: String
raw/HTMLAudioElement[JC] var volume: Double
raw/HTMLBRElement[JC] var accessKey: String
raw/HTMLBRElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLBRElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLBRElement[JC] def appendChild(newChild: Node): Node
raw/HTMLBRElement[JC] def attributes: NamedNodeMap
raw/HTMLBRElement[JC] def blur(): Unit
raw/HTMLBRElement[JC] def childElementCount: Int
raw/HTMLBRElement[JC] def childNodes: NodeList
raw/HTMLBRElement[JC] def children: HTMLCollection
raw/HTMLBRElement[JC] var classList: DOMTokenList
raw/HTMLBRElement[JC] var className: String
raw/HTMLBRElement[JC] def click(): Unit
raw/HTMLBRElement[JC] def clientHeight: Int
raw/HTMLBRElement[JC] def clientLeft: Int
raw/HTMLBRElement[JC] def clientTop: Int
raw/HTMLBRElement[JC] def clientWidth: Int
raw/HTMLBRElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLBRElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLBRElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLBRElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLBRElement[JC] var contentEditable: String
raw/HTMLBRElement[JC] def dataset: js.Dictionary[String]
raw/HTMLBRElement[JC] var dir: String
raw/HTMLBRElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLBRElement[JC] var draggable: Boolean
raw/HTMLBRElement[JC] var filters: Object
raw/HTMLBRElement[JC] def firstChild: Node
raw/HTMLBRElement[JC] def firstElementChild: Element
raw/HTMLBRElement[JC] def focus(): Unit
raw/HTMLBRElement[JC] def getAttribute(name: String): String
raw/HTMLBRElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLBRElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLBRElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLBRElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLBRElement[JC] def getClientRects(): ClientRectList
raw/HTMLBRElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLBRElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLBRElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLBRElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLBRElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLBRElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLBRElement[JC] def hasAttributes(): Boolean
raw/HTMLBRElement[JC] def hasChildNodes(): Boolean
raw/HTMLBRElement[JC] var id: String
raw/HTMLBRElement[JC] var innerHTML: String
raw/HTMLBRElement[JC] var innerText: String
raw/HTMLBRElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLBRElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLBRElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLBRElement[JC] def isContentEditable: Boolean
raw/HTMLBRElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLBRElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLBRElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLBRElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLBRElement[JC] var lang: String
raw/HTMLBRElement[JC] def lastChild: Node
raw/HTMLBRElement[JC] def lastElementChild: Element
raw/HTMLBRElement[JC] def localName: String
raw/HTMLBRElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLBRElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLBRElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLBRElement[JC] def matches(selector: String): Boolean
raw/HTMLBRElement[JC] def namespaceURI: String
raw/HTMLBRElement[JC] def nextElementSibling: Element
raw/HTMLBRElement[JC] def nextSibling: Node
raw/HTMLBRElement[JC] def nodeName: String
raw/HTMLBRElement[JC] def nodeType: Int
raw/HTMLBRElement[JC] var nodeValue: String
raw/HTMLBRElement[JC] def normalize(): Unit
raw/HTMLBRElement[JC] def offsetHeight: Double
raw/HTMLBRElement[JC] def offsetLeft: Double
raw/HTMLBRElement[JC] def offsetParent: Element
raw/HTMLBRElement[JC] def offsetTop: Double
raw/HTMLBRElement[JC] def offsetWidth: Double
raw/HTMLBRElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLBRElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLBRElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLBRElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLBRElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLBRElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLBRElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLBRElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLBRElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLBRElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLBRElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLBRElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLBRElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLBRElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLBRElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLBRElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLBRElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLBRElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLBRElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLBRElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLBRElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLBRElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLBRElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLBRElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onended: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLBRElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLBRElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLBRElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLBRElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLBRElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLBRElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLBRElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLBRElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLBRElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLBRElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLBRElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLBRElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLBRElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLBRElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLBRElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLBRElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLBRElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLBRElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLBRElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLBRElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLBRElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLBRElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLBRElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLBRElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLBRElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLBRElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLBRElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLBRElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLBRElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLBRElement[JC] var outerHTML: String
raw/HTMLBRElement[JC] def ownerDocument: Document
raw/HTMLBRElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLBRElement[JC] var parentElement: HTMLElement
raw/HTMLBRElement[JC] def parentNode: Node
raw/HTMLBRElement[JC] def prefix: String
raw/HTMLBRElement[JC] def previousElementSibling: Element
raw/HTMLBRElement[JC] def previousSibling: Node
raw/HTMLBRElement[JC] def querySelector(selectors: String): Element
raw/HTMLBRElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLBRElement[JC] var readyState: js.Any
raw/HTMLBRElement[JC] var recordNumber: js.Any
raw/HTMLBRElement[JC] def removeAttribute(name: String): Unit
raw/HTMLBRElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLBRElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLBRElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLBRElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLBRElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLBRElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLBRElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLBRElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLBRElement[JC] def scrollHeight: Int
raw/HTMLBRElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLBRElement[JC] var scrollLeft: Double
raw/HTMLBRElement[JC] var scrollTop: Double
raw/HTMLBRElement[JC] def scrollWidth: Int
raw/HTMLBRElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLBRElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLBRElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLBRElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLBRElement[JC] var spellcheck: Boolean
raw/HTMLBRElement[JC] def style: CSSStyleDeclaration
raw/HTMLBRElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLBRElement[JC] def style_ = (value: String): Unit
raw/HTMLBRElement[JC] var tabIndex: Int
raw/HTMLBRElement[JC] def tagName: String
raw/HTMLBRElement[JC] var textContent: String
raw/HTMLBRElement[JC] var title: String
raw/HTMLBaseElement[JC] var accessKey: String
raw/HTMLBaseElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLBaseElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLBaseElement[JC] def appendChild(newChild: Node): Node
raw/HTMLBaseElement[JC] def attributes: NamedNodeMap
raw/HTMLBaseElement[JC] def blur(): Unit
raw/HTMLBaseElement[JC] def childElementCount: Int
raw/HTMLBaseElement[JC] def childNodes: NodeList
raw/HTMLBaseElement[JC] def children: HTMLCollection
raw/HTMLBaseElement[JC] var classList: DOMTokenList
raw/HTMLBaseElement[JC] var className: String
raw/HTMLBaseElement[JC] def click(): Unit
raw/HTMLBaseElement[JC] def clientHeight: Int
raw/HTMLBaseElement[JC] def clientLeft: Int
raw/HTMLBaseElement[JC] def clientTop: Int
raw/HTMLBaseElement[JC] def clientWidth: Int
raw/HTMLBaseElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLBaseElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLBaseElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLBaseElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLBaseElement[JC] var contentEditable: String
raw/HTMLBaseElement[JC] def dataset: js.Dictionary[String]
raw/HTMLBaseElement[JC] var dir: String
raw/HTMLBaseElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLBaseElement[JC] var draggable: Boolean
raw/HTMLBaseElement[JC] var filters: Object
raw/HTMLBaseElement[JC] def firstChild: Node
raw/HTMLBaseElement[JC] def firstElementChild: Element
raw/HTMLBaseElement[JC] def focus(): Unit
raw/HTMLBaseElement[JC] def getAttribute(name: String): String
raw/HTMLBaseElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLBaseElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLBaseElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLBaseElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLBaseElement[JC] def getClientRects(): ClientRectList
raw/HTMLBaseElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLBaseElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLBaseElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLBaseElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLBaseElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLBaseElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLBaseElement[JC] def hasAttributes(): Boolean
raw/HTMLBaseElement[JC] def hasChildNodes(): Boolean
raw/HTMLBaseElement[JC] var href: String
raw/HTMLBaseElement[JC] var id: String
raw/HTMLBaseElement[JC] var innerHTML: String
raw/HTMLBaseElement[JC] var innerText: String
raw/HTMLBaseElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLBaseElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLBaseElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLBaseElement[JC] def isContentEditable: Boolean
raw/HTMLBaseElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLBaseElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLBaseElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLBaseElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLBaseElement[JC] var lang: String
raw/HTMLBaseElement[JC] def lastChild: Node
raw/HTMLBaseElement[JC] def lastElementChild: Element
raw/HTMLBaseElement[JC] def localName: String
raw/HTMLBaseElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLBaseElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLBaseElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLBaseElement[JC] def matches(selector: String): Boolean
raw/HTMLBaseElement[JC] def namespaceURI: String
raw/HTMLBaseElement[JC] def nextElementSibling: Element
raw/HTMLBaseElement[JC] def nextSibling: Node
raw/HTMLBaseElement[JC] def nodeName: String
raw/HTMLBaseElement[JC] def nodeType: Int
raw/HTMLBaseElement[JC] var nodeValue: String
raw/HTMLBaseElement[JC] def normalize(): Unit
raw/HTMLBaseElement[JC] def offsetHeight: Double
raw/HTMLBaseElement[JC] def offsetLeft: Double
raw/HTMLBaseElement[JC] def offsetParent: Element
raw/HTMLBaseElement[JC] def offsetTop: Double
raw/HTMLBaseElement[JC] def offsetWidth: Double
raw/HTMLBaseElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLBaseElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLBaseElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLBaseElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLBaseElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLBaseElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLBaseElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLBaseElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLBaseElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLBaseElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLBaseElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLBaseElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLBaseElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLBaseElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLBaseElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLBaseElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLBaseElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLBaseElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLBaseElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLBaseElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLBaseElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLBaseElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onended: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLBaseElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLBaseElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLBaseElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLBaseElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLBaseElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLBaseElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLBaseElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLBaseElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLBaseElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLBaseElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLBaseElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLBaseElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLBaseElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLBaseElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLBaseElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLBaseElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLBaseElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLBaseElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLBaseElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLBaseElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLBaseElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLBaseElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLBaseElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLBaseElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLBaseElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLBaseElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLBaseElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLBaseElement[JC] var outerHTML: String
raw/HTMLBaseElement[JC] def ownerDocument: Document
raw/HTMLBaseElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLBaseElement[JC] var parentElement: HTMLElement
raw/HTMLBaseElement[JC] def parentNode: Node
raw/HTMLBaseElement[JC] def prefix: String
raw/HTMLBaseElement[JC] def previousElementSibling: Element
raw/HTMLBaseElement[JC] def previousSibling: Node
raw/HTMLBaseElement[JC] def querySelector(selectors: String): Element
raw/HTMLBaseElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLBaseElement[JC] var readyState: js.Any
raw/HTMLBaseElement[JC] var recordNumber: js.Any
raw/HTMLBaseElement[JC] def removeAttribute(name: String): Unit
raw/HTMLBaseElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLBaseElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLBaseElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLBaseElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLBaseElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLBaseElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLBaseElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLBaseElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLBaseElement[JC] def scrollHeight: Int
raw/HTMLBaseElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLBaseElement[JC] var scrollLeft: Double
raw/HTMLBaseElement[JC] var scrollTop: Double
raw/HTMLBaseElement[JC] def scrollWidth: Int
raw/HTMLBaseElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLBaseElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLBaseElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLBaseElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLBaseElement[JC] var spellcheck: Boolean
raw/HTMLBaseElement[JC] def style: CSSStyleDeclaration
raw/HTMLBaseElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLBaseElement[JC] def style_ = (value: String): Unit
raw/HTMLBaseElement[JC] var tabIndex: Int
raw/HTMLBaseElement[JC] def tagName: String
raw/HTMLBaseElement[JC] var target: String
raw/HTMLBaseElement[JC] var textContent: String
raw/HTMLBaseElement[JC] var title: String
raw/HTMLBodyElement[JC] var accessKey: String
raw/HTMLBodyElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLBodyElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLBodyElement[JC] def appendChild(newChild: Node): Node
raw/HTMLBodyElement[JC] def attributes: NamedNodeMap
raw/HTMLBodyElement[JC] def blur(): Unit
raw/HTMLBodyElement[JC] def childElementCount: Int
raw/HTMLBodyElement[JC] def childNodes: NodeList
raw/HTMLBodyElement[JC] def children: HTMLCollection
raw/HTMLBodyElement[JC] var classList: DOMTokenList
raw/HTMLBodyElement[JC] var className: String
raw/HTMLBodyElement[JC] def click(): Unit
raw/HTMLBodyElement[JC] def clientHeight: Int
raw/HTMLBodyElement[JC] def clientLeft: Int
raw/HTMLBodyElement[JC] def clientTop: Int
raw/HTMLBodyElement[JC] def clientWidth: Int
raw/HTMLBodyElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLBodyElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLBodyElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLBodyElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLBodyElement[JC] var contentEditable: String
raw/HTMLBodyElement[JC] def dataset: js.Dictionary[String]
raw/HTMLBodyElement[JC] var dir: String
raw/HTMLBodyElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLBodyElement[JC] var draggable: Boolean
raw/HTMLBodyElement[JC] var filters: Object
raw/HTMLBodyElement[JC] def firstChild: Node
raw/HTMLBodyElement[JC] def firstElementChild: Element
raw/HTMLBodyElement[JC] def focus(): Unit
raw/HTMLBodyElement[JC] def getAttribute(name: String): String
raw/HTMLBodyElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLBodyElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLBodyElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLBodyElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLBodyElement[JC] def getClientRects(): ClientRectList
raw/HTMLBodyElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLBodyElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLBodyElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLBodyElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLBodyElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLBodyElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLBodyElement[JC] def hasAttributes(): Boolean
raw/HTMLBodyElement[JC] def hasChildNodes(): Boolean
raw/HTMLBodyElement[JC] var id: String
raw/HTMLBodyElement[JC] var innerHTML: String
raw/HTMLBodyElement[JC] var innerText: String
raw/HTMLBodyElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLBodyElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLBodyElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLBodyElement[JC] def isContentEditable: Boolean
raw/HTMLBodyElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLBodyElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLBodyElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLBodyElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLBodyElement[JC] var lang: String
raw/HTMLBodyElement[JC] def lastChild: Node
raw/HTMLBodyElement[JC] def lastElementChild: Element
raw/HTMLBodyElement[JC] def localName: String
raw/HTMLBodyElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLBodyElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLBodyElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLBodyElement[JC] def matches(selector: String): Boolean
raw/HTMLBodyElement[JC] def namespaceURI: String
raw/HTMLBodyElement[JC] def nextElementSibling: Element
raw/HTMLBodyElement[JC] def nextSibling: Node
raw/HTMLBodyElement[JC] def nodeName: String
raw/HTMLBodyElement[JC] def nodeType: Int
raw/HTMLBodyElement[JC] var nodeValue: String
raw/HTMLBodyElement[JC] def normalize(): Unit
raw/HTMLBodyElement[JC] def offsetHeight: Double
raw/HTMLBodyElement[JC] def offsetLeft: Double
raw/HTMLBodyElement[JC] def offsetParent: Element
raw/HTMLBodyElement[JC] def offsetTop: Double
raw/HTMLBodyElement[JC] def offsetWidth: Double
raw/HTMLBodyElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLBodyElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLBodyElement[JC] var onafterprint: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLBodyElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLBodyElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLBodyElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLBodyElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLBodyElement[JC] var onbeforeprint: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onbeforeunload: js.Function1[BeforeUnloadEvent, _]
raw/HTMLBodyElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLBodyElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLBodyElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLBodyElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLBodyElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLBodyElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLBodyElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLBodyElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLBodyElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLBodyElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLBodyElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLBodyElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLBodyElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLBodyElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLBodyElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onended: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onerror: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLBodyElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLBodyElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLBodyElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onhashchange: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLBodyElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLBodyElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLBodyElement[JC] var onload: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onmessage: js.Function1[MessageEvent, _]
raw/HTMLBodyElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLBodyElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLBodyElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLBodyElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLBodyElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLBodyElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLBodyElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLBodyElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLBodyElement[JC] var onoffline: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var ononline: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLBodyElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLBodyElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLBodyElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLBodyElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLBodyElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLBodyElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLBodyElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLBodyElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLBodyElement[JC] var onpopstate: js.Function1[PopStateEvent, _]
raw/HTMLBodyElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLBodyElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onresize: js.Function1[UIEvent, _]
raw/HTMLBodyElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLBodyElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLBodyElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onstorage: js.Function1[StorageEvent, _]
raw/HTMLBodyElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onunload: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLBodyElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLBodyElement[JC] var outerHTML: String
raw/HTMLBodyElement[JC] def ownerDocument: Document
raw/HTMLBodyElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLBodyElement[JC] var parentElement: HTMLElement
raw/HTMLBodyElement[JC] def parentNode: Node
raw/HTMLBodyElement[JC] def prefix: String
raw/HTMLBodyElement[JC] def previousElementSibling: Element
raw/HTMLBodyElement[JC] def previousSibling: Node
raw/HTMLBodyElement[JC] def querySelector(selectors: String): Element
raw/HTMLBodyElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLBodyElement[JC] var readyState: js.Any
raw/HTMLBodyElement[JC] var recordNumber: js.Any
raw/HTMLBodyElement[JC] def removeAttribute(name: String): Unit
raw/HTMLBodyElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLBodyElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLBodyElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLBodyElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLBodyElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLBodyElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLBodyElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLBodyElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLBodyElement[JC] var scroll: String
raw/HTMLBodyElement[JC] def scrollHeight: Int
raw/HTMLBodyElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLBodyElement[JC] var scrollLeft: Double
raw/HTMLBodyElement[JC] var scrollTop: Double
raw/HTMLBodyElement[JC] def scrollWidth: Int
raw/HTMLBodyElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLBodyElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLBodyElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLBodyElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLBodyElement[JC] var spellcheck: Boolean
raw/HTMLBodyElement[JC] def style: CSSStyleDeclaration
raw/HTMLBodyElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLBodyElement[JC] def style_ = (value: String): Unit
raw/HTMLBodyElement[JC] var tabIndex: Int
raw/HTMLBodyElement[JC] def tagName: String
raw/HTMLBodyElement[JC] var textContent: String
raw/HTMLBodyElement[JC] var title: String
raw/HTMLButtonElement[JC] var accessKey: String
raw/HTMLButtonElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLButtonElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLButtonElement[JC] def appendChild(newChild: Node): Node
raw/HTMLButtonElement[JC] def attributes: NamedNodeMap
raw/HTMLButtonElement[JC] var autofocus: Boolean
raw/HTMLButtonElement[JC] def blur(): Unit
raw/HTMLButtonElement[JC] def checkValidity(): Boolean
raw/HTMLButtonElement[JC] def childElementCount: Int
raw/HTMLButtonElement[JC] def childNodes: NodeList
raw/HTMLButtonElement[JC] def children: HTMLCollection
raw/HTMLButtonElement[JC] var classList: DOMTokenList
raw/HTMLButtonElement[JC] var className: String
raw/HTMLButtonElement[JC] def click(): Unit
raw/HTMLButtonElement[JC] def clientHeight: Int
raw/HTMLButtonElement[JC] def clientLeft: Int
raw/HTMLButtonElement[JC] def clientTop: Int
raw/HTMLButtonElement[JC] def clientWidth: Int
raw/HTMLButtonElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLButtonElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLButtonElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLButtonElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLButtonElement[JC] var contentEditable: String
raw/HTMLButtonElement[JC] def dataset: js.Dictionary[String]
raw/HTMLButtonElement[JC] var dir: String
raw/HTMLButtonElement[JC] var disabled: Boolean
raw/HTMLButtonElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLButtonElement[JC] var draggable: Boolean
raw/HTMLButtonElement[JC] var filters: Object
raw/HTMLButtonElement[JC] def firstChild: Node
raw/HTMLButtonElement[JC] def firstElementChild: Element
raw/HTMLButtonElement[JC] def focus(): Unit
raw/HTMLButtonElement[JC] def form: HTMLFormElement
raw/HTMLButtonElement[JC] var formAction: String
raw/HTMLButtonElement[JC] var formEnctype: String
raw/HTMLButtonElement[JC] var formMethod: String
raw/HTMLButtonElement[JC] var formNoValidate: String
raw/HTMLButtonElement[JC] var formTarget: String
raw/HTMLButtonElement[JC] def getAttribute(name: String): String
raw/HTMLButtonElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLButtonElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLButtonElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLButtonElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLButtonElement[JC] def getClientRects(): ClientRectList
raw/HTMLButtonElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLButtonElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLButtonElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLButtonElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLButtonElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLButtonElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLButtonElement[JC] def hasAttributes(): Boolean
raw/HTMLButtonElement[JC] def hasChildNodes(): Boolean
raw/HTMLButtonElement[JC] var id: String
raw/HTMLButtonElement[JC] var innerHTML: String
raw/HTMLButtonElement[JC] var innerText: String
raw/HTMLButtonElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLButtonElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLButtonElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLButtonElement[JC] def isContentEditable: Boolean
raw/HTMLButtonElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLButtonElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLButtonElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLButtonElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLButtonElement[JC] var lang: String
raw/HTMLButtonElement[JC] def lastChild: Node
raw/HTMLButtonElement[JC] def lastElementChild: Element
raw/HTMLButtonElement[JC] def localName: String
raw/HTMLButtonElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLButtonElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLButtonElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLButtonElement[JC] def matches(selector: String): Boolean
raw/HTMLButtonElement[JC] var name: String
raw/HTMLButtonElement[JC] def namespaceURI: String
raw/HTMLButtonElement[JC] def nextElementSibling: Element
raw/HTMLButtonElement[JC] def nextSibling: Node
raw/HTMLButtonElement[JC] def nodeName: String
raw/HTMLButtonElement[JC] def nodeType: Int
raw/HTMLButtonElement[JC] var nodeValue: String
raw/HTMLButtonElement[JC] def normalize(): Unit
raw/HTMLButtonElement[JC] def offsetHeight: Double
raw/HTMLButtonElement[JC] def offsetLeft: Double
raw/HTMLButtonElement[JC] def offsetParent: Element
raw/HTMLButtonElement[JC] def offsetTop: Double
raw/HTMLButtonElement[JC] def offsetWidth: Double
raw/HTMLButtonElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLButtonElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLButtonElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLButtonElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLButtonElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLButtonElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLButtonElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLButtonElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLButtonElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLButtonElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLButtonElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLButtonElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLButtonElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLButtonElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLButtonElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLButtonElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLButtonElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLButtonElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLButtonElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLButtonElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLButtonElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLButtonElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onended: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLButtonElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLButtonElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLButtonElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLButtonElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLButtonElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLButtonElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLButtonElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLButtonElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLButtonElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLButtonElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLButtonElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLButtonElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLButtonElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLButtonElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLButtonElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLButtonElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLButtonElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLButtonElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLButtonElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLButtonElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLButtonElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLButtonElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLButtonElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLButtonElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLButtonElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLButtonElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLButtonElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLButtonElement[JC] var outerHTML: String
raw/HTMLButtonElement[JC] def ownerDocument: Document
raw/HTMLButtonElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLButtonElement[JC] var parentElement: HTMLElement
raw/HTMLButtonElement[JC] def parentNode: Node
raw/HTMLButtonElement[JC] def prefix: String
raw/HTMLButtonElement[JC] def previousElementSibling: Element
raw/HTMLButtonElement[JC] def previousSibling: Node
raw/HTMLButtonElement[JC] def querySelector(selectors: String): Element
raw/HTMLButtonElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLButtonElement[JC] var readyState: js.Any
raw/HTMLButtonElement[JC] var recordNumber: js.Any
raw/HTMLButtonElement[JC] def removeAttribute(name: String): Unit
raw/HTMLButtonElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLButtonElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLButtonElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLButtonElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLButtonElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLButtonElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLButtonElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLButtonElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLButtonElement[JC] def scrollHeight: Int
raw/HTMLButtonElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLButtonElement[JC] var scrollLeft: Double
raw/HTMLButtonElement[JC] var scrollTop: Double
raw/HTMLButtonElement[JC] def scrollWidth: Int
raw/HTMLButtonElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLButtonElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLButtonElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLButtonElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLButtonElement[JC] def setCustomValidity(error: String): Unit
raw/HTMLButtonElement[JC] var spellcheck: Boolean
raw/HTMLButtonElement[JC] var status: js.Any
raw/HTMLButtonElement[JC] def style: CSSStyleDeclaration
raw/HTMLButtonElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLButtonElement[JC] def style_ = (value: String): Unit
raw/HTMLButtonElement[JC] var tabIndex: Int
raw/HTMLButtonElement[JC] def tagName: String
raw/HTMLButtonElement[JC] var textContent: String
raw/HTMLButtonElement[JC] var title: String
raw/HTMLButtonElement[JC] var `type`: String
raw/HTMLButtonElement[JC] def validationMessage: String
raw/HTMLButtonElement[JC] def validity: ValidityState
raw/HTMLButtonElement[JC] var value: String
raw/HTMLButtonElement[JC] def willValidate: Boolean
raw/HTMLCanvasElement[JC] var accessKey: String
raw/HTMLCanvasElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLCanvasElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLCanvasElement[JC] def appendChild(newChild: Node): Node
raw/HTMLCanvasElement[JC] def attributes: NamedNodeMap
raw/HTMLCanvasElement[JC] def blur(): Unit
raw/HTMLCanvasElement[JC] def childElementCount: Int
raw/HTMLCanvasElement[JC] def childNodes: NodeList
raw/HTMLCanvasElement[JC] def children: HTMLCollection
raw/HTMLCanvasElement[JC] var classList: DOMTokenList
raw/HTMLCanvasElement[JC] var className: String
raw/HTMLCanvasElement[JC] def click(): Unit
raw/HTMLCanvasElement[JC] def clientHeight: Int
raw/HTMLCanvasElement[JC] def clientLeft: Int
raw/HTMLCanvasElement[JC] def clientTop: Int
raw/HTMLCanvasElement[JC] def clientWidth: Int
raw/HTMLCanvasElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLCanvasElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLCanvasElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLCanvasElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLCanvasElement[JC] var contentEditable: String
raw/HTMLCanvasElement[JC] def dataset: js.Dictionary[String]
raw/HTMLCanvasElement[JC] var dir: String
raw/HTMLCanvasElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLCanvasElement[JC] var draggable: Boolean
raw/HTMLCanvasElement[JC] var filters: Object
raw/HTMLCanvasElement[JC] def firstChild: Node
raw/HTMLCanvasElement[JC] def firstElementChild: Element
raw/HTMLCanvasElement[JC] def focus(): Unit
raw/HTMLCanvasElement[JC] def getAttribute(name: String): String
raw/HTMLCanvasElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLCanvasElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLCanvasElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLCanvasElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLCanvasElement[JC] def getClientRects(): ClientRectList
raw/HTMLCanvasElement[JC] def getContext(contextId: String, args: js.Any*): js.Dynamic
raw/HTMLCanvasElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLCanvasElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLCanvasElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLCanvasElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLCanvasElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLCanvasElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLCanvasElement[JC] def hasAttributes(): Boolean
raw/HTMLCanvasElement[JC] def hasChildNodes(): Boolean
raw/HTMLCanvasElement[JC] var height: Int
raw/HTMLCanvasElement[JC] var id: String
raw/HTMLCanvasElement[JC] var innerHTML: String
raw/HTMLCanvasElement[JC] var innerText: String
raw/HTMLCanvasElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLCanvasElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLCanvasElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLCanvasElement[JC] def isContentEditable: Boolean
raw/HTMLCanvasElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLCanvasElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLCanvasElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLCanvasElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLCanvasElement[JC] var lang: String
raw/HTMLCanvasElement[JC] def lastChild: Node
raw/HTMLCanvasElement[JC] def lastElementChild: Element
raw/HTMLCanvasElement[JC] def localName: String
raw/HTMLCanvasElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLCanvasElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLCanvasElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLCanvasElement[JC] def matches(selector: String): Boolean
raw/HTMLCanvasElement[JC] def namespaceURI: String
raw/HTMLCanvasElement[JC] def nextElementSibling: Element
raw/HTMLCanvasElement[JC] def nextSibling: Node
raw/HTMLCanvasElement[JC] def nodeName: String
raw/HTMLCanvasElement[JC] def nodeType: Int
raw/HTMLCanvasElement[JC] var nodeValue: String
raw/HTMLCanvasElement[JC] def normalize(): Unit
raw/HTMLCanvasElement[JC] def offsetHeight: Double
raw/HTMLCanvasElement[JC] def offsetLeft: Double
raw/HTMLCanvasElement[JC] def offsetParent: Element
raw/HTMLCanvasElement[JC] def offsetTop: Double
raw/HTMLCanvasElement[JC] def offsetWidth: Double
raw/HTMLCanvasElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLCanvasElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLCanvasElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLCanvasElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLCanvasElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLCanvasElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLCanvasElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLCanvasElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLCanvasElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLCanvasElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLCanvasElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLCanvasElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLCanvasElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLCanvasElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLCanvasElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLCanvasElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLCanvasElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLCanvasElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLCanvasElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLCanvasElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLCanvasElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLCanvasElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onended: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLCanvasElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLCanvasElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLCanvasElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLCanvasElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLCanvasElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLCanvasElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLCanvasElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLCanvasElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLCanvasElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLCanvasElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLCanvasElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLCanvasElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLCanvasElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLCanvasElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLCanvasElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLCanvasElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLCanvasElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLCanvasElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLCanvasElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLCanvasElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLCanvasElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLCanvasElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLCanvasElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLCanvasElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLCanvasElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLCanvasElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLCanvasElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLCanvasElement[JC] var outerHTML: String
raw/HTMLCanvasElement[JC] def ownerDocument: Document
raw/HTMLCanvasElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLCanvasElement[JC] var parentElement: HTMLElement
raw/HTMLCanvasElement[JC] def parentNode: Node
raw/HTMLCanvasElement[JC] def prefix: String
raw/HTMLCanvasElement[JC] def previousElementSibling: Element
raw/HTMLCanvasElement[JC] def previousSibling: Node
raw/HTMLCanvasElement[JC] def querySelector(selectors: String): Element
raw/HTMLCanvasElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLCanvasElement[JC] var readyState: js.Any
raw/HTMLCanvasElement[JC] var recordNumber: js.Any
raw/HTMLCanvasElement[JC] def removeAttribute(name: String): Unit
raw/HTMLCanvasElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLCanvasElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLCanvasElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLCanvasElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLCanvasElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLCanvasElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLCanvasElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLCanvasElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLCanvasElement[JC] def scrollHeight: Int
raw/HTMLCanvasElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLCanvasElement[JC] var scrollLeft: Double
raw/HTMLCanvasElement[JC] var scrollTop: Double
raw/HTMLCanvasElement[JC] def scrollWidth: Int
raw/HTMLCanvasElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLCanvasElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLCanvasElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLCanvasElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLCanvasElement[JC] var spellcheck: Boolean
raw/HTMLCanvasElement[JC] def style: CSSStyleDeclaration
raw/HTMLCanvasElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLCanvasElement[JC] def style_ = (value: String): Unit
raw/HTMLCanvasElement[JC] var tabIndex: Int
raw/HTMLCanvasElement[JC] def tagName: String
raw/HTMLCanvasElement[JC] var textContent: String
raw/HTMLCanvasElement[JC] var title: String
raw/HTMLCanvasElement[JC] def toDataURL(`type`: String, args: js.Any*): String
raw/HTMLCanvasElement[JC] var width: Int
raw/HTMLCollection[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): T
raw/HTMLCollection[JC] def item(index: Int): T
raw/HTMLCollection[JC] def length: Int
raw/HTMLCollection[JC] def namedItem(name: String): Element
raw/HTMLCollection[JC] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: T): Unit
raw/HTMLDListElement[JC] var accessKey: String
raw/HTMLDListElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLDListElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLDListElement[JC] def appendChild(newChild: Node): Node
raw/HTMLDListElement[JC] def attributes: NamedNodeMap
raw/HTMLDListElement[JC] def blur(): Unit
raw/HTMLDListElement[JC] def childElementCount: Int
raw/HTMLDListElement[JC] def childNodes: NodeList
raw/HTMLDListElement[JC] def children: HTMLCollection
raw/HTMLDListElement[JC] var classList: DOMTokenList
raw/HTMLDListElement[JC] var className: String
raw/HTMLDListElement[JC] def click(): Unit
raw/HTMLDListElement[JC] def clientHeight: Int
raw/HTMLDListElement[JC] def clientLeft: Int
raw/HTMLDListElement[JC] def clientTop: Int
raw/HTMLDListElement[JC] def clientWidth: Int
raw/HTMLDListElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLDListElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLDListElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLDListElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLDListElement[JC] var contentEditable: String
raw/HTMLDListElement[JC] def dataset: js.Dictionary[String]
raw/HTMLDListElement[JC] var dir: String
raw/HTMLDListElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLDListElement[JC] var draggable: Boolean
raw/HTMLDListElement[JC] var filters: Object
raw/HTMLDListElement[JC] def firstChild: Node
raw/HTMLDListElement[JC] def firstElementChild: Element
raw/HTMLDListElement[JC] def focus(): Unit
raw/HTMLDListElement[JC] def getAttribute(name: String): String
raw/HTMLDListElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLDListElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLDListElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLDListElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLDListElement[JC] def getClientRects(): ClientRectList
raw/HTMLDListElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLDListElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLDListElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLDListElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLDListElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLDListElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLDListElement[JC] def hasAttributes(): Boolean
raw/HTMLDListElement[JC] def hasChildNodes(): Boolean
raw/HTMLDListElement[JC] var id: String
raw/HTMLDListElement[JC] var innerHTML: String
raw/HTMLDListElement[JC] var innerText: String
raw/HTMLDListElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLDListElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLDListElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLDListElement[JC] def isContentEditable: Boolean
raw/HTMLDListElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLDListElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLDListElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLDListElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLDListElement[JC] var lang: String
raw/HTMLDListElement[JC] def lastChild: Node
raw/HTMLDListElement[JC] def lastElementChild: Element
raw/HTMLDListElement[JC] def localName: String
raw/HTMLDListElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLDListElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLDListElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLDListElement[JC] def matches(selector: String): Boolean
raw/HTMLDListElement[JC] def namespaceURI: String
raw/HTMLDListElement[JC] def nextElementSibling: Element
raw/HTMLDListElement[JC] def nextSibling: Node
raw/HTMLDListElement[JC] def nodeName: String
raw/HTMLDListElement[JC] def nodeType: Int
raw/HTMLDListElement[JC] var nodeValue: String
raw/HTMLDListElement[JC] def normalize(): Unit
raw/HTMLDListElement[JC] def offsetHeight: Double
raw/HTMLDListElement[JC] def offsetLeft: Double
raw/HTMLDListElement[JC] def offsetParent: Element
raw/HTMLDListElement[JC] def offsetTop: Double
raw/HTMLDListElement[JC] def offsetWidth: Double
raw/HTMLDListElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLDListElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLDListElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLDListElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLDListElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLDListElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLDListElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLDListElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLDListElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLDListElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLDListElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLDListElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLDListElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLDListElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLDListElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLDListElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLDListElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLDListElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLDListElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLDListElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLDListElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLDListElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLDListElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLDListElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onended: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLDListElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLDListElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLDListElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLDListElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLDListElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLDListElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLDListElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLDListElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLDListElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLDListElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLDListElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLDListElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLDListElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLDListElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLDListElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLDListElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLDListElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLDListElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLDListElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLDListElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLDListElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLDListElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLDListElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLDListElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLDListElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLDListElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLDListElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLDListElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLDListElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLDListElement[JC] var outerHTML: String
raw/HTMLDListElement[JC] def ownerDocument: Document
raw/HTMLDListElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLDListElement[JC] var parentElement: HTMLElement
raw/HTMLDListElement[JC] def parentNode: Node
raw/HTMLDListElement[JC] def prefix: String
raw/HTMLDListElement[JC] def previousElementSibling: Element
raw/HTMLDListElement[JC] def previousSibling: Node
raw/HTMLDListElement[JC] def querySelector(selectors: String): Element
raw/HTMLDListElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLDListElement[JC] var readyState: js.Any
raw/HTMLDListElement[JC] var recordNumber: js.Any
raw/HTMLDListElement[JC] def removeAttribute(name: String): Unit
raw/HTMLDListElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLDListElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLDListElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLDListElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLDListElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLDListElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLDListElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLDListElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLDListElement[JC] def scrollHeight: Int
raw/HTMLDListElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLDListElement[JC] var scrollLeft: Double
raw/HTMLDListElement[JC] var scrollTop: Double
raw/HTMLDListElement[JC] def scrollWidth: Int
raw/HTMLDListElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLDListElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLDListElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLDListElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLDListElement[JC] var spellcheck: Boolean
raw/HTMLDListElement[JC] def style: CSSStyleDeclaration
raw/HTMLDListElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLDListElement[JC] def style_ = (value: String): Unit
raw/HTMLDListElement[JC] var tabIndex: Int
raw/HTMLDListElement[JC] def tagName: String
raw/HTMLDListElement[JC] var textContent: String
raw/HTMLDListElement[JC] var title: String
raw/HTMLDataListElement[JC] var accessKey: String
raw/HTMLDataListElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLDataListElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLDataListElement[JC] def appendChild(newChild: Node): Node
raw/HTMLDataListElement[JC] def attributes: NamedNodeMap
raw/HTMLDataListElement[JC] def blur(): Unit
raw/HTMLDataListElement[JC] def childElementCount: Int
raw/HTMLDataListElement[JC] def childNodes: NodeList
raw/HTMLDataListElement[JC] def children: HTMLCollection
raw/HTMLDataListElement[JC] var classList: DOMTokenList
raw/HTMLDataListElement[JC] var className: String
raw/HTMLDataListElement[JC] def click(): Unit
raw/HTMLDataListElement[JC] def clientHeight: Int
raw/HTMLDataListElement[JC] def clientLeft: Int
raw/HTMLDataListElement[JC] def clientTop: Int
raw/HTMLDataListElement[JC] def clientWidth: Int
raw/HTMLDataListElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLDataListElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLDataListElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLDataListElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLDataListElement[JC] var contentEditable: String
raw/HTMLDataListElement[JC] def dataset: js.Dictionary[String]
raw/HTMLDataListElement[JC] var dir: String
raw/HTMLDataListElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLDataListElement[JC] var draggable: Boolean
raw/HTMLDataListElement[JC] var filters: Object
raw/HTMLDataListElement[JC] def firstChild: Node
raw/HTMLDataListElement[JC] def firstElementChild: Element
raw/HTMLDataListElement[JC] def focus(): Unit
raw/HTMLDataListElement[JC] def getAttribute(name: String): String
raw/HTMLDataListElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLDataListElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLDataListElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLDataListElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLDataListElement[JC] def getClientRects(): ClientRectList
raw/HTMLDataListElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLDataListElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLDataListElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLDataListElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLDataListElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLDataListElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLDataListElement[JC] def hasAttributes(): Boolean
raw/HTMLDataListElement[JC] def hasChildNodes(): Boolean
raw/HTMLDataListElement[JC] var id: String
raw/HTMLDataListElement[JC] var innerHTML: String
raw/HTMLDataListElement[JC] var innerText: String
raw/HTMLDataListElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLDataListElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLDataListElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLDataListElement[JC] def isContentEditable: Boolean
raw/HTMLDataListElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLDataListElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLDataListElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLDataListElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLDataListElement[JC] var lang: String
raw/HTMLDataListElement[JC] def lastChild: Node
raw/HTMLDataListElement[JC] def lastElementChild: Element
raw/HTMLDataListElement[JC] def localName: String
raw/HTMLDataListElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLDataListElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLDataListElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLDataListElement[JC] def matches(selector: String): Boolean
raw/HTMLDataListElement[JC] def namespaceURI: String
raw/HTMLDataListElement[JC] def nextElementSibling: Element
raw/HTMLDataListElement[JC] def nextSibling: Node
raw/HTMLDataListElement[JC] def nodeName: String
raw/HTMLDataListElement[JC] def nodeType: Int
raw/HTMLDataListElement[JC] var nodeValue: String
raw/HTMLDataListElement[JC] def normalize(): Unit
raw/HTMLDataListElement[JC] def offsetHeight: Double
raw/HTMLDataListElement[JC] def offsetLeft: Double
raw/HTMLDataListElement[JC] def offsetParent: Element
raw/HTMLDataListElement[JC] def offsetTop: Double
raw/HTMLDataListElement[JC] def offsetWidth: Double
raw/HTMLDataListElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLDataListElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLDataListElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLDataListElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLDataListElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLDataListElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLDataListElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLDataListElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLDataListElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLDataListElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLDataListElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLDataListElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLDataListElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLDataListElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLDataListElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLDataListElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLDataListElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLDataListElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLDataListElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLDataListElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLDataListElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLDataListElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onended: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLDataListElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLDataListElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLDataListElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLDataListElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLDataListElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLDataListElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLDataListElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLDataListElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLDataListElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLDataListElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLDataListElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLDataListElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLDataListElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLDataListElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLDataListElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLDataListElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLDataListElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLDataListElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLDataListElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLDataListElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLDataListElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLDataListElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLDataListElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLDataListElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLDataListElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLDataListElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLDataListElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLDataListElement[JC] def options: HTMLCollection
raw/HTMLDataListElement[JC] var outerHTML: String
raw/HTMLDataListElement[JC] def ownerDocument: Document
raw/HTMLDataListElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLDataListElement[JC] var parentElement: HTMLElement
raw/HTMLDataListElement[JC] def parentNode: Node
raw/HTMLDataListElement[JC] def prefix: String
raw/HTMLDataListElement[JC] def previousElementSibling: Element
raw/HTMLDataListElement[JC] def previousSibling: Node
raw/HTMLDataListElement[JC] def querySelector(selectors: String): Element
raw/HTMLDataListElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLDataListElement[JC] var readyState: js.Any
raw/HTMLDataListElement[JC] var recordNumber: js.Any
raw/HTMLDataListElement[JC] def removeAttribute(name: String): Unit
raw/HTMLDataListElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLDataListElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLDataListElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLDataListElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLDataListElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLDataListElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLDataListElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLDataListElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLDataListElement[JC] def scrollHeight: Int
raw/HTMLDataListElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLDataListElement[JC] var scrollLeft: Double
raw/HTMLDataListElement[JC] var scrollTop: Double
raw/HTMLDataListElement[JC] def scrollWidth: Int
raw/HTMLDataListElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLDataListElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLDataListElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLDataListElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLDataListElement[JC] var spellcheck: Boolean
raw/HTMLDataListElement[JC] def style: CSSStyleDeclaration
raw/HTMLDataListElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLDataListElement[JC] def style_ = (value: String): Unit
raw/HTMLDataListElement[JC] var tabIndex: Int
raw/HTMLDataListElement[JC] def tagName: String
raw/HTMLDataListElement[JC] var textContent: String
raw/HTMLDataListElement[JC] var title: String
raw/HTMLDivElement[JC] var accessKey: String
raw/HTMLDivElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLDivElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLDivElement[JC] def appendChild(newChild: Node): Node
raw/HTMLDivElement[JC] def attributes: NamedNodeMap
raw/HTMLDivElement[JC] def blur(): Unit
raw/HTMLDivElement[JC] def childElementCount: Int
raw/HTMLDivElement[JC] def childNodes: NodeList
raw/HTMLDivElement[JC] def children: HTMLCollection
raw/HTMLDivElement[JC] var classList: DOMTokenList
raw/HTMLDivElement[JC] var className: String
raw/HTMLDivElement[JC] def click(): Unit
raw/HTMLDivElement[JC] def clientHeight: Int
raw/HTMLDivElement[JC] def clientLeft: Int
raw/HTMLDivElement[JC] def clientTop: Int
raw/HTMLDivElement[JC] def clientWidth: Int
raw/HTMLDivElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLDivElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLDivElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLDivElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLDivElement[JC] var contentEditable: String
raw/HTMLDivElement[JC] def dataset: js.Dictionary[String]
raw/HTMLDivElement[JC] var dir: String
raw/HTMLDivElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLDivElement[JC] var draggable: Boolean
raw/HTMLDivElement[JC] var filters: Object
raw/HTMLDivElement[JC] def firstChild: Node
raw/HTMLDivElement[JC] def firstElementChild: Element
raw/HTMLDivElement[JC] def focus(): Unit
raw/HTMLDivElement[JC] def getAttribute(name: String): String
raw/HTMLDivElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLDivElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLDivElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLDivElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLDivElement[JC] def getClientRects(): ClientRectList
raw/HTMLDivElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLDivElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLDivElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLDivElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLDivElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLDivElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLDivElement[JC] def hasAttributes(): Boolean
raw/HTMLDivElement[JC] def hasChildNodes(): Boolean
raw/HTMLDivElement[JC] var id: String
raw/HTMLDivElement[JC] var innerHTML: String
raw/HTMLDivElement[JC] var innerText: String
raw/HTMLDivElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLDivElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLDivElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLDivElement[JC] def isContentEditable: Boolean
raw/HTMLDivElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLDivElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLDivElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLDivElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLDivElement[JC] var lang: String
raw/HTMLDivElement[JC] def lastChild: Node
raw/HTMLDivElement[JC] def lastElementChild: Element
raw/HTMLDivElement[JC] def localName: String
raw/HTMLDivElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLDivElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLDivElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLDivElement[JC] def matches(selector: String): Boolean
raw/HTMLDivElement[JC] def namespaceURI: String
raw/HTMLDivElement[JC] def nextElementSibling: Element
raw/HTMLDivElement[JC] def nextSibling: Node
raw/HTMLDivElement[JC] def nodeName: String
raw/HTMLDivElement[JC] def nodeType: Int
raw/HTMLDivElement[JC] var nodeValue: String
raw/HTMLDivElement[JC] def normalize(): Unit
raw/HTMLDivElement[JC] def offsetHeight: Double
raw/HTMLDivElement[JC] def offsetLeft: Double
raw/HTMLDivElement[JC] def offsetParent: Element
raw/HTMLDivElement[JC] def offsetTop: Double
raw/HTMLDivElement[JC] def offsetWidth: Double
raw/HTMLDivElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLDivElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLDivElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLDivElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLDivElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLDivElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLDivElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLDivElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLDivElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLDivElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLDivElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLDivElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLDivElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLDivElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLDivElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLDivElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLDivElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLDivElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLDivElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLDivElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLDivElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLDivElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLDivElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLDivElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onended: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLDivElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLDivElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLDivElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLDivElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLDivElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLDivElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLDivElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLDivElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLDivElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLDivElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLDivElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLDivElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLDivElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLDivElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLDivElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLDivElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLDivElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLDivElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLDivElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLDivElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLDivElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLDivElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLDivElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLDivElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLDivElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLDivElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLDivElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLDivElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLDivElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLDivElement[JC] var outerHTML: String
raw/HTMLDivElement[JC] def ownerDocument: Document
raw/HTMLDivElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLDivElement[JC] var parentElement: HTMLElement
raw/HTMLDivElement[JC] def parentNode: Node
raw/HTMLDivElement[JC] def prefix: String
raw/HTMLDivElement[JC] def previousElementSibling: Element
raw/HTMLDivElement[JC] def previousSibling: Node
raw/HTMLDivElement[JC] def querySelector(selectors: String): Element
raw/HTMLDivElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLDivElement[JC] var readyState: js.Any
raw/HTMLDivElement[JC] var recordNumber: js.Any
raw/HTMLDivElement[JC] def removeAttribute(name: String): Unit
raw/HTMLDivElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLDivElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLDivElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLDivElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLDivElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLDivElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLDivElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLDivElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLDivElement[JC] def scrollHeight: Int
raw/HTMLDivElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLDivElement[JC] var scrollLeft: Double
raw/HTMLDivElement[JC] var scrollTop: Double
raw/HTMLDivElement[JC] def scrollWidth: Int
raw/HTMLDivElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLDivElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLDivElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLDivElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLDivElement[JC] var spellcheck: Boolean
raw/HTMLDivElement[JC] def style: CSSStyleDeclaration
raw/HTMLDivElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLDivElement[JC] def style_ = (value: String): Unit
raw/HTMLDivElement[JC] var tabIndex: Int
raw/HTMLDivElement[JC] def tagName: String
raw/HTMLDivElement[JC] var textContent: String
raw/HTMLDivElement[JC] var title: String
raw/HTMLDocument[JC] def URL: String
raw/HTMLDocument[JC] def activeElement: Element
raw/HTMLDocument[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLDocument[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLDocument[JC] def adoptNode(source: Node): Node
raw/HTMLDocument[JC] def anchors: HTMLCollection
raw/HTMLDocument[JC] def appendChild(newChild: Node): Node
raw/HTMLDocument[JC] def attributes: NamedNodeMap
raw/HTMLDocument[JC] var body: HTMLElement
raw/HTMLDocument[JC] def characterSet: String
raw/HTMLDocument[JC] def childElementCount: Int
raw/HTMLDocument[JC] def childNodes: NodeList
raw/HTMLDocument[JC] def children: HTMLCollection
raw/HTMLDocument[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLDocument[JC] def close(): Unit
raw/HTMLDocument[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLDocument[JC] def compatMode: String
raw/HTMLDocument[JC] def contains(otherNode: Node): Boolean
raw/HTMLDocument[JC] var cookie: String
raw/HTMLDocument[JC] def createAttribute(name: String): Attr
raw/HTMLDocument[JC] def createAttributeNS(namespaceURI: String, qualifiedName: String): Attr
raw/HTMLDocument[JC] def createCDATASection(data: String): CDATASection
raw/HTMLDocument[JC] def createComment(data: String): Comment
raw/HTMLDocument[JC] def createDocumentFragment(): DocumentFragment
raw/HTMLDocument[JC] def createElement(tagName: String): Element
raw/HTMLDocument[JC] def createElementNS(namespaceURI: String, qualifiedName: String): Element
raw/HTMLDocument[JC] def createEvent(eventInterface: String): Event
raw/HTMLDocument[JC] def createNSResolver(node: Node): XPathNSResolver
raw/HTMLDocument[JC] def createNodeIterator(root: Node, whatToShow: Int, filter: NodeFilter, entityReferenceExpansion: Boolean): NodeIterator
raw/HTMLDocument[JC] def createProcessingInstruction(target: String, data: String): ProcessingInstruction
raw/HTMLDocument[JC] def createRange(): Range
raw/HTMLDocument[JC] def createStyleSheet(href: String?, index: Int?): CSSStyleSheet
raw/HTMLDocument[JC] def createTextNode(data: String): Text
raw/HTMLDocument[JC] def createTreeWalker(root: Node, whatToShow: Int, filter: NodeFilter, entityReferenceExpansion: Boolean): TreeWalker
raw/HTMLDocument[JC] def defaultView: Window
raw/HTMLDocument[JC] var designMode: String
raw/HTMLDocument[JC] var dir: String
raw/HTMLDocument[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLDocument[JC] def doctype: DocumentType
raw/HTMLDocument[JC] def documentElement: Element
raw/HTMLDocument[JC] def documentURI: String
raw/HTMLDocument[JC] var domain: String
raw/HTMLDocument[JC] def elementFromPoint(x: Double, y: Double): Element
raw/HTMLDocument[JC] def embeds: HTMLCollection
raw/HTMLDocument[JC] def evaluate(xpathExpression: String, contextNode: Node, namespaceResolver: XPathNSResolver, resultType: Int, result: XPathResult): XPathResult
raw/HTMLDocument[JC] def evaluate(xpathExpression: String, contextNode: Node, namespaceResolver: js.Function1[String, String], resultType: Int, result: XPathResult): XPathResult
raw/HTMLDocument[JC] def execCommand(commandId: String, showUI: Boolean?, value: js.Any?): Boolean
raw/HTMLDocument[JC] def execCommandShowHelp(commandId: String): Boolean
raw/HTMLDocument[JC] def exitFullscreen(): js.Promise[Unit]
raw/HTMLDocument[JC] def fireEvent(eventName: String, eventObj: js.Any?): Boolean
raw/HTMLDocument[JC] def firstChild: Node
raw/HTMLDocument[JC] def firstElementChild: Element
raw/HTMLDocument[JC] def focus(): Unit
raw/HTMLDocument[JC] def forms: HTMLCollection
raw/HTMLDocument[JC] def fullscreenElement: Element
raw/HTMLDocument[JC] def fullscreenEnabled: Boolean
raw/HTMLDocument[JC] def getElementById(elementId: String): Element
raw/HTMLDocument[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLDocument[JC] def getElementsByName(elementName: String): NodeList
raw/HTMLDocument[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLDocument[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLDocument[JC] def getSelection(): Selection
raw/HTMLDocument[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLDocument[JC] def hasAttributes(): Boolean
raw/HTMLDocument[JC] def hasChildNodes(): Boolean
raw/HTMLDocument[JC] def hasFocus(): Boolean
raw/HTMLDocument[JC] def head: HTMLHeadElement
raw/HTMLDocument[JC] def hidden: Boolean
raw/HTMLDocument[JC] def images: HTMLCollection
raw/HTMLDocument[JC] def implementation: DOMImplementation
raw/HTMLDocument[JC] def importNode(importedNode: Node, deep: Boolean): Node
raw/HTMLDocument[JC] var innerText: String
raw/HTMLDocument[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLDocument[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLDocument[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLDocument[JC] def isSameNode(other: Node): Boolean
raw/HTMLDocument[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLDocument[JC] def lastChild: Node
raw/HTMLDocument[JC] def lastElementChild: Element
raw/HTMLDocument[JC] def lastModified: String
raw/HTMLDocument[JC] def links: HTMLCollection
raw/HTMLDocument[JC] def localName: String
raw/HTMLDocument[JC] var location: Location
raw/HTMLDocument[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLDocument[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLDocument[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLDocument[JC] def namespaceURI: String
raw/HTMLDocument[JC] def nextSibling: Node
raw/HTMLDocument[JC] def nodeName: String
raw/HTMLDocument[JC] def nodeType: Int
raw/HTMLDocument[JC] var nodeValue: String
raw/HTMLDocument[JC] def normalize(): Unit
raw/HTMLDocument[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLDocument[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLDocument[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLDocument[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLDocument[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLDocument[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLDocument[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLDocument[JC] var onchange: js.Function1[Event, _]
raw/HTMLDocument[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLDocument[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLDocument[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLDocument[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLDocument[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLDocument[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLDocument[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLDocument[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLDocument[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLDocument[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLDocument[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLDocument[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLDocument[JC] var onemptied: js.Function1[Event, _]
raw/HTMLDocument[JC] var onended: js.Function1[Event, _]
raw/HTMLDocument[JC] var onerror: js.Function1[Event, _]
raw/HTMLDocument[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLDocument[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLDocument[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLDocument[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLDocument[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLDocument[JC] var onhelp: js.Function1[Event, _]
raw/HTMLDocument[JC] var oninput: js.Function1[Event, _]
raw/HTMLDocument[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLDocument[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLDocument[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLDocument[JC] var onload: js.Function1[Event, _]
raw/HTMLDocument[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLDocument[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLDocument[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLDocument[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLDocument[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLDocument[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLDocument[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLDocument[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLDocument[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLDocument[JC] var onpause: js.Function1[Event, _]
raw/HTMLDocument[JC] var onplay: js.Function1[Event, _]
raw/HTMLDocument[JC] var onplaying: js.Function1[Event, _]
raw/HTMLDocument[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLDocument[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLDocument[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLDocument[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLDocument[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLDocument[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLDocument[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLDocument[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLDocument[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLDocument[JC] var onratechange: js.Function1[Event, _]
raw/HTMLDocument[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLDocument[JC] var onreset: js.Function1[Event, _]
raw/HTMLDocument[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLDocument[JC] var onseeked: js.Function1[Event, _]
raw/HTMLDocument[JC] var onseeking: js.Function1[Event, _]
raw/HTMLDocument[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLDocument[JC] var onselectionchange: js.Function1[Event, _]
raw/HTMLDocument[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLDocument[JC] var onstalled: js.Function1[Event, _]
raw/HTMLDocument[JC] var onstop: js.Function1[Event, _]
raw/HTMLDocument[JC] var onstoragecommit: js.Function1[StorageEvent, _]
raw/HTMLDocument[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLDocument[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLDocument[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLDocument[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLDocument[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLDocument[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLDocument[JC] def open(url: String?, name: String?, features: String?, replace: Boolean?): js.Dynamic
raw/HTMLDocument[JC] def ownerDocument: Document
raw/HTMLDocument[JC] def parentNode: Node
raw/HTMLDocument[JC] def plugins: HTMLCollection
raw/HTMLDocument[JC] def previousSibling: Node
raw/HTMLDocument[JC] def queryCommandEnabled(commandId: String): Boolean
raw/HTMLDocument[JC] def queryCommandIndeterm(commandId: String): Boolean
raw/HTMLDocument[JC] def queryCommandState(commandId: String): Boolean
raw/HTMLDocument[JC] def queryCommandSupported(commandId: String): Boolean
raw/HTMLDocument[JC] def queryCommandText(commandId: String): String
raw/HTMLDocument[JC] def queryCommandValue(commandId: String): String
raw/HTMLDocument[JC] def querySelector(selectors: String): Element
raw/HTMLDocument[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLDocument[JC] def readyState: String
raw/HTMLDocument[JC] def referrer: String
raw/HTMLDocument[JC] def removeChild(oldChild: Node): Node
raw/HTMLDocument[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLDocument[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLDocument[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLDocument[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLDocument[JC] def styleSheets: StyleSheetList
raw/HTMLDocument[JC] var textContent: String
raw/HTMLDocument[JC] var title: String
raw/HTMLDocument[JC] var uniqueID: String
raw/HTMLDocument[JC] def updateSettings(): Unit
raw/HTMLDocument[JC] def visibilityState: VisibilityState | String
raw/HTMLDocument[JC] var visibilitychange: js.Function1[Event, _]
raw/HTMLDocument[JC] def write(content: String*): Unit
raw/HTMLDocument[JC] def writeln(content: String*): Unit
raw/HTMLElement[JC] var accessKey: String
raw/HTMLElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLElement[JC] def appendChild(newChild: Node): Node
raw/HTMLElement[JC] def attributes: NamedNodeMap
raw/HTMLElement[JC] def blur(): Unit
raw/HTMLElement[JC] def childElementCount: Int
raw/HTMLElement[JC] def childNodes: NodeList
raw/HTMLElement[JC] def children: HTMLCollection
raw/HTMLElement[JC] var classList: DOMTokenList
raw/HTMLElement[JC] var className: String
raw/HTMLElement[JC] def click(): Unit
raw/HTMLElement[JC] def clientHeight: Int
raw/HTMLElement[JC] def clientLeft: Int
raw/HTMLElement[JC] def clientTop: Int
raw/HTMLElement[JC] def clientWidth: Int
raw/HTMLElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLElement[JC] var contentEditable: String
raw/HTMLElement[JC] def dataset: js.Dictionary[String]
raw/HTMLElement[JC] var dir: String
raw/HTMLElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLElement[JC] var draggable: Boolean
raw/HTMLElement[JC] var filters: Object
raw/HTMLElement[JC] def firstChild: Node
raw/HTMLElement[JC] def firstElementChild: Element
raw/HTMLElement[JC] def focus(): Unit
raw/HTMLElement[JC] def getAttribute(name: String): String
raw/HTMLElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLElement[JC] def getClientRects(): ClientRectList
raw/HTMLElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLElement[JC] def hasAttributes(): Boolean
raw/HTMLElement[JC] def hasChildNodes(): Boolean
raw/HTMLElement[JC] var id: String
raw/HTMLElement[JC] var innerHTML: String
raw/HTMLElement[JC] var innerText: String
raw/HTMLElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLElement[JC] def isContentEditable: Boolean
raw/HTMLElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLElement[JC] var lang: String
raw/HTMLElement[JC] def lastChild: Node
raw/HTMLElement[JC] def lastElementChild: Element
raw/HTMLElement[JC] def localName: String
raw/HTMLElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLElement[JC] def matches(selector: String): Boolean
raw/HTMLElement[JC] def namespaceURI: String
raw/HTMLElement[JC] def nextElementSibling: Element
raw/HTMLElement[JC] def nextSibling: Node
raw/HTMLElement[JC] def nodeName: String
raw/HTMLElement[JC] def nodeType: Int
raw/HTMLElement[JC] var nodeValue: String
raw/HTMLElement[JC] def normalize(): Unit
raw/HTMLElement[JC] def offsetHeight: Double
raw/HTMLElement[JC] def offsetLeft: Double
raw/HTMLElement[JC] def offsetParent: Element
raw/HTMLElement[JC] def offsetTop: Double
raw/HTMLElement[JC] def offsetWidth: Double
raw/HTMLElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLElement[JC] var onended: js.Function1[Event, _]
raw/HTMLElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLElement[JC] var outerHTML: String
raw/HTMLElement[JC] def ownerDocument: Document
raw/HTMLElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLElement[JC] var parentElement: HTMLElement
raw/HTMLElement[JC] def parentNode: Node
raw/HTMLElement[JC] def prefix: String
raw/HTMLElement[JC] def previousElementSibling: Element
raw/HTMLElement[JC] def previousSibling: Node
raw/HTMLElement[JC] def querySelector(selectors: String): Element
raw/HTMLElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLElement[JC] var readyState: js.Any
raw/HTMLElement[JC] var recordNumber: js.Any
raw/HTMLElement[JC] def removeAttribute(name: String): Unit
raw/HTMLElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLElement[JC] def scrollHeight: Int
raw/HTMLElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLElement[JC] var scrollLeft: Double
raw/HTMLElement[JC] var scrollTop: Double
raw/HTMLElement[JC] def scrollWidth: Int
raw/HTMLElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLElement[JC] var spellcheck: Boolean
raw/HTMLElement[JC] def style: CSSStyleDeclaration
raw/HTMLElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLElement[JC] def style_ = (value: String): Unit
raw/HTMLElement[JC] var tabIndex: Int
raw/HTMLElement[JC] def tagName: String
raw/HTMLElement[JC] var textContent: String
raw/HTMLElement[JC] var title: String
raw/HTMLEmbedElement[JC] var accessKey: String
raw/HTMLEmbedElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLEmbedElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLEmbedElement[JC] def appendChild(newChild: Node): Node
raw/HTMLEmbedElement[JC] def attributes: NamedNodeMap
raw/HTMLEmbedElement[JC] def blur(): Unit
raw/HTMLEmbedElement[JC] def childElementCount: Int
raw/HTMLEmbedElement[JC] def childNodes: NodeList
raw/HTMLEmbedElement[JC] def children: HTMLCollection
raw/HTMLEmbedElement[JC] var classList: DOMTokenList
raw/HTMLEmbedElement[JC] var className: String
raw/HTMLEmbedElement[JC] def click(): Unit
raw/HTMLEmbedElement[JC] def clientHeight: Int
raw/HTMLEmbedElement[JC] def clientLeft: Int
raw/HTMLEmbedElement[JC] def clientTop: Int
raw/HTMLEmbedElement[JC] def clientWidth: Int
raw/HTMLEmbedElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLEmbedElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLEmbedElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLEmbedElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLEmbedElement[JC] var contentEditable: String
raw/HTMLEmbedElement[JC] def dataset: js.Dictionary[String]
raw/HTMLEmbedElement[JC] var dir: String
raw/HTMLEmbedElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLEmbedElement[JC] var draggable: Boolean
raw/HTMLEmbedElement[JC] var filters: Object
raw/HTMLEmbedElement[JC] def firstChild: Node
raw/HTMLEmbedElement[JC] def firstElementChild: Element
raw/HTMLEmbedElement[JC] def focus(): Unit
raw/HTMLEmbedElement[JC] def getAttribute(name: String): String
raw/HTMLEmbedElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLEmbedElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLEmbedElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLEmbedElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLEmbedElement[JC] def getClientRects(): ClientRectList
raw/HTMLEmbedElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLEmbedElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLEmbedElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLEmbedElement[JC] def getSVGDocument(): Document
raw/HTMLEmbedElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLEmbedElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLEmbedElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLEmbedElement[JC] def hasAttributes(): Boolean
raw/HTMLEmbedElement[JC] def hasChildNodes(): Boolean
raw/HTMLEmbedElement[JC] var height: String
raw/HTMLEmbedElement[JC] var id: String
raw/HTMLEmbedElement[JC] var innerHTML: String
raw/HTMLEmbedElement[JC] var innerText: String
raw/HTMLEmbedElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLEmbedElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLEmbedElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLEmbedElement[JC] def isContentEditable: Boolean
raw/HTMLEmbedElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLEmbedElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLEmbedElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLEmbedElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLEmbedElement[JC] var lang: String
raw/HTMLEmbedElement[JC] def lastChild: Node
raw/HTMLEmbedElement[JC] def lastElementChild: Element
raw/HTMLEmbedElement[JC] def localName: String
raw/HTMLEmbedElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLEmbedElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLEmbedElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLEmbedElement[JC] def matches(selector: String): Boolean
raw/HTMLEmbedElement[JC] def namespaceURI: String
raw/HTMLEmbedElement[JC] def nextElementSibling: Element
raw/HTMLEmbedElement[JC] def nextSibling: Node
raw/HTMLEmbedElement[JC] def nodeName: String
raw/HTMLEmbedElement[JC] def nodeType: Int
raw/HTMLEmbedElement[JC] var nodeValue: String
raw/HTMLEmbedElement[JC] def normalize(): Unit
raw/HTMLEmbedElement[JC] def offsetHeight: Double
raw/HTMLEmbedElement[JC] def offsetLeft: Double
raw/HTMLEmbedElement[JC] def offsetParent: Element
raw/HTMLEmbedElement[JC] def offsetTop: Double
raw/HTMLEmbedElement[JC] def offsetWidth: Double
raw/HTMLEmbedElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLEmbedElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLEmbedElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLEmbedElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLEmbedElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLEmbedElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLEmbedElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLEmbedElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLEmbedElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLEmbedElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLEmbedElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLEmbedElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLEmbedElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLEmbedElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLEmbedElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLEmbedElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLEmbedElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLEmbedElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLEmbedElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLEmbedElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLEmbedElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLEmbedElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onended: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLEmbedElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLEmbedElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLEmbedElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLEmbedElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLEmbedElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLEmbedElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLEmbedElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLEmbedElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLEmbedElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLEmbedElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLEmbedElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLEmbedElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLEmbedElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLEmbedElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLEmbedElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLEmbedElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLEmbedElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLEmbedElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLEmbedElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLEmbedElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLEmbedElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLEmbedElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLEmbedElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLEmbedElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLEmbedElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLEmbedElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLEmbedElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLEmbedElement[JC] var outerHTML: String
raw/HTMLEmbedElement[JC] def ownerDocument: Document
raw/HTMLEmbedElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLEmbedElement[JC] var parentElement: HTMLElement
raw/HTMLEmbedElement[JC] def parentNode: Node
raw/HTMLEmbedElement[JC] def prefix: String
raw/HTMLEmbedElement[JC] def previousElementSibling: Element
raw/HTMLEmbedElement[JC] def previousSibling: Node
raw/HTMLEmbedElement[JC] def querySelector(selectors: String): Element
raw/HTMLEmbedElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLEmbedElement[JC] var readyState: js.Any
raw/HTMLEmbedElement[JC] var recordNumber: js.Any
raw/HTMLEmbedElement[JC] def removeAttribute(name: String): Unit
raw/HTMLEmbedElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLEmbedElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLEmbedElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLEmbedElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLEmbedElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLEmbedElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLEmbedElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLEmbedElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLEmbedElement[JC] def scrollHeight: Int
raw/HTMLEmbedElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLEmbedElement[JC] var scrollLeft: Double
raw/HTMLEmbedElement[JC] var scrollTop: Double
raw/HTMLEmbedElement[JC] def scrollWidth: Int
raw/HTMLEmbedElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLEmbedElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLEmbedElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLEmbedElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLEmbedElement[JC] var spellcheck: Boolean
raw/HTMLEmbedElement[JC] var src: String
raw/HTMLEmbedElement[JC] def style: CSSStyleDeclaration
raw/HTMLEmbedElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLEmbedElement[JC] def style_ = (value: String): Unit
raw/HTMLEmbedElement[JC] var tabIndex: Int
raw/HTMLEmbedElement[JC] def tagName: String
raw/HTMLEmbedElement[JC] var textContent: String
raw/HTMLEmbedElement[JC] var title: String
raw/HTMLEmbedElement[JC] var width: String
raw/HTMLFieldSetElement[JC] var accessKey: String
raw/HTMLFieldSetElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLFieldSetElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLFieldSetElement[JC] def appendChild(newChild: Node): Node
raw/HTMLFieldSetElement[JC] def attributes: NamedNodeMap
raw/HTMLFieldSetElement[JC] def blur(): Unit
raw/HTMLFieldSetElement[JC] def checkValidity(): Boolean
raw/HTMLFieldSetElement[JC] def childElementCount: Int
raw/HTMLFieldSetElement[JC] def childNodes: NodeList
raw/HTMLFieldSetElement[JC] def children: HTMLCollection
raw/HTMLFieldSetElement[JC] var classList: DOMTokenList
raw/HTMLFieldSetElement[JC] var className: String
raw/HTMLFieldSetElement[JC] def click(): Unit
raw/HTMLFieldSetElement[JC] def clientHeight: Int
raw/HTMLFieldSetElement[JC] def clientLeft: Int
raw/HTMLFieldSetElement[JC] def clientTop: Int
raw/HTMLFieldSetElement[JC] def clientWidth: Int
raw/HTMLFieldSetElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLFieldSetElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLFieldSetElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLFieldSetElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLFieldSetElement[JC] var contentEditable: String
raw/HTMLFieldSetElement[JC] def dataset: js.Dictionary[String]
raw/HTMLFieldSetElement[JC] var dir: String
raw/HTMLFieldSetElement[JC] var disabled: Boolean
raw/HTMLFieldSetElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLFieldSetElement[JC] var draggable: Boolean
raw/HTMLFieldSetElement[JC] var filters: Object
raw/HTMLFieldSetElement[JC] def firstChild: Node
raw/HTMLFieldSetElement[JC] def firstElementChild: Element
raw/HTMLFieldSetElement[JC] def focus(): Unit
raw/HTMLFieldSetElement[JC] def form: HTMLFormElement
raw/HTMLFieldSetElement[JC] def getAttribute(name: String): String
raw/HTMLFieldSetElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLFieldSetElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLFieldSetElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLFieldSetElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLFieldSetElement[JC] def getClientRects(): ClientRectList
raw/HTMLFieldSetElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLFieldSetElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLFieldSetElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLFieldSetElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLFieldSetElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLFieldSetElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLFieldSetElement[JC] def hasAttributes(): Boolean
raw/HTMLFieldSetElement[JC] def hasChildNodes(): Boolean
raw/HTMLFieldSetElement[JC] var id: String
raw/HTMLFieldSetElement[JC] var innerHTML: String
raw/HTMLFieldSetElement[JC] var innerText: String
raw/HTMLFieldSetElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLFieldSetElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLFieldSetElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLFieldSetElement[JC] def isContentEditable: Boolean
raw/HTMLFieldSetElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLFieldSetElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLFieldSetElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLFieldSetElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLFieldSetElement[JC] var lang: String
raw/HTMLFieldSetElement[JC] def lastChild: Node
raw/HTMLFieldSetElement[JC] def lastElementChild: Element
raw/HTMLFieldSetElement[JC] def localName: String
raw/HTMLFieldSetElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLFieldSetElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLFieldSetElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLFieldSetElement[JC] def matches(selector: String): Boolean
raw/HTMLFieldSetElement[JC] def namespaceURI: String
raw/HTMLFieldSetElement[JC] def nextElementSibling: Element
raw/HTMLFieldSetElement[JC] def nextSibling: Node
raw/HTMLFieldSetElement[JC] def nodeName: String
raw/HTMLFieldSetElement[JC] def nodeType: Int
raw/HTMLFieldSetElement[JC] var nodeValue: String
raw/HTMLFieldSetElement[JC] def normalize(): Unit
raw/HTMLFieldSetElement[JC] def offsetHeight: Double
raw/HTMLFieldSetElement[JC] def offsetLeft: Double
raw/HTMLFieldSetElement[JC] def offsetParent: Element
raw/HTMLFieldSetElement[JC] def offsetTop: Double
raw/HTMLFieldSetElement[JC] def offsetWidth: Double
raw/HTMLFieldSetElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLFieldSetElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLFieldSetElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLFieldSetElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLFieldSetElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLFieldSetElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLFieldSetElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLFieldSetElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLFieldSetElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLFieldSetElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLFieldSetElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLFieldSetElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLFieldSetElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLFieldSetElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLFieldSetElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLFieldSetElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLFieldSetElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLFieldSetElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLFieldSetElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLFieldSetElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLFieldSetElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLFieldSetElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onended: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLFieldSetElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLFieldSetElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLFieldSetElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLFieldSetElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLFieldSetElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLFieldSetElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLFieldSetElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLFieldSetElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLFieldSetElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLFieldSetElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLFieldSetElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLFieldSetElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLFieldSetElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLFieldSetElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLFieldSetElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLFieldSetElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLFieldSetElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLFieldSetElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLFieldSetElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLFieldSetElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLFieldSetElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLFieldSetElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLFieldSetElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLFieldSetElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLFieldSetElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLFieldSetElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLFieldSetElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLFieldSetElement[JC] var outerHTML: String
raw/HTMLFieldSetElement[JC] def ownerDocument: Document
raw/HTMLFieldSetElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLFieldSetElement[JC] var parentElement: HTMLElement
raw/HTMLFieldSetElement[JC] def parentNode: Node
raw/HTMLFieldSetElement[JC] def prefix: String
raw/HTMLFieldSetElement[JC] def previousElementSibling: Element
raw/HTMLFieldSetElement[JC] def previousSibling: Node
raw/HTMLFieldSetElement[JC] def querySelector(selectors: String): Element
raw/HTMLFieldSetElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLFieldSetElement[JC] var readyState: js.Any
raw/HTMLFieldSetElement[JC] var recordNumber: js.Any
raw/HTMLFieldSetElement[JC] def removeAttribute(name: String): Unit
raw/HTMLFieldSetElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLFieldSetElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLFieldSetElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLFieldSetElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLFieldSetElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLFieldSetElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLFieldSetElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLFieldSetElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLFieldSetElement[JC] def scrollHeight: Int
raw/HTMLFieldSetElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLFieldSetElement[JC] var scrollLeft: Double
raw/HTMLFieldSetElement[JC] var scrollTop: Double
raw/HTMLFieldSetElement[JC] def scrollWidth: Int
raw/HTMLFieldSetElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLFieldSetElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLFieldSetElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLFieldSetElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLFieldSetElement[JC] def setCustomValidity(error: String): Unit
raw/HTMLFieldSetElement[JC] var spellcheck: Boolean
raw/HTMLFieldSetElement[JC] def style: CSSStyleDeclaration
raw/HTMLFieldSetElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLFieldSetElement[JC] def style_ = (value: String): Unit
raw/HTMLFieldSetElement[JC] var tabIndex: Int
raw/HTMLFieldSetElement[JC] def tagName: String
raw/HTMLFieldSetElement[JC] var textContent: String
raw/HTMLFieldSetElement[JC] var title: String
raw/HTMLFieldSetElement[JC] def validationMessage: String
raw/HTMLFieldSetElement[JC] def validity: ValidityState
raw/HTMLFieldSetElement[JC] def willValidate: Boolean
raw/HTMLFormElement[JC] var acceptCharset: String
raw/HTMLFormElement[JC] var accessKey: String
raw/HTMLFormElement[JC] var action: String
raw/HTMLFormElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLFormElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLFormElement[JC] def appendChild(newChild: Node): Node
raw/HTMLFormElement[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(name: String): js.Any
raw/HTMLFormElement[JC] def attributes: NamedNodeMap
raw/HTMLFormElement[JC] var autocomplete: String
raw/HTMLFormElement[JC] def blur(): Unit
raw/HTMLFormElement[JC] def checkValidity(): Boolean
raw/HTMLFormElement[JC] def childElementCount: Int
raw/HTMLFormElement[JC] def childNodes: NodeList
raw/HTMLFormElement[JC] def children: HTMLCollection
raw/HTMLFormElement[JC] var classList: DOMTokenList
raw/HTMLFormElement[JC] var className: String
raw/HTMLFormElement[JC] def click(): Unit
raw/HTMLFormElement[JC] def clientHeight: Int
raw/HTMLFormElement[JC] def clientLeft: Int
raw/HTMLFormElement[JC] def clientTop: Int
raw/HTMLFormElement[JC] def clientWidth: Int
raw/HTMLFormElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLFormElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLFormElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLFormElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLFormElement[JC] var contentEditable: String
raw/HTMLFormElement[JC] def dataset: js.Dictionary[String]
raw/HTMLFormElement[JC] var dir: String
raw/HTMLFormElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLFormElement[JC] var draggable: Boolean
raw/HTMLFormElement[JC] def elements: HTMLCollection
raw/HTMLFormElement[JC] var encoding: String
raw/HTMLFormElement[JC] var enctype: String
raw/HTMLFormElement[JC] var filters: Object
raw/HTMLFormElement[JC] def firstChild: Node
raw/HTMLFormElement[JC] def firstElementChild: Element
raw/HTMLFormElement[JC] def focus(): Unit
raw/HTMLFormElement[JC] def getAttribute(name: String): String
raw/HTMLFormElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLFormElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLFormElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLFormElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLFormElement[JC] def getClientRects(): ClientRectList
raw/HTMLFormElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLFormElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLFormElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLFormElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLFormElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLFormElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLFormElement[JC] def hasAttributes(): Boolean
raw/HTMLFormElement[JC] def hasChildNodes(): Boolean
raw/HTMLFormElement[JC] var id: String
raw/HTMLFormElement[JC] var innerHTML: String
raw/HTMLFormElement[JC] var innerText: String
raw/HTMLFormElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLFormElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLFormElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLFormElement[JC] def isContentEditable: Boolean
raw/HTMLFormElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLFormElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLFormElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLFormElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLFormElement[JC] def item(name: js.Any?, index: js.Any?): js.Dynamic
raw/HTMLFormElement[JC] var lang: String
raw/HTMLFormElement[JC] def lastChild: Node
raw/HTMLFormElement[JC] def lastElementChild: Element
raw/HTMLFormElement[JC] def length: Int
raw/HTMLFormElement[JC] def localName: String
raw/HTMLFormElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLFormElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLFormElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLFormElement[JC] def matches(selector: String): Boolean
raw/HTMLFormElement[JC] var method: String
raw/HTMLFormElement[JC] var name: String
raw/HTMLFormElement[JC] def namedItem(name: String): js.Dynamic
raw/HTMLFormElement[JC] def namespaceURI: String
raw/HTMLFormElement[JC] def nextElementSibling: Element
raw/HTMLFormElement[JC] def nextSibling: Node
raw/HTMLFormElement[JC] var noValidate: Boolean
raw/HTMLFormElement[JC] def nodeName: String
raw/HTMLFormElement[JC] def nodeType: Int
raw/HTMLFormElement[JC] var nodeValue: String
raw/HTMLFormElement[JC] def normalize(): Unit
raw/HTMLFormElement[JC] def offsetHeight: Double
raw/HTMLFormElement[JC] def offsetLeft: Double
raw/HTMLFormElement[JC] def offsetParent: Element
raw/HTMLFormElement[JC] def offsetTop: Double
raw/HTMLFormElement[JC] def offsetWidth: Double
raw/HTMLFormElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLFormElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLFormElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLFormElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLFormElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLFormElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLFormElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLFormElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLFormElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLFormElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLFormElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLFormElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLFormElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLFormElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLFormElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLFormElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLFormElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLFormElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLFormElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLFormElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLFormElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLFormElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLFormElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLFormElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onended: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLFormElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLFormElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLFormElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLFormElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLFormElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLFormElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLFormElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLFormElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLFormElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLFormElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLFormElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLFormElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLFormElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLFormElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLFormElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLFormElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLFormElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLFormElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLFormElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLFormElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLFormElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLFormElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLFormElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLFormElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLFormElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLFormElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLFormElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLFormElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLFormElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLFormElement[JC] var outerHTML: String
raw/HTMLFormElement[JC] def ownerDocument: Document
raw/HTMLFormElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLFormElement[JC] var parentElement: HTMLElement
raw/HTMLFormElement[JC] def parentNode: Node
raw/HTMLFormElement[JC] def prefix: String
raw/HTMLFormElement[JC] def previousElementSibling: Element
raw/HTMLFormElement[JC] def previousSibling: Node
raw/HTMLFormElement[JC] def querySelector(selectors: String): Element
raw/HTMLFormElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLFormElement[JC] var readyState: js.Any
raw/HTMLFormElement[JC] var recordNumber: js.Any
raw/HTMLFormElement[JC] def removeAttribute(name: String): Unit
raw/HTMLFormElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLFormElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLFormElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLFormElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLFormElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLFormElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLFormElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLFormElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLFormElement[JC] def reset(): Unit
raw/HTMLFormElement[JC] def scrollHeight: Int
raw/HTMLFormElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLFormElement[JC] var scrollLeft: Double
raw/HTMLFormElement[JC] var scrollTop: Double
raw/HTMLFormElement[JC] def scrollWidth: Int
raw/HTMLFormElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLFormElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLFormElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLFormElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLFormElement[JC] var spellcheck: Boolean
raw/HTMLFormElement[JC] def style: CSSStyleDeclaration
raw/HTMLFormElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLFormElement[JC] def style_ = (value: String): Unit
raw/HTMLFormElement[JC] def submit(): Unit
raw/HTMLFormElement[JC] var tabIndex: Int
raw/HTMLFormElement[JC] def tagName: String
raw/HTMLFormElement[JC] var target: String
raw/HTMLFormElement[JC] var textContent: String
raw/HTMLFormElement[JC] var title: String
raw/HTMLFormElement[JC] @scala.scalajs.js.annotation.JSBracketAccess def update(name: String, v: js.Any): Unit
raw/HTMLHRElement[JC] var accessKey: String
raw/HTMLHRElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLHRElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLHRElement[JC] def appendChild(newChild: Node): Node
raw/HTMLHRElement[JC] def attributes: NamedNodeMap
raw/HTMLHRElement[JC] def blur(): Unit
raw/HTMLHRElement[JC] def childElementCount: Int
raw/HTMLHRElement[JC] def childNodes: NodeList
raw/HTMLHRElement[JC] def children: HTMLCollection
raw/HTMLHRElement[JC] var classList: DOMTokenList
raw/HTMLHRElement[JC] var className: String
raw/HTMLHRElement[JC] def click(): Unit
raw/HTMLHRElement[JC] def clientHeight: Int
raw/HTMLHRElement[JC] def clientLeft: Int
raw/HTMLHRElement[JC] def clientTop: Int
raw/HTMLHRElement[JC] def clientWidth: Int
raw/HTMLHRElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLHRElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLHRElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLHRElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLHRElement[JC] var contentEditable: String
raw/HTMLHRElement[JC] def dataset: js.Dictionary[String]
raw/HTMLHRElement[JC] var dir: String
raw/HTMLHRElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLHRElement[JC] var draggable: Boolean
raw/HTMLHRElement[JC] var filters: Object
raw/HTMLHRElement[JC] def firstChild: Node
raw/HTMLHRElement[JC] def firstElementChild: Element
raw/HTMLHRElement[JC] def focus(): Unit
raw/HTMLHRElement[JC] def getAttribute(name: String): String
raw/HTMLHRElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLHRElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLHRElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLHRElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLHRElement[JC] def getClientRects(): ClientRectList
raw/HTMLHRElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLHRElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLHRElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLHRElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLHRElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLHRElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLHRElement[JC] def hasAttributes(): Boolean
raw/HTMLHRElement[JC] def hasChildNodes(): Boolean
raw/HTMLHRElement[JC] var id: String
raw/HTMLHRElement[JC] var innerHTML: String
raw/HTMLHRElement[JC] var innerText: String
raw/HTMLHRElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLHRElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLHRElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLHRElement[JC] def isContentEditable: Boolean
raw/HTMLHRElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLHRElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLHRElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLHRElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLHRElement[JC] var lang: String
raw/HTMLHRElement[JC] def lastChild: Node
raw/HTMLHRElement[JC] def lastElementChild: Element
raw/HTMLHRElement[JC] def localName: String
raw/HTMLHRElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLHRElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLHRElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLHRElement[JC] def matches(selector: String): Boolean
raw/HTMLHRElement[JC] def namespaceURI: String
raw/HTMLHRElement[JC] def nextElementSibling: Element
raw/HTMLHRElement[JC] def nextSibling: Node
raw/HTMLHRElement[JC] def nodeName: String
raw/HTMLHRElement[JC] def nodeType: Int
raw/HTMLHRElement[JC] var nodeValue: String
raw/HTMLHRElement[JC] def normalize(): Unit
raw/HTMLHRElement[JC] def offsetHeight: Double
raw/HTMLHRElement[JC] def offsetLeft: Double
raw/HTMLHRElement[JC] def offsetParent: Element
raw/HTMLHRElement[JC] def offsetTop: Double
raw/HTMLHRElement[JC] def offsetWidth: Double
raw/HTMLHRElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLHRElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLHRElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLHRElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLHRElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLHRElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLHRElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLHRElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLHRElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLHRElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLHRElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLHRElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLHRElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLHRElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLHRElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLHRElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLHRElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLHRElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLHRElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLHRElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLHRElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLHRElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLHRElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLHRElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onended: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLHRElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLHRElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLHRElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLHRElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLHRElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLHRElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLHRElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLHRElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLHRElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLHRElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLHRElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLHRElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLHRElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLHRElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLHRElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLHRElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLHRElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLHRElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLHRElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLHRElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLHRElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLHRElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLHRElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLHRElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLHRElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLHRElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLHRElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLHRElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLHRElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLHRElement[JC] var outerHTML: String
raw/HTMLHRElement[JC] def ownerDocument: Document
raw/HTMLHRElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLHRElement[JC] var parentElement: HTMLElement
raw/HTMLHRElement[JC] def parentNode: Node
raw/HTMLHRElement[JC] def prefix: String
raw/HTMLHRElement[JC] def previousElementSibling: Element
raw/HTMLHRElement[JC] def previousSibling: Node
raw/HTMLHRElement[JC] def querySelector(selectors: String): Element
raw/HTMLHRElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLHRElement[JC] var readyState: js.Any
raw/HTMLHRElement[JC] var recordNumber: js.Any
raw/HTMLHRElement[JC] def removeAttribute(name: String): Unit
raw/HTMLHRElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLHRElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLHRElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLHRElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLHRElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLHRElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLHRElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLHRElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLHRElement[JC] def scrollHeight: Int
raw/HTMLHRElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLHRElement[JC] var scrollLeft: Double
raw/HTMLHRElement[JC] var scrollTop: Double
raw/HTMLHRElement[JC] def scrollWidth: Int
raw/HTMLHRElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLHRElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLHRElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLHRElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLHRElement[JC] var spellcheck: Boolean
raw/HTMLHRElement[JC] def style: CSSStyleDeclaration
raw/HTMLHRElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLHRElement[JC] def style_ = (value: String): Unit
raw/HTMLHRElement[JC] var tabIndex: Int
raw/HTMLHRElement[JC] def tagName: String
raw/HTMLHRElement[JC] var textContent: String
raw/HTMLHRElement[JC] var title: String
raw/HTMLHeadElement[JC] var accessKey: String
raw/HTMLHeadElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLHeadElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLHeadElement[JC] def appendChild(newChild: Node): Node
raw/HTMLHeadElement[JC] def attributes: NamedNodeMap
raw/HTMLHeadElement[JC] def blur(): Unit
raw/HTMLHeadElement[JC] def childElementCount: Int
raw/HTMLHeadElement[JC] def childNodes: NodeList
raw/HTMLHeadElement[JC] def children: HTMLCollection
raw/HTMLHeadElement[JC] var classList: DOMTokenList
raw/HTMLHeadElement[JC] var className: String
raw/HTMLHeadElement[JC] def click(): Unit
raw/HTMLHeadElement[JC] def clientHeight: Int
raw/HTMLHeadElement[JC] def clientLeft: Int
raw/HTMLHeadElement[JC] def clientTop: Int
raw/HTMLHeadElement[JC] def clientWidth: Int
raw/HTMLHeadElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLHeadElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLHeadElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLHeadElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLHeadElement[JC] var contentEditable: String
raw/HTMLHeadElement[JC] def dataset: js.Dictionary[String]
raw/HTMLHeadElement[JC] var dir: String
raw/HTMLHeadElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLHeadElement[JC] var draggable: Boolean
raw/HTMLHeadElement[JC] var filters: Object
raw/HTMLHeadElement[JC] def firstChild: Node
raw/HTMLHeadElement[JC] def firstElementChild: Element
raw/HTMLHeadElement[JC] def focus(): Unit
raw/HTMLHeadElement[JC] def getAttribute(name: String): String
raw/HTMLHeadElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLHeadElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLHeadElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLHeadElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLHeadElement[JC] def getClientRects(): ClientRectList
raw/HTMLHeadElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLHeadElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLHeadElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLHeadElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLHeadElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLHeadElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLHeadElement[JC] def hasAttributes(): Boolean
raw/HTMLHeadElement[JC] def hasChildNodes(): Boolean
raw/HTMLHeadElement[JC] var id: String
raw/HTMLHeadElement[JC] var innerHTML: String
raw/HTMLHeadElement[JC] var innerText: String
raw/HTMLHeadElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLHeadElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLHeadElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLHeadElement[JC] def isContentEditable: Boolean
raw/HTMLHeadElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLHeadElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLHeadElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLHeadElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLHeadElement[JC] var lang: String
raw/HTMLHeadElement[JC] def lastChild: Node
raw/HTMLHeadElement[JC] def lastElementChild: Element
raw/HTMLHeadElement[JC] def localName: String
raw/HTMLHeadElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLHeadElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLHeadElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLHeadElement[JC] def matches(selector: String): Boolean
raw/HTMLHeadElement[JC] def namespaceURI: String
raw/HTMLHeadElement[JC] def nextElementSibling: Element
raw/HTMLHeadElement[JC] def nextSibling: Node
raw/HTMLHeadElement[JC] def nodeName: String
raw/HTMLHeadElement[JC] def nodeType: Int
raw/HTMLHeadElement[JC] var nodeValue: String
raw/HTMLHeadElement[JC] def normalize(): Unit
raw/HTMLHeadElement[JC] def offsetHeight: Double
raw/HTMLHeadElement[JC] def offsetLeft: Double
raw/HTMLHeadElement[JC] def offsetParent: Element
raw/HTMLHeadElement[JC] def offsetTop: Double
raw/HTMLHeadElement[JC] def offsetWidth: Double
raw/HTMLHeadElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLHeadElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLHeadElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLHeadElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLHeadElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLHeadElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLHeadElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLHeadElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLHeadElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLHeadElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLHeadElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLHeadElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLHeadElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLHeadElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLHeadElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLHeadElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLHeadElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLHeadElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLHeadElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLHeadElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLHeadElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLHeadElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onended: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLHeadElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLHeadElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLHeadElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLHeadElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLHeadElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLHeadElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLHeadElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLHeadElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLHeadElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLHeadElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLHeadElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLHeadElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLHeadElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLHeadElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLHeadElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLHeadElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLHeadElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLHeadElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLHeadElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLHeadElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLHeadElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLHeadElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLHeadElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLHeadElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLHeadElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLHeadElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLHeadElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLHeadElement[JC] var outerHTML: String
raw/HTMLHeadElement[JC] def ownerDocument: Document
raw/HTMLHeadElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLHeadElement[JC] var parentElement: HTMLElement
raw/HTMLHeadElement[JC] def parentNode: Node
raw/HTMLHeadElement[JC] def prefix: String
raw/HTMLHeadElement[JC] def previousElementSibling: Element
raw/HTMLHeadElement[JC] def previousSibling: Node
raw/HTMLHeadElement[JC] def querySelector(selectors: String): Element
raw/HTMLHeadElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLHeadElement[JC] var readyState: js.Any
raw/HTMLHeadElement[JC] var recordNumber: js.Any
raw/HTMLHeadElement[JC] def removeAttribute(name: String): Unit
raw/HTMLHeadElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLHeadElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLHeadElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLHeadElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLHeadElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLHeadElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLHeadElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLHeadElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLHeadElement[JC] def scrollHeight: Int
raw/HTMLHeadElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLHeadElement[JC] var scrollLeft: Double
raw/HTMLHeadElement[JC] var scrollTop: Double
raw/HTMLHeadElement[JC] def scrollWidth: Int
raw/HTMLHeadElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLHeadElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLHeadElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLHeadElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLHeadElement[JC] var spellcheck: Boolean
raw/HTMLHeadElement[JC] def style: CSSStyleDeclaration
raw/HTMLHeadElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLHeadElement[JC] def style_ = (value: String): Unit
raw/HTMLHeadElement[JC] var tabIndex: Int
raw/HTMLHeadElement[JC] def tagName: String
raw/HTMLHeadElement[JC] var textContent: String
raw/HTMLHeadElement[JC] var title: String
raw/HTMLHeadingElement[JC] var accessKey: String
raw/HTMLHeadingElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLHeadingElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLHeadingElement[JC] def appendChild(newChild: Node): Node
raw/HTMLHeadingElement[JC] def attributes: NamedNodeMap
raw/HTMLHeadingElement[JC] def blur(): Unit
raw/HTMLHeadingElement[JC] def childElementCount: Int
raw/HTMLHeadingElement[JC] def childNodes: NodeList
raw/HTMLHeadingElement[JC] def children: HTMLCollection
raw/HTMLHeadingElement[JC] var classList: DOMTokenList
raw/HTMLHeadingElement[JC] var className: String
raw/HTMLHeadingElement[JC] def click(): Unit
raw/HTMLHeadingElement[JC] def clientHeight: Int
raw/HTMLHeadingElement[JC] def clientLeft: Int
raw/HTMLHeadingElement[JC] def clientTop: Int
raw/HTMLHeadingElement[JC] def clientWidth: Int
raw/HTMLHeadingElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLHeadingElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLHeadingElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLHeadingElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLHeadingElement[JC] var contentEditable: String
raw/HTMLHeadingElement[JC] def dataset: js.Dictionary[String]
raw/HTMLHeadingElement[JC] var dir: String
raw/HTMLHeadingElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLHeadingElement[JC] var draggable: Boolean
raw/HTMLHeadingElement[JC] var filters: Object
raw/HTMLHeadingElement[JC] def firstChild: Node
raw/HTMLHeadingElement[JC] def firstElementChild: Element
raw/HTMLHeadingElement[JC] def focus(): Unit
raw/HTMLHeadingElement[JC] def getAttribute(name: String): String
raw/HTMLHeadingElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLHeadingElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLHeadingElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLHeadingElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLHeadingElement[JC] def getClientRects(): ClientRectList
raw/HTMLHeadingElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLHeadingElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLHeadingElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLHeadingElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLHeadingElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLHeadingElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLHeadingElement[JC] def hasAttributes(): Boolean
raw/HTMLHeadingElement[JC] def hasChildNodes(): Boolean
raw/HTMLHeadingElement[JC] var id: String
raw/HTMLHeadingElement[JC] var innerHTML: String
raw/HTMLHeadingElement[JC] var innerText: String
raw/HTMLHeadingElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLHeadingElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLHeadingElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLHeadingElement[JC] def isContentEditable: Boolean
raw/HTMLHeadingElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLHeadingElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLHeadingElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLHeadingElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLHeadingElement[JC] var lang: String
raw/HTMLHeadingElement[JC] def lastChild: Node
raw/HTMLHeadingElement[JC] def lastElementChild: Element
raw/HTMLHeadingElement[JC] def localName: String
raw/HTMLHeadingElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLHeadingElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLHeadingElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLHeadingElement[JC] def matches(selector: String): Boolean
raw/HTMLHeadingElement[JC] def namespaceURI: String
raw/HTMLHeadingElement[JC] def nextElementSibling: Element
raw/HTMLHeadingElement[JC] def nextSibling: Node
raw/HTMLHeadingElement[JC] def nodeName: String
raw/HTMLHeadingElement[JC] def nodeType: Int
raw/HTMLHeadingElement[JC] var nodeValue: String
raw/HTMLHeadingElement[JC] def normalize(): Unit
raw/HTMLHeadingElement[JC] def offsetHeight: Double
raw/HTMLHeadingElement[JC] def offsetLeft: Double
raw/HTMLHeadingElement[JC] def offsetParent: Element
raw/HTMLHeadingElement[JC] def offsetTop: Double
raw/HTMLHeadingElement[JC] def offsetWidth: Double
raw/HTMLHeadingElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLHeadingElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLHeadingElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLHeadingElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLHeadingElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLHeadingElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLHeadingElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLHeadingElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLHeadingElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLHeadingElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLHeadingElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLHeadingElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLHeadingElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLHeadingElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLHeadingElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLHeadingElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLHeadingElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLHeadingElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLHeadingElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLHeadingElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLHeadingElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLHeadingElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onended: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLHeadingElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLHeadingElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLHeadingElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLHeadingElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLHeadingElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLHeadingElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLHeadingElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLHeadingElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLHeadingElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLHeadingElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLHeadingElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLHeadingElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLHeadingElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLHeadingElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLHeadingElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLHeadingElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLHeadingElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLHeadingElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLHeadingElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLHeadingElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLHeadingElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLHeadingElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLHeadingElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLHeadingElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLHeadingElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLHeadingElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLHeadingElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLHeadingElement[JC] var outerHTML: String
raw/HTMLHeadingElement[JC] def ownerDocument: Document
raw/HTMLHeadingElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLHeadingElement[JC] var parentElement: HTMLElement
raw/HTMLHeadingElement[JC] def parentNode: Node
raw/HTMLHeadingElement[JC] def prefix: String
raw/HTMLHeadingElement[JC] def previousElementSibling: Element
raw/HTMLHeadingElement[JC] def previousSibling: Node
raw/HTMLHeadingElement[JC] def querySelector(selectors: String): Element
raw/HTMLHeadingElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLHeadingElement[JC] var readyState: js.Any
raw/HTMLHeadingElement[JC] var recordNumber: js.Any
raw/HTMLHeadingElement[JC] def removeAttribute(name: String): Unit
raw/HTMLHeadingElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLHeadingElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLHeadingElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLHeadingElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLHeadingElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLHeadingElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLHeadingElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLHeadingElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLHeadingElement[JC] def scrollHeight: Int
raw/HTMLHeadingElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLHeadingElement[JC] var scrollLeft: Double
raw/HTMLHeadingElement[JC] var scrollTop: Double
raw/HTMLHeadingElement[JC] def scrollWidth: Int
raw/HTMLHeadingElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLHeadingElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLHeadingElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLHeadingElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLHeadingElement[JC] var spellcheck: Boolean
raw/HTMLHeadingElement[JC] def style: CSSStyleDeclaration
raw/HTMLHeadingElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLHeadingElement[JC] def style_ = (value: String): Unit
raw/HTMLHeadingElement[JC] var tabIndex: Int
raw/HTMLHeadingElement[JC] def tagName: String
raw/HTMLHeadingElement[JC] var textContent: String
raw/HTMLHeadingElement[JC] var title: String
raw/HTMLHtmlElement[JC] var accessKey: String
raw/HTMLHtmlElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLHtmlElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLHtmlElement[JC] def appendChild(newChild: Node): Node
raw/HTMLHtmlElement[JC] def attributes: NamedNodeMap
raw/HTMLHtmlElement[JC] def blur(): Unit
raw/HTMLHtmlElement[JC] def childElementCount: Int
raw/HTMLHtmlElement[JC] def childNodes: NodeList
raw/HTMLHtmlElement[JC] def children: HTMLCollection
raw/HTMLHtmlElement[JC] var classList: DOMTokenList
raw/HTMLHtmlElement[JC] var className: String
raw/HTMLHtmlElement[JC] def click(): Unit
raw/HTMLHtmlElement[JC] def clientHeight: Int
raw/HTMLHtmlElement[JC] def clientLeft: Int
raw/HTMLHtmlElement[JC] def clientTop: Int
raw/HTMLHtmlElement[JC] def clientWidth: Int
raw/HTMLHtmlElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLHtmlElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLHtmlElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLHtmlElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLHtmlElement[JC] var contentEditable: String
raw/HTMLHtmlElement[JC] def dataset: js.Dictionary[String]
raw/HTMLHtmlElement[JC] var dir: String
raw/HTMLHtmlElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLHtmlElement[JC] var draggable: Boolean
raw/HTMLHtmlElement[JC] var filters: Object
raw/HTMLHtmlElement[JC] def firstChild: Node
raw/HTMLHtmlElement[JC] def firstElementChild: Element
raw/HTMLHtmlElement[JC] def focus(): Unit
raw/HTMLHtmlElement[JC] def getAttribute(name: String): String
raw/HTMLHtmlElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLHtmlElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLHtmlElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLHtmlElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLHtmlElement[JC] def getClientRects(): ClientRectList
raw/HTMLHtmlElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLHtmlElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLHtmlElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLHtmlElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLHtmlElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLHtmlElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLHtmlElement[JC] def hasAttributes(): Boolean
raw/HTMLHtmlElement[JC] def hasChildNodes(): Boolean
raw/HTMLHtmlElement[JC] var id: String
raw/HTMLHtmlElement[JC] var innerHTML: String
raw/HTMLHtmlElement[JC] var innerText: String
raw/HTMLHtmlElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLHtmlElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLHtmlElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLHtmlElement[JC] def isContentEditable: Boolean
raw/HTMLHtmlElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLHtmlElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLHtmlElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLHtmlElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLHtmlElement[JC] var lang: String
raw/HTMLHtmlElement[JC] def lastChild: Node
raw/HTMLHtmlElement[JC] def lastElementChild: Element
raw/HTMLHtmlElement[JC] def localName: String
raw/HTMLHtmlElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLHtmlElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLHtmlElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLHtmlElement[JC] def matches(selector: String): Boolean
raw/HTMLHtmlElement[JC] def namespaceURI: String
raw/HTMLHtmlElement[JC] def nextElementSibling: Element
raw/HTMLHtmlElement[JC] def nextSibling: Node
raw/HTMLHtmlElement[JC] def nodeName: String
raw/HTMLHtmlElement[JC] def nodeType: Int
raw/HTMLHtmlElement[JC] var nodeValue: String
raw/HTMLHtmlElement[JC] def normalize(): Unit
raw/HTMLHtmlElement[JC] def offsetHeight: Double
raw/HTMLHtmlElement[JC] def offsetLeft: Double
raw/HTMLHtmlElement[JC] def offsetParent: Element
raw/HTMLHtmlElement[JC] def offsetTop: Double
raw/HTMLHtmlElement[JC] def offsetWidth: Double
raw/HTMLHtmlElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLHtmlElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLHtmlElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLHtmlElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLHtmlElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLHtmlElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLHtmlElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLHtmlElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLHtmlElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLHtmlElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLHtmlElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLHtmlElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLHtmlElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLHtmlElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLHtmlElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLHtmlElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLHtmlElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLHtmlElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLHtmlElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLHtmlElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLHtmlElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLHtmlElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onended: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLHtmlElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLHtmlElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLHtmlElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLHtmlElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLHtmlElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLHtmlElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLHtmlElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLHtmlElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLHtmlElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLHtmlElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLHtmlElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLHtmlElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLHtmlElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLHtmlElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLHtmlElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLHtmlElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLHtmlElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLHtmlElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLHtmlElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLHtmlElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLHtmlElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLHtmlElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLHtmlElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLHtmlElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLHtmlElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLHtmlElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLHtmlElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLHtmlElement[JC] var outerHTML: String
raw/HTMLHtmlElement[JC] def ownerDocument: Document
raw/HTMLHtmlElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLHtmlElement[JC] var parentElement: HTMLElement
raw/HTMLHtmlElement[JC] def parentNode: Node
raw/HTMLHtmlElement[JC] def prefix: String
raw/HTMLHtmlElement[JC] def previousElementSibling: Element
raw/HTMLHtmlElement[JC] def previousSibling: Node
raw/HTMLHtmlElement[JC] def querySelector(selectors: String): Element
raw/HTMLHtmlElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLHtmlElement[JC] var readyState: js.Any
raw/HTMLHtmlElement[JC] var recordNumber: js.Any
raw/HTMLHtmlElement[JC] def removeAttribute(name: String): Unit
raw/HTMLHtmlElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLHtmlElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLHtmlElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLHtmlElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLHtmlElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLHtmlElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLHtmlElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLHtmlElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLHtmlElement[JC] def scrollHeight: Int
raw/HTMLHtmlElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLHtmlElement[JC] var scrollLeft: Double
raw/HTMLHtmlElement[JC] var scrollTop: Double
raw/HTMLHtmlElement[JC] def scrollWidth: Int
raw/HTMLHtmlElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLHtmlElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLHtmlElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLHtmlElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLHtmlElement[JC] var spellcheck: Boolean
raw/HTMLHtmlElement[JC] def style: CSSStyleDeclaration
raw/HTMLHtmlElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLHtmlElement[JC] def style_ = (value: String): Unit
raw/HTMLHtmlElement[JC] var tabIndex: Int
raw/HTMLHtmlElement[JC] def tagName: String
raw/HTMLHtmlElement[JC] var textContent: String
raw/HTMLHtmlElement[JC] var title: String
raw/HTMLIFrameElement[JC] var accessKey: String
raw/HTMLIFrameElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLIFrameElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLIFrameElement[JC] def appendChild(newChild: Node): Node
raw/HTMLIFrameElement[JC] def attributes: NamedNodeMap
raw/HTMLIFrameElement[JC] def blur(): Unit
raw/HTMLIFrameElement[JC] var border: String
raw/HTMLIFrameElement[JC] def childElementCount: Int
raw/HTMLIFrameElement[JC] def childNodes: NodeList
raw/HTMLIFrameElement[JC] def children: HTMLCollection
raw/HTMLIFrameElement[JC] var classList: DOMTokenList
raw/HTMLIFrameElement[JC] var className: String
raw/HTMLIFrameElement[JC] def click(): Unit
raw/HTMLIFrameElement[JC] def clientHeight: Int
raw/HTMLIFrameElement[JC] def clientLeft: Int
raw/HTMLIFrameElement[JC] def clientTop: Int
raw/HTMLIFrameElement[JC] def clientWidth: Int
raw/HTMLIFrameElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLIFrameElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLIFrameElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLIFrameElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLIFrameElement[JC] def contentDocument: Document
raw/HTMLIFrameElement[JC] var contentEditable: String
raw/HTMLIFrameElement[JC] def contentWindow: Window
raw/HTMLIFrameElement[JC] def dataset: js.Dictionary[String]
raw/HTMLIFrameElement[JC] var dir: String
raw/HTMLIFrameElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLIFrameElement[JC] var draggable: Boolean
raw/HTMLIFrameElement[JC] var filters: Object
raw/HTMLIFrameElement[JC] def firstChild: Node
raw/HTMLIFrameElement[JC] def firstElementChild: Element
raw/HTMLIFrameElement[JC] def focus(): Unit
raw/HTMLIFrameElement[JC] def getAttribute(name: String): String
raw/HTMLIFrameElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLIFrameElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLIFrameElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLIFrameElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLIFrameElement[JC] def getClientRects(): ClientRectList
raw/HTMLIFrameElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLIFrameElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLIFrameElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLIFrameElement[JC] def getSVGDocument(): Document
raw/HTMLIFrameElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLIFrameElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLIFrameElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLIFrameElement[JC] def hasAttributes(): Boolean
raw/HTMLIFrameElement[JC] def hasChildNodes(): Boolean
raw/HTMLIFrameElement[JC] var height: String
raw/HTMLIFrameElement[JC] var id: String
raw/HTMLIFrameElement[JC] var innerHTML: String
raw/HTMLIFrameElement[JC] var innerText: String
raw/HTMLIFrameElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLIFrameElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLIFrameElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLIFrameElement[JC] def isContentEditable: Boolean
raw/HTMLIFrameElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLIFrameElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLIFrameElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLIFrameElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLIFrameElement[JC] var lang: String
raw/HTMLIFrameElement[JC] def lastChild: Node
raw/HTMLIFrameElement[JC] def lastElementChild: Element
raw/HTMLIFrameElement[JC] def localName: String
raw/HTMLIFrameElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLIFrameElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLIFrameElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLIFrameElement[JC] def matches(selector: String): Boolean
raw/HTMLIFrameElement[JC] var name: String
raw/HTMLIFrameElement[JC] def namespaceURI: String
raw/HTMLIFrameElement[JC] def nextElementSibling: Element
raw/HTMLIFrameElement[JC] def nextSibling: Node
raw/HTMLIFrameElement[JC] def nodeName: String
raw/HTMLIFrameElement[JC] def nodeType: Int
raw/HTMLIFrameElement[JC] var nodeValue: String
raw/HTMLIFrameElement[JC] def normalize(): Unit
raw/HTMLIFrameElement[JC] def offsetHeight: Double
raw/HTMLIFrameElement[JC] def offsetLeft: Double
raw/HTMLIFrameElement[JC] def offsetParent: Element
raw/HTMLIFrameElement[JC] def offsetTop: Double
raw/HTMLIFrameElement[JC] def offsetWidth: Double
raw/HTMLIFrameElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLIFrameElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLIFrameElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLIFrameElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLIFrameElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLIFrameElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLIFrameElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLIFrameElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLIFrameElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLIFrameElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLIFrameElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLIFrameElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLIFrameElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLIFrameElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLIFrameElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLIFrameElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLIFrameElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLIFrameElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLIFrameElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLIFrameElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLIFrameElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLIFrameElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onended: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLIFrameElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLIFrameElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLIFrameElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLIFrameElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLIFrameElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLIFrameElement[JC] var onload: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLIFrameElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLIFrameElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLIFrameElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLIFrameElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLIFrameElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLIFrameElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLIFrameElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLIFrameElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLIFrameElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLIFrameElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLIFrameElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLIFrameElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLIFrameElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLIFrameElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLIFrameElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLIFrameElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLIFrameElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLIFrameElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLIFrameElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLIFrameElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLIFrameElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLIFrameElement[JC] var outerHTML: String
raw/HTMLIFrameElement[JC] def ownerDocument: Document
raw/HTMLIFrameElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLIFrameElement[JC] var parentElement: HTMLElement
raw/HTMLIFrameElement[JC] def parentNode: Node
raw/HTMLIFrameElement[JC] def prefix: String
raw/HTMLIFrameElement[JC] def previousElementSibling: Element
raw/HTMLIFrameElement[JC] def previousSibling: Node
raw/HTMLIFrameElement[JC] def querySelector(selectors: String): Element
raw/HTMLIFrameElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLIFrameElement[JC] var readyState: js.Any
raw/HTMLIFrameElement[JC] var recordNumber: js.Any
raw/HTMLIFrameElement[JC] def removeAttribute(name: String): Unit
raw/HTMLIFrameElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLIFrameElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLIFrameElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLIFrameElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLIFrameElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLIFrameElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLIFrameElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLIFrameElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLIFrameElement[JC] var sandbox: DOMSettableTokenList
raw/HTMLIFrameElement[JC] def scrollHeight: Int
raw/HTMLIFrameElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLIFrameElement[JC] var scrollLeft: Double
raw/HTMLIFrameElement[JC] var scrollTop: Double
raw/HTMLIFrameElement[JC] def scrollWidth: Int
raw/HTMLIFrameElement[JC] var security: js.Any
raw/HTMLIFrameElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLIFrameElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLIFrameElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLIFrameElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLIFrameElement[JC] var spellcheck: Boolean
raw/HTMLIFrameElement[JC] var src: String
raw/HTMLIFrameElement[JC] def style: CSSStyleDeclaration
raw/HTMLIFrameElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLIFrameElement[JC] def style_ = (value: String): Unit
raw/HTMLIFrameElement[JC] var tabIndex: Int
raw/HTMLIFrameElement[JC] def tagName: String
raw/HTMLIFrameElement[JC] var textContent: String
raw/HTMLIFrameElement[JC] var title: String
raw/HTMLIFrameElement[JC] var width: String
raw/HTMLImageElement[JC] var accessKey: String
raw/HTMLImageElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLImageElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLImageElement[JC] var alt: String
raw/HTMLImageElement[JC] def appendChild(newChild: Node): Node
raw/HTMLImageElement[JC] def attributes: NamedNodeMap
raw/HTMLImageElement[JC] def blur(): Unit
raw/HTMLImageElement[JC] def childElementCount: Int
raw/HTMLImageElement[JC] def childNodes: NodeList
raw/HTMLImageElement[JC] def children: HTMLCollection
raw/HTMLImageElement[JC] var classList: DOMTokenList
raw/HTMLImageElement[JC] var className: String
raw/HTMLImageElement[JC] def click(): Unit
raw/HTMLImageElement[JC] def clientHeight: Int
raw/HTMLImageElement[JC] def clientLeft: Int
raw/HTMLImageElement[JC] def clientTop: Int
raw/HTMLImageElement[JC] def clientWidth: Int
raw/HTMLImageElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLImageElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLImageElement[JC] def complete: Boolean
raw/HTMLImageElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLImageElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLImageElement[JC] var contentEditable: String
raw/HTMLImageElement[JC] def dataset: js.Dictionary[String]
raw/HTMLImageElement[JC] var dir: String
raw/HTMLImageElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLImageElement[JC] var draggable: Boolean
raw/HTMLImageElement[JC] var filters: Object
raw/HTMLImageElement[JC] def firstChild: Node
raw/HTMLImageElement[JC] def firstElementChild: Element
raw/HTMLImageElement[JC] def focus(): Unit
raw/HTMLImageElement[JC] def getAttribute(name: String): String
raw/HTMLImageElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLImageElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLImageElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLImageElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLImageElement[JC] def getClientRects(): ClientRectList
raw/HTMLImageElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLImageElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLImageElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLImageElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLImageElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLImageElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLImageElement[JC] def hasAttributes(): Boolean
raw/HTMLImageElement[JC] def hasChildNodes(): Boolean
raw/HTMLImageElement[JC] var height: Int
raw/HTMLImageElement[JC] var href: String
raw/HTMLImageElement[JC] var id: String
raw/HTMLImageElement[JC] var innerHTML: String
raw/HTMLImageElement[JC] var innerText: String
raw/HTMLImageElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLImageElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLImageElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLImageElement[JC] def isContentEditable: Boolean
raw/HTMLImageElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLImageElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLImageElement[JC] var isMap: Boolean
raw/HTMLImageElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLImageElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLImageElement[JC] var lang: String
raw/HTMLImageElement[JC] def lastChild: Node
raw/HTMLImageElement[JC] def lastElementChild: Element
raw/HTMLImageElement[JC] def localName: String
raw/HTMLImageElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLImageElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLImageElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLImageElement[JC] def matches(selector: String): Boolean
raw/HTMLImageElement[JC] def namespaceURI: String
raw/HTMLImageElement[JC] var naturalHeight: Int
raw/HTMLImageElement[JC] var naturalWidth: Int
raw/HTMLImageElement[JC] def nextElementSibling: Element
raw/HTMLImageElement[JC] def nextSibling: Node
raw/HTMLImageElement[JC] def nodeName: String
raw/HTMLImageElement[JC] def nodeType: Int
raw/HTMLImageElement[JC] var nodeValue: String
raw/HTMLImageElement[JC] def normalize(): Unit
raw/HTMLImageElement[JC] def offsetHeight: Double
raw/HTMLImageElement[JC] def offsetLeft: Double
raw/HTMLImageElement[JC] def offsetParent: Element
raw/HTMLImageElement[JC] def offsetTop: Double
raw/HTMLImageElement[JC] def offsetWidth: Double
raw/HTMLImageElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLImageElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLImageElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLImageElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLImageElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLImageElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLImageElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLImageElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLImageElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLImageElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLImageElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLImageElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLImageElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLImageElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLImageElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLImageElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLImageElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLImageElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLImageElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLImageElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLImageElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLImageElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLImageElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLImageElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onended: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLImageElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLImageElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLImageElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLImageElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLImageElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLImageElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLImageElement[JC] var onload: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLImageElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLImageElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLImageElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLImageElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLImageElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLImageElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLImageElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLImageElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLImageElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLImageElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLImageElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLImageElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLImageElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLImageElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLImageElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLImageElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLImageElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLImageElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLImageElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLImageElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLImageElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLImageElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLImageElement[JC] var outerHTML: String
raw/HTMLImageElement[JC] def ownerDocument: Document
raw/HTMLImageElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLImageElement[JC] var parentElement: HTMLElement
raw/HTMLImageElement[JC] def parentNode: Node
raw/HTMLImageElement[JC] def prefix: String
raw/HTMLImageElement[JC] def previousElementSibling: Element
raw/HTMLImageElement[JC] def previousSibling: Node
raw/HTMLImageElement[JC] def querySelector(selectors: String): Element
raw/HTMLImageElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLImageElement[JC] var readyState: js.Any
raw/HTMLImageElement[JC] var recordNumber: js.Any
raw/HTMLImageElement[JC] def removeAttribute(name: String): Unit
raw/HTMLImageElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLImageElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLImageElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLImageElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLImageElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLImageElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLImageElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLImageElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLImageElement[JC] def scrollHeight: Int
raw/HTMLImageElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLImageElement[JC] var scrollLeft: Double
raw/HTMLImageElement[JC] var scrollTop: Double
raw/HTMLImageElement[JC] def scrollWidth: Int
raw/HTMLImageElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLImageElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLImageElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLImageElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLImageElement[JC] var spellcheck: Boolean
raw/HTMLImageElement[JC] var src: String
raw/HTMLImageElement[JC] def style: CSSStyleDeclaration
raw/HTMLImageElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLImageElement[JC] def style_ = (value: String): Unit
raw/HTMLImageElement[JC] var tabIndex: Int
raw/HTMLImageElement[JC] def tagName: String
raw/HTMLImageElement[JC] var textContent: String
raw/HTMLImageElement[JC] var title: String
raw/HTMLImageElement[JC] var useMap: String
raw/HTMLImageElement[JC] var width: Int
raw/HTMLInputElement[JC] var accept: String
raw/HTMLInputElement[JC] var accessKey: String
raw/HTMLInputElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLInputElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLInputElement[JC] var alt: String
raw/HTMLInputElement[JC] def appendChild(newChild: Node): Node
raw/HTMLInputElement[JC] def attributes: NamedNodeMap
raw/HTMLInputElement[JC] var autocomplete: String
raw/HTMLInputElement[JC] var autofocus: Boolean
raw/HTMLInputElement[JC] def blur(): Unit
raw/HTMLInputElement[JC] def checkValidity(): Boolean
raw/HTMLInputElement[JC] var checked: Boolean
raw/HTMLInputElement[JC] def childElementCount: Int
raw/HTMLInputElement[JC] def childNodes: NodeList
raw/HTMLInputElement[JC] def children: HTMLCollection
raw/HTMLInputElement[JC] var classList: DOMTokenList
raw/HTMLInputElement[JC] var className: String
raw/HTMLInputElement[JC] def click(): Unit
raw/HTMLInputElement[JC] def clientHeight: Int
raw/HTMLInputElement[JC] def clientLeft: Int
raw/HTMLInputElement[JC] def clientTop: Int
raw/HTMLInputElement[JC] def clientWidth: Int
raw/HTMLInputElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLInputElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLInputElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLInputElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLInputElement[JC] var contentEditable: String
raw/HTMLInputElement[JC] def dataset: js.Dictionary[String]
raw/HTMLInputElement[JC] var defaultChecked: Boolean
raw/HTMLInputElement[JC] var defaultValue: String
raw/HTMLInputElement[JC] var dir: String
raw/HTMLInputElement[JC] var disabled: Boolean
raw/HTMLInputElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLInputElement[JC] var draggable: Boolean
raw/HTMLInputElement[JC] var files: FileList
raw/HTMLInputElement[JC] var filters: Object
raw/HTMLInputElement[JC] def firstChild: Node
raw/HTMLInputElement[JC] def firstElementChild: Element
raw/HTMLInputElement[JC] def focus(): Unit
raw/HTMLInputElement[JC] def form: HTMLFormElement
raw/HTMLInputElement[JC] var formAction: String
raw/HTMLInputElement[JC] var formEnctype: String
raw/HTMLInputElement[JC] var formMethod: String
raw/HTMLInputElement[JC] var formNoValidate: String
raw/HTMLInputElement[JC] var formTarget: String
raw/HTMLInputElement[JC] def getAttribute(name: String): String
raw/HTMLInputElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLInputElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLInputElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLInputElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLInputElement[JC] def getClientRects(): ClientRectList
raw/HTMLInputElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLInputElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLInputElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLInputElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLInputElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLInputElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLInputElement[JC] def hasAttributes(): Boolean
raw/HTMLInputElement[JC] def hasChildNodes(): Boolean
raw/HTMLInputElement[JC] var height: String
raw/HTMLInputElement[JC] var id: String
raw/HTMLInputElement[JC] var indeterminate: Boolean
raw/HTMLInputElement[JC] var innerHTML: String
raw/HTMLInputElement[JC] var innerText: String
raw/HTMLInputElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLInputElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLInputElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLInputElement[JC] def isContentEditable: Boolean
raw/HTMLInputElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLInputElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLInputElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLInputElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLInputElement[JC] var lang: String
raw/HTMLInputElement[JC] def lastChild: Node
raw/HTMLInputElement[JC] def lastElementChild: Element
raw/HTMLInputElement[JC] var list: HTMLElement
raw/HTMLInputElement[JC] def localName: String
raw/HTMLInputElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLInputElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLInputElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLInputElement[JC] def matches(selector: String): Boolean
raw/HTMLInputElement[JC] var max: String
raw/HTMLInputElement[JC] var maxLength: Int
raw/HTMLInputElement[JC] var min: String
raw/HTMLInputElement[JC] var multiple: Boolean
raw/HTMLInputElement[JC] var name: String
raw/HTMLInputElement[JC] def namespaceURI: String
raw/HTMLInputElement[JC] def nextElementSibling: Element
raw/HTMLInputElement[JC] def nextSibling: Node
raw/HTMLInputElement[JC] def nodeName: String
raw/HTMLInputElement[JC] def nodeType: Int
raw/HTMLInputElement[JC] var nodeValue: String
raw/HTMLInputElement[JC] def normalize(): Unit
raw/HTMLInputElement[JC] def offsetHeight: Double
raw/HTMLInputElement[JC] def offsetLeft: Double
raw/HTMLInputElement[JC] def offsetParent: Element
raw/HTMLInputElement[JC] def offsetTop: Double
raw/HTMLInputElement[JC] def offsetWidth: Double
raw/HTMLInputElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLInputElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLInputElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLInputElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLInputElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLInputElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLInputElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLInputElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLInputElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLInputElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLInputElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLInputElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLInputElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLInputElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLInputElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLInputElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLInputElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLInputElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLInputElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLInputElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLInputElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLInputElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLInputElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLInputElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onended: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLInputElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLInputElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLInputElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLInputElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLInputElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLInputElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLInputElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLInputElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLInputElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLInputElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLInputElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLInputElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLInputElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLInputElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLInputElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLInputElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLInputElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLInputElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLInputElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLInputElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLInputElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLInputElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLInputElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLInputElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLInputElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLInputElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLInputElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLInputElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLInputElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLInputElement[JC] var outerHTML: String
raw/HTMLInputElement[JC] def ownerDocument: Document
raw/HTMLInputElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLInputElement[JC] var parentElement: HTMLElement
raw/HTMLInputElement[JC] def parentNode: Node
raw/HTMLInputElement[JC] var pattern: String
raw/HTMLInputElement[JC] var placeholder: String
raw/HTMLInputElement[JC] def prefix: String
raw/HTMLInputElement[JC] def previousElementSibling: Element
raw/HTMLInputElement[JC] def previousSibling: Node
raw/HTMLInputElement[JC] def querySelector(selectors: String): Element
raw/HTMLInputElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLInputElement[JC] var readOnly: Boolean
raw/HTMLInputElement[JC] var readyState: js.Any
raw/HTMLInputElement[JC] var recordNumber: js.Any
raw/HTMLInputElement[JC] def removeAttribute(name: String): Unit
raw/HTMLInputElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLInputElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLInputElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLInputElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLInputElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLInputElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLInputElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLInputElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLInputElement[JC] var required: Boolean
raw/HTMLInputElement[JC] def scrollHeight: Int
raw/HTMLInputElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLInputElement[JC] var scrollLeft: Double
raw/HTMLInputElement[JC] var scrollTop: Double
raw/HTMLInputElement[JC] def scrollWidth: Int
raw/HTMLInputElement[JC] def select(): Unit
raw/HTMLInputElement[JC] var selectionEnd: Int
raw/HTMLInputElement[JC] var selectionStart: Int
raw/HTMLInputElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLInputElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLInputElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLInputElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLInputElement[JC] def setCustomValidity(error: String): Unit
raw/HTMLInputElement[JC] def setSelectionRange(start: Int, end: Int): Unit
raw/HTMLInputElement[JC] var size: Int
raw/HTMLInputElement[JC] var spellcheck: Boolean
raw/HTMLInputElement[JC] var src: String
raw/HTMLInputElement[JC] var status: Boolean
raw/HTMLInputElement[JC] var step: String
raw/HTMLInputElement[JC] def stepDown(n: Int?): Unit
raw/HTMLInputElement[JC] def stepUp(n: Int?): Unit
raw/HTMLInputElement[JC] def style: CSSStyleDeclaration
raw/HTMLInputElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLInputElement[JC] def style_ = (value: String): Unit
raw/HTMLInputElement[JC] var tabIndex: Int
raw/HTMLInputElement[JC] def tagName: String
raw/HTMLInputElement[JC] var textContent: String
raw/HTMLInputElement[JC] var title: String
raw/HTMLInputElement[JC] var `type`: String
raw/HTMLInputElement[JC] def validationMessage: String
raw/HTMLInputElement[JC] def validity: ValidityState
raw/HTMLInputElement[JC] var value: String
raw/HTMLInputElement[JC] var valueAsNumber: Double
raw/HTMLInputElement[JC] var width: String
raw/HTMLInputElement[JC] def willValidate: Boolean
raw/HTMLLIElement[JC] var accessKey: String
raw/HTMLLIElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLLIElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLLIElement[JC] def appendChild(newChild: Node): Node
raw/HTMLLIElement[JC] def attributes: NamedNodeMap
raw/HTMLLIElement[JC] def blur(): Unit
raw/HTMLLIElement[JC] def childElementCount: Int
raw/HTMLLIElement[JC] def childNodes: NodeList
raw/HTMLLIElement[JC] def children: HTMLCollection
raw/HTMLLIElement[JC] var classList: DOMTokenList
raw/HTMLLIElement[JC] var className: String
raw/HTMLLIElement[JC] def click(): Unit
raw/HTMLLIElement[JC] def clientHeight: Int
raw/HTMLLIElement[JC] def clientLeft: Int
raw/HTMLLIElement[JC] def clientTop: Int
raw/HTMLLIElement[JC] def clientWidth: Int
raw/HTMLLIElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLLIElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLLIElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLLIElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLLIElement[JC] var contentEditable: String
raw/HTMLLIElement[JC] def dataset: js.Dictionary[String]
raw/HTMLLIElement[JC] var dir: String
raw/HTMLLIElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLLIElement[JC] var draggable: Boolean
raw/HTMLLIElement[JC] var filters: Object
raw/HTMLLIElement[JC] def firstChild: Node
raw/HTMLLIElement[JC] def firstElementChild: Element
raw/HTMLLIElement[JC] def focus(): Unit
raw/HTMLLIElement[JC] def getAttribute(name: String): String
raw/HTMLLIElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLLIElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLLIElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLLIElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLLIElement[JC] def getClientRects(): ClientRectList
raw/HTMLLIElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLLIElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLLIElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLLIElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLLIElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLLIElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLLIElement[JC] def hasAttributes(): Boolean
raw/HTMLLIElement[JC] def hasChildNodes(): Boolean
raw/HTMLLIElement[JC] var id: String
raw/HTMLLIElement[JC] var innerHTML: String
raw/HTMLLIElement[JC] var innerText: String
raw/HTMLLIElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLLIElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLLIElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLLIElement[JC] def isContentEditable: Boolean
raw/HTMLLIElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLLIElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLLIElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLLIElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLLIElement[JC] var lang: String
raw/HTMLLIElement[JC] def lastChild: Node
raw/HTMLLIElement[JC] def lastElementChild: Element
raw/HTMLLIElement[JC] def localName: String
raw/HTMLLIElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLLIElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLLIElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLLIElement[JC] def matches(selector: String): Boolean
raw/HTMLLIElement[JC] def namespaceURI: String
raw/HTMLLIElement[JC] def nextElementSibling: Element
raw/HTMLLIElement[JC] def nextSibling: Node
raw/HTMLLIElement[JC] def nodeName: String
raw/HTMLLIElement[JC] def nodeType: Int
raw/HTMLLIElement[JC] var nodeValue: String
raw/HTMLLIElement[JC] def normalize(): Unit
raw/HTMLLIElement[JC] def offsetHeight: Double
raw/HTMLLIElement[JC] def offsetLeft: Double
raw/HTMLLIElement[JC] def offsetParent: Element
raw/HTMLLIElement[JC] def offsetTop: Double
raw/HTMLLIElement[JC] def offsetWidth: Double
raw/HTMLLIElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLLIElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLLIElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLLIElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLLIElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLLIElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLLIElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLLIElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLLIElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLLIElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLLIElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLLIElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLLIElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLLIElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLLIElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLLIElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLLIElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLLIElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLLIElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLLIElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLLIElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLLIElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLLIElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLLIElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onended: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLLIElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLLIElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLLIElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLLIElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLLIElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLLIElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLLIElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLLIElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLLIElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLLIElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLLIElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLLIElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLLIElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLLIElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLLIElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLLIElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLLIElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLLIElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLLIElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLLIElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLLIElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLLIElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLLIElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLLIElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLLIElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLLIElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLLIElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLLIElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLLIElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLLIElement[JC] var outerHTML: String
raw/HTMLLIElement[JC] def ownerDocument: Document
raw/HTMLLIElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLLIElement[JC] var parentElement: HTMLElement
raw/HTMLLIElement[JC] def parentNode: Node
raw/HTMLLIElement[JC] def prefix: String
raw/HTMLLIElement[JC] def previousElementSibling: Element
raw/HTMLLIElement[JC] def previousSibling: Node
raw/HTMLLIElement[JC] def querySelector(selectors: String): Element
raw/HTMLLIElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLLIElement[JC] var readyState: js.Any
raw/HTMLLIElement[JC] var recordNumber: js.Any
raw/HTMLLIElement[JC] def removeAttribute(name: String): Unit
raw/HTMLLIElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLLIElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLLIElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLLIElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLLIElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLLIElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLLIElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLLIElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLLIElement[JC] def scrollHeight: Int
raw/HTMLLIElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLLIElement[JC] var scrollLeft: Double
raw/HTMLLIElement[JC] var scrollTop: Double
raw/HTMLLIElement[JC] def scrollWidth: Int
raw/HTMLLIElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLLIElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLLIElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLLIElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLLIElement[JC] var spellcheck: Boolean
raw/HTMLLIElement[JC] def style: CSSStyleDeclaration
raw/HTMLLIElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLLIElement[JC] def style_ = (value: String): Unit
raw/HTMLLIElement[JC] var tabIndex: Int
raw/HTMLLIElement[JC] def tagName: String
raw/HTMLLIElement[JC] var textContent: String
raw/HTMLLIElement[JC] var title: String
raw/HTMLLIElement[JC] var value: Int
raw/HTMLLabelElement[JC] var accessKey: String
raw/HTMLLabelElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLLabelElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLLabelElement[JC] def appendChild(newChild: Node): Node
raw/HTMLLabelElement[JC] def attributes: NamedNodeMap
raw/HTMLLabelElement[JC] def blur(): Unit
raw/HTMLLabelElement[JC] def childElementCount: Int
raw/HTMLLabelElement[JC] def childNodes: NodeList
raw/HTMLLabelElement[JC] def children: HTMLCollection
raw/HTMLLabelElement[JC] var classList: DOMTokenList
raw/HTMLLabelElement[JC] var className: String
raw/HTMLLabelElement[JC] def click(): Unit
raw/HTMLLabelElement[JC] def clientHeight: Int
raw/HTMLLabelElement[JC] def clientLeft: Int
raw/HTMLLabelElement[JC] def clientTop: Int
raw/HTMLLabelElement[JC] def clientWidth: Int
raw/HTMLLabelElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLLabelElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLLabelElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLLabelElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLLabelElement[JC] var contentEditable: String
raw/HTMLLabelElement[JC] def dataset: js.Dictionary[String]
raw/HTMLLabelElement[JC] var dir: String
raw/HTMLLabelElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLLabelElement[JC] var draggable: Boolean
raw/HTMLLabelElement[JC] var filters: Object
raw/HTMLLabelElement[JC] def firstChild: Node
raw/HTMLLabelElement[JC] def firstElementChild: Element
raw/HTMLLabelElement[JC] def focus(): Unit
raw/HTMLLabelElement[JC] def form: HTMLFormElement
raw/HTMLLabelElement[JC] def getAttribute(name: String): String
raw/HTMLLabelElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLLabelElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLLabelElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLLabelElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLLabelElement[JC] def getClientRects(): ClientRectList
raw/HTMLLabelElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLLabelElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLLabelElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLLabelElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLLabelElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLLabelElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLLabelElement[JC] def hasAttributes(): Boolean
raw/HTMLLabelElement[JC] def hasChildNodes(): Boolean
raw/HTMLLabelElement[JC] var htmlFor: String
raw/HTMLLabelElement[JC] var id: String
raw/HTMLLabelElement[JC] var innerHTML: String
raw/HTMLLabelElement[JC] var innerText: String
raw/HTMLLabelElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLLabelElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLLabelElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLLabelElement[JC] def isContentEditable: Boolean
raw/HTMLLabelElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLLabelElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLLabelElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLLabelElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLLabelElement[JC] var lang: String
raw/HTMLLabelElement[JC] def lastChild: Node
raw/HTMLLabelElement[JC] def lastElementChild: Element
raw/HTMLLabelElement[JC] def localName: String
raw/HTMLLabelElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLLabelElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLLabelElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLLabelElement[JC] def matches(selector: String): Boolean
raw/HTMLLabelElement[JC] def namespaceURI: String
raw/HTMLLabelElement[JC] def nextElementSibling: Element
raw/HTMLLabelElement[JC] def nextSibling: Node
raw/HTMLLabelElement[JC] def nodeName: String
raw/HTMLLabelElement[JC] def nodeType: Int
raw/HTMLLabelElement[JC] var nodeValue: String
raw/HTMLLabelElement[JC] def normalize(): Unit
raw/HTMLLabelElement[JC] def offsetHeight: Double
raw/HTMLLabelElement[JC] def offsetLeft: Double
raw/HTMLLabelElement[JC] def offsetParent: Element
raw/HTMLLabelElement[JC] def offsetTop: Double
raw/HTMLLabelElement[JC] def offsetWidth: Double
raw/HTMLLabelElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLLabelElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLLabelElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLLabelElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLLabelElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLLabelElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLLabelElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLLabelElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLLabelElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLLabelElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLLabelElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLLabelElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLLabelElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLLabelElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLLabelElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLLabelElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLLabelElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLLabelElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLLabelElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLLabelElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLLabelElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLLabelElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onended: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLLabelElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLLabelElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLLabelElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLLabelElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLLabelElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLLabelElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLLabelElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLLabelElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLLabelElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLLabelElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLLabelElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLLabelElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLLabelElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLLabelElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLLabelElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLLabelElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLLabelElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLLabelElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLLabelElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLLabelElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLLabelElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLLabelElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLLabelElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLLabelElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLLabelElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLLabelElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLLabelElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLLabelElement[JC] var outerHTML: String
raw/HTMLLabelElement[JC] def ownerDocument: Document
raw/HTMLLabelElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLLabelElement[JC] var parentElement: HTMLElement
raw/HTMLLabelElement[JC] def parentNode: Node
raw/HTMLLabelElement[JC] def prefix: String
raw/HTMLLabelElement[JC] def previousElementSibling: Element
raw/HTMLLabelElement[JC] def previousSibling: Node
raw/HTMLLabelElement[JC] def querySelector(selectors: String): Element
raw/HTMLLabelElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLLabelElement[JC] var readyState: js.Any
raw/HTMLLabelElement[JC] var recordNumber: js.Any
raw/HTMLLabelElement[JC] def removeAttribute(name: String): Unit
raw/HTMLLabelElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLLabelElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLLabelElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLLabelElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLLabelElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLLabelElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLLabelElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLLabelElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLLabelElement[JC] def scrollHeight: Int
raw/HTMLLabelElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLLabelElement[JC] var scrollLeft: Double
raw/HTMLLabelElement[JC] var scrollTop: Double
raw/HTMLLabelElement[JC] def scrollWidth: Int
raw/HTMLLabelElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLLabelElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLLabelElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLLabelElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLLabelElement[JC] var spellcheck: Boolean
raw/HTMLLabelElement[JC] def style: CSSStyleDeclaration
raw/HTMLLabelElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLLabelElement[JC] def style_ = (value: String): Unit
raw/HTMLLabelElement[JC] var tabIndex: Int
raw/HTMLLabelElement[JC] def tagName: String
raw/HTMLLabelElement[JC] var textContent: String
raw/HTMLLabelElement[JC] var title: String
raw/HTMLLegendElement[JC] var accessKey: String
raw/HTMLLegendElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLLegendElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLLegendElement[JC] var align: String
raw/HTMLLegendElement[JC] def appendChild(newChild: Node): Node
raw/HTMLLegendElement[JC] def attributes: NamedNodeMap
raw/HTMLLegendElement[JC] def blur(): Unit
raw/HTMLLegendElement[JC] def childElementCount: Int
raw/HTMLLegendElement[JC] def childNodes: NodeList
raw/HTMLLegendElement[JC] def children: HTMLCollection
raw/HTMLLegendElement[JC] var classList: DOMTokenList
raw/HTMLLegendElement[JC] var className: String
raw/HTMLLegendElement[JC] def click(): Unit
raw/HTMLLegendElement[JC] def clientHeight: Int
raw/HTMLLegendElement[JC] def clientLeft: Int
raw/HTMLLegendElement[JC] def clientTop: Int
raw/HTMLLegendElement[JC] def clientWidth: Int
raw/HTMLLegendElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLLegendElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLLegendElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLLegendElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLLegendElement[JC] var contentEditable: String
raw/HTMLLegendElement[JC] def dataset: js.Dictionary[String]
raw/HTMLLegendElement[JC] var dir: String
raw/HTMLLegendElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLLegendElement[JC] var draggable: Boolean
raw/HTMLLegendElement[JC] var filters: Object
raw/HTMLLegendElement[JC] def firstChild: Node
raw/HTMLLegendElement[JC] def firstElementChild: Element
raw/HTMLLegendElement[JC] def focus(): Unit
raw/HTMLLegendElement[JC] def form: HTMLFormElement
raw/HTMLLegendElement[JC] def getAttribute(name: String): String
raw/HTMLLegendElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLLegendElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLLegendElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLLegendElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLLegendElement[JC] def getClientRects(): ClientRectList
raw/HTMLLegendElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLLegendElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLLegendElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLLegendElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLLegendElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLLegendElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLLegendElement[JC] def hasAttributes(): Boolean
raw/HTMLLegendElement[JC] def hasChildNodes(): Boolean
raw/HTMLLegendElement[JC] var id: String
raw/HTMLLegendElement[JC] var innerHTML: String
raw/HTMLLegendElement[JC] var innerText: String
raw/HTMLLegendElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLLegendElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLLegendElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLLegendElement[JC] def isContentEditable: Boolean
raw/HTMLLegendElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLLegendElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLLegendElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLLegendElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLLegendElement[JC] var lang: String
raw/HTMLLegendElement[JC] def lastChild: Node
raw/HTMLLegendElement[JC] def lastElementChild: Element
raw/HTMLLegendElement[JC] def localName: String
raw/HTMLLegendElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLLegendElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLLegendElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLLegendElement[JC] def matches(selector: String): Boolean
raw/HTMLLegendElement[JC] def namespaceURI: String
raw/HTMLLegendElement[JC] def nextElementSibling: Element
raw/HTMLLegendElement[JC] def nextSibling: Node
raw/HTMLLegendElement[JC] def nodeName: String
raw/HTMLLegendElement[JC] def nodeType: Int
raw/HTMLLegendElement[JC] var nodeValue: String
raw/HTMLLegendElement[JC] def normalize(): Unit
raw/HTMLLegendElement[JC] def offsetHeight: Double
raw/HTMLLegendElement[JC] def offsetLeft: Double
raw/HTMLLegendElement[JC] def offsetParent: Element
raw/HTMLLegendElement[JC] def offsetTop: Double
raw/HTMLLegendElement[JC] def offsetWidth: Double
raw/HTMLLegendElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLLegendElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLLegendElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLLegendElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLLegendElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLLegendElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLLegendElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLLegendElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLLegendElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLLegendElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLLegendElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLLegendElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLLegendElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLLegendElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLLegendElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLLegendElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLLegendElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLLegendElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLLegendElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLLegendElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLLegendElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLLegendElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onended: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLLegendElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLLegendElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLLegendElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLLegendElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLLegendElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLLegendElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLLegendElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLLegendElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLLegendElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLLegendElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLLegendElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLLegendElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLLegendElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLLegendElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLLegendElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLLegendElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLLegendElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLLegendElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLLegendElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLLegendElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLLegendElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLLegendElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLLegendElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLLegendElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLLegendElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLLegendElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLLegendElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLLegendElement[JC] var outerHTML: String
raw/HTMLLegendElement[JC] def ownerDocument: Document
raw/HTMLLegendElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLLegendElement[JC] var parentElement: HTMLElement
raw/HTMLLegendElement[JC] def parentNode: Node
raw/HTMLLegendElement[JC] def prefix: String
raw/HTMLLegendElement[JC] def previousElementSibling: Element
raw/HTMLLegendElement[JC] def previousSibling: Node
raw/HTMLLegendElement[JC] def querySelector(selectors: String): Element
raw/HTMLLegendElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLLegendElement[JC] var readyState: js.Any
raw/HTMLLegendElement[JC] var recordNumber: js.Any
raw/HTMLLegendElement[JC] def removeAttribute(name: String): Unit
raw/HTMLLegendElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLLegendElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLLegendElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLLegendElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLLegendElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLLegendElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLLegendElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLLegendElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLLegendElement[JC] def scrollHeight: Int
raw/HTMLLegendElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLLegendElement[JC] var scrollLeft: Double
raw/HTMLLegendElement[JC] var scrollTop: Double
raw/HTMLLegendElement[JC] def scrollWidth: Int
raw/HTMLLegendElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLLegendElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLLegendElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLLegendElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLLegendElement[JC] var spellcheck: Boolean
raw/HTMLLegendElement[JC] def style: CSSStyleDeclaration
raw/HTMLLegendElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLLegendElement[JC] def style_ = (value: String): Unit
raw/HTMLLegendElement[JC] var tabIndex: Int
raw/HTMLLegendElement[JC] def tagName: String
raw/HTMLLegendElement[JC] var textContent: String
raw/HTMLLegendElement[JC] var title: String
raw/HTMLLinkElement[JC] var accessKey: String
raw/HTMLLinkElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLLinkElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLLinkElement[JC] def appendChild(newChild: Node): Node
raw/HTMLLinkElement[JC] def attributes: NamedNodeMap
raw/HTMLLinkElement[JC] def blur(): Unit
raw/HTMLLinkElement[JC] def childElementCount: Int
raw/HTMLLinkElement[JC] def childNodes: NodeList
raw/HTMLLinkElement[JC] def children: HTMLCollection
raw/HTMLLinkElement[JC] var classList: DOMTokenList
raw/HTMLLinkElement[JC] var className: String
raw/HTMLLinkElement[JC] def click(): Unit
raw/HTMLLinkElement[JC] def clientHeight: Int
raw/HTMLLinkElement[JC] def clientLeft: Int
raw/HTMLLinkElement[JC] def clientTop: Int
raw/HTMLLinkElement[JC] def clientWidth: Int
raw/HTMLLinkElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLLinkElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLLinkElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLLinkElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLLinkElement[JC] var contentEditable: String
raw/HTMLLinkElement[JC] def dataset: js.Dictionary[String]
raw/HTMLLinkElement[JC] var dir: String
raw/HTMLLinkElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLLinkElement[JC] var draggable: Boolean
raw/HTMLLinkElement[JC] var filters: Object
raw/HTMLLinkElement[JC] def firstChild: Node
raw/HTMLLinkElement[JC] def firstElementChild: Element
raw/HTMLLinkElement[JC] def focus(): Unit
raw/HTMLLinkElement[JC] def getAttribute(name: String): String
raw/HTMLLinkElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLLinkElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLLinkElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLLinkElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLLinkElement[JC] def getClientRects(): ClientRectList
raw/HTMLLinkElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLLinkElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLLinkElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLLinkElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLLinkElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLLinkElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLLinkElement[JC] def hasAttributes(): Boolean
raw/HTMLLinkElement[JC] def hasChildNodes(): Boolean
raw/HTMLLinkElement[JC] var href: String
raw/HTMLLinkElement[JC] var hreflang: String
raw/HTMLLinkElement[JC] var id: String
raw/HTMLLinkElement[JC] var innerHTML: String
raw/HTMLLinkElement[JC] var innerText: String
raw/HTMLLinkElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLLinkElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLLinkElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLLinkElement[JC] def isContentEditable: Boolean
raw/HTMLLinkElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLLinkElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLLinkElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLLinkElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLLinkElement[JC] var lang: String
raw/HTMLLinkElement[JC] def lastChild: Node
raw/HTMLLinkElement[JC] def lastElementChild: Element
raw/HTMLLinkElement[JC] def localName: String
raw/HTMLLinkElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLLinkElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLLinkElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLLinkElement[JC] def matches(selector: String): Boolean
raw/HTMLLinkElement[JC] var media: String
raw/HTMLLinkElement[JC] def namespaceURI: String
raw/HTMLLinkElement[JC] def nextElementSibling: Element
raw/HTMLLinkElement[JC] def nextSibling: Node
raw/HTMLLinkElement[JC] def nodeName: String
raw/HTMLLinkElement[JC] def nodeType: Int
raw/HTMLLinkElement[JC] var nodeValue: String
raw/HTMLLinkElement[JC] def normalize(): Unit
raw/HTMLLinkElement[JC] def offsetHeight: Double
raw/HTMLLinkElement[JC] def offsetLeft: Double
raw/HTMLLinkElement[JC] def offsetParent: Element
raw/HTMLLinkElement[JC] def offsetTop: Double
raw/HTMLLinkElement[JC] def offsetWidth: Double
raw/HTMLLinkElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLLinkElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLLinkElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLLinkElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLLinkElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLLinkElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLLinkElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLLinkElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLLinkElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLLinkElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLLinkElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLLinkElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLLinkElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLLinkElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLLinkElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLLinkElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLLinkElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLLinkElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLLinkElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLLinkElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLLinkElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLLinkElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onended: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLLinkElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLLinkElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLLinkElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLLinkElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLLinkElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLLinkElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLLinkElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLLinkElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLLinkElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLLinkElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLLinkElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLLinkElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLLinkElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLLinkElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLLinkElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLLinkElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLLinkElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLLinkElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLLinkElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLLinkElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLLinkElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLLinkElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLLinkElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLLinkElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLLinkElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLLinkElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLLinkElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLLinkElement[JC] var outerHTML: String
raw/HTMLLinkElement[JC] def ownerDocument: Document
raw/HTMLLinkElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLLinkElement[JC] var parentElement: HTMLElement
raw/HTMLLinkElement[JC] def parentNode: Node
raw/HTMLLinkElement[JC] def prefix: String
raw/HTMLLinkElement[JC] def previousElementSibling: Element
raw/HTMLLinkElement[JC] def previousSibling: Node
raw/HTMLLinkElement[JC] def querySelector(selectors: String): Element
raw/HTMLLinkElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLLinkElement[JC] var readyState: js.Any
raw/HTMLLinkElement[JC] var recordNumber: js.Any
raw/HTMLLinkElement[JC] var rel: String
raw/HTMLLinkElement[JC] def removeAttribute(name: String): Unit
raw/HTMLLinkElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLLinkElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLLinkElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLLinkElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLLinkElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLLinkElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLLinkElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLLinkElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLLinkElement[JC] var rev: String
raw/HTMLLinkElement[JC] def scrollHeight: Int
raw/HTMLLinkElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLLinkElement[JC] var scrollLeft: Double
raw/HTMLLinkElement[JC] var scrollTop: Double
raw/HTMLLinkElement[JC] def scrollWidth: Int
raw/HTMLLinkElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLLinkElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLLinkElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLLinkElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLLinkElement[JC] def sheet: StyleSheet
raw/HTMLLinkElement[JC] var spellcheck: Boolean
raw/HTMLLinkElement[JC] def style: CSSStyleDeclaration
raw/HTMLLinkElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLLinkElement[JC] def style_ = (value: String): Unit
raw/HTMLLinkElement[JC] var tabIndex: Int
raw/HTMLLinkElement[JC] def tagName: String
raw/HTMLLinkElement[JC] var target: String
raw/HTMLLinkElement[JC] var textContent: String
raw/HTMLLinkElement[JC] var title: String
raw/HTMLLinkElement[JC] var `type`: String
raw/HTMLMapElement[JC] var accessKey: String
raw/HTMLMapElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLMapElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLMapElement[JC] def appendChild(newChild: Node): Node
raw/HTMLMapElement[JC] def attributes: NamedNodeMap
raw/HTMLMapElement[JC] def blur(): Unit
raw/HTMLMapElement[JC] def childElementCount: Int
raw/HTMLMapElement[JC] def childNodes: NodeList
raw/HTMLMapElement[JC] def children: HTMLCollection
raw/HTMLMapElement[JC] var classList: DOMTokenList
raw/HTMLMapElement[JC] var className: String
raw/HTMLMapElement[JC] def click(): Unit
raw/HTMLMapElement[JC] def clientHeight: Int
raw/HTMLMapElement[JC] def clientLeft: Int
raw/HTMLMapElement[JC] def clientTop: Int
raw/HTMLMapElement[JC] def clientWidth: Int
raw/HTMLMapElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLMapElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLMapElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLMapElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLMapElement[JC] var contentEditable: String
raw/HTMLMapElement[JC] def dataset: js.Dictionary[String]
raw/HTMLMapElement[JC] var dir: String
raw/HTMLMapElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLMapElement[JC] var draggable: Boolean
raw/HTMLMapElement[JC] var filters: Object
raw/HTMLMapElement[JC] def firstChild: Node
raw/HTMLMapElement[JC] def firstElementChild: Element
raw/HTMLMapElement[JC] def focus(): Unit
raw/HTMLMapElement[JC] def getAttribute(name: String): String
raw/HTMLMapElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLMapElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLMapElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLMapElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLMapElement[JC] def getClientRects(): ClientRectList
raw/HTMLMapElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLMapElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLMapElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLMapElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLMapElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLMapElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLMapElement[JC] def hasAttributes(): Boolean
raw/HTMLMapElement[JC] def hasChildNodes(): Boolean
raw/HTMLMapElement[JC] var id: String
raw/HTMLMapElement[JC] var innerHTML: String
raw/HTMLMapElement[JC] var innerText: String
raw/HTMLMapElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLMapElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLMapElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLMapElement[JC] def isContentEditable: Boolean
raw/HTMLMapElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLMapElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLMapElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLMapElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLMapElement[JC] var lang: String
raw/HTMLMapElement[JC] def lastChild: Node
raw/HTMLMapElement[JC] def lastElementChild: Element
raw/HTMLMapElement[JC] def localName: String
raw/HTMLMapElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLMapElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLMapElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLMapElement[JC] def matches(selector: String): Boolean
raw/HTMLMapElement[JC] var name: String
raw/HTMLMapElement[JC] def namespaceURI: String
raw/HTMLMapElement[JC] def nextElementSibling: Element
raw/HTMLMapElement[JC] def nextSibling: Node
raw/HTMLMapElement[JC] def nodeName: String
raw/HTMLMapElement[JC] def nodeType: Int
raw/HTMLMapElement[JC] var nodeValue: String
raw/HTMLMapElement[JC] def normalize(): Unit
raw/HTMLMapElement[JC] def offsetHeight: Double
raw/HTMLMapElement[JC] def offsetLeft: Double
raw/HTMLMapElement[JC] def offsetParent: Element
raw/HTMLMapElement[JC] def offsetTop: Double
raw/HTMLMapElement[JC] def offsetWidth: Double
raw/HTMLMapElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLMapElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLMapElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLMapElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLMapElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLMapElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLMapElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLMapElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLMapElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLMapElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLMapElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLMapElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLMapElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLMapElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLMapElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLMapElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLMapElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLMapElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLMapElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLMapElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLMapElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLMapElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLMapElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLMapElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onended: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLMapElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLMapElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLMapElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLMapElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLMapElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLMapElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLMapElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLMapElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLMapElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLMapElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLMapElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLMapElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLMapElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLMapElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLMapElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLMapElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLMapElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLMapElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLMapElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLMapElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLMapElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLMapElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLMapElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLMapElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLMapElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLMapElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLMapElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLMapElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLMapElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLMapElement[JC] var outerHTML: String
raw/HTMLMapElement[JC] def ownerDocument: Document
raw/HTMLMapElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLMapElement[JC] var parentElement: HTMLElement
raw/HTMLMapElement[JC] def parentNode: Node
raw/HTMLMapElement[JC] def prefix: String
raw/HTMLMapElement[JC] def previousElementSibling: Element
raw/HTMLMapElement[JC] def previousSibling: Node
raw/HTMLMapElement[JC] def querySelector(selectors: String): Element
raw/HTMLMapElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLMapElement[JC] var readyState: js.Any
raw/HTMLMapElement[JC] var recordNumber: js.Any
raw/HTMLMapElement[JC] def removeAttribute(name: String): Unit
raw/HTMLMapElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLMapElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLMapElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLMapElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLMapElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLMapElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLMapElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLMapElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLMapElement[JC] def scrollHeight: Int
raw/HTMLMapElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLMapElement[JC] var scrollLeft: Double
raw/HTMLMapElement[JC] var scrollTop: Double
raw/HTMLMapElement[JC] def scrollWidth: Int
raw/HTMLMapElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLMapElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLMapElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLMapElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLMapElement[JC] var spellcheck: Boolean
raw/HTMLMapElement[JC] def style: CSSStyleDeclaration
raw/HTMLMapElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLMapElement[JC] def style_ = (value: String): Unit
raw/HTMLMapElement[JC] var tabIndex: Int
raw/HTMLMapElement[JC] def tagName: String
raw/HTMLMapElement[JC] var textContent: String
raw/HTMLMapElement[JC] var title: String
raw/HTMLMediaElement[JC] var accessKey: String
raw/HTMLMediaElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLMediaElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLMediaElement[JC] def appendChild(newChild: Node): Node
raw/HTMLMediaElement[JC] def attributes: NamedNodeMap
raw/HTMLMediaElement[JC] def audioTracks: AudioTrackList
raw/HTMLMediaElement[JC] var autoplay: Boolean
raw/HTMLMediaElement[JC] def blur(): Unit
raw/HTMLMediaElement[JC] def buffered: TimeRanges
raw/HTMLMediaElement[JC] def canPlayType(`type`: String): String
raw/HTMLMediaElement[JC] def childElementCount: Int
raw/HTMLMediaElement[JC] def childNodes: NodeList
raw/HTMLMediaElement[JC] def children: HTMLCollection
raw/HTMLMediaElement[JC] var classList: DOMTokenList
raw/HTMLMediaElement[JC] var className: String
raw/HTMLMediaElement[JC] def click(): Unit
raw/HTMLMediaElement[JC] def clientHeight: Int
raw/HTMLMediaElement[JC] def clientLeft: Int
raw/HTMLMediaElement[JC] def clientTop: Int
raw/HTMLMediaElement[JC] def clientWidth: Int
raw/HTMLMediaElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLMediaElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLMediaElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLMediaElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLMediaElement[JC] var contentEditable: String
raw/HTMLMediaElement[JC] var controls: Boolean
raw/HTMLMediaElement[JC] def currentSrc: String
raw/HTMLMediaElement[JC] var currentTime: Double
raw/HTMLMediaElement[JC] def dataset: js.Dictionary[String]
raw/HTMLMediaElement[JC] var defaultPlaybackRate: Double
raw/HTMLMediaElement[JC] var dir: String
raw/HTMLMediaElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLMediaElement[JC] var draggable: Boolean
raw/HTMLMediaElement[JC] def duration: Double
raw/HTMLMediaElement[JC] def ended: Boolean
raw/HTMLMediaElement[JC] def error: MediaError
raw/HTMLMediaElement[JC] var filters: Object
raw/HTMLMediaElement[JC] def firstChild: Node
raw/HTMLMediaElement[JC] def firstElementChild: Element
raw/HTMLMediaElement[JC] def focus(): Unit
raw/HTMLMediaElement[JC] def getAttribute(name: String): String
raw/HTMLMediaElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLMediaElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLMediaElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLMediaElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLMediaElement[JC] def getClientRects(): ClientRectList
raw/HTMLMediaElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLMediaElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLMediaElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLMediaElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLMediaElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLMediaElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLMediaElement[JC] def hasAttributes(): Boolean
raw/HTMLMediaElement[JC] def hasChildNodes(): Boolean
raw/HTMLMediaElement[JC] var id: String
raw/HTMLMediaElement[JC] def initialTime: Double
raw/HTMLMediaElement[JC] var innerHTML: String
raw/HTMLMediaElement[JC] var innerText: String
raw/HTMLMediaElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLMediaElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLMediaElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLMediaElement[JC] def isContentEditable: Boolean
raw/HTMLMediaElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLMediaElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLMediaElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLMediaElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLMediaElement[JC] var lang: String
raw/HTMLMediaElement[JC] def lastChild: Node
raw/HTMLMediaElement[JC] def lastElementChild: Element
raw/HTMLMediaElement[JC] def load(): Unit
raw/HTMLMediaElement[JC] def localName: String
raw/HTMLMediaElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLMediaElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLMediaElement[JC] var loop: Boolean
raw/HTMLMediaElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLMediaElement[JC] def matches(selector: String): Boolean
raw/HTMLMediaElement[JC] var muted: Boolean
raw/HTMLMediaElement[JC] def namespaceURI: String
raw/HTMLMediaElement[JC] def networkState: Int
raw/HTMLMediaElement[JC] def nextElementSibling: Element
raw/HTMLMediaElement[JC] def nextSibling: Node
raw/HTMLMediaElement[JC] def nodeName: String
raw/HTMLMediaElement[JC] def nodeType: Int
raw/HTMLMediaElement[JC] var nodeValue: String
raw/HTMLMediaElement[JC] def normalize(): Unit
raw/HTMLMediaElement[JC] def offsetHeight: Double
raw/HTMLMediaElement[JC] def offsetLeft: Double
raw/HTMLMediaElement[JC] def offsetParent: Element
raw/HTMLMediaElement[JC] def offsetTop: Double
raw/HTMLMediaElement[JC] def offsetWidth: Double
raw/HTMLMediaElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLMediaElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLMediaElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLMediaElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLMediaElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLMediaElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLMediaElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLMediaElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLMediaElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLMediaElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLMediaElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLMediaElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLMediaElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLMediaElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLMediaElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLMediaElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLMediaElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLMediaElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLMediaElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLMediaElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLMediaElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLMediaElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onended: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLMediaElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLMediaElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLMediaElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLMediaElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLMediaElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLMediaElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLMediaElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLMediaElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLMediaElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLMediaElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLMediaElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLMediaElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLMediaElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLMediaElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLMediaElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLMediaElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLMediaElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLMediaElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLMediaElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLMediaElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLMediaElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLMediaElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLMediaElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLMediaElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLMediaElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLMediaElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLMediaElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLMediaElement[JC] var outerHTML: String
raw/HTMLMediaElement[JC] def ownerDocument: Document
raw/HTMLMediaElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLMediaElement[JC] var parentElement: HTMLElement
raw/HTMLMediaElement[JC] def parentNode: Node
raw/HTMLMediaElement[JC] def pause(): Unit
raw/HTMLMediaElement[JC] def paused: Boolean
raw/HTMLMediaElement[JC] def play(): js.UndefOr[js.Promise[Unit]]
raw/HTMLMediaElement[JC] var playbackRate: Double
raw/HTMLMediaElement[JC] def played: TimeRanges
raw/HTMLMediaElement[JC] def prefix: String
raw/HTMLMediaElement[JC] var preload: String
raw/HTMLMediaElement[JC] def previousElementSibling: Element
raw/HTMLMediaElement[JC] def previousSibling: Node
raw/HTMLMediaElement[JC] def querySelector(selectors: String): Element
raw/HTMLMediaElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLMediaElement[JC] var readyState: js.Any
raw/HTMLMediaElement[JC] var recordNumber: js.Any
raw/HTMLMediaElement[JC] def removeAttribute(name: String): Unit
raw/HTMLMediaElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLMediaElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLMediaElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLMediaElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLMediaElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLMediaElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLMediaElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLMediaElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLMediaElement[JC] def scrollHeight: Int
raw/HTMLMediaElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLMediaElement[JC] var scrollLeft: Double
raw/HTMLMediaElement[JC] var scrollTop: Double
raw/HTMLMediaElement[JC] def scrollWidth: Int
raw/HTMLMediaElement[JC] def seekable: TimeRanges
raw/HTMLMediaElement[JC] def seeking: Boolean
raw/HTMLMediaElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLMediaElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLMediaElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLMediaElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLMediaElement[JC] var spellcheck: Boolean
raw/HTMLMediaElement[JC] var src: String
raw/HTMLMediaElement[JC] var srcObject: js.UndefOr[MediaStream | MediaSource | Blob]
raw/HTMLMediaElement[JC] def style: CSSStyleDeclaration
raw/HTMLMediaElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLMediaElement[JC] def style_ = (value: String): Unit
raw/HTMLMediaElement[JC] var tabIndex: Int
raw/HTMLMediaElement[JC] def tagName: String
raw/HTMLMediaElement[JC] var textContent: String
raw/HTMLMediaElement[JC] def textTracks: TextTrackList
raw/HTMLMediaElement[JC] var title: String
raw/HTMLMediaElement[JC] var volume: Double
raw/HTMLMediaElement[JO] val HAVE_CURRENT_DATA: Int
raw/HTMLMediaElement[JO] val HAVE_ENOUGH_DATA: Int
raw/HTMLMediaElement[JO] val HAVE_FUTURE_DATA: Int
raw/HTMLMediaElement[JO] val HAVE_METADATA: Int
raw/HTMLMediaElement[JO] val HAVE_NOTHING: Int
raw/HTMLMediaElement[JO] val NETWORK_EMPTY: Int
raw/HTMLMediaElement[JO] val NETWORK_IDLE: Int
raw/HTMLMediaElement[JO] val NETWORK_LOADING: Int
raw/HTMLMediaElement[JO] val NETWORK_NO_SOURCE: Int
raw/HTMLMenuElement[JC] var accessKey: String
raw/HTMLMenuElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLMenuElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLMenuElement[JC] def appendChild(newChild: Node): Node
raw/HTMLMenuElement[JC] def attributes: NamedNodeMap
raw/HTMLMenuElement[JC] def blur(): Unit
raw/HTMLMenuElement[JC] def childElementCount: Int
raw/HTMLMenuElement[JC] def childNodes: NodeList
raw/HTMLMenuElement[JC] def children: HTMLCollection
raw/HTMLMenuElement[JC] var classList: DOMTokenList
raw/HTMLMenuElement[JC] var className: String
raw/HTMLMenuElement[JC] def click(): Unit
raw/HTMLMenuElement[JC] def clientHeight: Int
raw/HTMLMenuElement[JC] def clientLeft: Int
raw/HTMLMenuElement[JC] def clientTop: Int
raw/HTMLMenuElement[JC] def clientWidth: Int
raw/HTMLMenuElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLMenuElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLMenuElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLMenuElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLMenuElement[JC] var contentEditable: String
raw/HTMLMenuElement[JC] def dataset: js.Dictionary[String]
raw/HTMLMenuElement[JC] var dir: String
raw/HTMLMenuElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLMenuElement[JC] var draggable: Boolean
raw/HTMLMenuElement[JC] var filters: Object
raw/HTMLMenuElement[JC] def firstChild: Node
raw/HTMLMenuElement[JC] def firstElementChild: Element
raw/HTMLMenuElement[JC] def focus(): Unit
raw/HTMLMenuElement[JC] def getAttribute(name: String): String
raw/HTMLMenuElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLMenuElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLMenuElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLMenuElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLMenuElement[JC] def getClientRects(): ClientRectList
raw/HTMLMenuElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLMenuElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLMenuElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLMenuElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLMenuElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLMenuElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLMenuElement[JC] def hasAttributes(): Boolean
raw/HTMLMenuElement[JC] def hasChildNodes(): Boolean
raw/HTMLMenuElement[JC] var id: String
raw/HTMLMenuElement[JC] var innerHTML: String
raw/HTMLMenuElement[JC] var innerText: String
raw/HTMLMenuElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLMenuElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLMenuElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLMenuElement[JC] def isContentEditable: Boolean
raw/HTMLMenuElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLMenuElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLMenuElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLMenuElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLMenuElement[JC] var lang: String
raw/HTMLMenuElement[JC] def lastChild: Node
raw/HTMLMenuElement[JC] def lastElementChild: Element
raw/HTMLMenuElement[JC] def localName: String
raw/HTMLMenuElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLMenuElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLMenuElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLMenuElement[JC] def matches(selector: String): Boolean
raw/HTMLMenuElement[JC] def namespaceURI: String
raw/HTMLMenuElement[JC] def nextElementSibling: Element
raw/HTMLMenuElement[JC] def nextSibling: Node
raw/HTMLMenuElement[JC] def nodeName: String
raw/HTMLMenuElement[JC] def nodeType: Int
raw/HTMLMenuElement[JC] var nodeValue: String
raw/HTMLMenuElement[JC] def normalize(): Unit
raw/HTMLMenuElement[JC] def offsetHeight: Double
raw/HTMLMenuElement[JC] def offsetLeft: Double
raw/HTMLMenuElement[JC] def offsetParent: Element
raw/HTMLMenuElement[JC] def offsetTop: Double
raw/HTMLMenuElement[JC] def offsetWidth: Double
raw/HTMLMenuElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLMenuElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLMenuElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLMenuElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLMenuElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLMenuElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLMenuElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLMenuElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLMenuElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLMenuElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLMenuElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLMenuElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLMenuElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLMenuElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLMenuElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLMenuElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLMenuElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLMenuElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLMenuElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLMenuElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLMenuElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLMenuElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onended: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLMenuElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLMenuElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLMenuElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLMenuElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLMenuElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLMenuElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLMenuElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLMenuElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLMenuElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLMenuElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLMenuElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLMenuElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLMenuElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLMenuElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLMenuElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLMenuElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLMenuElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLMenuElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLMenuElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLMenuElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLMenuElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLMenuElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLMenuElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLMenuElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLMenuElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLMenuElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLMenuElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLMenuElement[JC] var outerHTML: String
raw/HTMLMenuElement[JC] def ownerDocument: Document
raw/HTMLMenuElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLMenuElement[JC] var parentElement: HTMLElement
raw/HTMLMenuElement[JC] def parentNode: Node
raw/HTMLMenuElement[JC] def prefix: String
raw/HTMLMenuElement[JC] def previousElementSibling: Element
raw/HTMLMenuElement[JC] def previousSibling: Node
raw/HTMLMenuElement[JC] def querySelector(selectors: String): Element
raw/HTMLMenuElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLMenuElement[JC] var readyState: js.Any
raw/HTMLMenuElement[JC] var recordNumber: js.Any
raw/HTMLMenuElement[JC] def removeAttribute(name: String): Unit
raw/HTMLMenuElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLMenuElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLMenuElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLMenuElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLMenuElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLMenuElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLMenuElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLMenuElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLMenuElement[JC] def scrollHeight: Int
raw/HTMLMenuElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLMenuElement[JC] var scrollLeft: Double
raw/HTMLMenuElement[JC] var scrollTop: Double
raw/HTMLMenuElement[JC] def scrollWidth: Int
raw/HTMLMenuElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLMenuElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLMenuElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLMenuElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLMenuElement[JC] var spellcheck: Boolean
raw/HTMLMenuElement[JC] def style: CSSStyleDeclaration
raw/HTMLMenuElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLMenuElement[JC] def style_ = (value: String): Unit
raw/HTMLMenuElement[JC] var tabIndex: Int
raw/HTMLMenuElement[JC] def tagName: String
raw/HTMLMenuElement[JC] var textContent: String
raw/HTMLMenuElement[JC] var title: String
raw/HTMLMenuElement[JC] var `type`: String
raw/HTMLMetaElement[JC] var accessKey: String
raw/HTMLMetaElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLMetaElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLMetaElement[JC] def appendChild(newChild: Node): Node
raw/HTMLMetaElement[JC] def attributes: NamedNodeMap
raw/HTMLMetaElement[JC] def blur(): Unit
raw/HTMLMetaElement[JC] var charset: String
raw/HTMLMetaElement[JC] def childElementCount: Int
raw/HTMLMetaElement[JC] def childNodes: NodeList
raw/HTMLMetaElement[JC] def children: HTMLCollection
raw/HTMLMetaElement[JC] var classList: DOMTokenList
raw/HTMLMetaElement[JC] var className: String
raw/HTMLMetaElement[JC] def click(): Unit
raw/HTMLMetaElement[JC] def clientHeight: Int
raw/HTMLMetaElement[JC] def clientLeft: Int
raw/HTMLMetaElement[JC] def clientTop: Int
raw/HTMLMetaElement[JC] def clientWidth: Int
raw/HTMLMetaElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLMetaElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLMetaElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLMetaElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLMetaElement[JC] var content: String
raw/HTMLMetaElement[JC] var contentEditable: String
raw/HTMLMetaElement[JC] def dataset: js.Dictionary[String]
raw/HTMLMetaElement[JC] var dir: String
raw/HTMLMetaElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLMetaElement[JC] var draggable: Boolean
raw/HTMLMetaElement[JC] var filters: Object
raw/HTMLMetaElement[JC] def firstChild: Node
raw/HTMLMetaElement[JC] def firstElementChild: Element
raw/HTMLMetaElement[JC] def focus(): Unit
raw/HTMLMetaElement[JC] def getAttribute(name: String): String
raw/HTMLMetaElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLMetaElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLMetaElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLMetaElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLMetaElement[JC] def getClientRects(): ClientRectList
raw/HTMLMetaElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLMetaElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLMetaElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLMetaElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLMetaElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLMetaElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLMetaElement[JC] def hasAttributes(): Boolean
raw/HTMLMetaElement[JC] def hasChildNodes(): Boolean
raw/HTMLMetaElement[JC] var httpEquiv: String
raw/HTMLMetaElement[JC] var id: String
raw/HTMLMetaElement[JC] var innerHTML: String
raw/HTMLMetaElement[JC] var innerText: String
raw/HTMLMetaElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLMetaElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLMetaElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLMetaElement[JC] def isContentEditable: Boolean
raw/HTMLMetaElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLMetaElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLMetaElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLMetaElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLMetaElement[JC] var lang: String
raw/HTMLMetaElement[JC] def lastChild: Node
raw/HTMLMetaElement[JC] def lastElementChild: Element
raw/HTMLMetaElement[JC] def localName: String
raw/HTMLMetaElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLMetaElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLMetaElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLMetaElement[JC] def matches(selector: String): Boolean
raw/HTMLMetaElement[JC] var name: String
raw/HTMLMetaElement[JC] def namespaceURI: String
raw/HTMLMetaElement[JC] def nextElementSibling: Element
raw/HTMLMetaElement[JC] def nextSibling: Node
raw/HTMLMetaElement[JC] def nodeName: String
raw/HTMLMetaElement[JC] def nodeType: Int
raw/HTMLMetaElement[JC] var nodeValue: String
raw/HTMLMetaElement[JC] def normalize(): Unit
raw/HTMLMetaElement[JC] def offsetHeight: Double
raw/HTMLMetaElement[JC] def offsetLeft: Double
raw/HTMLMetaElement[JC] def offsetParent: Element
raw/HTMLMetaElement[JC] def offsetTop: Double
raw/HTMLMetaElement[JC] def offsetWidth: Double
raw/HTMLMetaElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLMetaElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLMetaElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLMetaElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLMetaElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLMetaElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLMetaElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLMetaElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLMetaElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLMetaElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLMetaElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLMetaElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLMetaElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLMetaElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLMetaElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLMetaElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLMetaElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLMetaElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLMetaElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLMetaElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLMetaElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLMetaElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onended: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLMetaElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLMetaElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLMetaElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLMetaElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLMetaElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLMetaElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLMetaElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLMetaElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLMetaElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLMetaElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLMetaElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLMetaElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLMetaElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLMetaElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLMetaElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLMetaElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLMetaElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLMetaElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLMetaElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLMetaElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLMetaElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLMetaElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLMetaElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLMetaElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLMetaElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLMetaElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLMetaElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLMetaElement[JC] var outerHTML: String
raw/HTMLMetaElement[JC] def ownerDocument: Document
raw/HTMLMetaElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLMetaElement[JC] var parentElement: HTMLElement
raw/HTMLMetaElement[JC] def parentNode: Node
raw/HTMLMetaElement[JC] def prefix: String
raw/HTMLMetaElement[JC] def previousElementSibling: Element
raw/HTMLMetaElement[JC] def previousSibling: Node
raw/HTMLMetaElement[JC] def querySelector(selectors: String): Element
raw/HTMLMetaElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLMetaElement[JC] var readyState: js.Any
raw/HTMLMetaElement[JC] var recordNumber: js.Any
raw/HTMLMetaElement[JC] def removeAttribute(name: String): Unit
raw/HTMLMetaElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLMetaElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLMetaElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLMetaElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLMetaElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLMetaElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLMetaElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLMetaElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLMetaElement[JC] def scrollHeight: Int
raw/HTMLMetaElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLMetaElement[JC] var scrollLeft: Double
raw/HTMLMetaElement[JC] var scrollTop: Double
raw/HTMLMetaElement[JC] def scrollWidth: Int
raw/HTMLMetaElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLMetaElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLMetaElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLMetaElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLMetaElement[JC] var spellcheck: Boolean
raw/HTMLMetaElement[JC] def style: CSSStyleDeclaration
raw/HTMLMetaElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLMetaElement[JC] def style_ = (value: String): Unit
raw/HTMLMetaElement[JC] var tabIndex: Int
raw/HTMLMetaElement[JC] def tagName: String
raw/HTMLMetaElement[JC] var textContent: String
raw/HTMLMetaElement[JC] var title: String
raw/HTMLMetaElement[JC] var url: String
raw/HTMLModElement[JC] var accessKey: String
raw/HTMLModElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLModElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLModElement[JC] def appendChild(newChild: Node): Node
raw/HTMLModElement[JC] def attributes: NamedNodeMap
raw/HTMLModElement[JC] def blur(): Unit
raw/HTMLModElement[JC] def childElementCount: Int
raw/HTMLModElement[JC] def childNodes: NodeList
raw/HTMLModElement[JC] def children: HTMLCollection
raw/HTMLModElement[JC] var cite: String
raw/HTMLModElement[JC] var classList: DOMTokenList
raw/HTMLModElement[JC] var className: String
raw/HTMLModElement[JC] def click(): Unit
raw/HTMLModElement[JC] def clientHeight: Int
raw/HTMLModElement[JC] def clientLeft: Int
raw/HTMLModElement[JC] def clientTop: Int
raw/HTMLModElement[JC] def clientWidth: Int
raw/HTMLModElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLModElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLModElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLModElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLModElement[JC] var contentEditable: String
raw/HTMLModElement[JC] def dataset: js.Dictionary[String]
raw/HTMLModElement[JC] var dateTime: String
raw/HTMLModElement[JC] var dir: String
raw/HTMLModElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLModElement[JC] var draggable: Boolean
raw/HTMLModElement[JC] var filters: Object
raw/HTMLModElement[JC] def firstChild: Node
raw/HTMLModElement[JC] def firstElementChild: Element
raw/HTMLModElement[JC] def focus(): Unit
raw/HTMLModElement[JC] def getAttribute(name: String): String
raw/HTMLModElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLModElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLModElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLModElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLModElement[JC] def getClientRects(): ClientRectList
raw/HTMLModElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLModElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLModElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLModElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLModElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLModElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLModElement[JC] def hasAttributes(): Boolean
raw/HTMLModElement[JC] def hasChildNodes(): Boolean
raw/HTMLModElement[JC] var id: String
raw/HTMLModElement[JC] var innerHTML: String
raw/HTMLModElement[JC] var innerText: String
raw/HTMLModElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLModElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLModElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLModElement[JC] def isContentEditable: Boolean
raw/HTMLModElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLModElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLModElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLModElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLModElement[JC] var lang: String
raw/HTMLModElement[JC] def lastChild: Node
raw/HTMLModElement[JC] def lastElementChild: Element
raw/HTMLModElement[JC] def localName: String
raw/HTMLModElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLModElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLModElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLModElement[JC] def matches(selector: String): Boolean
raw/HTMLModElement[JC] def namespaceURI: String
raw/HTMLModElement[JC] def nextElementSibling: Element
raw/HTMLModElement[JC] def nextSibling: Node
raw/HTMLModElement[JC] def nodeName: String
raw/HTMLModElement[JC] def nodeType: Int
raw/HTMLModElement[JC] var nodeValue: String
raw/HTMLModElement[JC] def normalize(): Unit
raw/HTMLModElement[JC] def offsetHeight: Double
raw/HTMLModElement[JC] def offsetLeft: Double
raw/HTMLModElement[JC] def offsetParent: Element
raw/HTMLModElement[JC] def offsetTop: Double
raw/HTMLModElement[JC] def offsetWidth: Double
raw/HTMLModElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLModElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLModElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLModElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLModElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLModElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLModElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLModElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLModElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLModElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLModElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLModElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLModElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLModElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLModElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLModElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLModElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLModElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLModElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLModElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLModElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLModElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLModElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLModElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLModElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLModElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLModElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLModElement[JC] var onended: js.Function1[Event, _]
raw/HTMLModElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLModElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLModElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLModElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLModElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLModElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLModElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLModElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLModElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLModElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLModElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLModElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLModElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLModElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLModElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLModElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLModElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLModElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLModElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLModElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLModElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLModElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLModElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLModElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLModElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLModElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLModElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLModElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLModElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLModElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLModElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLModElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLModElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLModElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLModElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLModElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLModElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLModElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLModElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLModElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLModElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLModElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLModElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLModElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLModElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLModElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLModElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLModElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLModElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLModElement[JC] var outerHTML: String
raw/HTMLModElement[JC] def ownerDocument: Document
raw/HTMLModElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLModElement[JC] var parentElement: HTMLElement
raw/HTMLModElement[JC] def parentNode: Node
raw/HTMLModElement[JC] def prefix: String
raw/HTMLModElement[JC] def previousElementSibling: Element
raw/HTMLModElement[JC] def previousSibling: Node
raw/HTMLModElement[JC] def querySelector(selectors: String): Element
raw/HTMLModElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLModElement[JC] var readyState: js.Any
raw/HTMLModElement[JC] var recordNumber: js.Any
raw/HTMLModElement[JC] def removeAttribute(name: String): Unit
raw/HTMLModElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLModElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLModElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLModElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLModElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLModElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLModElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLModElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLModElement[JC] def scrollHeight: Int
raw/HTMLModElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLModElement[JC] var scrollLeft: Double
raw/HTMLModElement[JC] var scrollTop: Double
raw/HTMLModElement[JC] def scrollWidth: Int
raw/HTMLModElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLModElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLModElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLModElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLModElement[JC] var spellcheck: Boolean
raw/HTMLModElement[JC] def style: CSSStyleDeclaration
raw/HTMLModElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLModElement[JC] def style_ = (value: String): Unit
raw/HTMLModElement[JC] var tabIndex: Int
raw/HTMLModElement[JC] def tagName: String
raw/HTMLModElement[JC] var textContent: String
raw/HTMLModElement[JC] var title: String
raw/HTMLOListElement[JC] var accessKey: String
raw/HTMLOListElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLOListElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLOListElement[JC] def appendChild(newChild: Node): Node
raw/HTMLOListElement[JC] def attributes: NamedNodeMap
raw/HTMLOListElement[JC] def blur(): Unit
raw/HTMLOListElement[JC] def childElementCount: Int
raw/HTMLOListElement[JC] def childNodes: NodeList
raw/HTMLOListElement[JC] def children: HTMLCollection
raw/HTMLOListElement[JC] var classList: DOMTokenList
raw/HTMLOListElement[JC] var className: String
raw/HTMLOListElement[JC] def click(): Unit
raw/HTMLOListElement[JC] def clientHeight: Int
raw/HTMLOListElement[JC] def clientLeft: Int
raw/HTMLOListElement[JC] def clientTop: Int
raw/HTMLOListElement[JC] def clientWidth: Int
raw/HTMLOListElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLOListElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLOListElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLOListElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLOListElement[JC] var contentEditable: String
raw/HTMLOListElement[JC] def dataset: js.Dictionary[String]
raw/HTMLOListElement[JC] var dir: String
raw/HTMLOListElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLOListElement[JC] var draggable: Boolean
raw/HTMLOListElement[JC] var filters: Object
raw/HTMLOListElement[JC] def firstChild: Node
raw/HTMLOListElement[JC] def firstElementChild: Element
raw/HTMLOListElement[JC] def focus(): Unit
raw/HTMLOListElement[JC] def getAttribute(name: String): String
raw/HTMLOListElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLOListElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLOListElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLOListElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLOListElement[JC] def getClientRects(): ClientRectList
raw/HTMLOListElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLOListElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLOListElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLOListElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLOListElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLOListElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLOListElement[JC] def hasAttributes(): Boolean
raw/HTMLOListElement[JC] def hasChildNodes(): Boolean
raw/HTMLOListElement[JC] var id: String
raw/HTMLOListElement[JC] var innerHTML: String
raw/HTMLOListElement[JC] var innerText: String
raw/HTMLOListElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLOListElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLOListElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLOListElement[JC] def isContentEditable: Boolean
raw/HTMLOListElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLOListElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLOListElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLOListElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLOListElement[JC] var lang: String
raw/HTMLOListElement[JC] def lastChild: Node
raw/HTMLOListElement[JC] def lastElementChild: Element
raw/HTMLOListElement[JC] def localName: String
raw/HTMLOListElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLOListElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLOListElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLOListElement[JC] def matches(selector: String): Boolean
raw/HTMLOListElement[JC] def namespaceURI: String
raw/HTMLOListElement[JC] def nextElementSibling: Element
raw/HTMLOListElement[JC] def nextSibling: Node
raw/HTMLOListElement[JC] def nodeName: String
raw/HTMLOListElement[JC] def nodeType: Int
raw/HTMLOListElement[JC] var nodeValue: String
raw/HTMLOListElement[JC] def normalize(): Unit
raw/HTMLOListElement[JC] def offsetHeight: Double
raw/HTMLOListElement[JC] def offsetLeft: Double
raw/HTMLOListElement[JC] def offsetParent: Element
raw/HTMLOListElement[JC] def offsetTop: Double
raw/HTMLOListElement[JC] def offsetWidth: Double
raw/HTMLOListElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLOListElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLOListElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLOListElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLOListElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLOListElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLOListElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLOListElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLOListElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLOListElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLOListElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLOListElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLOListElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLOListElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLOListElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLOListElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLOListElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLOListElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLOListElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLOListElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLOListElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLOListElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLOListElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLOListElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onended: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLOListElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLOListElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLOListElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLOListElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLOListElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLOListElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLOListElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLOListElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLOListElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLOListElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLOListElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLOListElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLOListElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLOListElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLOListElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLOListElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLOListElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLOListElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLOListElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLOListElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLOListElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLOListElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLOListElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLOListElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLOListElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLOListElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLOListElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLOListElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLOListElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLOListElement[JC] var outerHTML: String
raw/HTMLOListElement[JC] def ownerDocument: Document
raw/HTMLOListElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLOListElement[JC] var parentElement: HTMLElement
raw/HTMLOListElement[JC] def parentNode: Node
raw/HTMLOListElement[JC] def prefix: String
raw/HTMLOListElement[JC] def previousElementSibling: Element
raw/HTMLOListElement[JC] def previousSibling: Node
raw/HTMLOListElement[JC] def querySelector(selectors: String): Element
raw/HTMLOListElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLOListElement[JC] var readyState: js.Any
raw/HTMLOListElement[JC] var recordNumber: js.Any
raw/HTMLOListElement[JC] def removeAttribute(name: String): Unit
raw/HTMLOListElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLOListElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLOListElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLOListElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLOListElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLOListElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLOListElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLOListElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLOListElement[JC] def scrollHeight: Int
raw/HTMLOListElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLOListElement[JC] var scrollLeft: Double
raw/HTMLOListElement[JC] var scrollTop: Double
raw/HTMLOListElement[JC] def scrollWidth: Int
raw/HTMLOListElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLOListElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLOListElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLOListElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLOListElement[JC] var spellcheck: Boolean
raw/HTMLOListElement[JC] var start: Int
raw/HTMLOListElement[JC] def style: CSSStyleDeclaration
raw/HTMLOListElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLOListElement[JC] def style_ = (value: String): Unit
raw/HTMLOListElement[JC] var tabIndex: Int
raw/HTMLOListElement[JC] def tagName: String
raw/HTMLOListElement[JC] var textContent: String
raw/HTMLOListElement[JC] var title: String
raw/HTMLObjectElement[JC] var BaseHref: String
raw/HTMLObjectElement[JC] var accessKey: String
raw/HTMLObjectElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLObjectElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLObjectElement[JC] var alt: String
raw/HTMLObjectElement[JC] var altHtml: String
raw/HTMLObjectElement[JC] def appendChild(newChild: Node): Node
raw/HTMLObjectElement[JC] def attributes: NamedNodeMap
raw/HTMLObjectElement[JC] def blur(): Unit
raw/HTMLObjectElement[JC] def checkValidity(): Boolean
raw/HTMLObjectElement[JC] def childElementCount: Int
raw/HTMLObjectElement[JC] def childNodes: NodeList
raw/HTMLObjectElement[JC] def children: HTMLCollection
raw/HTMLObjectElement[JC] var classList: DOMTokenList
raw/HTMLObjectElement[JC] var className: String
raw/HTMLObjectElement[JC] var classid: String
raw/HTMLObjectElement[JC] def click(): Unit
raw/HTMLObjectElement[JC] def clientHeight: Int
raw/HTMLObjectElement[JC] def clientLeft: Int
raw/HTMLObjectElement[JC] def clientTop: Int
raw/HTMLObjectElement[JC] def clientWidth: Int
raw/HTMLObjectElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLObjectElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLObjectElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLObjectElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLObjectElement[JC] def contentDocument: Document
raw/HTMLObjectElement[JC] var contentEditable: String
raw/HTMLObjectElement[JC] var data: String
raw/HTMLObjectElement[JC] def dataset: js.Dictionary[String]
raw/HTMLObjectElement[JC] var dir: String
raw/HTMLObjectElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLObjectElement[JC] var draggable: Boolean
raw/HTMLObjectElement[JC] var filters: Object
raw/HTMLObjectElement[JC] def firstChild: Node
raw/HTMLObjectElement[JC] def firstElementChild: Element
raw/HTMLObjectElement[JC] def focus(): Unit
raw/HTMLObjectElement[JC] def form: HTMLFormElement
raw/HTMLObjectElement[JC] def getAttribute(name: String): String
raw/HTMLObjectElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLObjectElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLObjectElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLObjectElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLObjectElement[JC] def getClientRects(): ClientRectList
raw/HTMLObjectElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLObjectElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLObjectElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLObjectElement[JC] def getSVGDocument(): Document
raw/HTMLObjectElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLObjectElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLObjectElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLObjectElement[JC] def hasAttributes(): Boolean
raw/HTMLObjectElement[JC] def hasChildNodes(): Boolean
raw/HTMLObjectElement[JC] var height: String
raw/HTMLObjectElement[JC] var id: String
raw/HTMLObjectElement[JC] var innerHTML: String
raw/HTMLObjectElement[JC] var innerText: String
raw/HTMLObjectElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLObjectElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLObjectElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLObjectElement[JC] def isContentEditable: Boolean
raw/HTMLObjectElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLObjectElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLObjectElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLObjectElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLObjectElement[JC] var lang: String
raw/HTMLObjectElement[JC] def lastChild: Node
raw/HTMLObjectElement[JC] def lastElementChild: Element
raw/HTMLObjectElement[JC] def localName: String
raw/HTMLObjectElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLObjectElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLObjectElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLObjectElement[JC] def matches(selector: String): Boolean
raw/HTMLObjectElement[JC] var name: String
raw/HTMLObjectElement[JC] def namespaceURI: String
raw/HTMLObjectElement[JC] def nextElementSibling: Element
raw/HTMLObjectElement[JC] def nextSibling: Node
raw/HTMLObjectElement[JC] def nodeName: String
raw/HTMLObjectElement[JC] def nodeType: Int
raw/HTMLObjectElement[JC] var nodeValue: String
raw/HTMLObjectElement[JC] def normalize(): Unit
raw/HTMLObjectElement[JC] var `object`: Object
raw/HTMLObjectElement[JC] def offsetHeight: Double
raw/HTMLObjectElement[JC] def offsetLeft: Double
raw/HTMLObjectElement[JC] def offsetParent: Element
raw/HTMLObjectElement[JC] def offsetTop: Double
raw/HTMLObjectElement[JC] def offsetWidth: Double
raw/HTMLObjectElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLObjectElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLObjectElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLObjectElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLObjectElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLObjectElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLObjectElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLObjectElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLObjectElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLObjectElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLObjectElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLObjectElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLObjectElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLObjectElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLObjectElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLObjectElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLObjectElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLObjectElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLObjectElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLObjectElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLObjectElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLObjectElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onended: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLObjectElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLObjectElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLObjectElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLObjectElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLObjectElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLObjectElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLObjectElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLObjectElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLObjectElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLObjectElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLObjectElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLObjectElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLObjectElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLObjectElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLObjectElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLObjectElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLObjectElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLObjectElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLObjectElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLObjectElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLObjectElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLObjectElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLObjectElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLObjectElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLObjectElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLObjectElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLObjectElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLObjectElement[JC] var outerHTML: String
raw/HTMLObjectElement[JC] def ownerDocument: Document
raw/HTMLObjectElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLObjectElement[JC] var parentElement: HTMLElement
raw/HTMLObjectElement[JC] def parentNode: Node
raw/HTMLObjectElement[JC] def prefix: String
raw/HTMLObjectElement[JC] def previousElementSibling: Element
raw/HTMLObjectElement[JC] def previousSibling: Node
raw/HTMLObjectElement[JC] def querySelector(selectors: String): Element
raw/HTMLObjectElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLObjectElement[JC] var readyState: js.Any
raw/HTMLObjectElement[JC] var recordNumber: js.Any
raw/HTMLObjectElement[JC] def removeAttribute(name: String): Unit
raw/HTMLObjectElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLObjectElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLObjectElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLObjectElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLObjectElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLObjectElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLObjectElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLObjectElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLObjectElement[JC] def scrollHeight: Int
raw/HTMLObjectElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLObjectElement[JC] var scrollLeft: Double
raw/HTMLObjectElement[JC] var scrollTop: Double
raw/HTMLObjectElement[JC] def scrollWidth: Int
raw/HTMLObjectElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLObjectElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLObjectElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLObjectElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLObjectElement[JC] def setCustomValidity(error: String): Unit
raw/HTMLObjectElement[JC] var spellcheck: Boolean
raw/HTMLObjectElement[JC] def style: CSSStyleDeclaration
raw/HTMLObjectElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLObjectElement[JC] def style_ = (value: String): Unit
raw/HTMLObjectElement[JC] var tabIndex: Int
raw/HTMLObjectElement[JC] def tagName: String
raw/HTMLObjectElement[JC] var textContent: String
raw/HTMLObjectElement[JC] var title: String
raw/HTMLObjectElement[JC] var `type`: String
raw/HTMLObjectElement[JC] var useMap: String
raw/HTMLObjectElement[JC] def validationMessage: String
raw/HTMLObjectElement[JC] def validity: ValidityState
raw/HTMLObjectElement[JC] var width: String
raw/HTMLObjectElement[JC] def willValidate: Boolean
raw/HTMLOptGroupElement[JC] var accessKey: String
raw/HTMLOptGroupElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLOptGroupElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLOptGroupElement[JC] def appendChild(newChild: Node): Node
raw/HTMLOptGroupElement[JC] def attributes: NamedNodeMap
raw/HTMLOptGroupElement[JC] def blur(): Unit
raw/HTMLOptGroupElement[JC] def childElementCount: Int
raw/HTMLOptGroupElement[JC] def childNodes: NodeList
raw/HTMLOptGroupElement[JC] def children: HTMLCollection
raw/HTMLOptGroupElement[JC] var classList: DOMTokenList
raw/HTMLOptGroupElement[JC] var className: String
raw/HTMLOptGroupElement[JC] def click(): Unit
raw/HTMLOptGroupElement[JC] def clientHeight: Int
raw/HTMLOptGroupElement[JC] def clientLeft: Int
raw/HTMLOptGroupElement[JC] def clientTop: Int
raw/HTMLOptGroupElement[JC] def clientWidth: Int
raw/HTMLOptGroupElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLOptGroupElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLOptGroupElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLOptGroupElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLOptGroupElement[JC] var contentEditable: String
raw/HTMLOptGroupElement[JC] def dataset: js.Dictionary[String]
raw/HTMLOptGroupElement[JC] var dir: String
raw/HTMLOptGroupElement[JC] var disabled: Boolean
raw/HTMLOptGroupElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLOptGroupElement[JC] var draggable: Boolean
raw/HTMLOptGroupElement[JC] var filters: Object
raw/HTMLOptGroupElement[JC] def firstChild: Node
raw/HTMLOptGroupElement[JC] def firstElementChild: Element
raw/HTMLOptGroupElement[JC] def focus(): Unit
raw/HTMLOptGroupElement[JC] def getAttribute(name: String): String
raw/HTMLOptGroupElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLOptGroupElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLOptGroupElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLOptGroupElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLOptGroupElement[JC] def getClientRects(): ClientRectList
raw/HTMLOptGroupElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLOptGroupElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLOptGroupElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLOptGroupElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLOptGroupElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLOptGroupElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLOptGroupElement[JC] def hasAttributes(): Boolean
raw/HTMLOptGroupElement[JC] def hasChildNodes(): Boolean
raw/HTMLOptGroupElement[JC] var id: String
raw/HTMLOptGroupElement[JC] var innerHTML: String
raw/HTMLOptGroupElement[JC] var innerText: String
raw/HTMLOptGroupElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLOptGroupElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLOptGroupElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLOptGroupElement[JC] def isContentEditable: Boolean
raw/HTMLOptGroupElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLOptGroupElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLOptGroupElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLOptGroupElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLOptGroupElement[JC] var label: String
raw/HTMLOptGroupElement[JC] var lang: String
raw/HTMLOptGroupElement[JC] def lastChild: Node
raw/HTMLOptGroupElement[JC] def lastElementChild: Element
raw/HTMLOptGroupElement[JC] def localName: String
raw/HTMLOptGroupElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLOptGroupElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLOptGroupElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLOptGroupElement[JC] def matches(selector: String): Boolean
raw/HTMLOptGroupElement[JC] def namespaceURI: String
raw/HTMLOptGroupElement[JC] def nextElementSibling: Element
raw/HTMLOptGroupElement[JC] def nextSibling: Node
raw/HTMLOptGroupElement[JC] def nodeName: String
raw/HTMLOptGroupElement[JC] def nodeType: Int
raw/HTMLOptGroupElement[JC] var nodeValue: String
raw/HTMLOptGroupElement[JC] def normalize(): Unit
raw/HTMLOptGroupElement[JC] def offsetHeight: Double
raw/HTMLOptGroupElement[JC] def offsetLeft: Double
raw/HTMLOptGroupElement[JC] def offsetParent: Element
raw/HTMLOptGroupElement[JC] def offsetTop: Double
raw/HTMLOptGroupElement[JC] def offsetWidth: Double
raw/HTMLOptGroupElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLOptGroupElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLOptGroupElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLOptGroupElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLOptGroupElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLOptGroupElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLOptGroupElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLOptGroupElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLOptGroupElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLOptGroupElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLOptGroupElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLOptGroupElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLOptGroupElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLOptGroupElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLOptGroupElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLOptGroupElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLOptGroupElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLOptGroupElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLOptGroupElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLOptGroupElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLOptGroupElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLOptGroupElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onended: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLOptGroupElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLOptGroupElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLOptGroupElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLOptGroupElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLOptGroupElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLOptGroupElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLOptGroupElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLOptGroupElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLOptGroupElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLOptGroupElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLOptGroupElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLOptGroupElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLOptGroupElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLOptGroupElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLOptGroupElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLOptGroupElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLOptGroupElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLOptGroupElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLOptGroupElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLOptGroupElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLOptGroupElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLOptGroupElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLOptGroupElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLOptGroupElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLOptGroupElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLOptGroupElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLOptGroupElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLOptGroupElement[JC] var outerHTML: String
raw/HTMLOptGroupElement[JC] def ownerDocument: Document
raw/HTMLOptGroupElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLOptGroupElement[JC] var parentElement: HTMLElement
raw/HTMLOptGroupElement[JC] def parentNode: Node
raw/HTMLOptGroupElement[JC] def prefix: String
raw/HTMLOptGroupElement[JC] def previousElementSibling: Element
raw/HTMLOptGroupElement[JC] def previousSibling: Node
raw/HTMLOptGroupElement[JC] def querySelector(selectors: String): Element
raw/HTMLOptGroupElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLOptGroupElement[JC] var readyState: js.Any
raw/HTMLOptGroupElement[JC] var recordNumber: js.Any
raw/HTMLOptGroupElement[JC] def removeAttribute(name: String): Unit
raw/HTMLOptGroupElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLOptGroupElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLOptGroupElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLOptGroupElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLOptGroupElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLOptGroupElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLOptGroupElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLOptGroupElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLOptGroupElement[JC] def scrollHeight: Int
raw/HTMLOptGroupElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLOptGroupElement[JC] var scrollLeft: Double
raw/HTMLOptGroupElement[JC] var scrollTop: Double
raw/HTMLOptGroupElement[JC] def scrollWidth: Int
raw/HTMLOptGroupElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLOptGroupElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLOptGroupElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLOptGroupElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLOptGroupElement[JC] var spellcheck: Boolean
raw/HTMLOptGroupElement[JC] def style: CSSStyleDeclaration
raw/HTMLOptGroupElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLOptGroupElement[JC] def style_ = (value: String): Unit
raw/HTMLOptGroupElement[JC] var tabIndex: Int
raw/HTMLOptGroupElement[JC] def tagName: String
raw/HTMLOptGroupElement[JC] var textContent: String
raw/HTMLOptGroupElement[JC] var title: String
raw/HTMLOptionElement[JC] var accessKey: String
raw/HTMLOptionElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLOptionElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLOptionElement[JC] def appendChild(newChild: Node): Node
raw/HTMLOptionElement[JC] def attributes: NamedNodeMap
raw/HTMLOptionElement[JC] def blur(): Unit
raw/HTMLOptionElement[JC] def childElementCount: Int
raw/HTMLOptionElement[JC] def childNodes: NodeList
raw/HTMLOptionElement[JC] def children: HTMLCollection
raw/HTMLOptionElement[JC] var classList: DOMTokenList
raw/HTMLOptionElement[JC] var className: String
raw/HTMLOptionElement[JC] def click(): Unit
raw/HTMLOptionElement[JC] def clientHeight: Int
raw/HTMLOptionElement[JC] def clientLeft: Int
raw/HTMLOptionElement[JC] def clientTop: Int
raw/HTMLOptionElement[JC] def clientWidth: Int
raw/HTMLOptionElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLOptionElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLOptionElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLOptionElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLOptionElement[JC] var contentEditable: String
raw/HTMLOptionElement[JC] def create(): HTMLOptionElement
raw/HTMLOptionElement[JC] def dataset: js.Dictionary[String]
raw/HTMLOptionElement[JC] var defaultSelected: Boolean
raw/HTMLOptionElement[JC] var dir: String
raw/HTMLOptionElement[JC] var disabled: Boolean
raw/HTMLOptionElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLOptionElement[JC] var draggable: Boolean
raw/HTMLOptionElement[JC] var filters: Object
raw/HTMLOptionElement[JC] def firstChild: Node
raw/HTMLOptionElement[JC] def firstElementChild: Element
raw/HTMLOptionElement[JC] def focus(): Unit
raw/HTMLOptionElement[JC] def form: HTMLFormElement
raw/HTMLOptionElement[JC] def getAttribute(name: String): String
raw/HTMLOptionElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLOptionElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLOptionElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLOptionElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLOptionElement[JC] def getClientRects(): ClientRectList
raw/HTMLOptionElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLOptionElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLOptionElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLOptionElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLOptionElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLOptionElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLOptionElement[JC] def hasAttributes(): Boolean
raw/HTMLOptionElement[JC] def hasChildNodes(): Boolean
raw/HTMLOptionElement[JC] var id: String
raw/HTMLOptionElement[JC] def index: Int
raw/HTMLOptionElement[JC] var innerHTML: String
raw/HTMLOptionElement[JC] var innerText: String
raw/HTMLOptionElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLOptionElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLOptionElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLOptionElement[JC] def isContentEditable: Boolean
raw/HTMLOptionElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLOptionElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLOptionElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLOptionElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLOptionElement[JC] var label: String
raw/HTMLOptionElement[JC] var lang: String
raw/HTMLOptionElement[JC] def lastChild: Node
raw/HTMLOptionElement[JC] def lastElementChild: Element
raw/HTMLOptionElement[JC] def localName: String
raw/HTMLOptionElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLOptionElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLOptionElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLOptionElement[JC] def matches(selector: String): Boolean
raw/HTMLOptionElement[JC] def namespaceURI: String
raw/HTMLOptionElement[JC] def nextElementSibling: Element
raw/HTMLOptionElement[JC] def nextSibling: Node
raw/HTMLOptionElement[JC] def nodeName: String
raw/HTMLOptionElement[JC] def nodeType: Int
raw/HTMLOptionElement[JC] var nodeValue: String
raw/HTMLOptionElement[JC] def normalize(): Unit
raw/HTMLOptionElement[JC] def offsetHeight: Double
raw/HTMLOptionElement[JC] def offsetLeft: Double
raw/HTMLOptionElement[JC] def offsetParent: Element
raw/HTMLOptionElement[JC] def offsetTop: Double
raw/HTMLOptionElement[JC] def offsetWidth: Double
raw/HTMLOptionElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLOptionElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLOptionElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLOptionElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLOptionElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLOptionElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLOptionElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLOptionElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLOptionElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLOptionElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLOptionElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLOptionElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLOptionElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLOptionElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLOptionElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLOptionElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLOptionElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLOptionElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLOptionElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLOptionElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLOptionElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLOptionElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onended: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLOptionElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLOptionElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLOptionElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLOptionElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLOptionElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLOptionElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLOptionElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLOptionElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLOptionElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLOptionElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLOptionElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLOptionElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLOptionElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLOptionElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLOptionElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLOptionElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLOptionElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLOptionElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLOptionElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLOptionElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLOptionElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLOptionElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLOptionElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLOptionElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLOptionElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLOptionElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLOptionElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLOptionElement[JC] var outerHTML: String
raw/HTMLOptionElement[JC] def ownerDocument: Document
raw/HTMLOptionElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLOptionElement[JC] var parentElement: HTMLElement
raw/HTMLOptionElement[JC] def parentNode: Node
raw/HTMLOptionElement[JC] def prefix: String
raw/HTMLOptionElement[JC] def previousElementSibling: Element
raw/HTMLOptionElement[JC] def previousSibling: Node
raw/HTMLOptionElement[JC] def querySelector(selectors: String): Element
raw/HTMLOptionElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLOptionElement[JC] var readyState: js.Any
raw/HTMLOptionElement[JC] var recordNumber: js.Any
raw/HTMLOptionElement[JC] def removeAttribute(name: String): Unit
raw/HTMLOptionElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLOptionElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLOptionElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLOptionElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLOptionElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLOptionElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLOptionElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLOptionElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLOptionElement[JC] def scrollHeight: Int
raw/HTMLOptionElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLOptionElement[JC] var scrollLeft: Double
raw/HTMLOptionElement[JC] var scrollTop: Double
raw/HTMLOptionElement[JC] def scrollWidth: Int
raw/HTMLOptionElement[JC] var selected: Boolean
raw/HTMLOptionElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLOptionElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLOptionElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLOptionElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLOptionElement[JC] var spellcheck: Boolean
raw/HTMLOptionElement[JC] def style: CSSStyleDeclaration
raw/HTMLOptionElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLOptionElement[JC] def style_ = (value: String): Unit
raw/HTMLOptionElement[JC] var tabIndex: Int
raw/HTMLOptionElement[JC] def tagName: String
raw/HTMLOptionElement[JC] var text: String
raw/HTMLOptionElement[JC] var textContent: String
raw/HTMLOptionElement[JC] var title: String
raw/HTMLOptionElement[JC] var value: String
raw/HTMLParagraphElement[JC] var accessKey: String
raw/HTMLParagraphElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLParagraphElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLParagraphElement[JC] def appendChild(newChild: Node): Node
raw/HTMLParagraphElement[JC] def attributes: NamedNodeMap
raw/HTMLParagraphElement[JC] def blur(): Unit
raw/HTMLParagraphElement[JC] def childElementCount: Int
raw/HTMLParagraphElement[JC] def childNodes: NodeList
raw/HTMLParagraphElement[JC] def children: HTMLCollection
raw/HTMLParagraphElement[JC] var classList: DOMTokenList
raw/HTMLParagraphElement[JC] var className: String
raw/HTMLParagraphElement[JC] def click(): Unit
raw/HTMLParagraphElement[JC] def clientHeight: Int
raw/HTMLParagraphElement[JC] def clientLeft: Int
raw/HTMLParagraphElement[JC] def clientTop: Int
raw/HTMLParagraphElement[JC] def clientWidth: Int
raw/HTMLParagraphElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLParagraphElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLParagraphElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLParagraphElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLParagraphElement[JC] var contentEditable: String
raw/HTMLParagraphElement[JC] def dataset: js.Dictionary[String]
raw/HTMLParagraphElement[JC] var dir: String
raw/HTMLParagraphElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLParagraphElement[JC] var draggable: Boolean
raw/HTMLParagraphElement[JC] var filters: Object
raw/HTMLParagraphElement[JC] def firstChild: Node
raw/HTMLParagraphElement[JC] def firstElementChild: Element
raw/HTMLParagraphElement[JC] def focus(): Unit
raw/HTMLParagraphElement[JC] def getAttribute(name: String): String
raw/HTMLParagraphElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLParagraphElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLParagraphElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLParagraphElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLParagraphElement[JC] def getClientRects(): ClientRectList
raw/HTMLParagraphElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLParagraphElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLParagraphElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLParagraphElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLParagraphElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLParagraphElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLParagraphElement[JC] def hasAttributes(): Boolean
raw/HTMLParagraphElement[JC] def hasChildNodes(): Boolean
raw/HTMLParagraphElement[JC] var id: String
raw/HTMLParagraphElement[JC] var innerHTML: String
raw/HTMLParagraphElement[JC] var innerText: String
raw/HTMLParagraphElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLParagraphElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLParagraphElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLParagraphElement[JC] def isContentEditable: Boolean
raw/HTMLParagraphElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLParagraphElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLParagraphElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLParagraphElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLParagraphElement[JC] var lang: String
raw/HTMLParagraphElement[JC] def lastChild: Node
raw/HTMLParagraphElement[JC] def lastElementChild: Element
raw/HTMLParagraphElement[JC] def localName: String
raw/HTMLParagraphElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLParagraphElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLParagraphElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLParagraphElement[JC] def matches(selector: String): Boolean
raw/HTMLParagraphElement[JC] def namespaceURI: String
raw/HTMLParagraphElement[JC] def nextElementSibling: Element
raw/HTMLParagraphElement[JC] def nextSibling: Node
raw/HTMLParagraphElement[JC] def nodeName: String
raw/HTMLParagraphElement[JC] def nodeType: Int
raw/HTMLParagraphElement[JC] var nodeValue: String
raw/HTMLParagraphElement[JC] def normalize(): Unit
raw/HTMLParagraphElement[JC] def offsetHeight: Double
raw/HTMLParagraphElement[JC] def offsetLeft: Double
raw/HTMLParagraphElement[JC] def offsetParent: Element
raw/HTMLParagraphElement[JC] def offsetTop: Double
raw/HTMLParagraphElement[JC] def offsetWidth: Double
raw/HTMLParagraphElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLParagraphElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLParagraphElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLParagraphElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLParagraphElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLParagraphElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLParagraphElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLParagraphElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLParagraphElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLParagraphElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLParagraphElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLParagraphElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLParagraphElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLParagraphElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLParagraphElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLParagraphElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLParagraphElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLParagraphElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLParagraphElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLParagraphElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLParagraphElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLParagraphElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onended: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLParagraphElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLParagraphElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLParagraphElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLParagraphElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLParagraphElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLParagraphElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLParagraphElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLParagraphElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLParagraphElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLParagraphElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLParagraphElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLParagraphElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLParagraphElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLParagraphElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLParagraphElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLParagraphElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLParagraphElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLParagraphElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLParagraphElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLParagraphElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLParagraphElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLParagraphElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLParagraphElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLParagraphElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLParagraphElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLParagraphElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLParagraphElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLParagraphElement[JC] var outerHTML: String
raw/HTMLParagraphElement[JC] def ownerDocument: Document
raw/HTMLParagraphElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLParagraphElement[JC] var parentElement: HTMLElement
raw/HTMLParagraphElement[JC] def parentNode: Node
raw/HTMLParagraphElement[JC] def prefix: String
raw/HTMLParagraphElement[JC] def previousElementSibling: Element
raw/HTMLParagraphElement[JC] def previousSibling: Node
raw/HTMLParagraphElement[JC] def querySelector(selectors: String): Element
raw/HTMLParagraphElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLParagraphElement[JC] var readyState: js.Any
raw/HTMLParagraphElement[JC] var recordNumber: js.Any
raw/HTMLParagraphElement[JC] def removeAttribute(name: String): Unit
raw/HTMLParagraphElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLParagraphElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLParagraphElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLParagraphElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLParagraphElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLParagraphElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLParagraphElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLParagraphElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLParagraphElement[JC] def scrollHeight: Int
raw/HTMLParagraphElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLParagraphElement[JC] var scrollLeft: Double
raw/HTMLParagraphElement[JC] var scrollTop: Double
raw/HTMLParagraphElement[JC] def scrollWidth: Int
raw/HTMLParagraphElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLParagraphElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLParagraphElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLParagraphElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLParagraphElement[JC] var spellcheck: Boolean
raw/HTMLParagraphElement[JC] def style: CSSStyleDeclaration
raw/HTMLParagraphElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLParagraphElement[JC] def style_ = (value: String): Unit
raw/HTMLParagraphElement[JC] var tabIndex: Int
raw/HTMLParagraphElement[JC] def tagName: String
raw/HTMLParagraphElement[JC] var textContent: String
raw/HTMLParagraphElement[JC] var title: String
raw/HTMLParamElement[JC] var accessKey: String
raw/HTMLParamElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLParamElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLParamElement[JC] def appendChild(newChild: Node): Node
raw/HTMLParamElement[JC] def attributes: NamedNodeMap
raw/HTMLParamElement[JC] def blur(): Unit
raw/HTMLParamElement[JC] def childElementCount: Int
raw/HTMLParamElement[JC] def childNodes: NodeList
raw/HTMLParamElement[JC] def children: HTMLCollection
raw/HTMLParamElement[JC] var classList: DOMTokenList
raw/HTMLParamElement[JC] var className: String
raw/HTMLParamElement[JC] def click(): Unit
raw/HTMLParamElement[JC] def clientHeight: Int
raw/HTMLParamElement[JC] def clientLeft: Int
raw/HTMLParamElement[JC] def clientTop: Int
raw/HTMLParamElement[JC] def clientWidth: Int
raw/HTMLParamElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLParamElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLParamElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLParamElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLParamElement[JC] var contentEditable: String
raw/HTMLParamElement[JC] def dataset: js.Dictionary[String]
raw/HTMLParamElement[JC] var dir: String
raw/HTMLParamElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLParamElement[JC] var draggable: Boolean
raw/HTMLParamElement[JC] var filters: Object
raw/HTMLParamElement[JC] def firstChild: Node
raw/HTMLParamElement[JC] def firstElementChild: Element
raw/HTMLParamElement[JC] def focus(): Unit
raw/HTMLParamElement[JC] def getAttribute(name: String): String
raw/HTMLParamElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLParamElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLParamElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLParamElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLParamElement[JC] def getClientRects(): ClientRectList
raw/HTMLParamElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLParamElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLParamElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLParamElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLParamElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLParamElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLParamElement[JC] def hasAttributes(): Boolean
raw/HTMLParamElement[JC] def hasChildNodes(): Boolean
raw/HTMLParamElement[JC] var id: String
raw/HTMLParamElement[JC] var innerHTML: String
raw/HTMLParamElement[JC] var innerText: String
raw/HTMLParamElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLParamElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLParamElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLParamElement[JC] def isContentEditable: Boolean
raw/HTMLParamElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLParamElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLParamElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLParamElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLParamElement[JC] var lang: String
raw/HTMLParamElement[JC] def lastChild: Node
raw/HTMLParamElement[JC] def lastElementChild: Element
raw/HTMLParamElement[JC] def localName: String
raw/HTMLParamElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLParamElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLParamElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLParamElement[JC] def matches(selector: String): Boolean
raw/HTMLParamElement[JC] var name: String
raw/HTMLParamElement[JC] def namespaceURI: String
raw/HTMLParamElement[JC] def nextElementSibling: Element
raw/HTMLParamElement[JC] def nextSibling: Node
raw/HTMLParamElement[JC] def nodeName: String
raw/HTMLParamElement[JC] def nodeType: Int
raw/HTMLParamElement[JC] var nodeValue: String
raw/HTMLParamElement[JC] def normalize(): Unit
raw/HTMLParamElement[JC] def offsetHeight: Double
raw/HTMLParamElement[JC] def offsetLeft: Double
raw/HTMLParamElement[JC] def offsetParent: Element
raw/HTMLParamElement[JC] def offsetTop: Double
raw/HTMLParamElement[JC] def offsetWidth: Double
raw/HTMLParamElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLParamElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLParamElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLParamElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLParamElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLParamElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLParamElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLParamElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLParamElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLParamElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLParamElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLParamElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLParamElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLParamElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLParamElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLParamElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLParamElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLParamElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLParamElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLParamElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLParamElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLParamElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLParamElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLParamElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onended: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLParamElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLParamElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLParamElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLParamElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLParamElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLParamElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLParamElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLParamElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLParamElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLParamElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLParamElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLParamElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLParamElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLParamElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLParamElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLParamElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLParamElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLParamElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLParamElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLParamElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLParamElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLParamElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLParamElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLParamElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLParamElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLParamElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLParamElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLParamElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLParamElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLParamElement[JC] var outerHTML: String
raw/HTMLParamElement[JC] def ownerDocument: Document
raw/HTMLParamElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLParamElement[JC] var parentElement: HTMLElement
raw/HTMLParamElement[JC] def parentNode: Node
raw/HTMLParamElement[JC] def prefix: String
raw/HTMLParamElement[JC] def previousElementSibling: Element
raw/HTMLParamElement[JC] def previousSibling: Node
raw/HTMLParamElement[JC] def querySelector(selectors: String): Element
raw/HTMLParamElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLParamElement[JC] var readyState: js.Any
raw/HTMLParamElement[JC] var recordNumber: js.Any
raw/HTMLParamElement[JC] def removeAttribute(name: String): Unit
raw/HTMLParamElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLParamElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLParamElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLParamElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLParamElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLParamElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLParamElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLParamElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLParamElement[JC] def scrollHeight: Int
raw/HTMLParamElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLParamElement[JC] var scrollLeft: Double
raw/HTMLParamElement[JC] var scrollTop: Double
raw/HTMLParamElement[JC] def scrollWidth: Int
raw/HTMLParamElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLParamElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLParamElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLParamElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLParamElement[JC] var spellcheck: Boolean
raw/HTMLParamElement[JC] def style: CSSStyleDeclaration
raw/HTMLParamElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLParamElement[JC] def style_ = (value: String): Unit
raw/HTMLParamElement[JC] var tabIndex: Int
raw/HTMLParamElement[JC] def tagName: String
raw/HTMLParamElement[JC] var textContent: String
raw/HTMLParamElement[JC] var title: String
raw/HTMLParamElement[JC] var value: String
raw/HTMLPreElement[JC] var accessKey: String
raw/HTMLPreElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLPreElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLPreElement[JC] def appendChild(newChild: Node): Node
raw/HTMLPreElement[JC] def attributes: NamedNodeMap
raw/HTMLPreElement[JC] def blur(): Unit
raw/HTMLPreElement[JC] def childElementCount: Int
raw/HTMLPreElement[JC] def childNodes: NodeList
raw/HTMLPreElement[JC] def children: HTMLCollection
raw/HTMLPreElement[JC] var classList: DOMTokenList
raw/HTMLPreElement[JC] var className: String
raw/HTMLPreElement[JC] def click(): Unit
raw/HTMLPreElement[JC] def clientHeight: Int
raw/HTMLPreElement[JC] def clientLeft: Int
raw/HTMLPreElement[JC] def clientTop: Int
raw/HTMLPreElement[JC] def clientWidth: Int
raw/HTMLPreElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLPreElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLPreElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLPreElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLPreElement[JC] var contentEditable: String
raw/HTMLPreElement[JC] def dataset: js.Dictionary[String]
raw/HTMLPreElement[JC] var dir: String
raw/HTMLPreElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLPreElement[JC] var draggable: Boolean
raw/HTMLPreElement[JC] var filters: Object
raw/HTMLPreElement[JC] def firstChild: Node
raw/HTMLPreElement[JC] def firstElementChild: Element
raw/HTMLPreElement[JC] def focus(): Unit
raw/HTMLPreElement[JC] def getAttribute(name: String): String
raw/HTMLPreElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLPreElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLPreElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLPreElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLPreElement[JC] def getClientRects(): ClientRectList
raw/HTMLPreElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLPreElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLPreElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLPreElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLPreElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLPreElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLPreElement[JC] def hasAttributes(): Boolean
raw/HTMLPreElement[JC] def hasChildNodes(): Boolean
raw/HTMLPreElement[JC] var id: String
raw/HTMLPreElement[JC] var innerHTML: String
raw/HTMLPreElement[JC] var innerText: String
raw/HTMLPreElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLPreElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLPreElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLPreElement[JC] def isContentEditable: Boolean
raw/HTMLPreElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLPreElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLPreElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLPreElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLPreElement[JC] var lang: String
raw/HTMLPreElement[JC] def lastChild: Node
raw/HTMLPreElement[JC] def lastElementChild: Element
raw/HTMLPreElement[JC] def localName: String
raw/HTMLPreElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLPreElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLPreElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLPreElement[JC] def matches(selector: String): Boolean
raw/HTMLPreElement[JC] def namespaceURI: String
raw/HTMLPreElement[JC] def nextElementSibling: Element
raw/HTMLPreElement[JC] def nextSibling: Node
raw/HTMLPreElement[JC] def nodeName: String
raw/HTMLPreElement[JC] def nodeType: Int
raw/HTMLPreElement[JC] var nodeValue: String
raw/HTMLPreElement[JC] def normalize(): Unit
raw/HTMLPreElement[JC] def offsetHeight: Double
raw/HTMLPreElement[JC] def offsetLeft: Double
raw/HTMLPreElement[JC] def offsetParent: Element
raw/HTMLPreElement[JC] def offsetTop: Double
raw/HTMLPreElement[JC] def offsetWidth: Double
raw/HTMLPreElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLPreElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLPreElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLPreElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLPreElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLPreElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLPreElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLPreElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLPreElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLPreElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLPreElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLPreElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLPreElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLPreElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLPreElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLPreElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLPreElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLPreElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLPreElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLPreElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLPreElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLPreElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLPreElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLPreElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onended: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLPreElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLPreElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLPreElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLPreElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLPreElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLPreElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLPreElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLPreElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLPreElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLPreElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLPreElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLPreElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLPreElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLPreElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLPreElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLPreElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLPreElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLPreElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLPreElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLPreElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLPreElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLPreElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLPreElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLPreElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLPreElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLPreElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLPreElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLPreElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLPreElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLPreElement[JC] var outerHTML: String
raw/HTMLPreElement[JC] def ownerDocument: Document
raw/HTMLPreElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLPreElement[JC] var parentElement: HTMLElement
raw/HTMLPreElement[JC] def parentNode: Node
raw/HTMLPreElement[JC] def prefix: String
raw/HTMLPreElement[JC] def previousElementSibling: Element
raw/HTMLPreElement[JC] def previousSibling: Node
raw/HTMLPreElement[JC] def querySelector(selectors: String): Element
raw/HTMLPreElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLPreElement[JC] var readyState: js.Any
raw/HTMLPreElement[JC] var recordNumber: js.Any
raw/HTMLPreElement[JC] def removeAttribute(name: String): Unit
raw/HTMLPreElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLPreElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLPreElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLPreElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLPreElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLPreElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLPreElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLPreElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLPreElement[JC] def scrollHeight: Int
raw/HTMLPreElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLPreElement[JC] var scrollLeft: Double
raw/HTMLPreElement[JC] var scrollTop: Double
raw/HTMLPreElement[JC] def scrollWidth: Int
raw/HTMLPreElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLPreElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLPreElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLPreElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLPreElement[JC] var spellcheck: Boolean
raw/HTMLPreElement[JC] def style: CSSStyleDeclaration
raw/HTMLPreElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLPreElement[JC] def style_ = (value: String): Unit
raw/HTMLPreElement[JC] var tabIndex: Int
raw/HTMLPreElement[JC] def tagName: String
raw/HTMLPreElement[JC] var textContent: String
raw/HTMLPreElement[JC] var title: String
raw/HTMLProgressElement[JC] var accessKey: String
raw/HTMLProgressElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLProgressElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLProgressElement[JC] def appendChild(newChild: Node): Node
raw/HTMLProgressElement[JC] def attributes: NamedNodeMap
raw/HTMLProgressElement[JC] def blur(): Unit
raw/HTMLProgressElement[JC] def childElementCount: Int
raw/HTMLProgressElement[JC] def childNodes: NodeList
raw/HTMLProgressElement[JC] def children: HTMLCollection
raw/HTMLProgressElement[JC] var classList: DOMTokenList
raw/HTMLProgressElement[JC] var className: String
raw/HTMLProgressElement[JC] def click(): Unit
raw/HTMLProgressElement[JC] def clientHeight: Int
raw/HTMLProgressElement[JC] def clientLeft: Int
raw/HTMLProgressElement[JC] def clientTop: Int
raw/HTMLProgressElement[JC] def clientWidth: Int
raw/HTMLProgressElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLProgressElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLProgressElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLProgressElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLProgressElement[JC] var contentEditable: String
raw/HTMLProgressElement[JC] def dataset: js.Dictionary[String]
raw/HTMLProgressElement[JC] var dir: String
raw/HTMLProgressElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLProgressElement[JC] var draggable: Boolean
raw/HTMLProgressElement[JC] var filters: Object
raw/HTMLProgressElement[JC] def firstChild: Node
raw/HTMLProgressElement[JC] def firstElementChild: Element
raw/HTMLProgressElement[JC] def focus(): Unit
raw/HTMLProgressElement[JC] var form: HTMLFormElement
raw/HTMLProgressElement[JC] def getAttribute(name: String): String
raw/HTMLProgressElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLProgressElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLProgressElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLProgressElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLProgressElement[JC] def getClientRects(): ClientRectList
raw/HTMLProgressElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLProgressElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLProgressElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLProgressElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLProgressElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLProgressElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLProgressElement[JC] def hasAttributes(): Boolean
raw/HTMLProgressElement[JC] def hasChildNodes(): Boolean
raw/HTMLProgressElement[JC] var id: String
raw/HTMLProgressElement[JC] var innerHTML: String
raw/HTMLProgressElement[JC] var innerText: String
raw/HTMLProgressElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLProgressElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLProgressElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLProgressElement[JC] def isContentEditable: Boolean
raw/HTMLProgressElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLProgressElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLProgressElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLProgressElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLProgressElement[JC] var lang: String
raw/HTMLProgressElement[JC] def lastChild: Node
raw/HTMLProgressElement[JC] def lastElementChild: Element
raw/HTMLProgressElement[JC] def localName: String
raw/HTMLProgressElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLProgressElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLProgressElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLProgressElement[JC] def matches(selector: String): Boolean
raw/HTMLProgressElement[JC] var max: Double
raw/HTMLProgressElement[JC] def namespaceURI: String
raw/HTMLProgressElement[JC] def nextElementSibling: Element
raw/HTMLProgressElement[JC] def nextSibling: Node
raw/HTMLProgressElement[JC] def nodeName: String
raw/HTMLProgressElement[JC] def nodeType: Int
raw/HTMLProgressElement[JC] var nodeValue: String
raw/HTMLProgressElement[JC] def normalize(): Unit
raw/HTMLProgressElement[JC] def offsetHeight: Double
raw/HTMLProgressElement[JC] def offsetLeft: Double
raw/HTMLProgressElement[JC] def offsetParent: Element
raw/HTMLProgressElement[JC] def offsetTop: Double
raw/HTMLProgressElement[JC] def offsetWidth: Double
raw/HTMLProgressElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLProgressElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLProgressElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLProgressElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLProgressElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLProgressElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLProgressElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLProgressElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLProgressElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLProgressElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLProgressElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLProgressElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLProgressElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLProgressElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLProgressElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLProgressElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLProgressElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLProgressElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLProgressElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLProgressElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLProgressElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLProgressElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onended: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLProgressElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLProgressElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLProgressElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLProgressElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLProgressElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLProgressElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLProgressElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLProgressElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLProgressElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLProgressElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLProgressElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLProgressElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLProgressElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLProgressElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLProgressElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLProgressElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLProgressElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLProgressElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLProgressElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLProgressElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLProgressElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLProgressElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLProgressElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLProgressElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLProgressElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLProgressElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLProgressElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLProgressElement[JC] var outerHTML: String
raw/HTMLProgressElement[JC] def ownerDocument: Document
raw/HTMLProgressElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLProgressElement[JC] var parentElement: HTMLElement
raw/HTMLProgressElement[JC] def parentNode: Node
raw/HTMLProgressElement[JC] def position: Double
raw/HTMLProgressElement[JC] def prefix: String
raw/HTMLProgressElement[JC] def previousElementSibling: Element
raw/HTMLProgressElement[JC] def previousSibling: Node
raw/HTMLProgressElement[JC] def querySelector(selectors: String): Element
raw/HTMLProgressElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLProgressElement[JC] var readyState: js.Any
raw/HTMLProgressElement[JC] var recordNumber: js.Any
raw/HTMLProgressElement[JC] def removeAttribute(name: String): Unit
raw/HTMLProgressElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLProgressElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLProgressElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLProgressElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLProgressElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLProgressElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLProgressElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLProgressElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLProgressElement[JC] def scrollHeight: Int
raw/HTMLProgressElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLProgressElement[JC] var scrollLeft: Double
raw/HTMLProgressElement[JC] var scrollTop: Double
raw/HTMLProgressElement[JC] def scrollWidth: Int
raw/HTMLProgressElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLProgressElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLProgressElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLProgressElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLProgressElement[JC] var spellcheck: Boolean
raw/HTMLProgressElement[JC] def style: CSSStyleDeclaration
raw/HTMLProgressElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLProgressElement[JC] def style_ = (value: String): Unit
raw/HTMLProgressElement[JC] var tabIndex: Int
raw/HTMLProgressElement[JC] def tagName: String
raw/HTMLProgressElement[JC] var textContent: String
raw/HTMLProgressElement[JC] var title: String
raw/HTMLProgressElement[JC] var value: Double
raw/HTMLQuoteElement[JC] var accessKey: String
raw/HTMLQuoteElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLQuoteElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLQuoteElement[JC] def appendChild(newChild: Node): Node
raw/HTMLQuoteElement[JC] def attributes: NamedNodeMap
raw/HTMLQuoteElement[JC] def blur(): Unit
raw/HTMLQuoteElement[JC] def childElementCount: Int
raw/HTMLQuoteElement[JC] def childNodes: NodeList
raw/HTMLQuoteElement[JC] def children: HTMLCollection
raw/HTMLQuoteElement[JC] var cite: String
raw/HTMLQuoteElement[JC] var classList: DOMTokenList
raw/HTMLQuoteElement[JC] var className: String
raw/HTMLQuoteElement[JC] def click(): Unit
raw/HTMLQuoteElement[JC] def clientHeight: Int
raw/HTMLQuoteElement[JC] def clientLeft: Int
raw/HTMLQuoteElement[JC] def clientTop: Int
raw/HTMLQuoteElement[JC] def clientWidth: Int
raw/HTMLQuoteElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLQuoteElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLQuoteElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLQuoteElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLQuoteElement[JC] var contentEditable: String
raw/HTMLQuoteElement[JC] def dataset: js.Dictionary[String]
raw/HTMLQuoteElement[JC] var dateTime: String
raw/HTMLQuoteElement[JC] var dir: String
raw/HTMLQuoteElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLQuoteElement[JC] var draggable: Boolean
raw/HTMLQuoteElement[JC] var filters: Object
raw/HTMLQuoteElement[JC] def firstChild: Node
raw/HTMLQuoteElement[JC] def firstElementChild: Element
raw/HTMLQuoteElement[JC] def focus(): Unit
raw/HTMLQuoteElement[JC] def getAttribute(name: String): String
raw/HTMLQuoteElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLQuoteElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLQuoteElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLQuoteElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLQuoteElement[JC] def getClientRects(): ClientRectList
raw/HTMLQuoteElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLQuoteElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLQuoteElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLQuoteElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLQuoteElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLQuoteElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLQuoteElement[JC] def hasAttributes(): Boolean
raw/HTMLQuoteElement[JC] def hasChildNodes(): Boolean
raw/HTMLQuoteElement[JC] var id: String
raw/HTMLQuoteElement[JC] var innerHTML: String
raw/HTMLQuoteElement[JC] var innerText: String
raw/HTMLQuoteElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLQuoteElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLQuoteElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLQuoteElement[JC] def isContentEditable: Boolean
raw/HTMLQuoteElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLQuoteElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLQuoteElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLQuoteElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLQuoteElement[JC] var lang: String
raw/HTMLQuoteElement[JC] def lastChild: Node
raw/HTMLQuoteElement[JC] def lastElementChild: Element
raw/HTMLQuoteElement[JC] def localName: String
raw/HTMLQuoteElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLQuoteElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLQuoteElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLQuoteElement[JC] def matches(selector: String): Boolean
raw/HTMLQuoteElement[JC] def namespaceURI: String
raw/HTMLQuoteElement[JC] def nextElementSibling: Element
raw/HTMLQuoteElement[JC] def nextSibling: Node
raw/HTMLQuoteElement[JC] def nodeName: String
raw/HTMLQuoteElement[JC] def nodeType: Int
raw/HTMLQuoteElement[JC] var nodeValue: String
raw/HTMLQuoteElement[JC] def normalize(): Unit
raw/HTMLQuoteElement[JC] def offsetHeight: Double
raw/HTMLQuoteElement[JC] def offsetLeft: Double
raw/HTMLQuoteElement[JC] def offsetParent: Element
raw/HTMLQuoteElement[JC] def offsetTop: Double
raw/HTMLQuoteElement[JC] def offsetWidth: Double
raw/HTMLQuoteElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLQuoteElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLQuoteElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLQuoteElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLQuoteElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLQuoteElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLQuoteElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLQuoteElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLQuoteElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLQuoteElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLQuoteElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLQuoteElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLQuoteElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLQuoteElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLQuoteElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLQuoteElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLQuoteElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLQuoteElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLQuoteElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLQuoteElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLQuoteElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLQuoteElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onended: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLQuoteElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLQuoteElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLQuoteElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLQuoteElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLQuoteElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLQuoteElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLQuoteElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLQuoteElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLQuoteElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLQuoteElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLQuoteElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLQuoteElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLQuoteElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLQuoteElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLQuoteElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLQuoteElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLQuoteElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLQuoteElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLQuoteElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLQuoteElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLQuoteElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLQuoteElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLQuoteElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLQuoteElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLQuoteElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLQuoteElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLQuoteElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLQuoteElement[JC] var outerHTML: String
raw/HTMLQuoteElement[JC] def ownerDocument: Document
raw/HTMLQuoteElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLQuoteElement[JC] var parentElement: HTMLElement
raw/HTMLQuoteElement[JC] def parentNode: Node
raw/HTMLQuoteElement[JC] def prefix: String
raw/HTMLQuoteElement[JC] def previousElementSibling: Element
raw/HTMLQuoteElement[JC] def previousSibling: Node
raw/HTMLQuoteElement[JC] def querySelector(selectors: String): Element
raw/HTMLQuoteElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLQuoteElement[JC] var readyState: js.Any
raw/HTMLQuoteElement[JC] var recordNumber: js.Any
raw/HTMLQuoteElement[JC] def removeAttribute(name: String): Unit
raw/HTMLQuoteElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLQuoteElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLQuoteElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLQuoteElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLQuoteElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLQuoteElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLQuoteElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLQuoteElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLQuoteElement[JC] def scrollHeight: Int
raw/HTMLQuoteElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLQuoteElement[JC] var scrollLeft: Double
raw/HTMLQuoteElement[JC] var scrollTop: Double
raw/HTMLQuoteElement[JC] def scrollWidth: Int
raw/HTMLQuoteElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLQuoteElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLQuoteElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLQuoteElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLQuoteElement[JC] var spellcheck: Boolean
raw/HTMLQuoteElement[JC] def style: CSSStyleDeclaration
raw/HTMLQuoteElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLQuoteElement[JC] def style_ = (value: String): Unit
raw/HTMLQuoteElement[JC] var tabIndex: Int
raw/HTMLQuoteElement[JC] def tagName: String
raw/HTMLQuoteElement[JC] var textContent: String
raw/HTMLQuoteElement[JC] var title: String
raw/HTMLScriptElement[JC] var accessKey: String
raw/HTMLScriptElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLScriptElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLScriptElement[JC] def appendChild(newChild: Node): Node
raw/HTMLScriptElement[JC] var async: Boolean
raw/HTMLScriptElement[JC] def attributes: NamedNodeMap
raw/HTMLScriptElement[JC] def blur(): Unit
raw/HTMLScriptElement[JC] var charset: String
raw/HTMLScriptElement[JC] def childElementCount: Int
raw/HTMLScriptElement[JC] def childNodes: NodeList
raw/HTMLScriptElement[JC] def children: HTMLCollection
raw/HTMLScriptElement[JC] var classList: DOMTokenList
raw/HTMLScriptElement[JC] var className: String
raw/HTMLScriptElement[JC] def click(): Unit
raw/HTMLScriptElement[JC] def clientHeight: Int
raw/HTMLScriptElement[JC] def clientLeft: Int
raw/HTMLScriptElement[JC] def clientTop: Int
raw/HTMLScriptElement[JC] def clientWidth: Int
raw/HTMLScriptElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLScriptElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLScriptElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLScriptElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLScriptElement[JC] var contentEditable: String
raw/HTMLScriptElement[JC] def dataset: js.Dictionary[String]
raw/HTMLScriptElement[JC] var defer: Boolean
raw/HTMLScriptElement[JC] var dir: String
raw/HTMLScriptElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLScriptElement[JC] var draggable: Boolean
raw/HTMLScriptElement[JC] var event: String
raw/HTMLScriptElement[JC] var filters: Object
raw/HTMLScriptElement[JC] def firstChild: Node
raw/HTMLScriptElement[JC] def firstElementChild: Element
raw/HTMLScriptElement[JC] def focus(): Unit
raw/HTMLScriptElement[JC] def getAttribute(name: String): String
raw/HTMLScriptElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLScriptElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLScriptElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLScriptElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLScriptElement[JC] def getClientRects(): ClientRectList
raw/HTMLScriptElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLScriptElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLScriptElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLScriptElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLScriptElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLScriptElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLScriptElement[JC] def hasAttributes(): Boolean
raw/HTMLScriptElement[JC] def hasChildNodes(): Boolean
raw/HTMLScriptElement[JC] var id: String
raw/HTMLScriptElement[JC] var innerHTML: String
raw/HTMLScriptElement[JC] var innerText: String
raw/HTMLScriptElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLScriptElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLScriptElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLScriptElement[JC] def isContentEditable: Boolean
raw/HTMLScriptElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLScriptElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLScriptElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLScriptElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLScriptElement[JC] var lang: String
raw/HTMLScriptElement[JC] def lastChild: Node
raw/HTMLScriptElement[JC] def lastElementChild: Element
raw/HTMLScriptElement[JC] def localName: String
raw/HTMLScriptElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLScriptElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLScriptElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLScriptElement[JC] def matches(selector: String): Boolean
raw/HTMLScriptElement[JC] def namespaceURI: String
raw/HTMLScriptElement[JC] def nextElementSibling: Element
raw/HTMLScriptElement[JC] def nextSibling: Node
raw/HTMLScriptElement[JC] def nodeName: String
raw/HTMLScriptElement[JC] def nodeType: Int
raw/HTMLScriptElement[JC] var nodeValue: String
raw/HTMLScriptElement[JC] def normalize(): Unit
raw/HTMLScriptElement[JC] def offsetHeight: Double
raw/HTMLScriptElement[JC] def offsetLeft: Double
raw/HTMLScriptElement[JC] def offsetParent: Element
raw/HTMLScriptElement[JC] def offsetTop: Double
raw/HTMLScriptElement[JC] def offsetWidth: Double
raw/HTMLScriptElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLScriptElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLScriptElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLScriptElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLScriptElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLScriptElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLScriptElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLScriptElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLScriptElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLScriptElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLScriptElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLScriptElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLScriptElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLScriptElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLScriptElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLScriptElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLScriptElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLScriptElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLScriptElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLScriptElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLScriptElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLScriptElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onended: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLScriptElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLScriptElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLScriptElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLScriptElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLScriptElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLScriptElement[JC] var onload: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLScriptElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLScriptElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLScriptElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLScriptElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLScriptElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLScriptElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLScriptElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLScriptElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLScriptElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLScriptElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLScriptElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLScriptElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLScriptElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLScriptElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLScriptElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLScriptElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLScriptElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLScriptElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLScriptElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLScriptElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLScriptElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLScriptElement[JC] var outerHTML: String
raw/HTMLScriptElement[JC] def ownerDocument: Document
raw/HTMLScriptElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLScriptElement[JC] var parentElement: HTMLElement
raw/HTMLScriptElement[JC] def parentNode: Node
raw/HTMLScriptElement[JC] def prefix: String
raw/HTMLScriptElement[JC] def previousElementSibling: Element
raw/HTMLScriptElement[JC] def previousSibling: Node
raw/HTMLScriptElement[JC] def querySelector(selectors: String): Element
raw/HTMLScriptElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLScriptElement[JC] var readyState: js.Any
raw/HTMLScriptElement[JC] var recordNumber: js.Any
raw/HTMLScriptElement[JC] def removeAttribute(name: String): Unit
raw/HTMLScriptElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLScriptElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLScriptElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLScriptElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLScriptElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLScriptElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLScriptElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLScriptElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLScriptElement[JC] def scrollHeight: Int
raw/HTMLScriptElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLScriptElement[JC] var scrollLeft: Double
raw/HTMLScriptElement[JC] var scrollTop: Double
raw/HTMLScriptElement[JC] def scrollWidth: Int
raw/HTMLScriptElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLScriptElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLScriptElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLScriptElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLScriptElement[JC] var spellcheck: Boolean
raw/HTMLScriptElement[JC] var src: String
raw/HTMLScriptElement[JC] def style: CSSStyleDeclaration
raw/HTMLScriptElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLScriptElement[JC] def style_ = (value: String): Unit
raw/HTMLScriptElement[JC] var tabIndex: Int
raw/HTMLScriptElement[JC] def tagName: String
raw/HTMLScriptElement[JC] var text: String
raw/HTMLScriptElement[JC] var textContent: String
raw/HTMLScriptElement[JC] var title: String
raw/HTMLScriptElement[JC] var `type`: String
raw/HTMLSelectElement[JC] var accessKey: String
raw/HTMLSelectElement[JC] def add(element: HTMLElement, before: js.Any?): Unit
raw/HTMLSelectElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLSelectElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLSelectElement[JC] def appendChild(newChild: Node): Node
raw/HTMLSelectElement[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(name: String): js.Any
raw/HTMLSelectElement[JC] def attributes: NamedNodeMap
raw/HTMLSelectElement[JC] var autofocus: Boolean
raw/HTMLSelectElement[JC] def blur(): Unit
raw/HTMLSelectElement[JC] def checkValidity(): Boolean
raw/HTMLSelectElement[JC] def childElementCount: Int
raw/HTMLSelectElement[JC] def childNodes: NodeList
raw/HTMLSelectElement[JC] def children: HTMLCollection
raw/HTMLSelectElement[JC] var classList: DOMTokenList
raw/HTMLSelectElement[JC] var className: String
raw/HTMLSelectElement[JC] def click(): Unit
raw/HTMLSelectElement[JC] def clientHeight: Int
raw/HTMLSelectElement[JC] def clientLeft: Int
raw/HTMLSelectElement[JC] def clientTop: Int
raw/HTMLSelectElement[JC] def clientWidth: Int
raw/HTMLSelectElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLSelectElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLSelectElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLSelectElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLSelectElement[JC] var contentEditable: String
raw/HTMLSelectElement[JC] def dataset: js.Dictionary[String]
raw/HTMLSelectElement[JC] var dir: String
raw/HTMLSelectElement[JC] var disabled: Boolean
raw/HTMLSelectElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLSelectElement[JC] var draggable: Boolean
raw/HTMLSelectElement[JC] var filters: Object
raw/HTMLSelectElement[JC] def firstChild: Node
raw/HTMLSelectElement[JC] def firstElementChild: Element
raw/HTMLSelectElement[JC] def focus(): Unit
raw/HTMLSelectElement[JC] def form: HTMLFormElement
raw/HTMLSelectElement[JC] def getAttribute(name: String): String
raw/HTMLSelectElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLSelectElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLSelectElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLSelectElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLSelectElement[JC] def getClientRects(): ClientRectList
raw/HTMLSelectElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLSelectElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLSelectElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLSelectElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLSelectElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLSelectElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLSelectElement[JC] def hasAttributes(): Boolean
raw/HTMLSelectElement[JC] def hasChildNodes(): Boolean
raw/HTMLSelectElement[JC] var id: String
raw/HTMLSelectElement[JC] var innerHTML: String
raw/HTMLSelectElement[JC] var innerText: String
raw/HTMLSelectElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLSelectElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLSelectElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLSelectElement[JC] def isContentEditable: Boolean
raw/HTMLSelectElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLSelectElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLSelectElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLSelectElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLSelectElement[JC] def item(name: js.Any?, index: js.Any?): js.Dynamic
raw/HTMLSelectElement[JC] var lang: String
raw/HTMLSelectElement[JC] def lastChild: Node
raw/HTMLSelectElement[JC] def lastElementChild: Element
raw/HTMLSelectElement[JC] var length: Int
raw/HTMLSelectElement[JC] def localName: String
raw/HTMLSelectElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLSelectElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLSelectElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLSelectElement[JC] def matches(selector: String): Boolean
raw/HTMLSelectElement[JC] var multiple: Boolean
raw/HTMLSelectElement[JC] var name: String
raw/HTMLSelectElement[JC] def namedItem(name: String): js.Dynamic
raw/HTMLSelectElement[JC] def namespaceURI: String
raw/HTMLSelectElement[JC] def nextElementSibling: Element
raw/HTMLSelectElement[JC] def nextSibling: Node
raw/HTMLSelectElement[JC] def nodeName: String
raw/HTMLSelectElement[JC] def nodeType: Int
raw/HTMLSelectElement[JC] var nodeValue: String
raw/HTMLSelectElement[JC] def normalize(): Unit
raw/HTMLSelectElement[JC] def offsetHeight: Double
raw/HTMLSelectElement[JC] def offsetLeft: Double
raw/HTMLSelectElement[JC] def offsetParent: Element
raw/HTMLSelectElement[JC] def offsetTop: Double
raw/HTMLSelectElement[JC] def offsetWidth: Double
raw/HTMLSelectElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLSelectElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLSelectElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLSelectElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLSelectElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLSelectElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLSelectElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLSelectElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLSelectElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLSelectElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLSelectElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLSelectElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLSelectElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLSelectElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLSelectElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLSelectElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLSelectElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLSelectElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLSelectElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLSelectElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLSelectElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLSelectElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onended: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLSelectElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLSelectElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLSelectElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLSelectElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLSelectElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLSelectElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLSelectElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLSelectElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLSelectElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLSelectElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLSelectElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLSelectElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLSelectElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLSelectElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLSelectElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLSelectElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLSelectElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLSelectElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLSelectElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLSelectElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLSelectElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLSelectElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLSelectElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLSelectElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLSelectElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLSelectElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLSelectElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLSelectElement[JC] val options: js.Array[HTMLOptionElement]
raw/HTMLSelectElement[JC] var outerHTML: String
raw/HTMLSelectElement[JC] def ownerDocument: Document
raw/HTMLSelectElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLSelectElement[JC] var parentElement: HTMLElement
raw/HTMLSelectElement[JC] def parentNode: Node
raw/HTMLSelectElement[JC] def prefix: String
raw/HTMLSelectElement[JC] def previousElementSibling: Element
raw/HTMLSelectElement[JC] def previousSibling: Node
raw/HTMLSelectElement[JC] def querySelector(selectors: String): Element
raw/HTMLSelectElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLSelectElement[JC] var readyState: js.Any
raw/HTMLSelectElement[JC] var recordNumber: js.Any
raw/HTMLSelectElement[JC] def remove(index: Int?): Unit
raw/HTMLSelectElement[JC] def removeAttribute(name: String): Unit
raw/HTMLSelectElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLSelectElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLSelectElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLSelectElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLSelectElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLSelectElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLSelectElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLSelectElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLSelectElement[JC] var required: Boolean
raw/HTMLSelectElement[JC] def scrollHeight: Int
raw/HTMLSelectElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLSelectElement[JC] var scrollLeft: Double
raw/HTMLSelectElement[JC] var scrollTop: Double
raw/HTMLSelectElement[JC] def scrollWidth: Int
raw/HTMLSelectElement[JC] var selectedIndex: Int
raw/HTMLSelectElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLSelectElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLSelectElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLSelectElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLSelectElement[JC] def setCustomValidity(error: String): Unit
raw/HTMLSelectElement[JC] var size: Int
raw/HTMLSelectElement[JC] var spellcheck: Boolean
raw/HTMLSelectElement[JC] def style: CSSStyleDeclaration
raw/HTMLSelectElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLSelectElement[JC] def style_ = (value: String): Unit
raw/HTMLSelectElement[JC] var tabIndex: Int
raw/HTMLSelectElement[JC] def tagName: String
raw/HTMLSelectElement[JC] var textContent: String
raw/HTMLSelectElement[JC] var title: String
raw/HTMLSelectElement[JC] def `type`: String
raw/HTMLSelectElement[JC] @scala.scalajs.js.annotation.JSBracketAccess def update(name: String, v: js.Any): Unit
raw/HTMLSelectElement[JC] def validationMessage: String
raw/HTMLSelectElement[JC] def validity: ValidityState
raw/HTMLSelectElement[JC] var value: String
raw/HTMLSelectElement[JC] def willValidate: Boolean
raw/HTMLSourceElement[JC] var accessKey: String
raw/HTMLSourceElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLSourceElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLSourceElement[JC] def appendChild(newChild: Node): Node
raw/HTMLSourceElement[JC] def attributes: NamedNodeMap
raw/HTMLSourceElement[JC] def blur(): Unit
raw/HTMLSourceElement[JC] def childElementCount: Int
raw/HTMLSourceElement[JC] def childNodes: NodeList
raw/HTMLSourceElement[JC] def children: HTMLCollection
raw/HTMLSourceElement[JC] var classList: DOMTokenList
raw/HTMLSourceElement[JC] var className: String
raw/HTMLSourceElement[JC] def click(): Unit
raw/HTMLSourceElement[JC] def clientHeight: Int
raw/HTMLSourceElement[JC] def clientLeft: Int
raw/HTMLSourceElement[JC] def clientTop: Int
raw/HTMLSourceElement[JC] def clientWidth: Int
raw/HTMLSourceElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLSourceElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLSourceElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLSourceElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLSourceElement[JC] var contentEditable: String
raw/HTMLSourceElement[JC] def dataset: js.Dictionary[String]
raw/HTMLSourceElement[JC] var dir: String
raw/HTMLSourceElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLSourceElement[JC] var draggable: Boolean
raw/HTMLSourceElement[JC] var filters: Object
raw/HTMLSourceElement[JC] def firstChild: Node
raw/HTMLSourceElement[JC] def firstElementChild: Element
raw/HTMLSourceElement[JC] def focus(): Unit
raw/HTMLSourceElement[JC] def getAttribute(name: String): String
raw/HTMLSourceElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLSourceElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLSourceElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLSourceElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLSourceElement[JC] def getClientRects(): ClientRectList
raw/HTMLSourceElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLSourceElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLSourceElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLSourceElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLSourceElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLSourceElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLSourceElement[JC] def hasAttributes(): Boolean
raw/HTMLSourceElement[JC] def hasChildNodes(): Boolean
raw/HTMLSourceElement[JC] var id: String
raw/HTMLSourceElement[JC] var innerHTML: String
raw/HTMLSourceElement[JC] var innerText: String
raw/HTMLSourceElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLSourceElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLSourceElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLSourceElement[JC] def isContentEditable: Boolean
raw/HTMLSourceElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLSourceElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLSourceElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLSourceElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLSourceElement[JC] var lang: String
raw/HTMLSourceElement[JC] def lastChild: Node
raw/HTMLSourceElement[JC] def lastElementChild: Element
raw/HTMLSourceElement[JC] def localName: String
raw/HTMLSourceElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLSourceElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLSourceElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLSourceElement[JC] def matches(selector: String): Boolean
raw/HTMLSourceElement[JC] var media: String
raw/HTMLSourceElement[JC] def namespaceURI: String
raw/HTMLSourceElement[JC] def nextElementSibling: Element
raw/HTMLSourceElement[JC] def nextSibling: Node
raw/HTMLSourceElement[JC] def nodeName: String
raw/HTMLSourceElement[JC] def nodeType: Int
raw/HTMLSourceElement[JC] var nodeValue: String
raw/HTMLSourceElement[JC] def normalize(): Unit
raw/HTMLSourceElement[JC] def offsetHeight: Double
raw/HTMLSourceElement[JC] def offsetLeft: Double
raw/HTMLSourceElement[JC] def offsetParent: Element
raw/HTMLSourceElement[JC] def offsetTop: Double
raw/HTMLSourceElement[JC] def offsetWidth: Double
raw/HTMLSourceElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLSourceElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLSourceElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLSourceElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLSourceElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLSourceElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLSourceElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLSourceElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLSourceElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLSourceElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLSourceElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLSourceElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLSourceElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLSourceElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLSourceElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLSourceElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLSourceElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLSourceElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLSourceElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLSourceElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLSourceElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLSourceElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onended: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLSourceElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLSourceElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLSourceElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLSourceElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLSourceElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLSourceElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLSourceElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLSourceElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLSourceElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLSourceElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLSourceElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLSourceElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLSourceElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLSourceElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLSourceElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLSourceElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLSourceElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLSourceElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLSourceElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLSourceElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLSourceElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLSourceElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLSourceElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLSourceElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLSourceElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLSourceElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLSourceElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLSourceElement[JC] var outerHTML: String
raw/HTMLSourceElement[JC] def ownerDocument: Document
raw/HTMLSourceElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLSourceElement[JC] var parentElement: HTMLElement
raw/HTMLSourceElement[JC] def parentNode: Node
raw/HTMLSourceElement[JC] def prefix: String
raw/HTMLSourceElement[JC] def previousElementSibling: Element
raw/HTMLSourceElement[JC] def previousSibling: Node
raw/HTMLSourceElement[JC] def querySelector(selectors: String): Element
raw/HTMLSourceElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLSourceElement[JC] var readyState: js.Any
raw/HTMLSourceElement[JC] var recordNumber: js.Any
raw/HTMLSourceElement[JC] def removeAttribute(name: String): Unit
raw/HTMLSourceElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLSourceElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLSourceElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLSourceElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLSourceElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLSourceElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLSourceElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLSourceElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLSourceElement[JC] def scrollHeight: Int
raw/HTMLSourceElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLSourceElement[JC] var scrollLeft: Double
raw/HTMLSourceElement[JC] var scrollTop: Double
raw/HTMLSourceElement[JC] def scrollWidth: Int
raw/HTMLSourceElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLSourceElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLSourceElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLSourceElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLSourceElement[JC] var spellcheck: Boolean
raw/HTMLSourceElement[JC] var src: String
raw/HTMLSourceElement[JC] def style: CSSStyleDeclaration
raw/HTMLSourceElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLSourceElement[JC] def style_ = (value: String): Unit
raw/HTMLSourceElement[JC] var tabIndex: Int
raw/HTMLSourceElement[JC] def tagName: String
raw/HTMLSourceElement[JC] var textContent: String
raw/HTMLSourceElement[JC] var title: String
raw/HTMLSourceElement[JC] var `type`: String
raw/HTMLSpanElement[JC] var accessKey: String
raw/HTMLSpanElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLSpanElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLSpanElement[JC] def appendChild(newChild: Node): Node
raw/HTMLSpanElement[JC] def attributes: NamedNodeMap
raw/HTMLSpanElement[JC] def blur(): Unit
raw/HTMLSpanElement[JC] def childElementCount: Int
raw/HTMLSpanElement[JC] def childNodes: NodeList
raw/HTMLSpanElement[JC] def children: HTMLCollection
raw/HTMLSpanElement[JC] var classList: DOMTokenList
raw/HTMLSpanElement[JC] var className: String
raw/HTMLSpanElement[JC] def click(): Unit
raw/HTMLSpanElement[JC] def clientHeight: Int
raw/HTMLSpanElement[JC] def clientLeft: Int
raw/HTMLSpanElement[JC] def clientTop: Int
raw/HTMLSpanElement[JC] def clientWidth: Int
raw/HTMLSpanElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLSpanElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLSpanElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLSpanElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLSpanElement[JC] var contentEditable: String
raw/HTMLSpanElement[JC] def dataset: js.Dictionary[String]
raw/HTMLSpanElement[JC] var dir: String
raw/HTMLSpanElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLSpanElement[JC] var draggable: Boolean
raw/HTMLSpanElement[JC] var filters: Object
raw/HTMLSpanElement[JC] def firstChild: Node
raw/HTMLSpanElement[JC] def firstElementChild: Element
raw/HTMLSpanElement[JC] def focus(): Unit
raw/HTMLSpanElement[JC] def getAttribute(name: String): String
raw/HTMLSpanElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLSpanElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLSpanElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLSpanElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLSpanElement[JC] def getClientRects(): ClientRectList
raw/HTMLSpanElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLSpanElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLSpanElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLSpanElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLSpanElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLSpanElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLSpanElement[JC] def hasAttributes(): Boolean
raw/HTMLSpanElement[JC] def hasChildNodes(): Boolean
raw/HTMLSpanElement[JC] var id: String
raw/HTMLSpanElement[JC] var innerHTML: String
raw/HTMLSpanElement[JC] var innerText: String
raw/HTMLSpanElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLSpanElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLSpanElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLSpanElement[JC] def isContentEditable: Boolean
raw/HTMLSpanElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLSpanElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLSpanElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLSpanElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLSpanElement[JC] var lang: String
raw/HTMLSpanElement[JC] def lastChild: Node
raw/HTMLSpanElement[JC] def lastElementChild: Element
raw/HTMLSpanElement[JC] def localName: String
raw/HTMLSpanElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLSpanElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLSpanElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLSpanElement[JC] def matches(selector: String): Boolean
raw/HTMLSpanElement[JC] def namespaceURI: String
raw/HTMLSpanElement[JC] def nextElementSibling: Element
raw/HTMLSpanElement[JC] def nextSibling: Node
raw/HTMLSpanElement[JC] def nodeName: String
raw/HTMLSpanElement[JC] def nodeType: Int
raw/HTMLSpanElement[JC] var nodeValue: String
raw/HTMLSpanElement[JC] def normalize(): Unit
raw/HTMLSpanElement[JC] def offsetHeight: Double
raw/HTMLSpanElement[JC] def offsetLeft: Double
raw/HTMLSpanElement[JC] def offsetParent: Element
raw/HTMLSpanElement[JC] def offsetTop: Double
raw/HTMLSpanElement[JC] def offsetWidth: Double
raw/HTMLSpanElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLSpanElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLSpanElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLSpanElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLSpanElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLSpanElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLSpanElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLSpanElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLSpanElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLSpanElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLSpanElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLSpanElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLSpanElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLSpanElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLSpanElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLSpanElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLSpanElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLSpanElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLSpanElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLSpanElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLSpanElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLSpanElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onended: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLSpanElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLSpanElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLSpanElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLSpanElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLSpanElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLSpanElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLSpanElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLSpanElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLSpanElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLSpanElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLSpanElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLSpanElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLSpanElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLSpanElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLSpanElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLSpanElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLSpanElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLSpanElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLSpanElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLSpanElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLSpanElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLSpanElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLSpanElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLSpanElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLSpanElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLSpanElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLSpanElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLSpanElement[JC] var outerHTML: String
raw/HTMLSpanElement[JC] def ownerDocument: Document
raw/HTMLSpanElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLSpanElement[JC] var parentElement: HTMLElement
raw/HTMLSpanElement[JC] def parentNode: Node
raw/HTMLSpanElement[JC] def prefix: String
raw/HTMLSpanElement[JC] def previousElementSibling: Element
raw/HTMLSpanElement[JC] def previousSibling: Node
raw/HTMLSpanElement[JC] def querySelector(selectors: String): Element
raw/HTMLSpanElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLSpanElement[JC] var readyState: js.Any
raw/HTMLSpanElement[JC] var recordNumber: js.Any
raw/HTMLSpanElement[JC] def removeAttribute(name: String): Unit
raw/HTMLSpanElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLSpanElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLSpanElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLSpanElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLSpanElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLSpanElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLSpanElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLSpanElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLSpanElement[JC] def scrollHeight: Int
raw/HTMLSpanElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLSpanElement[JC] var scrollLeft: Double
raw/HTMLSpanElement[JC] var scrollTop: Double
raw/HTMLSpanElement[JC] def scrollWidth: Int
raw/HTMLSpanElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLSpanElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLSpanElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLSpanElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLSpanElement[JC] var spellcheck: Boolean
raw/HTMLSpanElement[JC] def style: CSSStyleDeclaration
raw/HTMLSpanElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLSpanElement[JC] def style_ = (value: String): Unit
raw/HTMLSpanElement[JC] var tabIndex: Int
raw/HTMLSpanElement[JC] def tagName: String
raw/HTMLSpanElement[JC] var textContent: String
raw/HTMLSpanElement[JC] var title: String
raw/HTMLStyleElement[JC] var accessKey: String
raw/HTMLStyleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLStyleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLStyleElement[JC] def appendChild(newChild: Node): Node
raw/HTMLStyleElement[JC] def attributes: NamedNodeMap
raw/HTMLStyleElement[JC] def blur(): Unit
raw/HTMLStyleElement[JC] def childElementCount: Int
raw/HTMLStyleElement[JC] def childNodes: NodeList
raw/HTMLStyleElement[JC] def children: HTMLCollection
raw/HTMLStyleElement[JC] var classList: DOMTokenList
raw/HTMLStyleElement[JC] var className: String
raw/HTMLStyleElement[JC] def click(): Unit
raw/HTMLStyleElement[JC] def clientHeight: Int
raw/HTMLStyleElement[JC] def clientLeft: Int
raw/HTMLStyleElement[JC] def clientTop: Int
raw/HTMLStyleElement[JC] def clientWidth: Int
raw/HTMLStyleElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLStyleElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLStyleElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLStyleElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLStyleElement[JC] var contentEditable: String
raw/HTMLStyleElement[JC] def dataset: js.Dictionary[String]
raw/HTMLStyleElement[JC] var dir: String
raw/HTMLStyleElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLStyleElement[JC] var draggable: Boolean
raw/HTMLStyleElement[JC] var filters: Object
raw/HTMLStyleElement[JC] def firstChild: Node
raw/HTMLStyleElement[JC] def firstElementChild: Element
raw/HTMLStyleElement[JC] def focus(): Unit
raw/HTMLStyleElement[JC] def getAttribute(name: String): String
raw/HTMLStyleElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLStyleElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLStyleElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLStyleElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLStyleElement[JC] def getClientRects(): ClientRectList
raw/HTMLStyleElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLStyleElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLStyleElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLStyleElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLStyleElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLStyleElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLStyleElement[JC] def hasAttributes(): Boolean
raw/HTMLStyleElement[JC] def hasChildNodes(): Boolean
raw/HTMLStyleElement[JC] var id: String
raw/HTMLStyleElement[JC] var innerHTML: String
raw/HTMLStyleElement[JC] var innerText: String
raw/HTMLStyleElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLStyleElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLStyleElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLStyleElement[JC] def isContentEditable: Boolean
raw/HTMLStyleElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLStyleElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLStyleElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLStyleElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLStyleElement[JC] var lang: String
raw/HTMLStyleElement[JC] def lastChild: Node
raw/HTMLStyleElement[JC] def lastElementChild: Element
raw/HTMLStyleElement[JC] def localName: String
raw/HTMLStyleElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLStyleElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLStyleElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLStyleElement[JC] def matches(selector: String): Boolean
raw/HTMLStyleElement[JC] var media: String
raw/HTMLStyleElement[JC] def namespaceURI: String
raw/HTMLStyleElement[JC] def nextElementSibling: Element
raw/HTMLStyleElement[JC] def nextSibling: Node
raw/HTMLStyleElement[JC] def nodeName: String
raw/HTMLStyleElement[JC] def nodeType: Int
raw/HTMLStyleElement[JC] var nodeValue: String
raw/HTMLStyleElement[JC] def normalize(): Unit
raw/HTMLStyleElement[JC] def offsetHeight: Double
raw/HTMLStyleElement[JC] def offsetLeft: Double
raw/HTMLStyleElement[JC] def offsetParent: Element
raw/HTMLStyleElement[JC] def offsetTop: Double
raw/HTMLStyleElement[JC] def offsetWidth: Double
raw/HTMLStyleElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLStyleElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLStyleElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLStyleElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLStyleElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLStyleElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLStyleElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLStyleElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLStyleElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLStyleElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLStyleElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLStyleElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLStyleElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLStyleElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLStyleElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLStyleElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLStyleElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLStyleElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLStyleElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLStyleElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLStyleElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLStyleElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onended: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLStyleElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLStyleElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLStyleElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLStyleElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLStyleElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLStyleElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLStyleElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLStyleElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLStyleElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLStyleElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLStyleElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLStyleElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLStyleElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLStyleElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLStyleElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLStyleElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLStyleElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLStyleElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLStyleElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLStyleElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLStyleElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLStyleElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLStyleElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLStyleElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLStyleElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLStyleElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLStyleElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLStyleElement[JC] var outerHTML: String
raw/HTMLStyleElement[JC] def ownerDocument: Document
raw/HTMLStyleElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLStyleElement[JC] var parentElement: HTMLElement
raw/HTMLStyleElement[JC] def parentNode: Node
raw/HTMLStyleElement[JC] def prefix: String
raw/HTMLStyleElement[JC] def previousElementSibling: Element
raw/HTMLStyleElement[JC] def previousSibling: Node
raw/HTMLStyleElement[JC] def querySelector(selectors: String): Element
raw/HTMLStyleElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLStyleElement[JC] var readyState: js.Any
raw/HTMLStyleElement[JC] var recordNumber: js.Any
raw/HTMLStyleElement[JC] def removeAttribute(name: String): Unit
raw/HTMLStyleElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLStyleElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLStyleElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLStyleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLStyleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLStyleElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLStyleElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLStyleElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLStyleElement[JC] def scrollHeight: Int
raw/HTMLStyleElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLStyleElement[JC] var scrollLeft: Double
raw/HTMLStyleElement[JC] var scrollTop: Double
raw/HTMLStyleElement[JC] def scrollWidth: Int
raw/HTMLStyleElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLStyleElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLStyleElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLStyleElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLStyleElement[JC] def sheet: StyleSheet
raw/HTMLStyleElement[JC] var spellcheck: Boolean
raw/HTMLStyleElement[JC] def style: CSSStyleDeclaration
raw/HTMLStyleElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLStyleElement[JC] def style_ = (value: String): Unit
raw/HTMLStyleElement[JC] var tabIndex: Int
raw/HTMLStyleElement[JC] def tagName: String
raw/HTMLStyleElement[JC] var textContent: String
raw/HTMLStyleElement[JC] var title: String
raw/HTMLStyleElement[JC] var `type`: String
raw/HTMLTableAlignment[JT]
raw/HTMLTableCaptionElement[JC] var accessKey: String
raw/HTMLTableCaptionElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLTableCaptionElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLTableCaptionElement[JC] def appendChild(newChild: Node): Node
raw/HTMLTableCaptionElement[JC] def attributes: NamedNodeMap
raw/HTMLTableCaptionElement[JC] def blur(): Unit
raw/HTMLTableCaptionElement[JC] def childElementCount: Int
raw/HTMLTableCaptionElement[JC] def childNodes: NodeList
raw/HTMLTableCaptionElement[JC] def children: HTMLCollection
raw/HTMLTableCaptionElement[JC] var classList: DOMTokenList
raw/HTMLTableCaptionElement[JC] var className: String
raw/HTMLTableCaptionElement[JC] def click(): Unit
raw/HTMLTableCaptionElement[JC] def clientHeight: Int
raw/HTMLTableCaptionElement[JC] def clientLeft: Int
raw/HTMLTableCaptionElement[JC] def clientTop: Int
raw/HTMLTableCaptionElement[JC] def clientWidth: Int
raw/HTMLTableCaptionElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLTableCaptionElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLTableCaptionElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLTableCaptionElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLTableCaptionElement[JC] var contentEditable: String
raw/HTMLTableCaptionElement[JC] def dataset: js.Dictionary[String]
raw/HTMLTableCaptionElement[JC] var dir: String
raw/HTMLTableCaptionElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLTableCaptionElement[JC] var draggable: Boolean
raw/HTMLTableCaptionElement[JC] var filters: Object
raw/HTMLTableCaptionElement[JC] def firstChild: Node
raw/HTMLTableCaptionElement[JC] def firstElementChild: Element
raw/HTMLTableCaptionElement[JC] def focus(): Unit
raw/HTMLTableCaptionElement[JC] def getAttribute(name: String): String
raw/HTMLTableCaptionElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLTableCaptionElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLTableCaptionElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLTableCaptionElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLTableCaptionElement[JC] def getClientRects(): ClientRectList
raw/HTMLTableCaptionElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLTableCaptionElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLTableCaptionElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLTableCaptionElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLTableCaptionElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLTableCaptionElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLTableCaptionElement[JC] def hasAttributes(): Boolean
raw/HTMLTableCaptionElement[JC] def hasChildNodes(): Boolean
raw/HTMLTableCaptionElement[JC] var id: String
raw/HTMLTableCaptionElement[JC] var innerHTML: String
raw/HTMLTableCaptionElement[JC] var innerText: String
raw/HTMLTableCaptionElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLTableCaptionElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLTableCaptionElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLTableCaptionElement[JC] def isContentEditable: Boolean
raw/HTMLTableCaptionElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLTableCaptionElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLTableCaptionElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLTableCaptionElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLTableCaptionElement[JC] var lang: String
raw/HTMLTableCaptionElement[JC] def lastChild: Node
raw/HTMLTableCaptionElement[JC] def lastElementChild: Element
raw/HTMLTableCaptionElement[JC] def localName: String
raw/HTMLTableCaptionElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLTableCaptionElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLTableCaptionElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLTableCaptionElement[JC] def matches(selector: String): Boolean
raw/HTMLTableCaptionElement[JC] def namespaceURI: String
raw/HTMLTableCaptionElement[JC] def nextElementSibling: Element
raw/HTMLTableCaptionElement[JC] def nextSibling: Node
raw/HTMLTableCaptionElement[JC] def nodeName: String
raw/HTMLTableCaptionElement[JC] def nodeType: Int
raw/HTMLTableCaptionElement[JC] var nodeValue: String
raw/HTMLTableCaptionElement[JC] def normalize(): Unit
raw/HTMLTableCaptionElement[JC] def offsetHeight: Double
raw/HTMLTableCaptionElement[JC] def offsetLeft: Double
raw/HTMLTableCaptionElement[JC] def offsetParent: Element
raw/HTMLTableCaptionElement[JC] def offsetTop: Double
raw/HTMLTableCaptionElement[JC] def offsetWidth: Double
raw/HTMLTableCaptionElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLTableCaptionElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLTableCaptionElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLTableCaptionElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLTableCaptionElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLTableCaptionElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLTableCaptionElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLTableCaptionElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLTableCaptionElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLTableCaptionElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLTableCaptionElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLTableCaptionElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLTableCaptionElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLTableCaptionElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLTableCaptionElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLTableCaptionElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLTableCaptionElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLTableCaptionElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLTableCaptionElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLTableCaptionElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLTableCaptionElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLTableCaptionElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onended: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLTableCaptionElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLTableCaptionElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLTableCaptionElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLTableCaptionElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLTableCaptionElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLTableCaptionElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLTableCaptionElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLTableCaptionElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLTableCaptionElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLTableCaptionElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLTableCaptionElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLTableCaptionElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLTableCaptionElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLTableCaptionElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLTableCaptionElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLTableCaptionElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLTableCaptionElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLTableCaptionElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLTableCaptionElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLTableCaptionElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLTableCaptionElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLTableCaptionElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLTableCaptionElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLTableCaptionElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLTableCaptionElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLTableCaptionElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLTableCaptionElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLTableCaptionElement[JC] var outerHTML: String
raw/HTMLTableCaptionElement[JC] def ownerDocument: Document
raw/HTMLTableCaptionElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLTableCaptionElement[JC] var parentElement: HTMLElement
raw/HTMLTableCaptionElement[JC] def parentNode: Node
raw/HTMLTableCaptionElement[JC] def prefix: String
raw/HTMLTableCaptionElement[JC] def previousElementSibling: Element
raw/HTMLTableCaptionElement[JC] def previousSibling: Node
raw/HTMLTableCaptionElement[JC] def querySelector(selectors: String): Element
raw/HTMLTableCaptionElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLTableCaptionElement[JC] var readyState: js.Any
raw/HTMLTableCaptionElement[JC] var recordNumber: js.Any
raw/HTMLTableCaptionElement[JC] def removeAttribute(name: String): Unit
raw/HTMLTableCaptionElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLTableCaptionElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLTableCaptionElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLTableCaptionElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLTableCaptionElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLTableCaptionElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLTableCaptionElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLTableCaptionElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLTableCaptionElement[JC] def scrollHeight: Int
raw/HTMLTableCaptionElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLTableCaptionElement[JC] var scrollLeft: Double
raw/HTMLTableCaptionElement[JC] var scrollTop: Double
raw/HTMLTableCaptionElement[JC] def scrollWidth: Int
raw/HTMLTableCaptionElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLTableCaptionElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLTableCaptionElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLTableCaptionElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLTableCaptionElement[JC] var spellcheck: Boolean
raw/HTMLTableCaptionElement[JC] def style: CSSStyleDeclaration
raw/HTMLTableCaptionElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLTableCaptionElement[JC] def style_ = (value: String): Unit
raw/HTMLTableCaptionElement[JC] var tabIndex: Int
raw/HTMLTableCaptionElement[JC] def tagName: String
raw/HTMLTableCaptionElement[JC] var textContent: String
raw/HTMLTableCaptionElement[JC] var title: String
raw/HTMLTableCellElement[JC] var accessKey: String
raw/HTMLTableCellElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLTableCellElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLTableCellElement[JC] def appendChild(newChild: Node): Node
raw/HTMLTableCellElement[JC] def attributes: NamedNodeMap
raw/HTMLTableCellElement[JC] def blur(): Unit
raw/HTMLTableCellElement[JC] def cellIndex: Int
raw/HTMLTableCellElement[JC] def childElementCount: Int
raw/HTMLTableCellElement[JC] def childNodes: NodeList
raw/HTMLTableCellElement[JC] def children: HTMLCollection
raw/HTMLTableCellElement[JC] var classList: DOMTokenList
raw/HTMLTableCellElement[JC] var className: String
raw/HTMLTableCellElement[JC] def click(): Unit
raw/HTMLTableCellElement[JC] def clientHeight: Int
raw/HTMLTableCellElement[JC] def clientLeft: Int
raw/HTMLTableCellElement[JC] def clientTop: Int
raw/HTMLTableCellElement[JC] def clientWidth: Int
raw/HTMLTableCellElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLTableCellElement[JC] var colSpan: Int
raw/HTMLTableCellElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLTableCellElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLTableCellElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLTableCellElement[JC] var contentEditable: String
raw/HTMLTableCellElement[JC] def dataset: js.Dictionary[String]
raw/HTMLTableCellElement[JC] var dir: String
raw/HTMLTableCellElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLTableCellElement[JC] var draggable: Boolean
raw/HTMLTableCellElement[JC] var filters: Object
raw/HTMLTableCellElement[JC] def firstChild: Node
raw/HTMLTableCellElement[JC] def firstElementChild: Element
raw/HTMLTableCellElement[JC] def focus(): Unit
raw/HTMLTableCellElement[JC] def getAttribute(name: String): String
raw/HTMLTableCellElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLTableCellElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLTableCellElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLTableCellElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLTableCellElement[JC] def getClientRects(): ClientRectList
raw/HTMLTableCellElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLTableCellElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLTableCellElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLTableCellElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLTableCellElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLTableCellElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLTableCellElement[JC] def hasAttributes(): Boolean
raw/HTMLTableCellElement[JC] def hasChildNodes(): Boolean
raw/HTMLTableCellElement[JC] def headers: String
raw/HTMLTableCellElement[JC] var id: String
raw/HTMLTableCellElement[JC] var innerHTML: String
raw/HTMLTableCellElement[JC] var innerText: String
raw/HTMLTableCellElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLTableCellElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLTableCellElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLTableCellElement[JC] def isContentEditable: Boolean
raw/HTMLTableCellElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLTableCellElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLTableCellElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLTableCellElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLTableCellElement[JC] var lang: String
raw/HTMLTableCellElement[JC] def lastChild: Node
raw/HTMLTableCellElement[JC] def lastElementChild: Element
raw/HTMLTableCellElement[JC] def localName: String
raw/HTMLTableCellElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLTableCellElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLTableCellElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLTableCellElement[JC] def matches(selector: String): Boolean
raw/HTMLTableCellElement[JC] def namespaceURI: String
raw/HTMLTableCellElement[JC] def nextElementSibling: Element
raw/HTMLTableCellElement[JC] def nextSibling: Node
raw/HTMLTableCellElement[JC] def nodeName: String
raw/HTMLTableCellElement[JC] def nodeType: Int
raw/HTMLTableCellElement[JC] var nodeValue: String
raw/HTMLTableCellElement[JC] def normalize(): Unit
raw/HTMLTableCellElement[JC] def offsetHeight: Double
raw/HTMLTableCellElement[JC] def offsetLeft: Double
raw/HTMLTableCellElement[JC] def offsetParent: Element
raw/HTMLTableCellElement[JC] def offsetTop: Double
raw/HTMLTableCellElement[JC] def offsetWidth: Double
raw/HTMLTableCellElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLTableCellElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLTableCellElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLTableCellElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLTableCellElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLTableCellElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLTableCellElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLTableCellElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLTableCellElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLTableCellElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLTableCellElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLTableCellElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLTableCellElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLTableCellElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLTableCellElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLTableCellElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLTableCellElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLTableCellElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLTableCellElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLTableCellElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLTableCellElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLTableCellElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onended: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLTableCellElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLTableCellElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLTableCellElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLTableCellElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLTableCellElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLTableCellElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLTableCellElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLTableCellElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLTableCellElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLTableCellElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLTableCellElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLTableCellElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLTableCellElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLTableCellElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLTableCellElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLTableCellElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLTableCellElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLTableCellElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLTableCellElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLTableCellElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLTableCellElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLTableCellElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLTableCellElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLTableCellElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLTableCellElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLTableCellElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLTableCellElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLTableCellElement[JC] var outerHTML: String
raw/HTMLTableCellElement[JC] def ownerDocument: Document
raw/HTMLTableCellElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLTableCellElement[JC] var parentElement: HTMLElement
raw/HTMLTableCellElement[JC] def parentNode: Node
raw/HTMLTableCellElement[JC] def prefix: String
raw/HTMLTableCellElement[JC] def previousElementSibling: Element
raw/HTMLTableCellElement[JC] def previousSibling: Node
raw/HTMLTableCellElement[JC] def querySelector(selectors: String): Element
raw/HTMLTableCellElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLTableCellElement[JC] var readyState: js.Any
raw/HTMLTableCellElement[JC] var recordNumber: js.Any
raw/HTMLTableCellElement[JC] def removeAttribute(name: String): Unit
raw/HTMLTableCellElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLTableCellElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLTableCellElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLTableCellElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLTableCellElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLTableCellElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLTableCellElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLTableCellElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLTableCellElement[JC] var rowSpan: Int
raw/HTMLTableCellElement[JC] def scrollHeight: Int
raw/HTMLTableCellElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLTableCellElement[JC] var scrollLeft: Double
raw/HTMLTableCellElement[JC] var scrollTop: Double
raw/HTMLTableCellElement[JC] def scrollWidth: Int
raw/HTMLTableCellElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLTableCellElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLTableCellElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLTableCellElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLTableCellElement[JC] var spellcheck: Boolean
raw/HTMLTableCellElement[JC] def style: CSSStyleDeclaration
raw/HTMLTableCellElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLTableCellElement[JC] def style_ = (value: String): Unit
raw/HTMLTableCellElement[JC] var tabIndex: Int
raw/HTMLTableCellElement[JC] def tagName: String
raw/HTMLTableCellElement[JC] var textContent: String
raw/HTMLTableCellElement[JC] var title: String
raw/HTMLTableColElement[JC] var accessKey: String
raw/HTMLTableColElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLTableColElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLTableColElement[JC] def appendChild(newChild: Node): Node
raw/HTMLTableColElement[JC] def attributes: NamedNodeMap
raw/HTMLTableColElement[JC] def blur(): Unit
raw/HTMLTableColElement[JC] def childElementCount: Int
raw/HTMLTableColElement[JC] def childNodes: NodeList
raw/HTMLTableColElement[JC] def children: HTMLCollection
raw/HTMLTableColElement[JC] var classList: DOMTokenList
raw/HTMLTableColElement[JC] var className: String
raw/HTMLTableColElement[JC] def click(): Unit
raw/HTMLTableColElement[JC] def clientHeight: Int
raw/HTMLTableColElement[JC] def clientLeft: Int
raw/HTMLTableColElement[JC] def clientTop: Int
raw/HTMLTableColElement[JC] def clientWidth: Int
raw/HTMLTableColElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLTableColElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLTableColElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLTableColElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLTableColElement[JC] var contentEditable: String
raw/HTMLTableColElement[JC] def dataset: js.Dictionary[String]
raw/HTMLTableColElement[JC] var dir: String
raw/HTMLTableColElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLTableColElement[JC] var draggable: Boolean
raw/HTMLTableColElement[JC] var filters: Object
raw/HTMLTableColElement[JC] def firstChild: Node
raw/HTMLTableColElement[JC] def firstElementChild: Element
raw/HTMLTableColElement[JC] def focus(): Unit
raw/HTMLTableColElement[JC] def getAttribute(name: String): String
raw/HTMLTableColElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLTableColElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLTableColElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLTableColElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLTableColElement[JC] def getClientRects(): ClientRectList
raw/HTMLTableColElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLTableColElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLTableColElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLTableColElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLTableColElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLTableColElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLTableColElement[JC] def hasAttributes(): Boolean
raw/HTMLTableColElement[JC] def hasChildNodes(): Boolean
raw/HTMLTableColElement[JC] var id: String
raw/HTMLTableColElement[JC] var innerHTML: String
raw/HTMLTableColElement[JC] var innerText: String
raw/HTMLTableColElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLTableColElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLTableColElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLTableColElement[JC] def isContentEditable: Boolean
raw/HTMLTableColElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLTableColElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLTableColElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLTableColElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLTableColElement[JC] var lang: String
raw/HTMLTableColElement[JC] def lastChild: Node
raw/HTMLTableColElement[JC] def lastElementChild: Element
raw/HTMLTableColElement[JC] def localName: String
raw/HTMLTableColElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLTableColElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLTableColElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLTableColElement[JC] def matches(selector: String): Boolean
raw/HTMLTableColElement[JC] def namespaceURI: String
raw/HTMLTableColElement[JC] def nextElementSibling: Element
raw/HTMLTableColElement[JC] def nextSibling: Node
raw/HTMLTableColElement[JC] def nodeName: String
raw/HTMLTableColElement[JC] def nodeType: Int
raw/HTMLTableColElement[JC] var nodeValue: String
raw/HTMLTableColElement[JC] def normalize(): Unit
raw/HTMLTableColElement[JC] def offsetHeight: Double
raw/HTMLTableColElement[JC] def offsetLeft: Double
raw/HTMLTableColElement[JC] def offsetParent: Element
raw/HTMLTableColElement[JC] def offsetTop: Double
raw/HTMLTableColElement[JC] def offsetWidth: Double
raw/HTMLTableColElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLTableColElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLTableColElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLTableColElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLTableColElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLTableColElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLTableColElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLTableColElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLTableColElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLTableColElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLTableColElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLTableColElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLTableColElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLTableColElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLTableColElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLTableColElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLTableColElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLTableColElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLTableColElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLTableColElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLTableColElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLTableColElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onended: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLTableColElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLTableColElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLTableColElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLTableColElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLTableColElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLTableColElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLTableColElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLTableColElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLTableColElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLTableColElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLTableColElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLTableColElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLTableColElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLTableColElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLTableColElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLTableColElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLTableColElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLTableColElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLTableColElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLTableColElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLTableColElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLTableColElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLTableColElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLTableColElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLTableColElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLTableColElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLTableColElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLTableColElement[JC] var outerHTML: String
raw/HTMLTableColElement[JC] def ownerDocument: Document
raw/HTMLTableColElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLTableColElement[JC] var parentElement: HTMLElement
raw/HTMLTableColElement[JC] def parentNode: Node
raw/HTMLTableColElement[JC] def prefix: String
raw/HTMLTableColElement[JC] def previousElementSibling: Element
raw/HTMLTableColElement[JC] def previousSibling: Node
raw/HTMLTableColElement[JC] def querySelector(selectors: String): Element
raw/HTMLTableColElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLTableColElement[JC] var readyState: js.Any
raw/HTMLTableColElement[JC] var recordNumber: js.Any
raw/HTMLTableColElement[JC] def removeAttribute(name: String): Unit
raw/HTMLTableColElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLTableColElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLTableColElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLTableColElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLTableColElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLTableColElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLTableColElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLTableColElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLTableColElement[JC] def scrollHeight: Int
raw/HTMLTableColElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLTableColElement[JC] var scrollLeft: Double
raw/HTMLTableColElement[JC] var scrollTop: Double
raw/HTMLTableColElement[JC] def scrollWidth: Int
raw/HTMLTableColElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLTableColElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLTableColElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLTableColElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLTableColElement[JC] var span: Int
raw/HTMLTableColElement[JC] var spellcheck: Boolean
raw/HTMLTableColElement[JC] def style: CSSStyleDeclaration
raw/HTMLTableColElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLTableColElement[JC] def style_ = (value: String): Unit
raw/HTMLTableColElement[JC] var tabIndex: Int
raw/HTMLTableColElement[JC] def tagName: String
raw/HTMLTableColElement[JC] var textContent: String
raw/HTMLTableColElement[JC] var title: String
raw/HTMLTableElement[JC] var accessKey: String
raw/HTMLTableElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLTableElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLTableElement[JC] def appendChild(newChild: Node): Node
raw/HTMLTableElement[JC] def attributes: NamedNodeMap
raw/HTMLTableElement[JC] def blur(): Unit
raw/HTMLTableElement[JC] var caption: HTMLTableCaptionElement
raw/HTMLTableElement[JC] def childElementCount: Int
raw/HTMLTableElement[JC] def childNodes: NodeList
raw/HTMLTableElement[JC] def children: HTMLCollection
raw/HTMLTableElement[JC] var classList: DOMTokenList
raw/HTMLTableElement[JC] var className: String
raw/HTMLTableElement[JC] def click(): Unit
raw/HTMLTableElement[JC] def clientHeight: Int
raw/HTMLTableElement[JC] def clientLeft: Int
raw/HTMLTableElement[JC] def clientTop: Int
raw/HTMLTableElement[JC] def clientWidth: Int
raw/HTMLTableElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLTableElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLTableElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLTableElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLTableElement[JC] var contentEditable: String
raw/HTMLTableElement[JC] def createCaption(): HTMLElement
raw/HTMLTableElement[JC] def createTBody(): HTMLElement
raw/HTMLTableElement[JC] def createTFoot(): HTMLElement
raw/HTMLTableElement[JC] def createTHead(): HTMLElement
raw/HTMLTableElement[JC] def dataset: js.Dictionary[String]
raw/HTMLTableElement[JC] def deleteCaption(): Unit
raw/HTMLTableElement[JC] def deleteRow(index: Int): Unit
raw/HTMLTableElement[JC] def deleteTFoot(): Unit
raw/HTMLTableElement[JC] def deleteTHead(): Unit
raw/HTMLTableElement[JC] var dir: String
raw/HTMLTableElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLTableElement[JC] var draggable: Boolean
raw/HTMLTableElement[JC] var filters: Object
raw/HTMLTableElement[JC] def firstChild: Node
raw/HTMLTableElement[JC] def firstElementChild: Element
raw/HTMLTableElement[JC] def focus(): Unit
raw/HTMLTableElement[JC] def getAttribute(name: String): String
raw/HTMLTableElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLTableElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLTableElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLTableElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLTableElement[JC] def getClientRects(): ClientRectList
raw/HTMLTableElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLTableElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLTableElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLTableElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLTableElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLTableElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLTableElement[JC] def hasAttributes(): Boolean
raw/HTMLTableElement[JC] def hasChildNodes(): Boolean
raw/HTMLTableElement[JC] var id: String
raw/HTMLTableElement[JC] var innerHTML: String
raw/HTMLTableElement[JC] var innerText: String
raw/HTMLTableElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLTableElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLTableElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLTableElement[JC] def insertRow(index: Int?): HTMLElement
raw/HTMLTableElement[JC] def isContentEditable: Boolean
raw/HTMLTableElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLTableElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLTableElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLTableElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLTableElement[JC] var lang: String
raw/HTMLTableElement[JC] def lastChild: Node
raw/HTMLTableElement[JC] def lastElementChild: Element
raw/HTMLTableElement[JC] def localName: String
raw/HTMLTableElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLTableElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLTableElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLTableElement[JC] def matches(selector: String): Boolean
raw/HTMLTableElement[JC] def moveRow(indexFrom: Int?, indexTo: Int?): Object
raw/HTMLTableElement[JC] def namespaceURI: String
raw/HTMLTableElement[JC] def nextElementSibling: Element
raw/HTMLTableElement[JC] def nextSibling: Node
raw/HTMLTableElement[JC] def nodeName: String
raw/HTMLTableElement[JC] def nodeType: Int
raw/HTMLTableElement[JC] var nodeValue: String
raw/HTMLTableElement[JC] def normalize(): Unit
raw/HTMLTableElement[JC] def offsetHeight: Double
raw/HTMLTableElement[JC] def offsetLeft: Double
raw/HTMLTableElement[JC] def offsetParent: Element
raw/HTMLTableElement[JC] def offsetTop: Double
raw/HTMLTableElement[JC] def offsetWidth: Double
raw/HTMLTableElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLTableElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLTableElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLTableElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLTableElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLTableElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLTableElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLTableElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLTableElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLTableElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLTableElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLTableElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLTableElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLTableElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLTableElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLTableElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLTableElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLTableElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLTableElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLTableElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLTableElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLTableElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLTableElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLTableElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onended: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLTableElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLTableElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLTableElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLTableElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLTableElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLTableElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLTableElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLTableElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLTableElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLTableElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLTableElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLTableElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLTableElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLTableElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLTableElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLTableElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLTableElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLTableElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLTableElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLTableElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLTableElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLTableElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLTableElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLTableElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLTableElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLTableElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLTableElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLTableElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLTableElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLTableElement[JC] var outerHTML: String
raw/HTMLTableElement[JC] def ownerDocument: Document
raw/HTMLTableElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLTableElement[JC] var parentElement: HTMLElement
raw/HTMLTableElement[JC] def parentNode: Node
raw/HTMLTableElement[JC] def prefix: String
raw/HTMLTableElement[JC] def previousElementSibling: Element
raw/HTMLTableElement[JC] def previousSibling: Node
raw/HTMLTableElement[JC] def querySelector(selectors: String): Element
raw/HTMLTableElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLTableElement[JC] var readyState: js.Any
raw/HTMLTableElement[JC] var recordNumber: js.Any
raw/HTMLTableElement[JC] def removeAttribute(name: String): Unit
raw/HTMLTableElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLTableElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLTableElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLTableElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLTableElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLTableElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLTableElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLTableElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLTableElement[JC] def rows: HTMLCollection
raw/HTMLTableElement[JC] def scrollHeight: Int
raw/HTMLTableElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLTableElement[JC] var scrollLeft: Double
raw/HTMLTableElement[JC] var scrollTop: Double
raw/HTMLTableElement[JC] def scrollWidth: Int
raw/HTMLTableElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLTableElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLTableElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLTableElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLTableElement[JC] var spellcheck: Boolean
raw/HTMLTableElement[JC] def style: CSSStyleDeclaration
raw/HTMLTableElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLTableElement[JC] def style_ = (value: String): Unit
raw/HTMLTableElement[JC] def tBodies: HTMLCollection
raw/HTMLTableElement[JC] var tFoot: HTMLTableSectionElement
raw/HTMLTableElement[JC] var tHead: HTMLTableSectionElement
raw/HTMLTableElement[JC] var tabIndex: Int
raw/HTMLTableElement[JC] def tagName: String
raw/HTMLTableElement[JC] var textContent: String
raw/HTMLTableElement[JC] var title: String
raw/HTMLTableRowElement[JC] var accessKey: String
raw/HTMLTableRowElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLTableRowElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLTableRowElement[JC] def appendChild(newChild: Node): Node
raw/HTMLTableRowElement[JC] def attributes: NamedNodeMap
raw/HTMLTableRowElement[JC] def blur(): Unit
raw/HTMLTableRowElement[JC] var borderColor: js.Any
raw/HTMLTableRowElement[JC] var borderColorDark: js.Any
raw/HTMLTableRowElement[JC] var borderColorLight: js.Any
raw/HTMLTableRowElement[JC] def cells: HTMLCollection
raw/HTMLTableRowElement[JC] def childElementCount: Int
raw/HTMLTableRowElement[JC] def childNodes: NodeList
raw/HTMLTableRowElement[JC] def children: HTMLCollection
raw/HTMLTableRowElement[JC] var classList: DOMTokenList
raw/HTMLTableRowElement[JC] var className: String
raw/HTMLTableRowElement[JC] def click(): Unit
raw/HTMLTableRowElement[JC] def clientHeight: Int
raw/HTMLTableRowElement[JC] def clientLeft: Int
raw/HTMLTableRowElement[JC] def clientTop: Int
raw/HTMLTableRowElement[JC] def clientWidth: Int
raw/HTMLTableRowElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLTableRowElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLTableRowElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLTableRowElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLTableRowElement[JC] var contentEditable: String
raw/HTMLTableRowElement[JC] def dataset: js.Dictionary[String]
raw/HTMLTableRowElement[JC] def deleteCell(index: Int?): Unit
raw/HTMLTableRowElement[JC] var dir: String
raw/HTMLTableRowElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLTableRowElement[JC] var draggable: Boolean
raw/HTMLTableRowElement[JC] var filters: Object
raw/HTMLTableRowElement[JC] def firstChild: Node
raw/HTMLTableRowElement[JC] def firstElementChild: Element
raw/HTMLTableRowElement[JC] def focus(): Unit
raw/HTMLTableRowElement[JC] def getAttribute(name: String): String
raw/HTMLTableRowElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLTableRowElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLTableRowElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLTableRowElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLTableRowElement[JC] def getClientRects(): ClientRectList
raw/HTMLTableRowElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLTableRowElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLTableRowElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLTableRowElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLTableRowElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLTableRowElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLTableRowElement[JC] def hasAttributes(): Boolean
raw/HTMLTableRowElement[JC] def hasChildNodes(): Boolean
raw/HTMLTableRowElement[JC] var height: js.Any
raw/HTMLTableRowElement[JC] var id: String
raw/HTMLTableRowElement[JC] var innerHTML: String
raw/HTMLTableRowElement[JC] var innerText: String
raw/HTMLTableRowElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLTableRowElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLTableRowElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLTableRowElement[JC] def insertCell(index: Int?): HTMLElement
raw/HTMLTableRowElement[JC] def isContentEditable: Boolean
raw/HTMLTableRowElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLTableRowElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLTableRowElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLTableRowElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLTableRowElement[JC] var lang: String
raw/HTMLTableRowElement[JC] def lastChild: Node
raw/HTMLTableRowElement[JC] def lastElementChild: Element
raw/HTMLTableRowElement[JC] def localName: String
raw/HTMLTableRowElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLTableRowElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLTableRowElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLTableRowElement[JC] def matches(selector: String): Boolean
raw/HTMLTableRowElement[JC] def namespaceURI: String
raw/HTMLTableRowElement[JC] def nextElementSibling: Element
raw/HTMLTableRowElement[JC] def nextSibling: Node
raw/HTMLTableRowElement[JC] def nodeName: String
raw/HTMLTableRowElement[JC] def nodeType: Int
raw/HTMLTableRowElement[JC] var nodeValue: String
raw/HTMLTableRowElement[JC] def normalize(): Unit
raw/HTMLTableRowElement[JC] def offsetHeight: Double
raw/HTMLTableRowElement[JC] def offsetLeft: Double
raw/HTMLTableRowElement[JC] def offsetParent: Element
raw/HTMLTableRowElement[JC] def offsetTop: Double
raw/HTMLTableRowElement[JC] def offsetWidth: Double
raw/HTMLTableRowElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLTableRowElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLTableRowElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLTableRowElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLTableRowElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLTableRowElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLTableRowElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLTableRowElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLTableRowElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLTableRowElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLTableRowElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLTableRowElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLTableRowElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLTableRowElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLTableRowElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLTableRowElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLTableRowElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLTableRowElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLTableRowElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLTableRowElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLTableRowElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLTableRowElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onended: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLTableRowElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLTableRowElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLTableRowElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLTableRowElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLTableRowElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLTableRowElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLTableRowElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLTableRowElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLTableRowElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLTableRowElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLTableRowElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLTableRowElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLTableRowElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLTableRowElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLTableRowElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLTableRowElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLTableRowElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLTableRowElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLTableRowElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLTableRowElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLTableRowElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLTableRowElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLTableRowElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLTableRowElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLTableRowElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLTableRowElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLTableRowElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLTableRowElement[JC] var outerHTML: String
raw/HTMLTableRowElement[JC] def ownerDocument: Document
raw/HTMLTableRowElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLTableRowElement[JC] var parentElement: HTMLElement
raw/HTMLTableRowElement[JC] def parentNode: Node
raw/HTMLTableRowElement[JC] def prefix: String
raw/HTMLTableRowElement[JC] def previousElementSibling: Element
raw/HTMLTableRowElement[JC] def previousSibling: Node
raw/HTMLTableRowElement[JC] def querySelector(selectors: String): Element
raw/HTMLTableRowElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLTableRowElement[JC] var readyState: js.Any
raw/HTMLTableRowElement[JC] var recordNumber: js.Any
raw/HTMLTableRowElement[JC] def removeAttribute(name: String): Unit
raw/HTMLTableRowElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLTableRowElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLTableRowElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLTableRowElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLTableRowElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLTableRowElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLTableRowElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLTableRowElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLTableRowElement[JC] def rowIndex: Int
raw/HTMLTableRowElement[JC] def scrollHeight: Int
raw/HTMLTableRowElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLTableRowElement[JC] var scrollLeft: Double
raw/HTMLTableRowElement[JC] var scrollTop: Double
raw/HTMLTableRowElement[JC] def scrollWidth: Int
raw/HTMLTableRowElement[JC] def sectionRowIndex: Int
raw/HTMLTableRowElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLTableRowElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLTableRowElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLTableRowElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLTableRowElement[JC] var spellcheck: Boolean
raw/HTMLTableRowElement[JC] def style: CSSStyleDeclaration
raw/HTMLTableRowElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLTableRowElement[JC] def style_ = (value: String): Unit
raw/HTMLTableRowElement[JC] var tabIndex: Int
raw/HTMLTableRowElement[JC] def tagName: String
raw/HTMLTableRowElement[JC] var textContent: String
raw/HTMLTableRowElement[JC] var title: String
raw/HTMLTableSectionElement[JC] var accessKey: String
raw/HTMLTableSectionElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLTableSectionElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLTableSectionElement[JC] def appendChild(newChild: Node): Node
raw/HTMLTableSectionElement[JC] def attributes: NamedNodeMap
raw/HTMLTableSectionElement[JC] def blur(): Unit
raw/HTMLTableSectionElement[JC] def childElementCount: Int
raw/HTMLTableSectionElement[JC] def childNodes: NodeList
raw/HTMLTableSectionElement[JC] def children: HTMLCollection
raw/HTMLTableSectionElement[JC] var classList: DOMTokenList
raw/HTMLTableSectionElement[JC] var className: String
raw/HTMLTableSectionElement[JC] def click(): Unit
raw/HTMLTableSectionElement[JC] def clientHeight: Int
raw/HTMLTableSectionElement[JC] def clientLeft: Int
raw/HTMLTableSectionElement[JC] def clientTop: Int
raw/HTMLTableSectionElement[JC] def clientWidth: Int
raw/HTMLTableSectionElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLTableSectionElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLTableSectionElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLTableSectionElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLTableSectionElement[JC] var contentEditable: String
raw/HTMLTableSectionElement[JC] def dataset: js.Dictionary[String]
raw/HTMLTableSectionElement[JC] def deleteRow(index: Int?): Unit
raw/HTMLTableSectionElement[JC] var dir: String
raw/HTMLTableSectionElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLTableSectionElement[JC] var draggable: Boolean
raw/HTMLTableSectionElement[JC] var filters: Object
raw/HTMLTableSectionElement[JC] def firstChild: Node
raw/HTMLTableSectionElement[JC] def firstElementChild: Element
raw/HTMLTableSectionElement[JC] def focus(): Unit
raw/HTMLTableSectionElement[JC] def getAttribute(name: String): String
raw/HTMLTableSectionElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLTableSectionElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLTableSectionElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLTableSectionElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLTableSectionElement[JC] def getClientRects(): ClientRectList
raw/HTMLTableSectionElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLTableSectionElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLTableSectionElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLTableSectionElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLTableSectionElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLTableSectionElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLTableSectionElement[JC] def hasAttributes(): Boolean
raw/HTMLTableSectionElement[JC] def hasChildNodes(): Boolean
raw/HTMLTableSectionElement[JC] var id: String
raw/HTMLTableSectionElement[JC] var innerHTML: String
raw/HTMLTableSectionElement[JC] var innerText: String
raw/HTMLTableSectionElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLTableSectionElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLTableSectionElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLTableSectionElement[JC] def insertRow(index: Int?): HTMLElement
raw/HTMLTableSectionElement[JC] def isContentEditable: Boolean
raw/HTMLTableSectionElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLTableSectionElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLTableSectionElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLTableSectionElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLTableSectionElement[JC] var lang: String
raw/HTMLTableSectionElement[JC] def lastChild: Node
raw/HTMLTableSectionElement[JC] def lastElementChild: Element
raw/HTMLTableSectionElement[JC] def localName: String
raw/HTMLTableSectionElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLTableSectionElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLTableSectionElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLTableSectionElement[JC] def matches(selector: String): Boolean
raw/HTMLTableSectionElement[JC] def moveRow(indexFrom: Int?, indexTo: Int?): Object
raw/HTMLTableSectionElement[JC] def namespaceURI: String
raw/HTMLTableSectionElement[JC] def nextElementSibling: Element
raw/HTMLTableSectionElement[JC] def nextSibling: Node
raw/HTMLTableSectionElement[JC] def nodeName: String
raw/HTMLTableSectionElement[JC] def nodeType: Int
raw/HTMLTableSectionElement[JC] var nodeValue: String
raw/HTMLTableSectionElement[JC] def normalize(): Unit
raw/HTMLTableSectionElement[JC] def offsetHeight: Double
raw/HTMLTableSectionElement[JC] def offsetLeft: Double
raw/HTMLTableSectionElement[JC] def offsetParent: Element
raw/HTMLTableSectionElement[JC] def offsetTop: Double
raw/HTMLTableSectionElement[JC] def offsetWidth: Double
raw/HTMLTableSectionElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLTableSectionElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLTableSectionElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLTableSectionElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLTableSectionElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLTableSectionElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLTableSectionElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLTableSectionElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLTableSectionElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLTableSectionElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLTableSectionElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLTableSectionElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLTableSectionElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLTableSectionElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLTableSectionElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLTableSectionElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLTableSectionElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLTableSectionElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLTableSectionElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLTableSectionElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLTableSectionElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLTableSectionElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onended: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLTableSectionElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLTableSectionElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLTableSectionElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLTableSectionElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLTableSectionElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLTableSectionElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLTableSectionElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLTableSectionElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLTableSectionElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLTableSectionElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLTableSectionElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLTableSectionElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLTableSectionElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLTableSectionElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLTableSectionElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLTableSectionElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLTableSectionElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLTableSectionElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLTableSectionElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLTableSectionElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLTableSectionElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLTableSectionElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLTableSectionElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLTableSectionElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLTableSectionElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLTableSectionElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLTableSectionElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLTableSectionElement[JC] var outerHTML: String
raw/HTMLTableSectionElement[JC] def ownerDocument: Document
raw/HTMLTableSectionElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLTableSectionElement[JC] var parentElement: HTMLElement
raw/HTMLTableSectionElement[JC] def parentNode: Node
raw/HTMLTableSectionElement[JC] def prefix: String
raw/HTMLTableSectionElement[JC] def previousElementSibling: Element
raw/HTMLTableSectionElement[JC] def previousSibling: Node
raw/HTMLTableSectionElement[JC] def querySelector(selectors: String): Element
raw/HTMLTableSectionElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLTableSectionElement[JC] var readyState: js.Any
raw/HTMLTableSectionElement[JC] var recordNumber: js.Any
raw/HTMLTableSectionElement[JC] def removeAttribute(name: String): Unit
raw/HTMLTableSectionElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLTableSectionElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLTableSectionElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLTableSectionElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLTableSectionElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLTableSectionElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLTableSectionElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLTableSectionElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLTableSectionElement[JC] def rows: HTMLCollection
raw/HTMLTableSectionElement[JC] def scrollHeight: Int
raw/HTMLTableSectionElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLTableSectionElement[JC] var scrollLeft: Double
raw/HTMLTableSectionElement[JC] var scrollTop: Double
raw/HTMLTableSectionElement[JC] def scrollWidth: Int
raw/HTMLTableSectionElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLTableSectionElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLTableSectionElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLTableSectionElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLTableSectionElement[JC] var spellcheck: Boolean
raw/HTMLTableSectionElement[JC] def style: CSSStyleDeclaration
raw/HTMLTableSectionElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLTableSectionElement[JC] def style_ = (value: String): Unit
raw/HTMLTableSectionElement[JC] var tabIndex: Int
raw/HTMLTableSectionElement[JC] def tagName: String
raw/HTMLTableSectionElement[JC] var textContent: String
raw/HTMLTableSectionElement[JC] var title: String
raw/HTMLTextAreaElement[JC] var accessKey: String
raw/HTMLTextAreaElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLTextAreaElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLTextAreaElement[JC] def appendChild(newChild: Node): Node
raw/HTMLTextAreaElement[JC] def attributes: NamedNodeMap
raw/HTMLTextAreaElement[JC] var autofocus: Boolean
raw/HTMLTextAreaElement[JC] def blur(): Unit
raw/HTMLTextAreaElement[JC] def checkValidity(): Boolean
raw/HTMLTextAreaElement[JC] def childElementCount: Int
raw/HTMLTextAreaElement[JC] def childNodes: NodeList
raw/HTMLTextAreaElement[JC] def children: HTMLCollection
raw/HTMLTextAreaElement[JC] var classList: DOMTokenList
raw/HTMLTextAreaElement[JC] var className: String
raw/HTMLTextAreaElement[JC] def click(): Unit
raw/HTMLTextAreaElement[JC] def clientHeight: Int
raw/HTMLTextAreaElement[JC] def clientLeft: Int
raw/HTMLTextAreaElement[JC] def clientTop: Int
raw/HTMLTextAreaElement[JC] def clientWidth: Int
raw/HTMLTextAreaElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLTextAreaElement[JC] var cols: Int
raw/HTMLTextAreaElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLTextAreaElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLTextAreaElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLTextAreaElement[JC] var contentEditable: String
raw/HTMLTextAreaElement[JC] def dataset: js.Dictionary[String]
raw/HTMLTextAreaElement[JC] var defaultValue: String
raw/HTMLTextAreaElement[JC] var dir: String
raw/HTMLTextAreaElement[JC] var disabled: Boolean
raw/HTMLTextAreaElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLTextAreaElement[JC] var draggable: Boolean
raw/HTMLTextAreaElement[JC] var filters: Object
raw/HTMLTextAreaElement[JC] def firstChild: Node
raw/HTMLTextAreaElement[JC] def firstElementChild: Element
raw/HTMLTextAreaElement[JC] def focus(): Unit
raw/HTMLTextAreaElement[JC] def form: HTMLFormElement
raw/HTMLTextAreaElement[JC] def getAttribute(name: String): String
raw/HTMLTextAreaElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLTextAreaElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLTextAreaElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLTextAreaElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLTextAreaElement[JC] def getClientRects(): ClientRectList
raw/HTMLTextAreaElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLTextAreaElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLTextAreaElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLTextAreaElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLTextAreaElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLTextAreaElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLTextAreaElement[JC] def hasAttributes(): Boolean
raw/HTMLTextAreaElement[JC] def hasChildNodes(): Boolean
raw/HTMLTextAreaElement[JC] var id: String
raw/HTMLTextAreaElement[JC] var innerHTML: String
raw/HTMLTextAreaElement[JC] var innerText: String
raw/HTMLTextAreaElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLTextAreaElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLTextAreaElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLTextAreaElement[JC] def isContentEditable: Boolean
raw/HTMLTextAreaElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLTextAreaElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLTextAreaElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLTextAreaElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLTextAreaElement[JC] var lang: String
raw/HTMLTextAreaElement[JC] def lastChild: Node
raw/HTMLTextAreaElement[JC] def lastElementChild: Element
raw/HTMLTextAreaElement[JC] def localName: String
raw/HTMLTextAreaElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLTextAreaElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLTextAreaElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLTextAreaElement[JC] def matches(selector: String): Boolean
raw/HTMLTextAreaElement[JC] var maxLength: Int
raw/HTMLTextAreaElement[JC] var name: String
raw/HTMLTextAreaElement[JC] def namespaceURI: String
raw/HTMLTextAreaElement[JC] def nextElementSibling: Element
raw/HTMLTextAreaElement[JC] def nextSibling: Node
raw/HTMLTextAreaElement[JC] def nodeName: String
raw/HTMLTextAreaElement[JC] def nodeType: Int
raw/HTMLTextAreaElement[JC] var nodeValue: String
raw/HTMLTextAreaElement[JC] def normalize(): Unit
raw/HTMLTextAreaElement[JC] def offsetHeight: Double
raw/HTMLTextAreaElement[JC] def offsetLeft: Double
raw/HTMLTextAreaElement[JC] def offsetParent: Element
raw/HTMLTextAreaElement[JC] def offsetTop: Double
raw/HTMLTextAreaElement[JC] def offsetWidth: Double
raw/HTMLTextAreaElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLTextAreaElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLTextAreaElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLTextAreaElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLTextAreaElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLTextAreaElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLTextAreaElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLTextAreaElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLTextAreaElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLTextAreaElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLTextAreaElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLTextAreaElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLTextAreaElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLTextAreaElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLTextAreaElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLTextAreaElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLTextAreaElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLTextAreaElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLTextAreaElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLTextAreaElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLTextAreaElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLTextAreaElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onended: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLTextAreaElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLTextAreaElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLTextAreaElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLTextAreaElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLTextAreaElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLTextAreaElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLTextAreaElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLTextAreaElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLTextAreaElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLTextAreaElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLTextAreaElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLTextAreaElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLTextAreaElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLTextAreaElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLTextAreaElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLTextAreaElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLTextAreaElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLTextAreaElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLTextAreaElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLTextAreaElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLTextAreaElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLTextAreaElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLTextAreaElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLTextAreaElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLTextAreaElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLTextAreaElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLTextAreaElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLTextAreaElement[JC] var outerHTML: String
raw/HTMLTextAreaElement[JC] def ownerDocument: Document
raw/HTMLTextAreaElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLTextAreaElement[JC] var parentElement: HTMLElement
raw/HTMLTextAreaElement[JC] def parentNode: Node
raw/HTMLTextAreaElement[JC] var placeholder: String
raw/HTMLTextAreaElement[JC] def prefix: String
raw/HTMLTextAreaElement[JC] def previousElementSibling: Element
raw/HTMLTextAreaElement[JC] def previousSibling: Node
raw/HTMLTextAreaElement[JC] def querySelector(selectors: String): Element
raw/HTMLTextAreaElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLTextAreaElement[JC] var readOnly: Boolean
raw/HTMLTextAreaElement[JC] var readyState: js.Any
raw/HTMLTextAreaElement[JC] var recordNumber: js.Any
raw/HTMLTextAreaElement[JC] def removeAttribute(name: String): Unit
raw/HTMLTextAreaElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLTextAreaElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLTextAreaElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLTextAreaElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLTextAreaElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLTextAreaElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLTextAreaElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLTextAreaElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLTextAreaElement[JC] var required: Boolean
raw/HTMLTextAreaElement[JC] var rows: Int
raw/HTMLTextAreaElement[JC] def scrollHeight: Int
raw/HTMLTextAreaElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLTextAreaElement[JC] var scrollLeft: Double
raw/HTMLTextAreaElement[JC] var scrollTop: Double
raw/HTMLTextAreaElement[JC] def scrollWidth: Int
raw/HTMLTextAreaElement[JC] def select(): Unit
raw/HTMLTextAreaElement[JC] var selectionEnd: Int
raw/HTMLTextAreaElement[JC] var selectionStart: Int
raw/HTMLTextAreaElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLTextAreaElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLTextAreaElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLTextAreaElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLTextAreaElement[JC] def setCustomValidity(error: String): Unit
raw/HTMLTextAreaElement[JC] def setSelectionRange(start: Int, end: Int): Unit
raw/HTMLTextAreaElement[JC] var spellcheck: Boolean
raw/HTMLTextAreaElement[JC] var status: js.Any
raw/HTMLTextAreaElement[JC] def style: CSSStyleDeclaration
raw/HTMLTextAreaElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLTextAreaElement[JC] def style_ = (value: String): Unit
raw/HTMLTextAreaElement[JC] var tabIndex: Int
raw/HTMLTextAreaElement[JC] def tagName: String
raw/HTMLTextAreaElement[JC] var textContent: String
raw/HTMLTextAreaElement[JC] var title: String
raw/HTMLTextAreaElement[JC] def `type`: String
raw/HTMLTextAreaElement[JC] def validationMessage: String
raw/HTMLTextAreaElement[JC] def validity: ValidityState
raw/HTMLTextAreaElement[JC] var value: String
raw/HTMLTextAreaElement[JC] def willValidate: Boolean
raw/HTMLTextAreaElement[JC] var wrap: String
raw/HTMLTitleElement[JC] var accessKey: String
raw/HTMLTitleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLTitleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLTitleElement[JC] def appendChild(newChild: Node): Node
raw/HTMLTitleElement[JC] def attributes: NamedNodeMap
raw/HTMLTitleElement[JC] def blur(): Unit
raw/HTMLTitleElement[JC] def childElementCount: Int
raw/HTMLTitleElement[JC] def childNodes: NodeList
raw/HTMLTitleElement[JC] def children: HTMLCollection
raw/HTMLTitleElement[JC] var classList: DOMTokenList
raw/HTMLTitleElement[JC] var className: String
raw/HTMLTitleElement[JC] def click(): Unit
raw/HTMLTitleElement[JC] def clientHeight: Int
raw/HTMLTitleElement[JC] def clientLeft: Int
raw/HTMLTitleElement[JC] def clientTop: Int
raw/HTMLTitleElement[JC] def clientWidth: Int
raw/HTMLTitleElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLTitleElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLTitleElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLTitleElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLTitleElement[JC] var contentEditable: String
raw/HTMLTitleElement[JC] def dataset: js.Dictionary[String]
raw/HTMLTitleElement[JC] var dir: String
raw/HTMLTitleElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLTitleElement[JC] var draggable: Boolean
raw/HTMLTitleElement[JC] var filters: Object
raw/HTMLTitleElement[JC] def firstChild: Node
raw/HTMLTitleElement[JC] def firstElementChild: Element
raw/HTMLTitleElement[JC] def focus(): Unit
raw/HTMLTitleElement[JC] def getAttribute(name: String): String
raw/HTMLTitleElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLTitleElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLTitleElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLTitleElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLTitleElement[JC] def getClientRects(): ClientRectList
raw/HTMLTitleElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLTitleElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLTitleElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLTitleElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLTitleElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLTitleElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLTitleElement[JC] def hasAttributes(): Boolean
raw/HTMLTitleElement[JC] def hasChildNodes(): Boolean
raw/HTMLTitleElement[JC] var id: String
raw/HTMLTitleElement[JC] var innerHTML: String
raw/HTMLTitleElement[JC] var innerText: String
raw/HTMLTitleElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLTitleElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLTitleElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLTitleElement[JC] def isContentEditable: Boolean
raw/HTMLTitleElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLTitleElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLTitleElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLTitleElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLTitleElement[JC] var lang: String
raw/HTMLTitleElement[JC] def lastChild: Node
raw/HTMLTitleElement[JC] def lastElementChild: Element
raw/HTMLTitleElement[JC] def localName: String
raw/HTMLTitleElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLTitleElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLTitleElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLTitleElement[JC] def matches(selector: String): Boolean
raw/HTMLTitleElement[JC] def namespaceURI: String
raw/HTMLTitleElement[JC] def nextElementSibling: Element
raw/HTMLTitleElement[JC] def nextSibling: Node
raw/HTMLTitleElement[JC] def nodeName: String
raw/HTMLTitleElement[JC] def nodeType: Int
raw/HTMLTitleElement[JC] var nodeValue: String
raw/HTMLTitleElement[JC] def normalize(): Unit
raw/HTMLTitleElement[JC] def offsetHeight: Double
raw/HTMLTitleElement[JC] def offsetLeft: Double
raw/HTMLTitleElement[JC] def offsetParent: Element
raw/HTMLTitleElement[JC] def offsetTop: Double
raw/HTMLTitleElement[JC] def offsetWidth: Double
raw/HTMLTitleElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLTitleElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLTitleElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLTitleElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLTitleElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLTitleElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLTitleElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLTitleElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLTitleElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLTitleElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLTitleElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLTitleElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLTitleElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLTitleElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLTitleElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLTitleElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLTitleElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLTitleElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLTitleElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLTitleElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLTitleElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLTitleElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onended: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLTitleElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLTitleElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLTitleElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLTitleElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLTitleElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLTitleElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLTitleElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLTitleElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLTitleElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLTitleElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLTitleElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLTitleElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLTitleElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLTitleElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLTitleElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLTitleElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLTitleElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLTitleElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLTitleElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLTitleElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLTitleElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLTitleElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLTitleElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLTitleElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLTitleElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLTitleElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLTitleElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLTitleElement[JC] var outerHTML: String
raw/HTMLTitleElement[JC] def ownerDocument: Document
raw/HTMLTitleElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLTitleElement[JC] var parentElement: HTMLElement
raw/HTMLTitleElement[JC] def parentNode: Node
raw/HTMLTitleElement[JC] def prefix: String
raw/HTMLTitleElement[JC] def previousElementSibling: Element
raw/HTMLTitleElement[JC] def previousSibling: Node
raw/HTMLTitleElement[JC] def querySelector(selectors: String): Element
raw/HTMLTitleElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLTitleElement[JC] var readyState: js.Any
raw/HTMLTitleElement[JC] var recordNumber: js.Any
raw/HTMLTitleElement[JC] def removeAttribute(name: String): Unit
raw/HTMLTitleElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLTitleElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLTitleElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLTitleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLTitleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLTitleElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLTitleElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLTitleElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLTitleElement[JC] def scrollHeight: Int
raw/HTMLTitleElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLTitleElement[JC] var scrollLeft: Double
raw/HTMLTitleElement[JC] var scrollTop: Double
raw/HTMLTitleElement[JC] def scrollWidth: Int
raw/HTMLTitleElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLTitleElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLTitleElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLTitleElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLTitleElement[JC] var spellcheck: Boolean
raw/HTMLTitleElement[JC] def style: CSSStyleDeclaration
raw/HTMLTitleElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLTitleElement[JC] def style_ = (value: String): Unit
raw/HTMLTitleElement[JC] var tabIndex: Int
raw/HTMLTitleElement[JC] def tagName: String
raw/HTMLTitleElement[JC] var text: String
raw/HTMLTitleElement[JC] var textContent: String
raw/HTMLTitleElement[JC] var title: String
raw/HTMLTrackElement[JC] var accessKey: String
raw/HTMLTrackElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLTrackElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLTrackElement[JC] def appendChild(newChild: Node): Node
raw/HTMLTrackElement[JC] def attributes: NamedNodeMap
raw/HTMLTrackElement[JC] def blur(): Unit
raw/HTMLTrackElement[JC] def childElementCount: Int
raw/HTMLTrackElement[JC] def childNodes: NodeList
raw/HTMLTrackElement[JC] def children: HTMLCollection
raw/HTMLTrackElement[JC] var classList: DOMTokenList
raw/HTMLTrackElement[JC] var className: String
raw/HTMLTrackElement[JC] def click(): Unit
raw/HTMLTrackElement[JC] def clientHeight: Int
raw/HTMLTrackElement[JC] def clientLeft: Int
raw/HTMLTrackElement[JC] def clientTop: Int
raw/HTMLTrackElement[JC] def clientWidth: Int
raw/HTMLTrackElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLTrackElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLTrackElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLTrackElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLTrackElement[JC] var contentEditable: String
raw/HTMLTrackElement[JC] def dataset: js.Dictionary[String]
raw/HTMLTrackElement[JC] var dir: String
raw/HTMLTrackElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLTrackElement[JC] var draggable: Boolean
raw/HTMLTrackElement[JC] var filters: Object
raw/HTMLTrackElement[JC] def firstChild: Node
raw/HTMLTrackElement[JC] def firstElementChild: Element
raw/HTMLTrackElement[JC] def focus(): Unit
raw/HTMLTrackElement[JC] def getAttribute(name: String): String
raw/HTMLTrackElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLTrackElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLTrackElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLTrackElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLTrackElement[JC] def getClientRects(): ClientRectList
raw/HTMLTrackElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLTrackElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLTrackElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLTrackElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLTrackElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLTrackElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLTrackElement[JC] def hasAttributes(): Boolean
raw/HTMLTrackElement[JC] def hasChildNodes(): Boolean
raw/HTMLTrackElement[JC] var id: String
raw/HTMLTrackElement[JC] var innerHTML: String
raw/HTMLTrackElement[JC] var innerText: String
raw/HTMLTrackElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLTrackElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLTrackElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLTrackElement[JC] def isContentEditable: Boolean
raw/HTMLTrackElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLTrackElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLTrackElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLTrackElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLTrackElement[JC] var kind: String
raw/HTMLTrackElement[JC] var label: String
raw/HTMLTrackElement[JC] var lang: String
raw/HTMLTrackElement[JC] def lastChild: Node
raw/HTMLTrackElement[JC] def lastElementChild: Element
raw/HTMLTrackElement[JC] def localName: String
raw/HTMLTrackElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLTrackElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLTrackElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLTrackElement[JC] def matches(selector: String): Boolean
raw/HTMLTrackElement[JC] def namespaceURI: String
raw/HTMLTrackElement[JC] def nextElementSibling: Element
raw/HTMLTrackElement[JC] def nextSibling: Node
raw/HTMLTrackElement[JC] def nodeName: String
raw/HTMLTrackElement[JC] def nodeType: Int
raw/HTMLTrackElement[JC] var nodeValue: String
raw/HTMLTrackElement[JC] def normalize(): Unit
raw/HTMLTrackElement[JC] def offsetHeight: Double
raw/HTMLTrackElement[JC] def offsetLeft: Double
raw/HTMLTrackElement[JC] def offsetParent: Element
raw/HTMLTrackElement[JC] def offsetTop: Double
raw/HTMLTrackElement[JC] def offsetWidth: Double
raw/HTMLTrackElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLTrackElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLTrackElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLTrackElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLTrackElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLTrackElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLTrackElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLTrackElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLTrackElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLTrackElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLTrackElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLTrackElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLTrackElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLTrackElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLTrackElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLTrackElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLTrackElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLTrackElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLTrackElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLTrackElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLTrackElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLTrackElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onended: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLTrackElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLTrackElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLTrackElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLTrackElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLTrackElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLTrackElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLTrackElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLTrackElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLTrackElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLTrackElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLTrackElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLTrackElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLTrackElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLTrackElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLTrackElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLTrackElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLTrackElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLTrackElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLTrackElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLTrackElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLTrackElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLTrackElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLTrackElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLTrackElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLTrackElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLTrackElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLTrackElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLTrackElement[JC] var outerHTML: String
raw/HTMLTrackElement[JC] def ownerDocument: Document
raw/HTMLTrackElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLTrackElement[JC] var parentElement: HTMLElement
raw/HTMLTrackElement[JC] def parentNode: Node
raw/HTMLTrackElement[JC] def prefix: String
raw/HTMLTrackElement[JC] def previousElementSibling: Element
raw/HTMLTrackElement[JC] def previousSibling: Node
raw/HTMLTrackElement[JC] def querySelector(selectors: String): Element
raw/HTMLTrackElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLTrackElement[JC] var readyState: js.Any
raw/HTMLTrackElement[JC] var recordNumber: js.Any
raw/HTMLTrackElement[JC] def removeAttribute(name: String): Unit
raw/HTMLTrackElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLTrackElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLTrackElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLTrackElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLTrackElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLTrackElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLTrackElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLTrackElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLTrackElement[JC] def scrollHeight: Int
raw/HTMLTrackElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLTrackElement[JC] var scrollLeft: Double
raw/HTMLTrackElement[JC] var scrollTop: Double
raw/HTMLTrackElement[JC] def scrollWidth: Int
raw/HTMLTrackElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLTrackElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLTrackElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLTrackElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLTrackElement[JC] var spellcheck: Boolean
raw/HTMLTrackElement[JC] var src: String
raw/HTMLTrackElement[JC] var srclang: String
raw/HTMLTrackElement[JC] def style: CSSStyleDeclaration
raw/HTMLTrackElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLTrackElement[JC] def style_ = (value: String): Unit
raw/HTMLTrackElement[JC] var tabIndex: Int
raw/HTMLTrackElement[JC] def tagName: String
raw/HTMLTrackElement[JC] var textContent: String
raw/HTMLTrackElement[JC] var title: String
raw/HTMLTrackElement[JC] def track: TextTrack
raw/HTMLUListElement[JC] var accessKey: String
raw/HTMLUListElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLUListElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLUListElement[JC] def appendChild(newChild: Node): Node
raw/HTMLUListElement[JC] def attributes: NamedNodeMap
raw/HTMLUListElement[JC] def blur(): Unit
raw/HTMLUListElement[JC] def childElementCount: Int
raw/HTMLUListElement[JC] def childNodes: NodeList
raw/HTMLUListElement[JC] def children: HTMLCollection
raw/HTMLUListElement[JC] var classList: DOMTokenList
raw/HTMLUListElement[JC] var className: String
raw/HTMLUListElement[JC] def click(): Unit
raw/HTMLUListElement[JC] def clientHeight: Int
raw/HTMLUListElement[JC] def clientLeft: Int
raw/HTMLUListElement[JC] def clientTop: Int
raw/HTMLUListElement[JC] def clientWidth: Int
raw/HTMLUListElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLUListElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLUListElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLUListElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLUListElement[JC] var contentEditable: String
raw/HTMLUListElement[JC] def dataset: js.Dictionary[String]
raw/HTMLUListElement[JC] var dir: String
raw/HTMLUListElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLUListElement[JC] var draggable: Boolean
raw/HTMLUListElement[JC] var filters: Object
raw/HTMLUListElement[JC] def firstChild: Node
raw/HTMLUListElement[JC] def firstElementChild: Element
raw/HTMLUListElement[JC] def focus(): Unit
raw/HTMLUListElement[JC] def getAttribute(name: String): String
raw/HTMLUListElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLUListElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLUListElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLUListElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLUListElement[JC] def getClientRects(): ClientRectList
raw/HTMLUListElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLUListElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLUListElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLUListElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLUListElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLUListElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLUListElement[JC] def hasAttributes(): Boolean
raw/HTMLUListElement[JC] def hasChildNodes(): Boolean
raw/HTMLUListElement[JC] var id: String
raw/HTMLUListElement[JC] var innerHTML: String
raw/HTMLUListElement[JC] var innerText: String
raw/HTMLUListElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLUListElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLUListElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLUListElement[JC] def isContentEditable: Boolean
raw/HTMLUListElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLUListElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLUListElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLUListElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLUListElement[JC] var lang: String
raw/HTMLUListElement[JC] def lastChild: Node
raw/HTMLUListElement[JC] def lastElementChild: Element
raw/HTMLUListElement[JC] def localName: String
raw/HTMLUListElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLUListElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLUListElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLUListElement[JC] def matches(selector: String): Boolean
raw/HTMLUListElement[JC] def namespaceURI: String
raw/HTMLUListElement[JC] def nextElementSibling: Element
raw/HTMLUListElement[JC] def nextSibling: Node
raw/HTMLUListElement[JC] def nodeName: String
raw/HTMLUListElement[JC] def nodeType: Int
raw/HTMLUListElement[JC] var nodeValue: String
raw/HTMLUListElement[JC] def normalize(): Unit
raw/HTMLUListElement[JC] def offsetHeight: Double
raw/HTMLUListElement[JC] def offsetLeft: Double
raw/HTMLUListElement[JC] def offsetParent: Element
raw/HTMLUListElement[JC] def offsetTop: Double
raw/HTMLUListElement[JC] def offsetWidth: Double
raw/HTMLUListElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLUListElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLUListElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLUListElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLUListElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLUListElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLUListElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLUListElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLUListElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLUListElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLUListElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLUListElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLUListElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLUListElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLUListElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLUListElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLUListElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLUListElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLUListElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLUListElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLUListElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLUListElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLUListElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLUListElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onended: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLUListElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLUListElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLUListElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLUListElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLUListElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLUListElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLUListElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLUListElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLUListElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLUListElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLUListElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLUListElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLUListElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLUListElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLUListElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLUListElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLUListElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLUListElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLUListElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLUListElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLUListElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLUListElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLUListElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLUListElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLUListElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLUListElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLUListElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLUListElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLUListElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLUListElement[JC] var outerHTML: String
raw/HTMLUListElement[JC] def ownerDocument: Document
raw/HTMLUListElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLUListElement[JC] var parentElement: HTMLElement
raw/HTMLUListElement[JC] def parentNode: Node
raw/HTMLUListElement[JC] def prefix: String
raw/HTMLUListElement[JC] def previousElementSibling: Element
raw/HTMLUListElement[JC] def previousSibling: Node
raw/HTMLUListElement[JC] def querySelector(selectors: String): Element
raw/HTMLUListElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLUListElement[JC] var readyState: js.Any
raw/HTMLUListElement[JC] var recordNumber: js.Any
raw/HTMLUListElement[JC] def removeAttribute(name: String): Unit
raw/HTMLUListElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLUListElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLUListElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLUListElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLUListElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLUListElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLUListElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLUListElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLUListElement[JC] def scrollHeight: Int
raw/HTMLUListElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLUListElement[JC] var scrollLeft: Double
raw/HTMLUListElement[JC] var scrollTop: Double
raw/HTMLUListElement[JC] def scrollWidth: Int
raw/HTMLUListElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLUListElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLUListElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLUListElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLUListElement[JC] var spellcheck: Boolean
raw/HTMLUListElement[JC] def style: CSSStyleDeclaration
raw/HTMLUListElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLUListElement[JC] def style_ = (value: String): Unit
raw/HTMLUListElement[JC] var tabIndex: Int
raw/HTMLUListElement[JC] def tagName: String
raw/HTMLUListElement[JC] var textContent: String
raw/HTMLUListElement[JC] var title: String
raw/HTMLUnknownElement[JC] var accessKey: String
raw/HTMLUnknownElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLUnknownElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLUnknownElement[JC] def appendChild(newChild: Node): Node
raw/HTMLUnknownElement[JC] def attributes: NamedNodeMap
raw/HTMLUnknownElement[JC] def blur(): Unit
raw/HTMLUnknownElement[JC] def childElementCount: Int
raw/HTMLUnknownElement[JC] def childNodes: NodeList
raw/HTMLUnknownElement[JC] def children: HTMLCollection
raw/HTMLUnknownElement[JC] var classList: DOMTokenList
raw/HTMLUnknownElement[JC] var className: String
raw/HTMLUnknownElement[JC] def click(): Unit
raw/HTMLUnknownElement[JC] def clientHeight: Int
raw/HTMLUnknownElement[JC] def clientLeft: Int
raw/HTMLUnknownElement[JC] def clientTop: Int
raw/HTMLUnknownElement[JC] def clientWidth: Int
raw/HTMLUnknownElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLUnknownElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLUnknownElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLUnknownElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLUnknownElement[JC] var contentEditable: String
raw/HTMLUnknownElement[JC] def dataset: js.Dictionary[String]
raw/HTMLUnknownElement[JC] var dir: String
raw/HTMLUnknownElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLUnknownElement[JC] var draggable: Boolean
raw/HTMLUnknownElement[JC] var filters: Object
raw/HTMLUnknownElement[JC] def firstChild: Node
raw/HTMLUnknownElement[JC] def firstElementChild: Element
raw/HTMLUnknownElement[JC] def focus(): Unit
raw/HTMLUnknownElement[JC] def getAttribute(name: String): String
raw/HTMLUnknownElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLUnknownElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLUnknownElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLUnknownElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLUnknownElement[JC] def getClientRects(): ClientRectList
raw/HTMLUnknownElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLUnknownElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLUnknownElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLUnknownElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLUnknownElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLUnknownElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLUnknownElement[JC] def hasAttributes(): Boolean
raw/HTMLUnknownElement[JC] def hasChildNodes(): Boolean
raw/HTMLUnknownElement[JC] var id: String
raw/HTMLUnknownElement[JC] var innerHTML: String
raw/HTMLUnknownElement[JC] var innerText: String
raw/HTMLUnknownElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLUnknownElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLUnknownElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLUnknownElement[JC] def isContentEditable: Boolean
raw/HTMLUnknownElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLUnknownElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLUnknownElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLUnknownElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLUnknownElement[JC] var lang: String
raw/HTMLUnknownElement[JC] def lastChild: Node
raw/HTMLUnknownElement[JC] def lastElementChild: Element
raw/HTMLUnknownElement[JC] def localName: String
raw/HTMLUnknownElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLUnknownElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLUnknownElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLUnknownElement[JC] def matches(selector: String): Boolean
raw/HTMLUnknownElement[JC] def namespaceURI: String
raw/HTMLUnknownElement[JC] def nextElementSibling: Element
raw/HTMLUnknownElement[JC] def nextSibling: Node
raw/HTMLUnknownElement[JC] def nodeName: String
raw/HTMLUnknownElement[JC] def nodeType: Int
raw/HTMLUnknownElement[JC] var nodeValue: String
raw/HTMLUnknownElement[JC] def normalize(): Unit
raw/HTMLUnknownElement[JC] def offsetHeight: Double
raw/HTMLUnknownElement[JC] def offsetLeft: Double
raw/HTMLUnknownElement[JC] def offsetParent: Element
raw/HTMLUnknownElement[JC] def offsetTop: Double
raw/HTMLUnknownElement[JC] def offsetWidth: Double
raw/HTMLUnknownElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLUnknownElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLUnknownElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLUnknownElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLUnknownElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLUnknownElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLUnknownElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLUnknownElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLUnknownElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLUnknownElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLUnknownElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLUnknownElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLUnknownElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLUnknownElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLUnknownElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLUnknownElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLUnknownElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLUnknownElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLUnknownElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLUnknownElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLUnknownElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLUnknownElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onended: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLUnknownElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLUnknownElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLUnknownElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLUnknownElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLUnknownElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLUnknownElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLUnknownElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLUnknownElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLUnknownElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLUnknownElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLUnknownElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLUnknownElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLUnknownElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLUnknownElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLUnknownElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLUnknownElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLUnknownElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLUnknownElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLUnknownElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLUnknownElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLUnknownElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLUnknownElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLUnknownElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLUnknownElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLUnknownElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLUnknownElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLUnknownElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLUnknownElement[JC] var outerHTML: String
raw/HTMLUnknownElement[JC] def ownerDocument: Document
raw/HTMLUnknownElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLUnknownElement[JC] var parentElement: HTMLElement
raw/HTMLUnknownElement[JC] def parentNode: Node
raw/HTMLUnknownElement[JC] def prefix: String
raw/HTMLUnknownElement[JC] def previousElementSibling: Element
raw/HTMLUnknownElement[JC] def previousSibling: Node
raw/HTMLUnknownElement[JC] def querySelector(selectors: String): Element
raw/HTMLUnknownElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLUnknownElement[JC] var readyState: js.Any
raw/HTMLUnknownElement[JC] var recordNumber: js.Any
raw/HTMLUnknownElement[JC] def removeAttribute(name: String): Unit
raw/HTMLUnknownElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLUnknownElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLUnknownElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLUnknownElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLUnknownElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLUnknownElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLUnknownElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLUnknownElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLUnknownElement[JC] def scrollHeight: Int
raw/HTMLUnknownElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLUnknownElement[JC] var scrollLeft: Double
raw/HTMLUnknownElement[JC] var scrollTop: Double
raw/HTMLUnknownElement[JC] def scrollWidth: Int
raw/HTMLUnknownElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLUnknownElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLUnknownElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLUnknownElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLUnknownElement[JC] var spellcheck: Boolean
raw/HTMLUnknownElement[JC] def style: CSSStyleDeclaration
raw/HTMLUnknownElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLUnknownElement[JC] def style_ = (value: String): Unit
raw/HTMLUnknownElement[JC] var tabIndex: Int
raw/HTMLUnknownElement[JC] def tagName: String
raw/HTMLUnknownElement[JC] var textContent: String
raw/HTMLUnknownElement[JC] var title: String
raw/HTMLVideoElement[JC] var accessKey: String
raw/HTMLVideoElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLVideoElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLVideoElement[JC] def appendChild(newChild: Node): Node
raw/HTMLVideoElement[JC] def attributes: NamedNodeMap
raw/HTMLVideoElement[JC] def audioTracks: AudioTrackList
raw/HTMLVideoElement[JC] var autoplay: Boolean
raw/HTMLVideoElement[JC] def blur(): Unit
raw/HTMLVideoElement[JC] def buffered: TimeRanges
raw/HTMLVideoElement[JC] def canPlayType(`type`: String): String
raw/HTMLVideoElement[JC] def childElementCount: Int
raw/HTMLVideoElement[JC] def childNodes: NodeList
raw/HTMLVideoElement[JC] def children: HTMLCollection
raw/HTMLVideoElement[JC] var classList: DOMTokenList
raw/HTMLVideoElement[JC] var className: String
raw/HTMLVideoElement[JC] def click(): Unit
raw/HTMLVideoElement[JC] def clientHeight: Int
raw/HTMLVideoElement[JC] def clientLeft: Int
raw/HTMLVideoElement[JC] def clientTop: Int
raw/HTMLVideoElement[JC] def clientWidth: Int
raw/HTMLVideoElement[JC] def cloneNode(deep: Boolean?): Node
raw/HTMLVideoElement[JC] def compareDocumentPosition(other: Node): Int
raw/HTMLVideoElement[JC] def contains(child: HTMLElement): Boolean
raw/HTMLVideoElement[JC] def contains(otherNode: Node): Boolean
raw/HTMLVideoElement[JC] var contentEditable: String
raw/HTMLVideoElement[JC] var controls: Boolean
raw/HTMLVideoElement[JC] def currentSrc: String
raw/HTMLVideoElement[JC] var currentTime: Double
raw/HTMLVideoElement[JC] def dataset: js.Dictionary[String]
raw/HTMLVideoElement[JC] var defaultPlaybackRate: Double
raw/HTMLVideoElement[JC] var dir: String
raw/HTMLVideoElement[JC] def dispatchEvent(evt: Event): Boolean
raw/HTMLVideoElement[JC] var draggable: Boolean
raw/HTMLVideoElement[JC] def duration: Double
raw/HTMLVideoElement[JC] def ended: Boolean
raw/HTMLVideoElement[JC] def error: MediaError
raw/HTMLVideoElement[JC] var filters: Object
raw/HTMLVideoElement[JC] def firstChild: Node
raw/HTMLVideoElement[JC] def firstElementChild: Element
raw/HTMLVideoElement[JC] def focus(): Unit
raw/HTMLVideoElement[JC] def getAttribute(name: String): String
raw/HTMLVideoElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/HTMLVideoElement[JC] def getAttributeNode(name: String): Attr
raw/HTMLVideoElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/HTMLVideoElement[JC] def getBoundingClientRect(): ClientRect
raw/HTMLVideoElement[JC] def getClientRects(): ClientRectList
raw/HTMLVideoElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/HTMLVideoElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/HTMLVideoElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/HTMLVideoElement[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/HTMLVideoElement[JC] def hasAttribute(name: String): Boolean
raw/HTMLVideoElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/HTMLVideoElement[JC] def hasAttributes(): Boolean
raw/HTMLVideoElement[JC] def hasChildNodes(): Boolean
raw/HTMLVideoElement[JC] var height: Int
raw/HTMLVideoElement[JC] var id: String
raw/HTMLVideoElement[JC] def initialTime: Double
raw/HTMLVideoElement[JC] var innerHTML: String
raw/HTMLVideoElement[JC] var innerText: String
raw/HTMLVideoElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/HTMLVideoElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/HTMLVideoElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/HTMLVideoElement[JC] def isContentEditable: Boolean
raw/HTMLVideoElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/HTMLVideoElement[JC] def isEqualNode(arg: Node): Boolean
raw/HTMLVideoElement[JC] def isSameNode(other: Node): Boolean
raw/HTMLVideoElement[JC] def isSupported(feature: String, version: String): Boolean
raw/HTMLVideoElement[JC] var lang: String
raw/HTMLVideoElement[JC] def lastChild: Node
raw/HTMLVideoElement[JC] def lastElementChild: Element
raw/HTMLVideoElement[JC] def load(): Unit
raw/HTMLVideoElement[JC] def localName: String
raw/HTMLVideoElement[JC] def lookupNamespaceURI(prefix: String): String
raw/HTMLVideoElement[JC] def lookupPrefix(namespaceURI: String): String
raw/HTMLVideoElement[JC] var loop: Boolean
raw/HTMLVideoElement[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/HTMLVideoElement[JC] def matches(selector: String): Boolean
raw/HTMLVideoElement[JC] var muted: Boolean
raw/HTMLVideoElement[JC] def namespaceURI: String
raw/HTMLVideoElement[JC] def networkState: Int
raw/HTMLVideoElement[JC] def nextElementSibling: Element
raw/HTMLVideoElement[JC] def nextSibling: Node
raw/HTMLVideoElement[JC] def nodeName: String
raw/HTMLVideoElement[JC] def nodeType: Int
raw/HTMLVideoElement[JC] var nodeValue: String
raw/HTMLVideoElement[JC] def normalize(): Unit
raw/HTMLVideoElement[JC] def offsetHeight: Double
raw/HTMLVideoElement[JC] def offsetLeft: Double
raw/HTMLVideoElement[JC] def offsetParent: Element
raw/HTMLVideoElement[JC] def offsetTop: Double
raw/HTMLVideoElement[JC] def offsetWidth: Double
raw/HTMLVideoElement[JC] var onabort: js.Function1[UIEvent, _]
raw/HTMLVideoElement[JC] var onactivate: js.Function1[UIEvent, _]
raw/HTMLVideoElement[JC] var onbeforeactivate: js.Function1[UIEvent, _]
raw/HTMLVideoElement[JC] var onbeforecopy: js.Function1[DragEvent, _]
raw/HTMLVideoElement[JC] var onbeforecut: js.Function1[DragEvent, _]
raw/HTMLVideoElement[JC] var onbeforedeactivate: js.Function1[UIEvent, _]
raw/HTMLVideoElement[JC] var onbeforepaste: js.Function1[DragEvent, _]
raw/HTMLVideoElement[JC] var onblur: js.Function1[FocusEvent, _]
raw/HTMLVideoElement[JC] var oncanplay: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var oncanplaythrough: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onchange: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/HTMLVideoElement[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/HTMLVideoElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/HTMLVideoElement[JC] var oncuechange: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/HTMLVideoElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/HTMLVideoElement[JC] var ondeactivate: js.Function1[UIEvent, _]
raw/HTMLVideoElement[JC] var ondrag: js.Function1[DragEvent, _]
raw/HTMLVideoElement[JC] var ondragend: js.Function1[DragEvent, _]
raw/HTMLVideoElement[JC] var ondragenter: js.Function1[DragEvent, _]
raw/HTMLVideoElement[JC] var ondragleave: js.Function1[DragEvent, _]
raw/HTMLVideoElement[JC] var ondragover: js.Function1[DragEvent, _]
raw/HTMLVideoElement[JC] var ondragstart: js.Function1[DragEvent, _]
raw/HTMLVideoElement[JC] var ondrop: js.Function1[DragEvent, _]
raw/HTMLVideoElement[JC] var ondurationchange: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onemptied: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onended: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onfocus: js.Function1[FocusEvent, _]
raw/HTMLVideoElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/HTMLVideoElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLVideoElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onhelp: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var oninput: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/HTMLVideoElement[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/HTMLVideoElement[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/HTMLVideoElement[JC] var onloadeddata: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onloadedmetadata: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onloadstart: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/HTMLVideoElement[JC] var onmouseenter: js.Function1[MouseEvent, _]
raw/HTMLVideoElement[JC] var onmouseleave: js.Function1[MouseEvent, _]
raw/HTMLVideoElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/HTMLVideoElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/HTMLVideoElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/HTMLVideoElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/HTMLVideoElement[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/HTMLVideoElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/HTMLVideoElement[JC] var onpause: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onplay: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onplaying: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/HTMLVideoElement[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/HTMLVideoElement[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/HTMLVideoElement[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/HTMLVideoElement[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/HTMLVideoElement[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/HTMLVideoElement[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/HTMLVideoElement[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/HTMLVideoElement[JC] var onprogress: js.Function1[js.Any, _]
raw/HTMLVideoElement[JC] var onratechange: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onreadystatechange: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onreset: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/HTMLVideoElement[JC] var onseeked: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onseeking: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onselect: js.Function1[UIEvent, _]
raw/HTMLVideoElement[JC] var onselectstart: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onstalled: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onsubmit: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onsuspend: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var ontimeupdate: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onvolumechange: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onwaiting: js.Function1[Event, _]
raw/HTMLVideoElement[JC] var onwheel: js.Function1[WheelEvent, _]
raw/HTMLVideoElement[JC] var outerHTML: String
raw/HTMLVideoElement[JC] def ownerDocument: Document
raw/HTMLVideoElement[JC] override def ownerDocument: HTMLDocument
raw/HTMLVideoElement[JC] var parentElement: HTMLElement
raw/HTMLVideoElement[JC] def parentNode: Node
raw/HTMLVideoElement[JC] def pause(): Unit
raw/HTMLVideoElement[JC] def paused: Boolean
raw/HTMLVideoElement[JC] def play(): js.UndefOr[js.Promise[Unit]]
raw/HTMLVideoElement[JC] var playbackRate: Double
raw/HTMLVideoElement[JC] def played: TimeRanges
raw/HTMLVideoElement[JC] var poster: String
raw/HTMLVideoElement[JC] def prefix: String
raw/HTMLVideoElement[JC] var preload: String
raw/HTMLVideoElement[JC] def previousElementSibling: Element
raw/HTMLVideoElement[JC] def previousSibling: Node
raw/HTMLVideoElement[JC] def querySelector(selectors: String): Element
raw/HTMLVideoElement[JC] def querySelectorAll(selectors: String): NodeList
raw/HTMLVideoElement[JC] var readyState: js.Any
raw/HTMLVideoElement[JC] var recordNumber: js.Any
raw/HTMLVideoElement[JC] def removeAttribute(name: String): Unit
raw/HTMLVideoElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/HTMLVideoElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/HTMLVideoElement[JC] def removeChild(oldChild: Node): Node
raw/HTMLVideoElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/HTMLVideoElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/HTMLVideoElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/HTMLVideoElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/HTMLVideoElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/HTMLVideoElement[JC] def scrollHeight: Int
raw/HTMLVideoElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/HTMLVideoElement[JC] var scrollLeft: Double
raw/HTMLVideoElement[JC] var scrollTop: Double
raw/HTMLVideoElement[JC] def scrollWidth: Int
raw/HTMLVideoElement[JC] def seekable: TimeRanges
raw/HTMLVideoElement[JC] def seeking: Boolean
raw/HTMLVideoElement[JC] def setAttribute(name: String, value: String): Unit
raw/HTMLVideoElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/HTMLVideoElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/HTMLVideoElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/HTMLVideoElement[JC] var spellcheck: Boolean
raw/HTMLVideoElement[JC] var src: String
raw/HTMLVideoElement[JC] var srcObject: js.UndefOr[MediaStream | MediaSource | Blob]
raw/HTMLVideoElement[JC] def style: CSSStyleDeclaration
raw/HTMLVideoElement[JC] def style_ = (value: CSSStyleDeclaration): Unit
raw/HTMLVideoElement[JC] def style_ = (value: String): Unit
raw/HTMLVideoElement[JC] var tabIndex: Int
raw/HTMLVideoElement[JC] def tagName: String
raw/HTMLVideoElement[JC] var textContent: String
raw/HTMLVideoElement[JC] def textTracks: TextTrackList
raw/HTMLVideoElement[JC] var title: String
raw/HTMLVideoElement[JC] def videoHeight: Int
raw/HTMLVideoElement[JC] def videoWidth: Int
raw/HTMLVideoElement[JC] var volume: Double
raw/HTMLVideoElement[JC] var width: Int
raw/HashChangeEvent[JT] def bubbles: Boolean
raw/HashChangeEvent[JT] def cancelBubble: Boolean
raw/HashChangeEvent[JT] def cancelable: Boolean
raw/HashChangeEvent[JT] def currentTarget: EventTarget
raw/HashChangeEvent[JT] def defaultPrevented: Boolean
raw/HashChangeEvent[JT] def eventPhase: Int
raw/HashChangeEvent[JT] def isTrusted: Boolean
raw/HashChangeEvent[JT] def newURL: String
raw/HashChangeEvent[JT] def oldURL: String
raw/HashChangeEvent[JT] def preventDefault(): Unit
raw/HashChangeEvent[JT] def stopImmediatePropagation(): Unit
raw/HashChangeEvent[JT] def stopPropagation(): Unit
raw/HashChangeEvent[JT] def target: EventTarget
raw/HashChangeEvent[JT] def timeStamp: Double
raw/HashChangeEvent[JT] def `type`: String
raw/History[JC] def back(): Unit
raw/History[JC] def forward(): Unit
raw/History[JC] def go(): Unit
raw/History[JC] def go(delta: Int): Unit
raw/History[JC] def length: Int
raw/History[JC] def pushState(statedata: js.Any, title: String): Unit
raw/History[JC] def pushState(statedata: js.Any, title: String, url: String): Unit
raw/History[JC] def replaceState(statedata: js.Any, title: String): Unit
raw/History[JC] def replaceState(statedata: js.Any, title: String, url: String): Unit
raw/History[JC] def state: js.Any
raw/IDBCursor[JC] def advance(count: Int): Unit
raw/IDBCursor[JC] def continue(key: js.Any = ???): Unit
raw/IDBCursor[JC] def delete(): IDBRequest
raw/IDBCursor[JC] def direction: String
raw/IDBCursor[JC] def key: js.Any
raw/IDBCursor[JC] def primaryKey: js.Any
raw/IDBCursor[JC] def source: js.Any
raw/IDBCursor[JC] def update(value: js.Any): IDBRequest
raw/IDBCursor[JO] val NEXT: String
raw/IDBCursor[JO] val NEXT_NO_DUPLICATE: String
raw/IDBCursor[JO] val PREV: String
raw/IDBCursor[JO] val PREV_NO_DUPLICATE: String
raw/IDBCursorWithValue[JC] def advance(count: Int): Unit
raw/IDBCursorWithValue[JC] def continue(key: js.Any = ???): Unit
raw/IDBCursorWithValue[JC] def delete(): IDBRequest
raw/IDBCursorWithValue[JC] def direction: String
raw/IDBCursorWithValue[JC] def key: js.Any
raw/IDBCursorWithValue[JC] def primaryKey: js.Any
raw/IDBCursorWithValue[JC] def source: js.Any
raw/IDBCursorWithValue[JC] def update(value: js.Any): IDBRequest
raw/IDBCursorWithValue[JC] def value: js.Any
raw/IDBDatabase[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/IDBDatabase[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/IDBDatabase[JC] def close(): Unit
raw/IDBDatabase[JC] def createObjectStore(name: String, optionalParameters: js.Any?): IDBObjectStore
raw/IDBDatabase[JC] def deleteObjectStore(name: String): Unit
raw/IDBDatabase[JC] def dispatchEvent(evt: Event): Boolean
raw/IDBDatabase[JC] def name: String
raw/IDBDatabase[JC] def objectStoreNames: DOMStringList
raw/IDBDatabase[JC] var onabort: js.Function1[Event, _]
raw/IDBDatabase[JC] var onerror: js.Function1[Event, _]
raw/IDBDatabase[JC] var onversionchange: js.Function1[IDBVersionChangeEvent, _]
raw/IDBDatabase[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/IDBDatabase[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/IDBDatabase[JC] def transaction(storeNames: js.Any, mode: String?): IDBTransaction
raw/IDBDatabase[JC] def version: Int
raw/IDBEnvironment[JT] def indexedDB: IDBFactory  (@deprecated in 1.2.0)
raw/IDBFactory[JC] def cmp(first: js.Any, second: js.Any): Int
raw/IDBFactory[JC] def deleteDatabase(name: String): IDBOpenDBRequest
raw/IDBFactory[JC] def open(name: String): IDBOpenDBRequest
raw/IDBFactory[JC] def open(name: String, version: Int): IDBOpenDBRequest
raw/IDBIndex[JC] def count(): IDBRequest
raw/IDBIndex[JC] def count(key: js.Any): IDBRequest
raw/IDBIndex[JC] def get(key: js.Any): IDBRequest
raw/IDBIndex[JC] def getKey(key: js.Any): IDBRequest
raw/IDBIndex[JC] def keyPath: String
raw/IDBIndex[JC] def name: String
raw/IDBIndex[JC] def objectStore: IDBObjectStore
raw/IDBIndex[JC] def openCursor(range: IDBKeyRange?, direction: String?): IDBRequest
raw/IDBIndex[JC] def openKeyCursor(range: IDBKeyRange?, direction: String?): IDBRequest
raw/IDBIndex[JC] def unique: Boolean
raw/IDBKeyRange[JC] def lower: js.Any
raw/IDBKeyRange[JC] def lowerOpen: Boolean
raw/IDBKeyRange[JC] def upper: js.Any
raw/IDBKeyRange[JC] def upperOpen: Boolean
raw/IDBKeyRange[JO] def bound(lower: js.Any, upper: js.Any, lowerOpen: Boolean?, upperOpen: Boolean?): IDBKeyRange
raw/IDBKeyRange[JO] def lowerBound(bound: js.Any, open: Boolean?): IDBKeyRange
raw/IDBKeyRange[JO] def only(value: js.Any): IDBKeyRange
raw/IDBKeyRange[JO] def upperBound(bound: js.Any, open: Boolean?): IDBKeyRange
raw/IDBObjectStore[JC] def add(value: js.Any, key: js.Any?): IDBRequest
raw/IDBObjectStore[JC] def clear(): IDBRequest
raw/IDBObjectStore[JC] def count(key: js.Any?): IDBRequest
raw/IDBObjectStore[JC] def createIndex(name: String, keyPath: String, optionalParameters: js.Any?): IDBIndex
raw/IDBObjectStore[JC] def delete(key: js.Any): IDBRequest
raw/IDBObjectStore[JC] def deleteIndex(indexName: String): Unit
raw/IDBObjectStore[JC] def get(key: js.Any): IDBRequest
raw/IDBObjectStore[JC] def index(name: String): IDBIndex
raw/IDBObjectStore[JC] def indexNames: DOMStringList
raw/IDBObjectStore[JC] def keyPath: String
raw/IDBObjectStore[JC] def name: String
raw/IDBObjectStore[JC] def openCursor(range: js.Any?, direction: String?): IDBRequest
raw/IDBObjectStore[JC] def put(value: js.Any, key: js.Any?): IDBRequest
raw/IDBObjectStore[JC] def transaction: IDBTransaction
raw/IDBOpenDBRequest[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/IDBOpenDBRequest[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/IDBOpenDBRequest[JC] def dispatchEvent(evt: Event): Boolean
raw/IDBOpenDBRequest[JC] def error: DOMException
raw/IDBOpenDBRequest[JC] var onblocked: js.Function1[IDBVersionChangeEvent, _]
raw/IDBOpenDBRequest[JC] var onerror: js.Function1[Event, _]
raw/IDBOpenDBRequest[JC] var onsuccess: js.Function1[Event, _]
raw/IDBOpenDBRequest[JC] var onupgradeneeded: js.Function1[IDBVersionChangeEvent, _]
raw/IDBOpenDBRequest[JC] def readyState: String
raw/IDBOpenDBRequest[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/IDBOpenDBRequest[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/IDBOpenDBRequest[JC] def result: js.Any
raw/IDBOpenDBRequest[JC] def source: js.Any
raw/IDBOpenDBRequest[JC] def transaction: IDBTransaction
raw/IDBRequest[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/IDBRequest[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/IDBRequest[JC] def dispatchEvent(evt: Event): Boolean
raw/IDBRequest[JC] def error: DOMException
raw/IDBRequest[JC] var onerror: js.Function1[Event, _]
raw/IDBRequest[JC] var onsuccess: js.Function1[Event, _]
raw/IDBRequest[JC] def readyState: String
raw/IDBRequest[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/IDBRequest[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/IDBRequest[JC] def result: js.Any
raw/IDBRequest[JC] def source: js.Any
raw/IDBRequest[JC] def transaction: IDBTransaction
raw/IDBTransaction[JC] def abort(): Unit
raw/IDBTransaction[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/IDBTransaction[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/IDBTransaction[JC] def db: IDBDatabase
raw/IDBTransaction[JC] def dispatchEvent(evt: Event): Boolean
raw/IDBTransaction[JC] def error: DOMException
raw/IDBTransaction[JC] def mode: String
raw/IDBTransaction[JC] def objectStore(name: String): IDBObjectStore
raw/IDBTransaction[JC] var onabort: js.Function1[Event, _]
raw/IDBTransaction[JC] var oncomplete: js.Function1[Event, _]
raw/IDBTransaction[JC] var onerror: js.Function1[Event, _]
raw/IDBTransaction[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/IDBTransaction[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/IDBTransaction[JO] val READ_ONLY: String
raw/IDBTransaction[JO] val READ_WRITE: String
raw/IDBTransaction[JO] val VERSION_CHANGE: String
raw/IDBVersionChangeEvent[JC] def bubbles: Boolean
raw/IDBVersionChangeEvent[JC] def cancelBubble: Boolean
raw/IDBVersionChangeEvent[JC] def cancelable: Boolean
raw/IDBVersionChangeEvent[JC] def currentTarget: EventTarget
raw/IDBVersionChangeEvent[JC] def defaultPrevented: Boolean
raw/IDBVersionChangeEvent[JC] def eventPhase: Int
raw/IDBVersionChangeEvent[JC] def isTrusted: Boolean
raw/IDBVersionChangeEvent[JC] def newVersion: Integer
raw/IDBVersionChangeEvent[JC] def oldVersion: Int
raw/IDBVersionChangeEvent[JC] def preventDefault(): Unit
raw/IDBVersionChangeEvent[JC] def stopImmediatePropagation(): Unit
raw/IDBVersionChangeEvent[JC] def stopPropagation(): Unit
raw/IDBVersionChangeEvent[JC] def target: EventTarget
raw/IDBVersionChangeEvent[JC] def timeStamp: Double
raw/IDBVersionChangeEvent[JC] def `type`: String
raw/IDBVersionChangeEventInit[JT] var bubbles: js.UndefOr[Boolean]
raw/IDBVersionChangeEventInit[JT] var cancelable: js.UndefOr[Boolean]
raw/IDBVersionChangeEventInit[JT] var composed: js.UndefOr[Boolean]
raw/IDBVersionChangeEventInit[JT] var newVersion: js.UndefOr[Integer]
raw/IDBVersionChangeEventInit[JT] var oldVersion: js.UndefOr[Int]
raw/IDBVersionChangeEventInit[JT] var scoped: js.UndefOr[Boolean]
raw/ImageBitmap[JT] def height: Double
raw/ImageBitmap[JT] def width: Double
raw/ImageData[JC] def data: js.Array[Int]
raw/ImageData[JC] def height: Int
raw/ImageData[JC] def width: Int
raw/KeyboardEvent[JC] def altKey: Boolean
raw/KeyboardEvent[JC] def bubbles: Boolean
raw/KeyboardEvent[JC] def cancelBubble: Boolean
raw/KeyboardEvent[JC] def cancelable: Boolean
raw/KeyboardEvent[JC] def charCode: Int
raw/KeyboardEvent[JC] def ctrlKey: Boolean
raw/KeyboardEvent[JC] def currentTarget: EventTarget
raw/KeyboardEvent[JC] def defaultPrevented: Boolean
raw/KeyboardEvent[JC] def detail: Int
raw/KeyboardEvent[JC] def eventPhase: Int
raw/KeyboardEvent[JC] def getModifierState(keyArg: String): Boolean
raw/KeyboardEvent[JC] def isTrusted: Boolean
raw/KeyboardEvent[JC] def key: String
raw/KeyboardEvent[JC] def keyCode: Int
raw/KeyboardEvent[JC] def location: Int
raw/KeyboardEvent[JC] def metaKey: Boolean
raw/KeyboardEvent[JC] def preventDefault(): Unit
raw/KeyboardEvent[JC] def repeat: Boolean
raw/KeyboardEvent[JC] def shiftKey: Boolean
raw/KeyboardEvent[JC] def stopImmediatePropagation(): Unit
raw/KeyboardEvent[JC] def stopPropagation(): Unit
raw/KeyboardEvent[JC] def target: EventTarget
raw/KeyboardEvent[JC] def timeStamp: Double
raw/KeyboardEvent[JC] def `type`: String
raw/KeyboardEvent[JC] def view: Window
raw/KeyboardEvent[JO] def DOM_KEY_LOCATION_LEFT: Int
raw/KeyboardEvent[JO] def DOM_KEY_LOCATION_NUMPAD: Int
raw/KeyboardEvent[JO] def DOM_KEY_LOCATION_RIGHT: Int
raw/KeyboardEvent[JO] def DOM_KEY_LOCATION_STANDARD: Int
raw/KeyboardEventInit[JT] var altKey: js.UndefOr[Boolean]
raw/KeyboardEventInit[JT] var bubbles: js.UndefOr[Boolean]
raw/KeyboardEventInit[JT] var cancelable: js.UndefOr[Boolean]
raw/KeyboardEventInit[JT] var charCode: js.UndefOr[Int]
raw/KeyboardEventInit[JT] var composed: js.UndefOr[Boolean]
raw/KeyboardEventInit[JT] var ctrlKey: js.UndefOr[Boolean]
raw/KeyboardEventInit[JT] val detail: js.UndefOr[Int]
raw/KeyboardEventInit[JT] var key: js.UndefOr[String]
raw/KeyboardEventInit[JT] var keyCode: js.UndefOr[Int]
raw/KeyboardEventInit[JT] var locale: js.UndefOr[String]
raw/KeyboardEventInit[JT] var location: js.UndefOr[Int]
raw/KeyboardEventInit[JT] var metaKey: js.UndefOr[Boolean]
raw/KeyboardEventInit[JT] var repeat: js.UndefOr[Boolean]
raw/KeyboardEventInit[JT] var scoped: js.UndefOr[Boolean]
raw/KeyboardEventInit[JT] var shiftKey: js.UndefOr[Boolean]
raw/KeyboardEventInit[JT] val view: js.UndefOr[Window]
raw/LinkStyle[JT] def sheet: StyleSheet
raw/Location[JT] def assign(url: String): Unit
raw/Location[JT] var hash: String
raw/Location[JT] var host: String
raw/Location[JT] var hostname: String
raw/Location[JT] var href: String
raw/Location[JT] def origin: js.UndefOr[String]
raw/Location[JT] var pathname: String
raw/Location[JT] var port: String
raw/Location[JT] var protocol: String
raw/Location[JT] def reload(flag: Boolean?): Unit
raw/Location[JT] def replace(url: String): Unit
raw/Location[JT] var search: String
raw/MediaElementAudioSourceNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/MediaElementAudioSourceNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/MediaElementAudioSourceNode[JT] var channelCount: Int
raw/MediaElementAudioSourceNode[JT] var channelCountMode: Int
raw/MediaElementAudioSourceNode[JT] var channelInterpretation: String
raw/MediaElementAudioSourceNode[JT] def connect(audioNode: AudioNode): Unit
raw/MediaElementAudioSourceNode[JT] def connect(audioParam: AudioParam): Unit
raw/MediaElementAudioSourceNode[JT] val context: AudioContext
raw/MediaElementAudioSourceNode[JT] def disconnect(output: AudioNode?): Unit
raw/MediaElementAudioSourceNode[JT] def dispatchEvent(evt: Event): Boolean
raw/MediaElementAudioSourceNode[JT] val numberOfInputs: Int
raw/MediaElementAudioSourceNode[JT] val numberOfOutputs: Int
raw/MediaElementAudioSourceNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/MediaElementAudioSourceNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/MediaError[JC] def code: Int
raw/MediaError[JO] val MEDIA_ERR_ABORTED: Int
raw/MediaError[JO] val MEDIA_ERR_DECODE: Int
raw/MediaError[JO] val MEDIA_ERR_NETWORK: Int
raw/MediaError[JO] val MEDIA_ERR_SRC_NOT_SUPPORTED: Int
raw/MediaList[JC] def appendMedium(newMedium: String): Unit
raw/MediaList[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): String
raw/MediaList[JC] def deleteMedium(oldMedium: String): Unit
raw/MediaList[JC] def item(index: Int): String
raw/MediaList[JC] def length: Int
raw/MediaList[JC] def mediaText: String
raw/MediaList[JC] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: String): Unit
raw/MediaQueryList[JT] def addListener(listener: MediaQueryListListener): Unit
raw/MediaQueryList[JT] def matches: Boolean
raw/MediaQueryList[JT] var media: String
raw/MediaQueryList[JT] def removeListener(listener: MediaQueryListListener): Unit
raw/MediaQueryListListener[JT] def apply(mql: MediaQueryList): Unit
raw/MediaStreamAudioDestinationNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/MediaStreamAudioDestinationNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/MediaStreamAudioDestinationNode[JT] var channelCount: Int
raw/MediaStreamAudioDestinationNode[JT] var channelCountMode: Int
raw/MediaStreamAudioDestinationNode[JT] var channelInterpretation: String
raw/MediaStreamAudioDestinationNode[JT] def connect(audioNode: AudioNode): Unit
raw/MediaStreamAudioDestinationNode[JT] def connect(audioParam: AudioParam): Unit
raw/MediaStreamAudioDestinationNode[JT] val context: AudioContext
raw/MediaStreamAudioDestinationNode[JT] def disconnect(output: AudioNode?): Unit
raw/MediaStreamAudioDestinationNode[JT] def dispatchEvent(evt: Event): Boolean
raw/MediaStreamAudioDestinationNode[JT] val numberOfInputs: Int
raw/MediaStreamAudioDestinationNode[JT] val numberOfOutputs: Int
raw/MediaStreamAudioDestinationNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/MediaStreamAudioDestinationNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/MediaStreamAudioDestinationNode[JT] var stream: MediaStream
raw/MediaStreamAudioSourceNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/MediaStreamAudioSourceNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/MediaStreamAudioSourceNode[JT] var channelCount: Int
raw/MediaStreamAudioSourceNode[JT] var channelCountMode: Int
raw/MediaStreamAudioSourceNode[JT] var channelInterpretation: String
raw/MediaStreamAudioSourceNode[JT] def connect(audioNode: AudioNode): Unit
raw/MediaStreamAudioSourceNode[JT] def connect(audioParam: AudioParam): Unit
raw/MediaStreamAudioSourceNode[JT] val context: AudioContext
raw/MediaStreamAudioSourceNode[JT] def disconnect(output: AudioNode?): Unit
raw/MediaStreamAudioSourceNode[JT] def dispatchEvent(evt: Event): Boolean
raw/MediaStreamAudioSourceNode[JT] val numberOfInputs: Int
raw/MediaStreamAudioSourceNode[JT] val numberOfOutputs: Int
raw/MediaStreamAudioSourceNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/MediaStreamAudioSourceNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/MessageChannel[JC] def port1: MessagePort
raw/MessageChannel[JC] def port2: MessagePort
raw/MessageEvent[JC] def bubbles: Boolean
raw/MessageEvent[JC] def cancelBubble: Boolean
raw/MessageEvent[JC] def cancelable: Boolean
raw/MessageEvent[JC] def currentTarget: EventTarget
raw/MessageEvent[JC] def data: Any
raw/MessageEvent[JC] def defaultPrevented: Boolean
raw/MessageEvent[JC] def eventPhase: Int
raw/MessageEvent[JC] def isTrusted: Boolean
raw/MessageEvent[JC] def origin: String
raw/MessageEvent[JC] def ports: js.Any
raw/MessageEvent[JC] def preventDefault(): Unit
raw/MessageEvent[JC] def source: Window
raw/MessageEvent[JC] def stopImmediatePropagation(): Unit
raw/MessageEvent[JC] def stopPropagation(): Unit
raw/MessageEvent[JC] def target: EventTarget
raw/MessageEvent[JC] def timeStamp: Double
raw/MessageEvent[JC] def `type`: String
raw/MessageEventInit[JT] var bubbles: js.UndefOr[Boolean]
raw/MessageEventInit[JT] var cancelable: js.UndefOr[Boolean]
raw/MessageEventInit[JT] var composed: js.UndefOr[Boolean]
raw/MessageEventInit[JT] var data: js.UndefOr[Any]
raw/MessageEventInit[JT] var origin: js.UndefOr[String]
raw/MessageEventInit[JT] var scoped: js.UndefOr[Boolean]
raw/MessageEventInit[JT] var source: js.UndefOr[Window]
raw/MessagePort[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/MessagePort[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/MessagePort[JT] def close(): Unit
raw/MessagePort[JT] def dispatchEvent(evt: Event): Boolean
raw/MessagePort[JT] var onmessage: js.Function1[MessageEvent, _]
raw/MessagePort[JT] def postMessage(message: js.Any, ports: js.Any?): Unit
raw/MessagePort[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/MessagePort[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/MessagePort[JT] def start(): Unit
raw/ModifierKeyEvent[JT] def altKey: Boolean
raw/ModifierKeyEvent[JT] def ctrlKey: Boolean
raw/ModifierKeyEvent[JT] def metaKey: Boolean
raw/ModifierKeyEvent[JT] def shiftKey: Boolean
raw/ModifierKeyEventInit[JT] var altKey: js.UndefOr[Boolean]
raw/ModifierKeyEventInit[JT] var ctrlKey: js.UndefOr[Boolean]
raw/ModifierKeyEventInit[JT] var metaKey: js.UndefOr[Boolean]
raw/ModifierKeyEventInit[JT] var shiftKey: js.UndefOr[Boolean]
raw/MouseEvent[JC] def altKey: Boolean
raw/MouseEvent[JC] def bubbles: Boolean
raw/MouseEvent[JC] def button: Int
raw/MouseEvent[JC] def buttons: Int
raw/MouseEvent[JC] def cancelBubble: Boolean
raw/MouseEvent[JC] def cancelable: Boolean
raw/MouseEvent[JC] def clientX: Double
raw/MouseEvent[JC] def clientY: Double
raw/MouseEvent[JC] def ctrlKey: Boolean
raw/MouseEvent[JC] def currentTarget: EventTarget
raw/MouseEvent[JC] def defaultPrevented: Boolean
raw/MouseEvent[JC] def detail: Int
raw/MouseEvent[JC] def eventPhase: Int
raw/MouseEvent[JC] def getModifierState(keyArg: String): Boolean
raw/MouseEvent[JC] def isTrusted: Boolean
raw/MouseEvent[JC] def metaKey: Boolean
raw/MouseEvent[JC] def pageX: Double
raw/MouseEvent[JC] def pageY: Double
raw/MouseEvent[JC] def preventDefault(): Unit
raw/MouseEvent[JC] def relatedTarget: EventTarget
raw/MouseEvent[JC] def screenX: Double
raw/MouseEvent[JC] def screenY: Double
raw/MouseEvent[JC] def shiftKey: Boolean
raw/MouseEvent[JC] def stopImmediatePropagation(): Unit
raw/MouseEvent[JC] def stopPropagation(): Unit
raw/MouseEvent[JC] def target: EventTarget
raw/MouseEvent[JC] def timeStamp: Double
raw/MouseEvent[JC] def `type`: String
raw/MouseEvent[JC] def view: Window
raw/MouseEventInit[JT] var altKey: js.UndefOr[Boolean]
raw/MouseEventInit[JT] var bubbles: js.UndefOr[Boolean]
raw/MouseEventInit[JT] var button: js.UndefOr[Int]
raw/MouseEventInit[JT] var buttons: js.UndefOr[Int]
raw/MouseEventInit[JT] var cancelable: js.UndefOr[Boolean]
raw/MouseEventInit[JT] var clientX: js.UndefOr[Double]
raw/MouseEventInit[JT] var clientY: js.UndefOr[Double]
raw/MouseEventInit[JT] var composed: js.UndefOr[Boolean]
raw/MouseEventInit[JT] var ctrlKey: js.UndefOr[Boolean]
raw/MouseEventInit[JT] val detail: js.UndefOr[Int]
raw/MouseEventInit[JT] var metaKey: js.UndefOr[Boolean]
raw/MouseEventInit[JT] var pageX: js.UndefOr[Double]
raw/MouseEventInit[JT] var pageY: js.UndefOr[Double]
raw/MouseEventInit[JT] var relatedTarget: js.UndefOr[EventTarget]
raw/MouseEventInit[JT] var scoped: js.UndefOr[Boolean]
raw/MouseEventInit[JT] var screenX: js.UndefOr[Double]
raw/MouseEventInit[JT] var screenY: js.UndefOr[Double]
raw/MouseEventInit[JT] var shiftKey: js.UndefOr[Boolean]
raw/MouseEventInit[JT] val view: js.UndefOr[Window]
raw/MutationObserver[JC] def disconnect(): Unit
raw/MutationObserver[JC] def observe(target: Node, options: MutationObserverInit): Unit
raw/MutationObserver[JC] def takeRecords(): js.Array[MutationRecord]
raw/MutationObserverInit[JT] var attributeFilter: js.UndefOr[js.Array[String]]
raw/MutationObserverInit[JT] var attributeOldValue: js.UndefOr[Boolean]
raw/MutationObserverInit[JT] var attributes: js.UndefOr[Boolean]
raw/MutationObserverInit[JT] var characterData: js.UndefOr[Boolean]
raw/MutationObserverInit[JT] var characterDataOldValue: js.UndefOr[Boolean]
raw/MutationObserverInit[JT] var childList: js.UndefOr[Boolean]
raw/MutationObserverInit[JT] var subtree: js.UndefOr[Boolean]
raw/MutationObserverInit[SO] def apply(childList: Boolean = false, attributes: Boolean = false, characterData: Boolean = false, subtree: Boolean = false, attributeOldValue: Boolean = false, characterDataOldValue: Boolean = false, attributeFilter: js.UndefOr[js.Array[String]] = js.undefined): MutationObserverInit
raw/MutationRecord[JT] def addedNodes: NodeList
raw/MutationRecord[JT] def attributeName: String
raw/MutationRecord[JT] def attributeNamespace: String
raw/MutationRecord[JT] def nextSibling: Node
raw/MutationRecord[JT] def oldValue: String
raw/MutationRecord[JT] def previousSibling: Node
raw/MutationRecord[JT] def removedNodes: NodeList
raw/MutationRecord[JT] def target: Node
raw/MutationRecord[JT] def `type`: String
raw/NamedNodeMap[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): Attr
raw/NamedNodeMap[JC] def getNamedItem(name: String): Attr
raw/NamedNodeMap[JC] def getNamedItemNS(namespaceURI: String, localName: String): Attr
raw/NamedNodeMap[JC] def item(index: Int): Attr
raw/NamedNodeMap[JC] def length: Int
raw/NamedNodeMap[JC] def removeNamedItem(name: String): Attr
raw/NamedNodeMap[JC] def removeNamedItemNS(namespaceURI: String, localName: String): Attr
raw/NamedNodeMap[JC] def setNamedItem(arg: Attr): Attr
raw/NamedNodeMap[JC] def setNamedItemNS(arg: Attr): Attr
raw/NamedNodeMap[JC] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: Attr): Unit
raw/Navigator[JC] def appName: String
raw/Navigator[JC] def appVersion: String
raw/Navigator[JC] def clipboard: Clipboard
raw/Navigator[JC] def geolocation: Geolocation
raw/Navigator[JC] def language: String
raw/Navigator[JC] def languages: js.Array[String]
raw/Navigator[JC] def onLine: Boolean
raw/Navigator[JC] def platform: String
raw/Navigator[JC] def userAgent: String
raw/NavigatorContentUtils[JT]
raw/NavigatorGeolocation[JT] def geolocation: Geolocation
raw/NavigatorID[JT] def appName: String
raw/NavigatorID[JT] def appVersion: String
raw/NavigatorID[JT] def platform: String
raw/NavigatorID[JT] def userAgent: String
raw/NavigatorLanguage[JT] def language: String
raw/NavigatorLanguage[JT] def languages: js.Array[String]
raw/NavigatorOnLine[JT] def onLine: Boolean
raw/NavigatorStorageUtils[JT]
raw/Node[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/Node[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Node[JC] def appendChild(newChild: Node): Node
raw/Node[JC] def attributes: NamedNodeMap
raw/Node[JC] def childNodes: NodeList
raw/Node[JC] def cloneNode(deep: Boolean?): Node
raw/Node[JC] def compareDocumentPosition(other: Node): Int
raw/Node[JC] def contains(otherNode: Node): Boolean
raw/Node[JC] def dispatchEvent(evt: Event): Boolean
raw/Node[JC] def firstChild: Node
raw/Node[JC] def hasAttributes(): Boolean
raw/Node[JC] def hasChildNodes(): Boolean
raw/Node[JC] var innerText: String
raw/Node[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/Node[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/Node[JC] def isEqualNode(arg: Node): Boolean
raw/Node[JC] def isSameNode(other: Node): Boolean
raw/Node[JC] def isSupported(feature: String, version: String): Boolean
raw/Node[JC] def lastChild: Node
raw/Node[JC] def localName: String
raw/Node[JC] def lookupNamespaceURI(prefix: String): String
raw/Node[JC] def lookupPrefix(namespaceURI: String): String
raw/Node[JC] def namespaceURI: String
raw/Node[JC] def nextSibling: Node
raw/Node[JC] def nodeName: String
raw/Node[JC] def nodeType: Int
raw/Node[JC] var nodeValue: String
raw/Node[JC] def normalize(): Unit
raw/Node[JC] def ownerDocument: Document
raw/Node[JC] def parentNode: Node
raw/Node[JC] def previousSibling: Node
raw/Node[JC] def removeChild(oldChild: Node): Node
raw/Node[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/Node[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Node[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/Node[JC] var textContent: String
raw/Node[JO] def ATTRIBUTE_NODE: Int
raw/Node[JO] def CDATA_SECTION_NODE: Int
raw/Node[JO] def COMMENT_NODE: Int
raw/Node[JO] def DOCUMENT_FRAGMENT_NODE: Int
raw/Node[JO] def DOCUMENT_NODE: Int
raw/Node[JO] def DOCUMENT_POSITION_CONTAINED_BY: Int
raw/Node[JO] def DOCUMENT_POSITION_CONTAINS: Int
raw/Node[JO] def DOCUMENT_POSITION_DISCONNECTED: Int
raw/Node[JO] def DOCUMENT_POSITION_FOLLOWING: Int
raw/Node[JO] def DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Int
raw/Node[JO] def DOCUMENT_POSITION_PRECEDING: Int
raw/Node[JO] def DOCUMENT_TYPE_NODE: Int
raw/Node[JO] def ELEMENT_NODE: Int
raw/Node[JO] def ENTITY_NODE: Int
raw/Node[JO] def ENTITY_REFERENCE_NODE: Int
raw/Node[JO] def NOTATION_NODE: Int
raw/Node[JO] def PROCESSING_INSTRUCTION_NODE: Int
raw/Node[JO] def TEXT_NODE: Int
raw/NodeFilter[JC] def acceptNode(n: Node): Int
raw/NodeFilter[JO] val FILTER_ACCEPT: Int
raw/NodeFilter[JO] val FILTER_REJECT: Int
raw/NodeFilter[JO] val FILTER_SKIP: Int
raw/NodeFilter[JO] val SHOW_ALL: Int
raw/NodeFilter[JO] val SHOW_ATTRIBUTE: Int
raw/NodeFilter[JO] val SHOW_CDATA_SECTION: Int
raw/NodeFilter[JO] val SHOW_COMMENT: Int
raw/NodeFilter[JO] val SHOW_DOCUMENT: Int
raw/NodeFilter[JO] val SHOW_DOCUMENT_FRAGMENT: Int
raw/NodeFilter[JO] val SHOW_DOCUMENT_TYPE: Int
raw/NodeFilter[JO] val SHOW_ELEMENT: Int
raw/NodeFilter[JO] val SHOW_ENTITY: Int
raw/NodeFilter[JO] val SHOW_ENTITY_REFERENCE: Int
raw/NodeFilter[JO] val SHOW_NOTATION: Int
raw/NodeFilter[JO] val SHOW_PROCESSING_INSTRUCTION: Int
raw/NodeFilter[JO] val SHOW_TEXT: Int
raw/NodeIterator[JC] def detach(): Unit
raw/NodeIterator[JC] def filter: NodeFilter
raw/NodeIterator[JC] def nextNode(): Node
raw/NodeIterator[JC] def previousNode(): Node
raw/NodeIterator[JC] def root: Node
raw/NodeIterator[JC] var whatToShow: Int
raw/NodeList[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): T
raw/NodeList[JC] def item(index: Int): T
raw/NodeList[JC] def length: Int
raw/NodeList[JC] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: T): Unit
raw/NodeListOf[JT] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): T
raw/NodeListOf[JT] def item(index: Int): T
raw/NodeListOf[JT] def length: Int
raw/NodeListOf[JT] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: T): Unit
raw/NodeSelector[JT] def querySelector(selectors: String): Element
raw/NodeSelector[JT] def querySelectorAll(selectors: String): NodeList
raw/NonDocumentTypeChildNode[JT] def nextElementSibling: Element
raw/NonDocumentTypeChildNode[JT] def previousElementSibling: Element
raw/OfflineAudioCompletionEvent[JT] def bubbles: Boolean
raw/OfflineAudioCompletionEvent[JT] def cancelBubble: Boolean
raw/OfflineAudioCompletionEvent[JT] def cancelable: Boolean
raw/OfflineAudioCompletionEvent[JT] def currentTarget: EventTarget
raw/OfflineAudioCompletionEvent[JT] def defaultPrevented: Boolean
raw/OfflineAudioCompletionEvent[JT] def eventPhase: Int
raw/OfflineAudioCompletionEvent[JT] def isTrusted: Boolean
raw/OfflineAudioCompletionEvent[JT] def preventDefault(): Unit
raw/OfflineAudioCompletionEvent[JT] val renderedBuffer: AudioBuffer
raw/OfflineAudioCompletionEvent[JT] def stopImmediatePropagation(): Unit
raw/OfflineAudioCompletionEvent[JT] def stopPropagation(): Unit
raw/OfflineAudioCompletionEvent[JT] def target: EventTarget
raw/OfflineAudioCompletionEvent[JT] def timeStamp: Double
raw/OfflineAudioCompletionEvent[JT] def `type`: String
raw/OfflineAudioContext[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/OfflineAudioContext[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/OfflineAudioContext[JC] def close(): js.Promise[Unit]
raw/OfflineAudioContext[JC] def createAnalyser(): AnalyserNode
raw/OfflineAudioContext[JC] def createBiquadFilter(): BiquadFilterNode
raw/OfflineAudioContext[JC] def createBuffer(numOfChannels: Int, length: Int, sampleRate: Int): AudioBuffer
raw/OfflineAudioContext[JC] def createBufferSource(): AudioBufferSourceNode
raw/OfflineAudioContext[JC] def createChannelMerger(numberOfInputs: Int = 6): ChannelMergerNode
raw/OfflineAudioContext[JC] def createChannelSplitter(numberOfOutputs: Int = 6): ChannelSplitterNode
raw/OfflineAudioContext[JC] def createConvolver(): ConvolverNode
raw/OfflineAudioContext[JC] def createDelay(maxDelayTime: Int): DelayNode
raw/OfflineAudioContext[JC] def createDynamicsCompressor(): DynamicsCompressorNode
raw/OfflineAudioContext[JC] def createGain(): GainNode
raw/OfflineAudioContext[JC] def createMediaElementSource(myMediaElement: HTMLMediaElement): MediaElementAudioSourceNode
raw/OfflineAudioContext[JC] def createMediaStreamDestination(): MediaStreamAudioDestinationNode
raw/OfflineAudioContext[JC] def createMediaStreamSource(stream: MediaStream): MediaStreamAudioSourceNode
raw/OfflineAudioContext[JC] def createOscillator(): OscillatorNode
raw/OfflineAudioContext[JC] def createPanner(): PannerNode
raw/OfflineAudioContext[JC] def createPeriodicWave(real: js.typedarray.Float32Array, imag: js.typedarray.Float32Array): PeriodicWave
raw/OfflineAudioContext[JC] def createStereoPanner(): StereoPannerNode
raw/OfflineAudioContext[JC] def createWaveShaper(): WaveShaperNode
raw/OfflineAudioContext[JC] def currentTime: Double
raw/OfflineAudioContext[JC] def decodeAudioData(audioData: js.typedarray.ArrayBuffer, successCallback: js.Function1[AudioBuffer, _]?, errorCallback: js.Function0[_]?): js.Promise[AudioBuffer]
raw/OfflineAudioContext[JC] val destination: AudioDestinationNode
raw/OfflineAudioContext[JC] def dispatchEvent(evt: Event): Boolean
raw/OfflineAudioContext[JC] val listener: AudioListener
raw/OfflineAudioContext[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/OfflineAudioContext[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/OfflineAudioContext[JC] def resume(): js.Promise[Unit]
raw/OfflineAudioContext[JC] val sampleRate: Double
raw/OfflineAudioContext[JC] def startRendering(): js.Promise[AudioBuffer]
raw/OfflineAudioContext[JC] def state: String
raw/OfflineAudioContext[JC] def suspend(): js.Promise[Unit]
raw/OffscreenCanvas[JC] def convertToBlob(options: ConvertToBlobOptions = ???): js.Promise[Blob]
raw/OffscreenCanvas[JC] def getContext(contextType: String): js.Dynamic
raw/OffscreenCanvas[JC] def getContext(contextType: String, contextAttributes: TwoDContextAttributes): js.Dynamic
raw/OffscreenCanvas[JC] def getContext(contextType: String, contextAttributes: WebGLContextAttributes): js.Dynamic
raw/OffscreenCanvas[JC] def transferToImageBitmap(): ImageBitmap
raw/OscillatorNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/OscillatorNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/OscillatorNode[JT] var channelCount: Int
raw/OscillatorNode[JT] var channelCountMode: Int
raw/OscillatorNode[JT] var channelInterpretation: String
raw/OscillatorNode[JT] def connect(audioNode: AudioNode): Unit
raw/OscillatorNode[JT] def connect(audioParam: AudioParam): Unit
raw/OscillatorNode[JT] val context: AudioContext
raw/OscillatorNode[JT] var detune: AudioParam
raw/OscillatorNode[JT] def disconnect(output: AudioNode?): Unit
raw/OscillatorNode[JT] def dispatchEvent(evt: Event): Boolean
raw/OscillatorNode[JT] var frequency: AudioParam
raw/OscillatorNode[JT] val numberOfInputs: Int
raw/OscillatorNode[JT] val numberOfOutputs: Int
raw/OscillatorNode[JT] var onended: js.Function1[Event, _]
raw/OscillatorNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/OscillatorNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/OscillatorNode[JT] def setPeriodicWave(wave: PeriodicWave): Unit
raw/OscillatorNode[JT] def start(when: Double = 0.0d): Unit
raw/OscillatorNode[JT] def stop(when: Double = 0.0d): Unit
raw/OscillatorNode[JT] var `type`: String
raw/PageTransitionEvent[JT] def bubbles: Boolean
raw/PageTransitionEvent[JT] def cancelBubble: Boolean
raw/PageTransitionEvent[JT] def cancelable: Boolean
raw/PageTransitionEvent[JT] def currentTarget: EventTarget
raw/PageTransitionEvent[JT] def defaultPrevented: Boolean
raw/PageTransitionEvent[JT] def eventPhase: Int
raw/PageTransitionEvent[JT] def isTrusted: Boolean
raw/PageTransitionEvent[JT] def persisted: Boolean
raw/PageTransitionEvent[JT] def preventDefault(): Unit
raw/PageTransitionEvent[JT] def stopImmediatePropagation(): Unit
raw/PageTransitionEvent[JT] def stopPropagation(): Unit
raw/PageTransitionEvent[JT] def target: EventTarget
raw/PageTransitionEvent[JT] def timeStamp: Double
raw/PageTransitionEvent[JT] def `type`: String
raw/PageVisibility[JT] def hidden: Boolean
raw/PageVisibility[JT] def visibilityState: VisibilityState | String
raw/PageVisibility[JT] var visibilitychange: js.Function1[Event, _]
raw/PannerNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/PannerNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/PannerNode[JT] var channelCount: Int
raw/PannerNode[JT] var channelCountMode: Int
raw/PannerNode[JT] var channelInterpretation: String
raw/PannerNode[JT] var coneInnerAngle: Double
raw/PannerNode[JT] var coneOuterAngle: Double
raw/PannerNode[JT] var coneOuterGain: Double
raw/PannerNode[JT] def connect(audioNode: AudioNode): Unit
raw/PannerNode[JT] def connect(audioParam: AudioParam): Unit
raw/PannerNode[JT] val context: AudioContext
raw/PannerNode[JT] def disconnect(output: AudioNode?): Unit
raw/PannerNode[JT] def dispatchEvent(evt: Event): Boolean
raw/PannerNode[JT] var distanceModel: String
raw/PannerNode[JT] var maxDistance: Double
raw/PannerNode[JT] val numberOfInputs: Int
raw/PannerNode[JT] val numberOfOutputs: Int
raw/PannerNode[JT] var panningModel: String
raw/PannerNode[JT] var refDistance: Double
raw/PannerNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/PannerNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/PannerNode[JT] var rolloffFactor: Double
raw/PannerNode[JT] def setOrientation(x: Double = 1.0d, y: Double = 0.0d, z: Double = 0.0d): Unit
raw/PannerNode[JT] def setPosition(x: Double = 0.0d, y: Double = 0.0d, z: Double = 0.0d): Unit
raw/PannerNode[JT] def setVelocity(x: Double = 0.0d, y: Double = 0.0d, z: Double = 0.0d): Unit
raw/ParentNode[JT] def childElementCount: Int
raw/ParentNode[JT] def children: HTMLCollection
raw/ParentNode[JT] def firstElementChild: Element
raw/ParentNode[JT] def lastElementChild: Element
raw/ParentNode[JT] def replaceChildren(nodes: Node | String*): Unit
raw/Performance[JC] def clearMarks(markName: String?): Unit
raw/Performance[JC] def clearMeasures(measureName: String?): Unit
raw/Performance[JC] def clearResourceTimings(): Unit
raw/Performance[JC] def getEntries(): js.Dynamic
raw/Performance[JC] def getEntriesByName(name: String, entryType: String?): js.Dynamic
raw/Performance[JC] def getEntriesByType(entryType: String): js.Dynamic
raw/Performance[JC] def getMarks(markName: String?): js.Dynamic
raw/Performance[JC] def getMeasures(measureName: String?): js.Dynamic
raw/Performance[JC] def mark(markName: String): Unit
raw/Performance[JC] def measure(measureName: String, startMarkName: String?, endMarkName: String?): Unit
raw/Performance[JC] def navigation: PerformanceNavigation
raw/Performance[JC] def now(): Double
raw/Performance[JC] def setResourceTimingBufferSize(maxSize: Int): Unit
raw/Performance[JC] def timing: PerformanceTiming
raw/Performance[JC] def toJSON(): js.Dynamic
raw/PerformanceEntry[JC] def duration: Int
raw/PerformanceEntry[JC] def entryType: String
raw/PerformanceEntry[JC] def name: String
raw/PerformanceEntry[JC] def startTime: Double
raw/PerformanceMark[JC] def duration: Int
raw/PerformanceMark[JC] def entryType: String
raw/PerformanceMark[JC] def name: String
raw/PerformanceMark[JC] def startTime: Double
raw/PerformanceMeasure[JC] def duration: Int
raw/PerformanceMeasure[JC] def entryType: String
raw/PerformanceMeasure[JC] def name: String
raw/PerformanceMeasure[JC] def startTime: Double
raw/PerformanceNavigation[JC] def redirectCount: Int
raw/PerformanceNavigation[JC] def toJSON(): js.Dynamic
raw/PerformanceNavigation[JC] def `type`: Int
raw/PerformanceNavigation[JO] val TYPE_BACK_FORWARD: Int
raw/PerformanceNavigation[JO] val TYPE_NAVIGATE: Int
raw/PerformanceNavigation[JO] val TYPE_RELOAD: Int
raw/PerformanceNavigation[JO] val TYPE_RESERVED: Int
raw/PerformanceResourceTiming[JC] def connectEnd: Int
raw/PerformanceResourceTiming[JC] def connectStart: Int
raw/PerformanceResourceTiming[JC] def domainLookupEnd: Int
raw/PerformanceResourceTiming[JC] def domainLookupStart: Int
raw/PerformanceResourceTiming[JC] def duration: Int
raw/PerformanceResourceTiming[JC] def entryType: String
raw/PerformanceResourceTiming[JC] def fetchStart: Int
raw/PerformanceResourceTiming[JC] def initiatorType: String
raw/PerformanceResourceTiming[JC] def name: String
raw/PerformanceResourceTiming[JC] def redirectEnd: Int
raw/PerformanceResourceTiming[JC] def redirectStart: Int
raw/PerformanceResourceTiming[JC] def requestStart: Int
raw/PerformanceResourceTiming[JC] var responseEnd: Int
raw/PerformanceResourceTiming[JC] def responseStart: Int
raw/PerformanceResourceTiming[JC] def startTime: Double
raw/PerformanceTiming[JC] def connectEnd: Double
raw/PerformanceTiming[JC] def connectStart: Double
raw/PerformanceTiming[JC] def domComplete: Double
raw/PerformanceTiming[JC] def domContentLoadedEventEnd: Double
raw/PerformanceTiming[JC] def domContentLoadedEventStart: Double
raw/PerformanceTiming[JC] def domInteractive: Double
raw/PerformanceTiming[JC] def domLoading: Double
raw/PerformanceTiming[JC] def domainLookupEnd: Double
raw/PerformanceTiming[JC] def domainLookupStart: Double
raw/PerformanceTiming[JC] def fetchStart: Double
raw/PerformanceTiming[JC] def loadEventEnd: Double
raw/PerformanceTiming[JC] def loadEventStart: Double
raw/PerformanceTiming[JC] def navigationStart: Double
raw/PerformanceTiming[JC] def redirectEnd: Double
raw/PerformanceTiming[JC] def redirectStart: Double
raw/PerformanceTiming[JC] def requestStart: Double
raw/PerformanceTiming[JC] def responseEnd: Double
raw/PerformanceTiming[JC] def responseStart: Double
raw/PerformanceTiming[JC] def toJSON(): js.Dynamic
raw/PerformanceTiming[JC] def unloadEventEnd: Double
raw/PerformanceTiming[JC] def unloadEventStart: Double
raw/PeriodicWave[JT]
raw/PointerEvent[JC] def altKey: Boolean
raw/PointerEvent[JC] def bubbles: Boolean
raw/PointerEvent[JC] def button: Int
raw/PointerEvent[JC] def buttons: Int
raw/PointerEvent[JC] def cancelBubble: Boolean
raw/PointerEvent[JC] def cancelable: Boolean
raw/PointerEvent[JC] def clientX: Double
raw/PointerEvent[JC] def clientY: Double
raw/PointerEvent[JC] def ctrlKey: Boolean
raw/PointerEvent[JC] def currentTarget: EventTarget
raw/PointerEvent[JC] def defaultPrevented: Boolean
raw/PointerEvent[JC] def detail: Int
raw/PointerEvent[JC] def eventPhase: Int
raw/PointerEvent[JC] def getModifierState(keyArg: String): Boolean
raw/PointerEvent[JC] def height: Double
raw/PointerEvent[JC] def isPrimary: Boolean
raw/PointerEvent[JC] def isTrusted: Boolean
raw/PointerEvent[JC] def metaKey: Boolean
raw/PointerEvent[JC] def pageX: Double
raw/PointerEvent[JC] def pageY: Double
raw/PointerEvent[JC] def pointerId: Double
raw/PointerEvent[JC] def pointerType: String
raw/PointerEvent[JC] def pressure: Double
raw/PointerEvent[JC] def preventDefault(): Unit
raw/PointerEvent[JC] def relatedTarget: EventTarget
raw/PointerEvent[JC] def screenX: Double
raw/PointerEvent[JC] def screenY: Double
raw/PointerEvent[JC] def shiftKey: Boolean
raw/PointerEvent[JC] def stopImmediatePropagation(): Unit
raw/PointerEvent[JC] def stopPropagation(): Unit
raw/PointerEvent[JC] def tangentialPressure: Double
raw/PointerEvent[JC] def target: EventTarget
raw/PointerEvent[JC] def tiltX: Double
raw/PointerEvent[JC] def tiltY: Double
raw/PointerEvent[JC] def timeStamp: Double
raw/PointerEvent[JC] def twist: Double
raw/PointerEvent[JC] def `type`: String
raw/PointerEvent[JC] def view: Window
raw/PointerEvent[JC] def width: Double
raw/PointerEventInit[JT] var altKey: js.UndefOr[Boolean]
raw/PointerEventInit[JT] var bubbles: js.UndefOr[Boolean]
raw/PointerEventInit[JT] var button: js.UndefOr[Int]
raw/PointerEventInit[JT] var buttons: js.UndefOr[Int]
raw/PointerEventInit[JT] var cancelable: js.UndefOr[Boolean]
raw/PointerEventInit[JT] var clientX: js.UndefOr[Double]
raw/PointerEventInit[JT] var clientY: js.UndefOr[Double]
raw/PointerEventInit[JT] var composed: js.UndefOr[Boolean]
raw/PointerEventInit[JT] var ctrlKey: js.UndefOr[Boolean]
raw/PointerEventInit[JT] val detail: js.UndefOr[Int]
raw/PointerEventInit[JT] var height: js.UndefOr[Double]
raw/PointerEventInit[JT] var isPrimary: js.UndefOr[Boolean]
raw/PointerEventInit[JT] var metaKey: js.UndefOr[Boolean]
raw/PointerEventInit[JT] var pageX: js.UndefOr[Double]
raw/PointerEventInit[JT] var pageY: js.UndefOr[Double]
raw/PointerEventInit[JT] var pointerId: js.UndefOr[Double]
raw/PointerEventInit[JT] var pointerType: js.UndefOr[String]
raw/PointerEventInit[JT] var pressure: js.UndefOr[Double]
raw/PointerEventInit[JT] var relatedTarget: js.UndefOr[EventTarget]
raw/PointerEventInit[JT] var scoped: js.UndefOr[Boolean]
raw/PointerEventInit[JT] var screenX: js.UndefOr[Double]
raw/PointerEventInit[JT] var screenY: js.UndefOr[Double]
raw/PointerEventInit[JT] var shiftKey: js.UndefOr[Boolean]
raw/PointerEventInit[JT] var tangentialPressure: js.UndefOr[Double]
raw/PointerEventInit[JT] var tiltX: js.UndefOr[Double]
raw/PointerEventInit[JT] var tiltY: js.UndefOr[Double]
raw/PointerEventInit[JT] var twist: js.UndefOr[Double]
raw/PointerEventInit[JT] val view: js.UndefOr[Window]
raw/PointerEventInit[JT] var width: js.UndefOr[Double]
raw/PopStateEvent[JT] def bubbles: Boolean
raw/PopStateEvent[JT] def cancelBubble: Boolean
raw/PopStateEvent[JT] def cancelable: Boolean
raw/PopStateEvent[JT] def currentTarget: EventTarget
raw/PopStateEvent[JT] def defaultPrevented: Boolean
raw/PopStateEvent[JT] def eventPhase: Int
raw/PopStateEvent[JT] def isTrusted: Boolean
raw/PopStateEvent[JT] def preventDefault(): Unit
raw/PopStateEvent[JT] def state: js.Any
raw/PopStateEvent[JT] def stopImmediatePropagation(): Unit
raw/PopStateEvent[JT] def stopPropagation(): Unit
raw/PopStateEvent[JT] def target: EventTarget
raw/PopStateEvent[JT] def timeStamp: Double
raw/PopStateEvent[JT] def `type`: String
raw/Position[JT] def coords: Coordinates
raw/Position[JT] def timestamp: Double
raw/PositionError[JO] val PERMISSION_DENIED: Int
raw/PositionError[JO] val POSITION_UNAVAILABLE: Int
raw/PositionError[JO] val TIMEOUT: Int
raw/PositionError[JT] def code: Int
raw/PositionError[JT] def message: String
raw/PositionOptions[JC] var enableHighAccuracy: Boolean
raw/PositionOptions[JC] var maximumAge: Int
raw/PositionOptions[JC] var timeout: Int
raw/ProcessingInstruction[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/ProcessingInstruction[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/ProcessingInstruction[JC] def appendChild(newChild: Node): Node
raw/ProcessingInstruction[JC] def attributes: NamedNodeMap
raw/ProcessingInstruction[JC] def childNodes: NodeList
raw/ProcessingInstruction[JC] def cloneNode(deep: Boolean?): Node
raw/ProcessingInstruction[JC] def compareDocumentPosition(other: Node): Int
raw/ProcessingInstruction[JC] def contains(otherNode: Node): Boolean
raw/ProcessingInstruction[JC] def data: String
raw/ProcessingInstruction[JC] def dispatchEvent(evt: Event): Boolean
raw/ProcessingInstruction[JC] def firstChild: Node
raw/ProcessingInstruction[JC] def hasAttributes(): Boolean
raw/ProcessingInstruction[JC] def hasChildNodes(): Boolean
raw/ProcessingInstruction[JC] var innerText: String
raw/ProcessingInstruction[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/ProcessingInstruction[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/ProcessingInstruction[JC] def isEqualNode(arg: Node): Boolean
raw/ProcessingInstruction[JC] def isSameNode(other: Node): Boolean
raw/ProcessingInstruction[JC] def isSupported(feature: String, version: String): Boolean
raw/ProcessingInstruction[JC] def lastChild: Node
raw/ProcessingInstruction[JC] def localName: String
raw/ProcessingInstruction[JC] def lookupNamespaceURI(prefix: String): String
raw/ProcessingInstruction[JC] def lookupPrefix(namespaceURI: String): String
raw/ProcessingInstruction[JC] def namespaceURI: String
raw/ProcessingInstruction[JC] def nextSibling: Node
raw/ProcessingInstruction[JC] def nodeName: String
raw/ProcessingInstruction[JC] def nodeType: Int
raw/ProcessingInstruction[JC] var nodeValue: String
raw/ProcessingInstruction[JC] def normalize(): Unit
raw/ProcessingInstruction[JC] def ownerDocument: Document
raw/ProcessingInstruction[JC] def parentNode: Node
raw/ProcessingInstruction[JC] def previousSibling: Node
raw/ProcessingInstruction[JC] def removeChild(oldChild: Node): Node
raw/ProcessingInstruction[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/ProcessingInstruction[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/ProcessingInstruction[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/ProcessingInstruction[JC] def target: String
raw/ProcessingInstruction[JC] var textContent: String
raw/ProgressEvent[JT] def bubbles: Boolean
raw/ProgressEvent[JT] def cancelBubble: Boolean
raw/ProgressEvent[JT] def cancelable: Boolean
raw/ProgressEvent[JT] def currentTarget: EventTarget
raw/ProgressEvent[JT] def defaultPrevented: Boolean
raw/ProgressEvent[JT] def eventPhase: Int
raw/ProgressEvent[JT] def isTrusted: Boolean
raw/ProgressEvent[JT] def lengthComputable: Boolean
raw/ProgressEvent[JT] def loaded: Double
raw/ProgressEvent[JT] def preventDefault(): Unit
raw/ProgressEvent[JT] def stopImmediatePropagation(): Unit
raw/ProgressEvent[JT] def stopPropagation(): Unit
raw/ProgressEvent[JT] def target: EventTarget
raw/ProgressEvent[JT] def timeStamp: Double
raw/ProgressEvent[JT] def total: Double
raw/ProgressEvent[JT] def `type`: String
raw/Range[JC] def cloneContents(): DocumentFragment
raw/Range[JC] def cloneRange(): Range
raw/Range[JC] def collapse(toStart: Boolean): Unit
raw/Range[JC] def collapsed: Boolean
raw/Range[JC] def commonAncestorContainer: Node
raw/Range[JC] def compareBoundaryPoints(how: Int, sourceRange: Range): Int
raw/Range[JC] def createContextualFragment(fragment: String): DocumentFragment
raw/Range[JC] def deleteContents(): Unit
raw/Range[JC] def detach(): Unit
raw/Range[JC] def endContainer: Node
raw/Range[JC] def endOffset: Int
raw/Range[JC] def extractContents(): DocumentFragment
raw/Range[JC] def getBoundingClientRect(): ClientRect
raw/Range[JC] def getClientRects(): ClientRectList
raw/Range[JC] def insertNode(newNode: Node): Unit
raw/Range[JC] def selectNode(refNode: Node): Unit
raw/Range[JC] def selectNodeContents(refNode: Node): Unit
raw/Range[JC] def setEnd(refNode: Node, offset: Int): Unit
raw/Range[JC] def setEndAfter(refNode: Node): Unit
raw/Range[JC] def setEndBefore(refNode: Node): Unit
raw/Range[JC] def setStart(refNode: Node, offset: Int): Unit
raw/Range[JC] def setStartAfter(refNode: Node): Unit
raw/Range[JC] def setStartBefore(refNode: Node): Unit
raw/Range[JC] def startContainer: Node
raw/Range[JC] def startOffset: Int
raw/Range[JC] def surroundContents(newParent: Node): Unit
raw/Range[JO] val END_TO_END: Int
raw/Range[JO] val END_TO_START: Int
raw/Range[JO] val START_TO_END: Int
raw/Range[JO] val START_TO_START: Int
raw/SVGAElement[JC] var accessKey: String
raw/SVGAElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGAElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGAElement[JC] def appendChild(newChild: Node): Node
raw/SVGAElement[JC] def attributes: NamedNodeMap
raw/SVGAElement[JC] def childElementCount: Int
raw/SVGAElement[JC] def childNodes: NodeList
raw/SVGAElement[JC] def children: HTMLCollection
raw/SVGAElement[JC] var classList: DOMTokenList
raw/SVGAElement[JC] var className: SVGAnimatedString
raw/SVGAElement[JC] def clientHeight: Int
raw/SVGAElement[JC] def clientLeft: Int
raw/SVGAElement[JC] def clientTop: Int
raw/SVGAElement[JC] def clientWidth: Int
raw/SVGAElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGAElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGAElement[JC] def contains(otherNode: Node): Boolean
raw/SVGAElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGAElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGAElement[JC] var farthestViewportElement: SVGElement
raw/SVGAElement[JC] def firstChild: Node
raw/SVGAElement[JC] def firstElementChild: Element
raw/SVGAElement[JC] def getAttribute(name: String): String
raw/SVGAElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGAElement[JC] def getAttributeNode(name: String): Attr
raw/SVGAElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGAElement[JC] def getBBox(): SVGRect
raw/SVGAElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGAElement[JC] def getCTM(): SVGMatrix
raw/SVGAElement[JC] def getClientRects(): ClientRectList
raw/SVGAElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGAElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGAElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGAElement[JC] def getScreenCTM(): SVGMatrix
raw/SVGAElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
raw/SVGAElement[JC] def hasAttribute(name: String): Boolean
raw/SVGAElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGAElement[JC] def hasAttributes(): Boolean
raw/SVGAElement[JC] def hasChildNodes(): Boolean
raw/SVGAElement[JC] def hasExtension(extension: String): Boolean
raw/SVGAElement[JC] var href: SVGAnimatedString
raw/SVGAElement[JC] var id: String
raw/SVGAElement[JC] var innerHTML: String
raw/SVGAElement[JC] var innerText: String
raw/SVGAElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGAElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGAElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGAElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGAElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGAElement[JC] def isSameNode(other: Node): Boolean
raw/SVGAElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGAElement[JC] def lastChild: Node
raw/SVGAElement[JC] def lastElementChild: Element
raw/SVGAElement[JC] def localName: String
raw/SVGAElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGAElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGAElement[JC] def matches(selector: String): Boolean
raw/SVGAElement[JC] def namespaceURI: String
raw/SVGAElement[JC] var nearestViewportElement: SVGElement
raw/SVGAElement[JC] def nextElementSibling: Element
raw/SVGAElement[JC] def nextSibling: Node
raw/SVGAElement[JC] def nodeName: String
raw/SVGAElement[JC] def nodeType: Int
raw/SVGAElement[JC] var nodeValue: String
raw/SVGAElement[JC] def normalize(): Unit
raw/SVGAElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGAElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGAElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGAElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGAElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGAElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGAElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGAElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGAElement[JC] var onload: js.Function1[Event, _]
raw/SVGAElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGAElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGAElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGAElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGAElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGAElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGAElement[JC] var outerHTML: String
raw/SVGAElement[JC] def ownerDocument: Document
raw/SVGAElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGAElement[JC] def parentNode: Node
raw/SVGAElement[JC] def prefix: String
raw/SVGAElement[JC] def previousElementSibling: Element
raw/SVGAElement[JC] def previousSibling: Node
raw/SVGAElement[JC] def querySelector(selectors: String): Element
raw/SVGAElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGAElement[JC] def removeAttribute(name: String): Unit
raw/SVGAElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGAElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGAElement[JC] def removeChild(oldChild: Node): Node
raw/SVGAElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGAElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGAElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGAElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGAElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGAElement[JC] var requiredExtensions: SVGStringList
raw/SVGAElement[JC] var requiredFeatures: SVGStringList
raw/SVGAElement[JC] def scrollHeight: Int
raw/SVGAElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGAElement[JC] var scrollLeft: Double
raw/SVGAElement[JC] var scrollTop: Double
raw/SVGAElement[JC] def scrollWidth: Int
raw/SVGAElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGAElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGAElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGAElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGAElement[JC] var style: CSSStyleDeclaration
raw/SVGAElement[JC] var systemLanguage: SVGStringList
raw/SVGAElement[JC] def tagName: String
raw/SVGAElement[JC] def target: SVGAnimatedString
raw/SVGAElement[JC] var textContent: String
raw/SVGAElement[JC] var transform: SVGAnimatedTransformList
raw/SVGAElement[JC] def viewportElement: SVGElement
raw/SVGAElement[JC] var xmlbase: String
raw/SVGAElement[JC] var xmllang: String
raw/SVGAElement[JC] var xmlspace: String
raw/SVGAngle[JC] def convertToSpecifiedUnits(unitType: Int): Unit
raw/SVGAngle[JC] def newValueSpecifiedUnits(unitType: Int, valueInSpecifiedUnits: Double): Unit
raw/SVGAngle[JC] def unitType: Int
raw/SVGAngle[JC] var value: Double
raw/SVGAngle[JC] var valueAsString: String
raw/SVGAngle[JC] var valueInSpecifiedUnits: Double
raw/SVGAngle[JO] val SVG_ANGLETYPE_DEG: Int
raw/SVGAngle[JO] val SVG_ANGLETYPE_GRAD: Int
raw/SVGAngle[JO] val SVG_ANGLETYPE_RAD: Int
raw/SVGAngle[JO] val SVG_ANGLETYPE_UNKNOWN: Int
raw/SVGAngle[JO] val SVG_ANGLETYPE_UNSPECIFIED: Int
raw/SVGAnimatedAngle[JC] def animVal: SVGAngle
raw/SVGAnimatedAngle[JC] var baseVal: SVGAngle
raw/SVGAnimatedBoolean[JC] def animVal: Boolean
raw/SVGAnimatedBoolean[JC] var baseVal: Boolean
raw/SVGAnimatedEnumeration[JC] def animVal: Int
raw/SVGAnimatedEnumeration[JC] var baseVal: Int
raw/SVGAnimatedInteger[JC] def animVal: Int
raw/SVGAnimatedInteger[JC] var baseVal: Int
raw/SVGAnimatedLength[JC] def animVal: SVGLength
raw/SVGAnimatedLength[JC] var baseVal: SVGLength
raw/SVGAnimatedLengthList[JC] def animVal: SVGLengthList
raw/SVGAnimatedLengthList[JC] var baseVal: SVGLengthList
raw/SVGAnimatedNumber[JC] def animVal: Double
raw/SVGAnimatedNumber[JC] var baseVal: Double
raw/SVGAnimatedNumberList[JC] def animVal: SVGNumberList
raw/SVGAnimatedNumberList[JC] def baseVal: SVGNumberList
raw/SVGAnimatedPathData[JT] var pathSegList: SVGPathSegList
raw/SVGAnimatedPoints[JT] def animatedPoints: SVGPointList
raw/SVGAnimatedPoints[JT] var points: SVGPointList
raw/SVGAnimatedPreserveAspectRatio[JC] def animVal: SVGPreserveAspectRatio
raw/SVGAnimatedPreserveAspectRatio[JC] var baseVal: SVGPreserveAspectRatio
raw/SVGAnimatedRect[JC] def animVal: SVGRect
raw/SVGAnimatedRect[JC] def baseVal: SVGRect
raw/SVGAnimatedString[JC] def animVal: String
raw/SVGAnimatedString[JC] var baseVal: String
raw/SVGAnimatedTransformList[JC] def animVal: SVGTransformList
raw/SVGAnimatedTransformList[JC] var baseVal: SVGTransformList
raw/SVGCircleElement[JC] var accessKey: String
raw/SVGCircleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGCircleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGCircleElement[JC] def appendChild(newChild: Node): Node
raw/SVGCircleElement[JC] def attributes: NamedNodeMap
raw/SVGCircleElement[JC] def childElementCount: Int
raw/SVGCircleElement[JC] def childNodes: NodeList
raw/SVGCircleElement[JC] def children: HTMLCollection
raw/SVGCircleElement[JC] var classList: DOMTokenList
raw/SVGCircleElement[JC] var className: SVGAnimatedString
raw/SVGCircleElement[JC] def clientHeight: Int
raw/SVGCircleElement[JC] def clientLeft: Int
raw/SVGCircleElement[JC] def clientTop: Int
raw/SVGCircleElement[JC] def clientWidth: Int
raw/SVGCircleElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGCircleElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGCircleElement[JC] def contains(otherNode: Node): Boolean
raw/SVGCircleElement[JC] def cx: SVGAnimatedLength
raw/SVGCircleElement[JC] def cy: SVGAnimatedLength
raw/SVGCircleElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGCircleElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGCircleElement[JC] var farthestViewportElement: SVGElement
raw/SVGCircleElement[JC] def firstChild: Node
raw/SVGCircleElement[JC] def firstElementChild: Element
raw/SVGCircleElement[JC] def getAttribute(name: String): String
raw/SVGCircleElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGCircleElement[JC] def getAttributeNode(name: String): Attr
raw/SVGCircleElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGCircleElement[JC] def getBBox(): SVGRect
raw/SVGCircleElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGCircleElement[JC] def getCTM(): SVGMatrix
raw/SVGCircleElement[JC] def getClientRects(): ClientRectList
raw/SVGCircleElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGCircleElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGCircleElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGCircleElement[JC] def getScreenCTM(): SVGMatrix
raw/SVGCircleElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
raw/SVGCircleElement[JC] def hasAttribute(name: String): Boolean
raw/SVGCircleElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGCircleElement[JC] def hasAttributes(): Boolean
raw/SVGCircleElement[JC] def hasChildNodes(): Boolean
raw/SVGCircleElement[JC] def hasExtension(extension: String): Boolean
raw/SVGCircleElement[JC] var id: String
raw/SVGCircleElement[JC] var innerHTML: String
raw/SVGCircleElement[JC] var innerText: String
raw/SVGCircleElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGCircleElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGCircleElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGCircleElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGCircleElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGCircleElement[JC] def isSameNode(other: Node): Boolean
raw/SVGCircleElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGCircleElement[JC] def lastChild: Node
raw/SVGCircleElement[JC] def lastElementChild: Element
raw/SVGCircleElement[JC] def localName: String
raw/SVGCircleElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGCircleElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGCircleElement[JC] def matches(selector: String): Boolean
raw/SVGCircleElement[JC] def namespaceURI: String
raw/SVGCircleElement[JC] var nearestViewportElement: SVGElement
raw/SVGCircleElement[JC] def nextElementSibling: Element
raw/SVGCircleElement[JC] def nextSibling: Node
raw/SVGCircleElement[JC] def nodeName: String
raw/SVGCircleElement[JC] def nodeType: Int
raw/SVGCircleElement[JC] var nodeValue: String
raw/SVGCircleElement[JC] def normalize(): Unit
raw/SVGCircleElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGCircleElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGCircleElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGCircleElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGCircleElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGCircleElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGCircleElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGCircleElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGCircleElement[JC] var onload: js.Function1[Event, _]
raw/SVGCircleElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGCircleElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGCircleElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGCircleElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGCircleElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGCircleElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGCircleElement[JC] var outerHTML: String
raw/SVGCircleElement[JC] def ownerDocument: Document
raw/SVGCircleElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGCircleElement[JC] def parentNode: Node
raw/SVGCircleElement[JC] def prefix: String
raw/SVGCircleElement[JC] def previousElementSibling: Element
raw/SVGCircleElement[JC] def previousSibling: Node
raw/SVGCircleElement[JC] def querySelector(selectors: String): Element
raw/SVGCircleElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGCircleElement[JC] def r: SVGAnimatedLength
raw/SVGCircleElement[JC] def removeAttribute(name: String): Unit
raw/SVGCircleElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGCircleElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGCircleElement[JC] def removeChild(oldChild: Node): Node
raw/SVGCircleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGCircleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGCircleElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGCircleElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGCircleElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGCircleElement[JC] var requiredExtensions: SVGStringList
raw/SVGCircleElement[JC] var requiredFeatures: SVGStringList
raw/SVGCircleElement[JC] def scrollHeight: Int
raw/SVGCircleElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGCircleElement[JC] var scrollLeft: Double
raw/SVGCircleElement[JC] var scrollTop: Double
raw/SVGCircleElement[JC] def scrollWidth: Int
raw/SVGCircleElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGCircleElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGCircleElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGCircleElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGCircleElement[JC] var style: CSSStyleDeclaration
raw/SVGCircleElement[JC] var systemLanguage: SVGStringList
raw/SVGCircleElement[JC] def tagName: String
raw/SVGCircleElement[JC] var textContent: String
raw/SVGCircleElement[JC] var transform: SVGAnimatedTransformList
raw/SVGCircleElement[JC] def viewportElement: SVGElement
raw/SVGCircleElement[JC] var xmlbase: String
raw/SVGCircleElement[JC] var xmllang: String
raw/SVGCircleElement[JC] var xmlspace: String
raw/SVGClipPathElement[JC] val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Int
raw/SVGClipPathElement[JC] val SVG_UNIT_TYPE_UNKNOWN: Int
raw/SVGClipPathElement[JC] val SVG_UNIT_TYPE_USERSPACEONUSE: Int
raw/SVGClipPathElement[JC] var accessKey: String
raw/SVGClipPathElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGClipPathElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGClipPathElement[JC] def appendChild(newChild: Node): Node
raw/SVGClipPathElement[JC] def attributes: NamedNodeMap
raw/SVGClipPathElement[JC] def childElementCount: Int
raw/SVGClipPathElement[JC] def childNodes: NodeList
raw/SVGClipPathElement[JC] def children: HTMLCollection
raw/SVGClipPathElement[JC] var classList: DOMTokenList
raw/SVGClipPathElement[JC] var className: SVGAnimatedString
raw/SVGClipPathElement[JC] def clientHeight: Int
raw/SVGClipPathElement[JC] def clientLeft: Int
raw/SVGClipPathElement[JC] def clientTop: Int
raw/SVGClipPathElement[JC] def clientWidth: Int
raw/SVGClipPathElement[JC] def clipPathUnits: SVGAnimatedEnumeration
raw/SVGClipPathElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGClipPathElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGClipPathElement[JC] def contains(otherNode: Node): Boolean
raw/SVGClipPathElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGClipPathElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGClipPathElement[JC] var farthestViewportElement: SVGElement
raw/SVGClipPathElement[JC] def firstChild: Node
raw/SVGClipPathElement[JC] def firstElementChild: Element
raw/SVGClipPathElement[JC] def getAttribute(name: String): String
raw/SVGClipPathElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGClipPathElement[JC] def getAttributeNode(name: String): Attr
raw/SVGClipPathElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGClipPathElement[JC] def getBBox(): SVGRect
raw/SVGClipPathElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGClipPathElement[JC] def getCTM(): SVGMatrix
raw/SVGClipPathElement[JC] def getClientRects(): ClientRectList
raw/SVGClipPathElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGClipPathElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGClipPathElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGClipPathElement[JC] def getScreenCTM(): SVGMatrix
raw/SVGClipPathElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
raw/SVGClipPathElement[JC] def hasAttribute(name: String): Boolean
raw/SVGClipPathElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGClipPathElement[JC] def hasAttributes(): Boolean
raw/SVGClipPathElement[JC] def hasChildNodes(): Boolean
raw/SVGClipPathElement[JC] def hasExtension(extension: String): Boolean
raw/SVGClipPathElement[JC] var id: String
raw/SVGClipPathElement[JC] var innerHTML: String
raw/SVGClipPathElement[JC] var innerText: String
raw/SVGClipPathElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGClipPathElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGClipPathElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGClipPathElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGClipPathElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGClipPathElement[JC] def isSameNode(other: Node): Boolean
raw/SVGClipPathElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGClipPathElement[JC] def lastChild: Node
raw/SVGClipPathElement[JC] def lastElementChild: Element
raw/SVGClipPathElement[JC] def localName: String
raw/SVGClipPathElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGClipPathElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGClipPathElement[JC] def matches(selector: String): Boolean
raw/SVGClipPathElement[JC] def namespaceURI: String
raw/SVGClipPathElement[JC] var nearestViewportElement: SVGElement
raw/SVGClipPathElement[JC] def nextElementSibling: Element
raw/SVGClipPathElement[JC] def nextSibling: Node
raw/SVGClipPathElement[JC] def nodeName: String
raw/SVGClipPathElement[JC] def nodeType: Int
raw/SVGClipPathElement[JC] var nodeValue: String
raw/SVGClipPathElement[JC] def normalize(): Unit
raw/SVGClipPathElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGClipPathElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGClipPathElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGClipPathElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGClipPathElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGClipPathElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGClipPathElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGClipPathElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGClipPathElement[JC] var onload: js.Function1[Event, _]
raw/SVGClipPathElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGClipPathElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGClipPathElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGClipPathElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGClipPathElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGClipPathElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGClipPathElement[JC] var outerHTML: String
raw/SVGClipPathElement[JC] def ownerDocument: Document
raw/SVGClipPathElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGClipPathElement[JC] def parentNode: Node
raw/SVGClipPathElement[JC] def prefix: String
raw/SVGClipPathElement[JC] def previousElementSibling: Element
raw/SVGClipPathElement[JC] def previousSibling: Node
raw/SVGClipPathElement[JC] def querySelector(selectors: String): Element
raw/SVGClipPathElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGClipPathElement[JC] def removeAttribute(name: String): Unit
raw/SVGClipPathElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGClipPathElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGClipPathElement[JC] def removeChild(oldChild: Node): Node
raw/SVGClipPathElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGClipPathElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGClipPathElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGClipPathElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGClipPathElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGClipPathElement[JC] var requiredExtensions: SVGStringList
raw/SVGClipPathElement[JC] var requiredFeatures: SVGStringList
raw/SVGClipPathElement[JC] def scrollHeight: Int
raw/SVGClipPathElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGClipPathElement[JC] var scrollLeft: Double
raw/SVGClipPathElement[JC] var scrollTop: Double
raw/SVGClipPathElement[JC] def scrollWidth: Int
raw/SVGClipPathElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGClipPathElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGClipPathElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGClipPathElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGClipPathElement[JC] var style: CSSStyleDeclaration
raw/SVGClipPathElement[JC] var systemLanguage: SVGStringList
raw/SVGClipPathElement[JC] def tagName: String
raw/SVGClipPathElement[JC] var textContent: String
raw/SVGClipPathElement[JC] var transform: SVGAnimatedTransformList
raw/SVGClipPathElement[JC] def viewportElement: SVGElement
raw/SVGClipPathElement[JC] var xmlbase: String
raw/SVGClipPathElement[JC] var xmllang: String
raw/SVGClipPathElement[JC] var xmlspace: String
raw/SVGComponentTransferFunctionElement[JC] var accessKey: String
raw/SVGComponentTransferFunctionElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGComponentTransferFunctionElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGComponentTransferFunctionElement[JC] def amplitude: SVGAnimatedNumber
raw/SVGComponentTransferFunctionElement[JC] def appendChild(newChild: Node): Node
raw/SVGComponentTransferFunctionElement[JC] def attributes: NamedNodeMap
raw/SVGComponentTransferFunctionElement[JC] def childElementCount: Int
raw/SVGComponentTransferFunctionElement[JC] def childNodes: NodeList
raw/SVGComponentTransferFunctionElement[JC] def children: HTMLCollection
raw/SVGComponentTransferFunctionElement[JC] var classList: DOMTokenList
raw/SVGComponentTransferFunctionElement[JC] def clientHeight: Int
raw/SVGComponentTransferFunctionElement[JC] def clientLeft: Int
raw/SVGComponentTransferFunctionElement[JC] def clientTop: Int
raw/SVGComponentTransferFunctionElement[JC] def clientWidth: Int
raw/SVGComponentTransferFunctionElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGComponentTransferFunctionElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGComponentTransferFunctionElement[JC] def contains(otherNode: Node): Boolean
raw/SVGComponentTransferFunctionElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGComponentTransferFunctionElement[JC] def exponent: SVGAnimatedNumber
raw/SVGComponentTransferFunctionElement[JC] def firstChild: Node
raw/SVGComponentTransferFunctionElement[JC] def firstElementChild: Element
raw/SVGComponentTransferFunctionElement[JC] def getAttribute(name: String): String
raw/SVGComponentTransferFunctionElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGComponentTransferFunctionElement[JC] def getAttributeNode(name: String): Attr
raw/SVGComponentTransferFunctionElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGComponentTransferFunctionElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGComponentTransferFunctionElement[JC] def getClientRects(): ClientRectList
raw/SVGComponentTransferFunctionElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGComponentTransferFunctionElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGComponentTransferFunctionElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGComponentTransferFunctionElement[JC] def hasAttribute(name: String): Boolean
raw/SVGComponentTransferFunctionElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGComponentTransferFunctionElement[JC] def hasAttributes(): Boolean
raw/SVGComponentTransferFunctionElement[JC] def hasChildNodes(): Boolean
raw/SVGComponentTransferFunctionElement[JC] var id: String
raw/SVGComponentTransferFunctionElement[JC] var innerHTML: String
raw/SVGComponentTransferFunctionElement[JC] var innerText: String
raw/SVGComponentTransferFunctionElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGComponentTransferFunctionElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGComponentTransferFunctionElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGComponentTransferFunctionElement[JC] def intercept: SVGAnimatedNumber
raw/SVGComponentTransferFunctionElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGComponentTransferFunctionElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGComponentTransferFunctionElement[JC] def isSameNode(other: Node): Boolean
raw/SVGComponentTransferFunctionElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGComponentTransferFunctionElement[JC] def lastChild: Node
raw/SVGComponentTransferFunctionElement[JC] def lastElementChild: Element
raw/SVGComponentTransferFunctionElement[JC] def localName: String
raw/SVGComponentTransferFunctionElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGComponentTransferFunctionElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGComponentTransferFunctionElement[JC] def matches(selector: String): Boolean
raw/SVGComponentTransferFunctionElement[JC] def namespaceURI: String
raw/SVGComponentTransferFunctionElement[JC] def nextElementSibling: Element
raw/SVGComponentTransferFunctionElement[JC] def nextSibling: Node
raw/SVGComponentTransferFunctionElement[JC] def nodeName: String
raw/SVGComponentTransferFunctionElement[JC] def nodeType: Int
raw/SVGComponentTransferFunctionElement[JC] var nodeValue: String
raw/SVGComponentTransferFunctionElement[JC] def normalize(): Unit
raw/SVGComponentTransferFunctionElement[JC] def offset: SVGAnimatedNumber
raw/SVGComponentTransferFunctionElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGComponentTransferFunctionElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGComponentTransferFunctionElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGComponentTransferFunctionElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGComponentTransferFunctionElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGComponentTransferFunctionElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGComponentTransferFunctionElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGComponentTransferFunctionElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGComponentTransferFunctionElement[JC] var onload: js.Function1[Event, _]
raw/SVGComponentTransferFunctionElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGComponentTransferFunctionElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGComponentTransferFunctionElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGComponentTransferFunctionElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGComponentTransferFunctionElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGComponentTransferFunctionElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGComponentTransferFunctionElement[JC] var outerHTML: String
raw/SVGComponentTransferFunctionElement[JC] def ownerDocument: Document
raw/SVGComponentTransferFunctionElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGComponentTransferFunctionElement[JC] def parentNode: Node
raw/SVGComponentTransferFunctionElement[JC] def prefix: String
raw/SVGComponentTransferFunctionElement[JC] def previousElementSibling: Element
raw/SVGComponentTransferFunctionElement[JC] def previousSibling: Node
raw/SVGComponentTransferFunctionElement[JC] def querySelector(selectors: String): Element
raw/SVGComponentTransferFunctionElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGComponentTransferFunctionElement[JC] def removeAttribute(name: String): Unit
raw/SVGComponentTransferFunctionElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGComponentTransferFunctionElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGComponentTransferFunctionElement[JC] def removeChild(oldChild: Node): Node
raw/SVGComponentTransferFunctionElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGComponentTransferFunctionElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGComponentTransferFunctionElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGComponentTransferFunctionElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGComponentTransferFunctionElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGComponentTransferFunctionElement[JC] def scrollHeight: Int
raw/SVGComponentTransferFunctionElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGComponentTransferFunctionElement[JC] var scrollLeft: Double
raw/SVGComponentTransferFunctionElement[JC] var scrollTop: Double
raw/SVGComponentTransferFunctionElement[JC] def scrollWidth: Int
raw/SVGComponentTransferFunctionElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGComponentTransferFunctionElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGComponentTransferFunctionElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGComponentTransferFunctionElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGComponentTransferFunctionElement[JC] def slope: SVGAnimatedNumber
raw/SVGComponentTransferFunctionElement[JC] def tableValues: SVGAnimatedNumberList
raw/SVGComponentTransferFunctionElement[JC] def tagName: String
raw/SVGComponentTransferFunctionElement[JC] var textContent: String
raw/SVGComponentTransferFunctionElement[JC] def `type`: SVGAnimatedEnumeration
raw/SVGComponentTransferFunctionElement[JC] def viewportElement: SVGElement
raw/SVGComponentTransferFunctionElement[JC] var xmlbase: String
raw/SVGComponentTransferFunctionElement[JO] val SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: Int
raw/SVGComponentTransferFunctionElement[JO] val SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: Int
raw/SVGComponentTransferFunctionElement[JO] val SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: Int
raw/SVGComponentTransferFunctionElement[JO] val SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: Int
raw/SVGComponentTransferFunctionElement[JO] val SVG_FECOMPONENTTRANSFER_TYPE_TABLE: Int
raw/SVGComponentTransferFunctionElement[JO] val SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: Int
raw/SVGDefsElement[JC] var accessKey: String
raw/SVGDefsElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGDefsElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGDefsElement[JC] def appendChild(newChild: Node): Node
raw/SVGDefsElement[JC] def attributes: NamedNodeMap
raw/SVGDefsElement[JC] def childElementCount: Int
raw/SVGDefsElement[JC] def childNodes: NodeList
raw/SVGDefsElement[JC] def children: HTMLCollection
raw/SVGDefsElement[JC] var classList: DOMTokenList
raw/SVGDefsElement[JC] var className: SVGAnimatedString
raw/SVGDefsElement[JC] def clientHeight: Int
raw/SVGDefsElement[JC] def clientLeft: Int
raw/SVGDefsElement[JC] def clientTop: Int
raw/SVGDefsElement[JC] def clientWidth: Int
raw/SVGDefsElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGDefsElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGDefsElement[JC] def contains(otherNode: Node): Boolean
raw/SVGDefsElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGDefsElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGDefsElement[JC] var farthestViewportElement: SVGElement
raw/SVGDefsElement[JC] def firstChild: Node
raw/SVGDefsElement[JC] def firstElementChild: Element
raw/SVGDefsElement[JC] def getAttribute(name: String): String
raw/SVGDefsElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGDefsElement[JC] def getAttributeNode(name: String): Attr
raw/SVGDefsElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGDefsElement[JC] def getBBox(): SVGRect
raw/SVGDefsElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGDefsElement[JC] def getCTM(): SVGMatrix
raw/SVGDefsElement[JC] def getClientRects(): ClientRectList
raw/SVGDefsElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGDefsElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGDefsElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGDefsElement[JC] def getScreenCTM(): SVGMatrix
raw/SVGDefsElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
raw/SVGDefsElement[JC] def hasAttribute(name: String): Boolean
raw/SVGDefsElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGDefsElement[JC] def hasAttributes(): Boolean
raw/SVGDefsElement[JC] def hasChildNodes(): Boolean
raw/SVGDefsElement[JC] def hasExtension(extension: String): Boolean
raw/SVGDefsElement[JC] var id: String
raw/SVGDefsElement[JC] var innerHTML: String
raw/SVGDefsElement[JC] var innerText: String
raw/SVGDefsElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGDefsElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGDefsElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGDefsElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGDefsElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGDefsElement[JC] def isSameNode(other: Node): Boolean
raw/SVGDefsElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGDefsElement[JC] def lastChild: Node
raw/SVGDefsElement[JC] def lastElementChild: Element
raw/SVGDefsElement[JC] def localName: String
raw/SVGDefsElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGDefsElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGDefsElement[JC] def matches(selector: String): Boolean
raw/SVGDefsElement[JC] def namespaceURI: String
raw/SVGDefsElement[JC] var nearestViewportElement: SVGElement
raw/SVGDefsElement[JC] def nextElementSibling: Element
raw/SVGDefsElement[JC] def nextSibling: Node
raw/SVGDefsElement[JC] def nodeName: String
raw/SVGDefsElement[JC] def nodeType: Int
raw/SVGDefsElement[JC] var nodeValue: String
raw/SVGDefsElement[JC] def normalize(): Unit
raw/SVGDefsElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGDefsElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGDefsElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGDefsElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGDefsElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGDefsElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGDefsElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGDefsElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGDefsElement[JC] var onload: js.Function1[Event, _]
raw/SVGDefsElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGDefsElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGDefsElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGDefsElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGDefsElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGDefsElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGDefsElement[JC] var outerHTML: String
raw/SVGDefsElement[JC] def ownerDocument: Document
raw/SVGDefsElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGDefsElement[JC] def parentNode: Node
raw/SVGDefsElement[JC] def prefix: String
raw/SVGDefsElement[JC] def previousElementSibling: Element
raw/SVGDefsElement[JC] def previousSibling: Node
raw/SVGDefsElement[JC] def querySelector(selectors: String): Element
raw/SVGDefsElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGDefsElement[JC] def removeAttribute(name: String): Unit
raw/SVGDefsElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGDefsElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGDefsElement[JC] def removeChild(oldChild: Node): Node
raw/SVGDefsElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGDefsElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGDefsElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGDefsElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGDefsElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGDefsElement[JC] var requiredExtensions: SVGStringList
raw/SVGDefsElement[JC] var requiredFeatures: SVGStringList
raw/SVGDefsElement[JC] def scrollHeight: Int
raw/SVGDefsElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGDefsElement[JC] var scrollLeft: Double
raw/SVGDefsElement[JC] var scrollTop: Double
raw/SVGDefsElement[JC] def scrollWidth: Int
raw/SVGDefsElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGDefsElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGDefsElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGDefsElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGDefsElement[JC] var style: CSSStyleDeclaration
raw/SVGDefsElement[JC] var systemLanguage: SVGStringList
raw/SVGDefsElement[JC] def tagName: String
raw/SVGDefsElement[JC] var textContent: String
raw/SVGDefsElement[JC] var transform: SVGAnimatedTransformList
raw/SVGDefsElement[JC] def viewportElement: SVGElement
raw/SVGDefsElement[JC] var xmlbase: String
raw/SVGDefsElement[JC] var xmllang: String
raw/SVGDefsElement[JC] var xmlspace: String
raw/SVGDescElement[JC] var accessKey: String
raw/SVGDescElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGDescElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGDescElement[JC] def appendChild(newChild: Node): Node
raw/SVGDescElement[JC] def attributes: NamedNodeMap
raw/SVGDescElement[JC] def childElementCount: Int
raw/SVGDescElement[JC] def childNodes: NodeList
raw/SVGDescElement[JC] def children: HTMLCollection
raw/SVGDescElement[JC] var classList: DOMTokenList
raw/SVGDescElement[JC] var className: SVGAnimatedString
raw/SVGDescElement[JC] def clientHeight: Int
raw/SVGDescElement[JC] def clientLeft: Int
raw/SVGDescElement[JC] def clientTop: Int
raw/SVGDescElement[JC] def clientWidth: Int
raw/SVGDescElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGDescElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGDescElement[JC] def contains(otherNode: Node): Boolean
raw/SVGDescElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGDescElement[JC] def firstChild: Node
raw/SVGDescElement[JC] def firstElementChild: Element
raw/SVGDescElement[JC] def getAttribute(name: String): String
raw/SVGDescElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGDescElement[JC] def getAttributeNode(name: String): Attr
raw/SVGDescElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGDescElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGDescElement[JC] def getClientRects(): ClientRectList
raw/SVGDescElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGDescElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGDescElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGDescElement[JC] def hasAttribute(name: String): Boolean
raw/SVGDescElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGDescElement[JC] def hasAttributes(): Boolean
raw/SVGDescElement[JC] def hasChildNodes(): Boolean
raw/SVGDescElement[JC] var id: String
raw/SVGDescElement[JC] var innerHTML: String
raw/SVGDescElement[JC] var innerText: String
raw/SVGDescElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGDescElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGDescElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGDescElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGDescElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGDescElement[JC] def isSameNode(other: Node): Boolean
raw/SVGDescElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGDescElement[JC] def lastChild: Node
raw/SVGDescElement[JC] def lastElementChild: Element
raw/SVGDescElement[JC] def localName: String
raw/SVGDescElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGDescElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGDescElement[JC] def matches(selector: String): Boolean
raw/SVGDescElement[JC] def namespaceURI: String
raw/SVGDescElement[JC] def nextElementSibling: Element
raw/SVGDescElement[JC] def nextSibling: Node
raw/SVGDescElement[JC] def nodeName: String
raw/SVGDescElement[JC] def nodeType: Int
raw/SVGDescElement[JC] var nodeValue: String
raw/SVGDescElement[JC] def normalize(): Unit
raw/SVGDescElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGDescElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGDescElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGDescElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGDescElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGDescElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGDescElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGDescElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGDescElement[JC] var onload: js.Function1[Event, _]
raw/SVGDescElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGDescElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGDescElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGDescElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGDescElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGDescElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGDescElement[JC] var outerHTML: String
raw/SVGDescElement[JC] def ownerDocument: Document
raw/SVGDescElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGDescElement[JC] def parentNode: Node
raw/SVGDescElement[JC] def prefix: String
raw/SVGDescElement[JC] def previousElementSibling: Element
raw/SVGDescElement[JC] def previousSibling: Node
raw/SVGDescElement[JC] def querySelector(selectors: String): Element
raw/SVGDescElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGDescElement[JC] def removeAttribute(name: String): Unit
raw/SVGDescElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGDescElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGDescElement[JC] def removeChild(oldChild: Node): Node
raw/SVGDescElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGDescElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGDescElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGDescElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGDescElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGDescElement[JC] def scrollHeight: Int
raw/SVGDescElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGDescElement[JC] var scrollLeft: Double
raw/SVGDescElement[JC] var scrollTop: Double
raw/SVGDescElement[JC] def scrollWidth: Int
raw/SVGDescElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGDescElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGDescElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGDescElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGDescElement[JC] var style: CSSStyleDeclaration
raw/SVGDescElement[JC] def tagName: String
raw/SVGDescElement[JC] var textContent: String
raw/SVGDescElement[JC] def viewportElement: SVGElement
raw/SVGDescElement[JC] var xmlbase: String
raw/SVGDescElement[JC] var xmllang: String
raw/SVGDescElement[JC] var xmlspace: String
raw/SVGElement[JC] var accessKey: String
raw/SVGElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGElement[JC] def appendChild(newChild: Node): Node
raw/SVGElement[JC] def attributes: NamedNodeMap
raw/SVGElement[JC] def childElementCount: Int
raw/SVGElement[JC] def childNodes: NodeList
raw/SVGElement[JC] def children: HTMLCollection
raw/SVGElement[JC] var classList: DOMTokenList
raw/SVGElement[JC] def clientHeight: Int
raw/SVGElement[JC] def clientLeft: Int
raw/SVGElement[JC] def clientTop: Int
raw/SVGElement[JC] def clientWidth: Int
raw/SVGElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGElement[JC] def contains(otherNode: Node): Boolean
raw/SVGElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGElement[JC] def firstChild: Node
raw/SVGElement[JC] def firstElementChild: Element
raw/SVGElement[JC] def getAttribute(name: String): String
raw/SVGElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGElement[JC] def getAttributeNode(name: String): Attr
raw/SVGElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGElement[JC] def getClientRects(): ClientRectList
raw/SVGElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGElement[JC] def hasAttribute(name: String): Boolean
raw/SVGElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGElement[JC] def hasAttributes(): Boolean
raw/SVGElement[JC] def hasChildNodes(): Boolean
raw/SVGElement[JC] var id: String
raw/SVGElement[JC] var innerHTML: String
raw/SVGElement[JC] var innerText: String
raw/SVGElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGElement[JC] def isSameNode(other: Node): Boolean
raw/SVGElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGElement[JC] def lastChild: Node
raw/SVGElement[JC] def lastElementChild: Element
raw/SVGElement[JC] def localName: String
raw/SVGElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGElement[JC] def matches(selector: String): Boolean
raw/SVGElement[JC] def namespaceURI: String
raw/SVGElement[JC] def nextElementSibling: Element
raw/SVGElement[JC] def nextSibling: Node
raw/SVGElement[JC] def nodeName: String
raw/SVGElement[JC] def nodeType: Int
raw/SVGElement[JC] var nodeValue: String
raw/SVGElement[JC] def normalize(): Unit
raw/SVGElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGElement[JC] var onload: js.Function1[Event, _]
raw/SVGElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGElement[JC] var outerHTML: String
raw/SVGElement[JC] def ownerDocument: Document
raw/SVGElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGElement[JC] def parentNode: Node
raw/SVGElement[JC] def prefix: String
raw/SVGElement[JC] def previousElementSibling: Element
raw/SVGElement[JC] def previousSibling: Node
raw/SVGElement[JC] def querySelector(selectors: String): Element
raw/SVGElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGElement[JC] def removeAttribute(name: String): Unit
raw/SVGElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGElement[JC] def removeChild(oldChild: Node): Node
raw/SVGElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGElement[JC] def scrollHeight: Int
raw/SVGElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGElement[JC] var scrollLeft: Double
raw/SVGElement[JC] var scrollTop: Double
raw/SVGElement[JC] def scrollWidth: Int
raw/SVGElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGElement[JC] def tagName: String
raw/SVGElement[JC] var textContent: String
raw/SVGElement[JC] def viewportElement: SVGElement
raw/SVGElement[JC] var xmlbase: String
raw/SVGElementInstance[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGElementInstance[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGElementInstance[JC] def childNodes: SVGElementInstanceList
raw/SVGElementInstance[JC] def correspondingElement: SVGElement
raw/SVGElementInstance[JC] def correspondingUseElement: SVGUseElement
raw/SVGElementInstance[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGElementInstance[JC] def firstChild: SVGElementInstance
raw/SVGElementInstance[JC] def lastChild: SVGElementInstance
raw/SVGElementInstance[JC] def nextSibling: SVGElementInstance
raw/SVGElementInstance[JC] def parentNode: SVGElementInstance
raw/SVGElementInstance[JC] def previousSibling: SVGElementInstance
raw/SVGElementInstance[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGElementInstance[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGElementInstanceList[JC] def item(index: Int): SVGElementInstance
raw/SVGElementInstanceList[JC] def length: Int
raw/SVGEllipseElement[JC] var accessKey: String
raw/SVGEllipseElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGEllipseElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGEllipseElement[JC] def appendChild(newChild: Node): Node
raw/SVGEllipseElement[JC] def attributes: NamedNodeMap
raw/SVGEllipseElement[JC] def childElementCount: Int
raw/SVGEllipseElement[JC] def childNodes: NodeList
raw/SVGEllipseElement[JC] def children: HTMLCollection
raw/SVGEllipseElement[JC] var classList: DOMTokenList
raw/SVGEllipseElement[JC] var className: SVGAnimatedString
raw/SVGEllipseElement[JC] def clientHeight: Int
raw/SVGEllipseElement[JC] def clientLeft: Int
raw/SVGEllipseElement[JC] def clientTop: Int
raw/SVGEllipseElement[JC] def clientWidth: Int
raw/SVGEllipseElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGEllipseElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGEllipseElement[JC] def contains(otherNode: Node): Boolean
raw/SVGEllipseElement[JC] def cx: SVGAnimatedLength
raw/SVGEllipseElement[JC] def cy: SVGAnimatedLength
raw/SVGEllipseElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGEllipseElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGEllipseElement[JC] var farthestViewportElement: SVGElement
raw/SVGEllipseElement[JC] def firstChild: Node
raw/SVGEllipseElement[JC] def firstElementChild: Element
raw/SVGEllipseElement[JC] def getAttribute(name: String): String
raw/SVGEllipseElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGEllipseElement[JC] def getAttributeNode(name: String): Attr
raw/SVGEllipseElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGEllipseElement[JC] def getBBox(): SVGRect
raw/SVGEllipseElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGEllipseElement[JC] def getCTM(): SVGMatrix
raw/SVGEllipseElement[JC] def getClientRects(): ClientRectList
raw/SVGEllipseElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGEllipseElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGEllipseElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGEllipseElement[JC] def getScreenCTM(): SVGMatrix
raw/SVGEllipseElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
raw/SVGEllipseElement[JC] def hasAttribute(name: String): Boolean
raw/SVGEllipseElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGEllipseElement[JC] def hasAttributes(): Boolean
raw/SVGEllipseElement[JC] def hasChildNodes(): Boolean
raw/SVGEllipseElement[JC] def hasExtension(extension: String): Boolean
raw/SVGEllipseElement[JC] var id: String
raw/SVGEllipseElement[JC] var innerHTML: String
raw/SVGEllipseElement[JC] var innerText: String
raw/SVGEllipseElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGEllipseElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGEllipseElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGEllipseElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGEllipseElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGEllipseElement[JC] def isSameNode(other: Node): Boolean
raw/SVGEllipseElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGEllipseElement[JC] def lastChild: Node
raw/SVGEllipseElement[JC] def lastElementChild: Element
raw/SVGEllipseElement[JC] def localName: String
raw/SVGEllipseElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGEllipseElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGEllipseElement[JC] def matches(selector: String): Boolean
raw/SVGEllipseElement[JC] def namespaceURI: String
raw/SVGEllipseElement[JC] var nearestViewportElement: SVGElement
raw/SVGEllipseElement[JC] def nextElementSibling: Element
raw/SVGEllipseElement[JC] def nextSibling: Node
raw/SVGEllipseElement[JC] def nodeName: String
raw/SVGEllipseElement[JC] def nodeType: Int
raw/SVGEllipseElement[JC] var nodeValue: String
raw/SVGEllipseElement[JC] def normalize(): Unit
raw/SVGEllipseElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGEllipseElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGEllipseElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGEllipseElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGEllipseElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGEllipseElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGEllipseElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGEllipseElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGEllipseElement[JC] var onload: js.Function1[Event, _]
raw/SVGEllipseElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGEllipseElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGEllipseElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGEllipseElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGEllipseElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGEllipseElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGEllipseElement[JC] var outerHTML: String
raw/SVGEllipseElement[JC] def ownerDocument: Document
raw/SVGEllipseElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGEllipseElement[JC] def parentNode: Node
raw/SVGEllipseElement[JC] def prefix: String
raw/SVGEllipseElement[JC] def previousElementSibling: Element
raw/SVGEllipseElement[JC] def previousSibling: Node
raw/SVGEllipseElement[JC] def querySelector(selectors: String): Element
raw/SVGEllipseElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGEllipseElement[JC] def removeAttribute(name: String): Unit
raw/SVGEllipseElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGEllipseElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGEllipseElement[JC] def removeChild(oldChild: Node): Node
raw/SVGEllipseElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGEllipseElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGEllipseElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGEllipseElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGEllipseElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGEllipseElement[JC] var requiredExtensions: SVGStringList
raw/SVGEllipseElement[JC] var requiredFeatures: SVGStringList
raw/SVGEllipseElement[JC] def rx: SVGAnimatedLength
raw/SVGEllipseElement[JC] def ry: SVGAnimatedLength
raw/SVGEllipseElement[JC] def scrollHeight: Int
raw/SVGEllipseElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGEllipseElement[JC] var scrollLeft: Double
raw/SVGEllipseElement[JC] var scrollTop: Double
raw/SVGEllipseElement[JC] def scrollWidth: Int
raw/SVGEllipseElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGEllipseElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGEllipseElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGEllipseElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGEllipseElement[JC] var style: CSSStyleDeclaration
raw/SVGEllipseElement[JC] var systemLanguage: SVGStringList
raw/SVGEllipseElement[JC] def tagName: String
raw/SVGEllipseElement[JC] var textContent: String
raw/SVGEllipseElement[JC] var transform: SVGAnimatedTransformList
raw/SVGEllipseElement[JC] def viewportElement: SVGElement
raw/SVGEllipseElement[JC] var xmlbase: String
raw/SVGEllipseElement[JC] var xmllang: String
raw/SVGEllipseElement[JC] var xmlspace: String
raw/SVGException[JO] val SVG_INVALID_VALUE_ERR: Int
raw/SVGException[JO] val SVG_MATRIX_NOT_INVERTABLE: Int
raw/SVGException[JO] val SVG_WRONG_TYPE_ERR: Int
raw/SVGException[JT] def code: Int
raw/SVGException[JT] def message: String
raw/SVGException[JT] def name: String
raw/SVGExternalResourcesRequired[JT] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGFEBlendElement[JC] var accessKey: String
raw/SVGFEBlendElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEBlendElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEBlendElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEBlendElement[JC] def attributes: NamedNodeMap
raw/SVGFEBlendElement[JC] def childElementCount: Int
raw/SVGFEBlendElement[JC] def childNodes: NodeList
raw/SVGFEBlendElement[JC] def children: HTMLCollection
raw/SVGFEBlendElement[JC] var classList: DOMTokenList
raw/SVGFEBlendElement[JC] var className: SVGAnimatedString
raw/SVGFEBlendElement[JC] def clientHeight: Int
raw/SVGFEBlendElement[JC] def clientLeft: Int
raw/SVGFEBlendElement[JC] def clientTop: Int
raw/SVGFEBlendElement[JC] def clientWidth: Int
raw/SVGFEBlendElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEBlendElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEBlendElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEBlendElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEBlendElement[JC] def firstChild: Node
raw/SVGFEBlendElement[JC] def firstElementChild: Element
raw/SVGFEBlendElement[JC] def getAttribute(name: String): String
raw/SVGFEBlendElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEBlendElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEBlendElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEBlendElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEBlendElement[JC] def getClientRects(): ClientRectList
raw/SVGFEBlendElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEBlendElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEBlendElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEBlendElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEBlendElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEBlendElement[JC] def hasAttributes(): Boolean
raw/SVGFEBlendElement[JC] def hasChildNodes(): Boolean
raw/SVGFEBlendElement[JC] def height: SVGAnimatedLength
raw/SVGFEBlendElement[JC] var id: String
raw/SVGFEBlendElement[JC] def in1: SVGAnimatedString
raw/SVGFEBlendElement[JC] def in2: SVGAnimatedString
raw/SVGFEBlendElement[JC] var innerHTML: String
raw/SVGFEBlendElement[JC] var innerText: String
raw/SVGFEBlendElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEBlendElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEBlendElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEBlendElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEBlendElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEBlendElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEBlendElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEBlendElement[JC] def lastChild: Node
raw/SVGFEBlendElement[JC] def lastElementChild: Element
raw/SVGFEBlendElement[JC] def localName: String
raw/SVGFEBlendElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEBlendElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEBlendElement[JC] def matches(selector: String): Boolean
raw/SVGFEBlendElement[JC] def mode: SVGAnimatedEnumeration
raw/SVGFEBlendElement[JC] def namespaceURI: String
raw/SVGFEBlendElement[JC] def nextElementSibling: Element
raw/SVGFEBlendElement[JC] def nextSibling: Node
raw/SVGFEBlendElement[JC] def nodeName: String
raw/SVGFEBlendElement[JC] def nodeType: Int
raw/SVGFEBlendElement[JC] var nodeValue: String
raw/SVGFEBlendElement[JC] def normalize(): Unit
raw/SVGFEBlendElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEBlendElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEBlendElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEBlendElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEBlendElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEBlendElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEBlendElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEBlendElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEBlendElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEBlendElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEBlendElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEBlendElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEBlendElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEBlendElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEBlendElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEBlendElement[JC] var outerHTML: String
raw/SVGFEBlendElement[JC] def ownerDocument: Document
raw/SVGFEBlendElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEBlendElement[JC] def parentNode: Node
raw/SVGFEBlendElement[JC] def prefix: String
raw/SVGFEBlendElement[JC] def previousElementSibling: Element
raw/SVGFEBlendElement[JC] def previousSibling: Node
raw/SVGFEBlendElement[JC] def querySelector(selectors: String): Element
raw/SVGFEBlendElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEBlendElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEBlendElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEBlendElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEBlendElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEBlendElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEBlendElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEBlendElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEBlendElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEBlendElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEBlendElement[JC] def result: SVGAnimatedString
raw/SVGFEBlendElement[JC] def scrollHeight: Int
raw/SVGFEBlendElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEBlendElement[JC] var scrollLeft: Double
raw/SVGFEBlendElement[JC] var scrollTop: Double
raw/SVGFEBlendElement[JC] def scrollWidth: Int
raw/SVGFEBlendElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEBlendElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEBlendElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEBlendElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEBlendElement[JC] var style: CSSStyleDeclaration
raw/SVGFEBlendElement[JC] def tagName: String
raw/SVGFEBlendElement[JC] var textContent: String
raw/SVGFEBlendElement[JC] def viewportElement: SVGElement
raw/SVGFEBlendElement[JC] def width: SVGAnimatedLength
raw/SVGFEBlendElement[JC] def x: SVGAnimatedLength
raw/SVGFEBlendElement[JC] var xmlbase: String
raw/SVGFEBlendElement[JC] def y: SVGAnimatedLength
raw/SVGFEBlendElement[JO] val SVG_FEBLEND_MODE_DARKEN: Int
raw/SVGFEBlendElement[JO] val SVG_FEBLEND_MODE_LIGHTEN: Int
raw/SVGFEBlendElement[JO] val SVG_FEBLEND_MODE_MULTIPLY: Int
raw/SVGFEBlendElement[JO] val SVG_FEBLEND_MODE_NORMAL: Int
raw/SVGFEBlendElement[JO] val SVG_FEBLEND_MODE_SCREEN: Int
raw/SVGFEBlendElement[JO] val SVG_FEBLEND_MODE_UNKNOWN: Int
raw/SVGFEColorMatrixElement[JC] var accessKey: String
raw/SVGFEColorMatrixElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEColorMatrixElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEColorMatrixElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEColorMatrixElement[JC] def attributes: NamedNodeMap
raw/SVGFEColorMatrixElement[JC] def childElementCount: Int
raw/SVGFEColorMatrixElement[JC] def childNodes: NodeList
raw/SVGFEColorMatrixElement[JC] def children: HTMLCollection
raw/SVGFEColorMatrixElement[JC] var classList: DOMTokenList
raw/SVGFEColorMatrixElement[JC] var className: SVGAnimatedString
raw/SVGFEColorMatrixElement[JC] def clientHeight: Int
raw/SVGFEColorMatrixElement[JC] def clientLeft: Int
raw/SVGFEColorMatrixElement[JC] def clientTop: Int
raw/SVGFEColorMatrixElement[JC] def clientWidth: Int
raw/SVGFEColorMatrixElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEColorMatrixElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEColorMatrixElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEColorMatrixElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEColorMatrixElement[JC] def firstChild: Node
raw/SVGFEColorMatrixElement[JC] def firstElementChild: Element
raw/SVGFEColorMatrixElement[JC] def getAttribute(name: String): String
raw/SVGFEColorMatrixElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEColorMatrixElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEColorMatrixElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEColorMatrixElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEColorMatrixElement[JC] def getClientRects(): ClientRectList
raw/SVGFEColorMatrixElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEColorMatrixElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEColorMatrixElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEColorMatrixElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEColorMatrixElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEColorMatrixElement[JC] def hasAttributes(): Boolean
raw/SVGFEColorMatrixElement[JC] def hasChildNodes(): Boolean
raw/SVGFEColorMatrixElement[JC] def height: SVGAnimatedLength
raw/SVGFEColorMatrixElement[JC] var id: String
raw/SVGFEColorMatrixElement[JC] def in1: SVGAnimatedString
raw/SVGFEColorMatrixElement[JC] var innerHTML: String
raw/SVGFEColorMatrixElement[JC] var innerText: String
raw/SVGFEColorMatrixElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEColorMatrixElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEColorMatrixElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEColorMatrixElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEColorMatrixElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEColorMatrixElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEColorMatrixElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEColorMatrixElement[JC] def lastChild: Node
raw/SVGFEColorMatrixElement[JC] def lastElementChild: Element
raw/SVGFEColorMatrixElement[JC] def localName: String
raw/SVGFEColorMatrixElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEColorMatrixElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEColorMatrixElement[JC] def matches(selector: String): Boolean
raw/SVGFEColorMatrixElement[JC] def namespaceURI: String
raw/SVGFEColorMatrixElement[JC] def nextElementSibling: Element
raw/SVGFEColorMatrixElement[JC] def nextSibling: Node
raw/SVGFEColorMatrixElement[JC] def nodeName: String
raw/SVGFEColorMatrixElement[JC] def nodeType: Int
raw/SVGFEColorMatrixElement[JC] var nodeValue: String
raw/SVGFEColorMatrixElement[JC] def normalize(): Unit
raw/SVGFEColorMatrixElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEColorMatrixElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEColorMatrixElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEColorMatrixElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEColorMatrixElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEColorMatrixElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEColorMatrixElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEColorMatrixElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEColorMatrixElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEColorMatrixElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEColorMatrixElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEColorMatrixElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEColorMatrixElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEColorMatrixElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEColorMatrixElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEColorMatrixElement[JC] var outerHTML: String
raw/SVGFEColorMatrixElement[JC] def ownerDocument: Document
raw/SVGFEColorMatrixElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEColorMatrixElement[JC] def parentNode: Node
raw/SVGFEColorMatrixElement[JC] def prefix: String
raw/SVGFEColorMatrixElement[JC] def previousElementSibling: Element
raw/SVGFEColorMatrixElement[JC] def previousSibling: Node
raw/SVGFEColorMatrixElement[JC] def querySelector(selectors: String): Element
raw/SVGFEColorMatrixElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEColorMatrixElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEColorMatrixElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEColorMatrixElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEColorMatrixElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEColorMatrixElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEColorMatrixElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEColorMatrixElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEColorMatrixElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEColorMatrixElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEColorMatrixElement[JC] def result: SVGAnimatedString
raw/SVGFEColorMatrixElement[JC] def scrollHeight: Int
raw/SVGFEColorMatrixElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEColorMatrixElement[JC] var scrollLeft: Double
raw/SVGFEColorMatrixElement[JC] var scrollTop: Double
raw/SVGFEColorMatrixElement[JC] def scrollWidth: Int
raw/SVGFEColorMatrixElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEColorMatrixElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEColorMatrixElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEColorMatrixElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEColorMatrixElement[JC] var style: CSSStyleDeclaration
raw/SVGFEColorMatrixElement[JC] def tagName: String
raw/SVGFEColorMatrixElement[JC] var textContent: String
raw/SVGFEColorMatrixElement[JC] def `type`: SVGAnimatedEnumeration
raw/SVGFEColorMatrixElement[JC] def values: SVGAnimatedNumberList
raw/SVGFEColorMatrixElement[JC] def viewportElement: SVGElement
raw/SVGFEColorMatrixElement[JC] def width: SVGAnimatedLength
raw/SVGFEColorMatrixElement[JC] def x: SVGAnimatedLength
raw/SVGFEColorMatrixElement[JC] var xmlbase: String
raw/SVGFEColorMatrixElement[JC] def y: SVGAnimatedLength
raw/SVGFEColorMatrixElement[JO] val SVG_FECOLORMATRIX_TYPE_HUEROTATE: Int
raw/SVGFEColorMatrixElement[JO] val SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: Int
raw/SVGFEColorMatrixElement[JO] val SVG_FECOLORMATRIX_TYPE_MATRIX: Int
raw/SVGFEColorMatrixElement[JO] val SVG_FECOLORMATRIX_TYPE_SATURATE: Int
raw/SVGFEColorMatrixElement[JO] val SVG_FECOLORMATRIX_TYPE_UNKNOWN: Int
raw/SVGFEComponentTransferElement[JC] var accessKey: String
raw/SVGFEComponentTransferElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEComponentTransferElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEComponentTransferElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEComponentTransferElement[JC] def attributes: NamedNodeMap
raw/SVGFEComponentTransferElement[JC] def childElementCount: Int
raw/SVGFEComponentTransferElement[JC] def childNodes: NodeList
raw/SVGFEComponentTransferElement[JC] def children: HTMLCollection
raw/SVGFEComponentTransferElement[JC] var classList: DOMTokenList
raw/SVGFEComponentTransferElement[JC] var className: SVGAnimatedString
raw/SVGFEComponentTransferElement[JC] def clientHeight: Int
raw/SVGFEComponentTransferElement[JC] def clientLeft: Int
raw/SVGFEComponentTransferElement[JC] def clientTop: Int
raw/SVGFEComponentTransferElement[JC] def clientWidth: Int
raw/SVGFEComponentTransferElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEComponentTransferElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEComponentTransferElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEComponentTransferElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEComponentTransferElement[JC] def firstChild: Node
raw/SVGFEComponentTransferElement[JC] def firstElementChild: Element
raw/SVGFEComponentTransferElement[JC] def getAttribute(name: String): String
raw/SVGFEComponentTransferElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEComponentTransferElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEComponentTransferElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEComponentTransferElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEComponentTransferElement[JC] def getClientRects(): ClientRectList
raw/SVGFEComponentTransferElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEComponentTransferElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEComponentTransferElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEComponentTransferElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEComponentTransferElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEComponentTransferElement[JC] def hasAttributes(): Boolean
raw/SVGFEComponentTransferElement[JC] def hasChildNodes(): Boolean
raw/SVGFEComponentTransferElement[JC] def height: SVGAnimatedLength
raw/SVGFEComponentTransferElement[JC] var id: String
raw/SVGFEComponentTransferElement[JC] def in1: SVGAnimatedString
raw/SVGFEComponentTransferElement[JC] var innerHTML: String
raw/SVGFEComponentTransferElement[JC] var innerText: String
raw/SVGFEComponentTransferElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEComponentTransferElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEComponentTransferElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEComponentTransferElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEComponentTransferElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEComponentTransferElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEComponentTransferElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEComponentTransferElement[JC] def lastChild: Node
raw/SVGFEComponentTransferElement[JC] def lastElementChild: Element
raw/SVGFEComponentTransferElement[JC] def localName: String
raw/SVGFEComponentTransferElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEComponentTransferElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEComponentTransferElement[JC] def matches(selector: String): Boolean
raw/SVGFEComponentTransferElement[JC] def namespaceURI: String
raw/SVGFEComponentTransferElement[JC] def nextElementSibling: Element
raw/SVGFEComponentTransferElement[JC] def nextSibling: Node
raw/SVGFEComponentTransferElement[JC] def nodeName: String
raw/SVGFEComponentTransferElement[JC] def nodeType: Int
raw/SVGFEComponentTransferElement[JC] var nodeValue: String
raw/SVGFEComponentTransferElement[JC] def normalize(): Unit
raw/SVGFEComponentTransferElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEComponentTransferElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEComponentTransferElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEComponentTransferElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEComponentTransferElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEComponentTransferElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEComponentTransferElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEComponentTransferElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEComponentTransferElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEComponentTransferElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEComponentTransferElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEComponentTransferElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEComponentTransferElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEComponentTransferElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEComponentTransferElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEComponentTransferElement[JC] var outerHTML: String
raw/SVGFEComponentTransferElement[JC] def ownerDocument: Document
raw/SVGFEComponentTransferElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEComponentTransferElement[JC] def parentNode: Node
raw/SVGFEComponentTransferElement[JC] def prefix: String
raw/SVGFEComponentTransferElement[JC] def previousElementSibling: Element
raw/SVGFEComponentTransferElement[JC] def previousSibling: Node
raw/SVGFEComponentTransferElement[JC] def querySelector(selectors: String): Element
raw/SVGFEComponentTransferElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEComponentTransferElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEComponentTransferElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEComponentTransferElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEComponentTransferElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEComponentTransferElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEComponentTransferElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEComponentTransferElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEComponentTransferElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEComponentTransferElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEComponentTransferElement[JC] def result: SVGAnimatedString
raw/SVGFEComponentTransferElement[JC] def scrollHeight: Int
raw/SVGFEComponentTransferElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEComponentTransferElement[JC] var scrollLeft: Double
raw/SVGFEComponentTransferElement[JC] var scrollTop: Double
raw/SVGFEComponentTransferElement[JC] def scrollWidth: Int
raw/SVGFEComponentTransferElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEComponentTransferElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEComponentTransferElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEComponentTransferElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEComponentTransferElement[JC] var style: CSSStyleDeclaration
raw/SVGFEComponentTransferElement[JC] def tagName: String
raw/SVGFEComponentTransferElement[JC] var textContent: String
raw/SVGFEComponentTransferElement[JC] def viewportElement: SVGElement
raw/SVGFEComponentTransferElement[JC] def width: SVGAnimatedLength
raw/SVGFEComponentTransferElement[JC] def x: SVGAnimatedLength
raw/SVGFEComponentTransferElement[JC] var xmlbase: String
raw/SVGFEComponentTransferElement[JC] def y: SVGAnimatedLength
raw/SVGFECompositeElement[JC] var accessKey: String
raw/SVGFECompositeElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFECompositeElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFECompositeElement[JC] def appendChild(newChild: Node): Node
raw/SVGFECompositeElement[JC] def attributes: NamedNodeMap
raw/SVGFECompositeElement[JC] def childElementCount: Int
raw/SVGFECompositeElement[JC] def childNodes: NodeList
raw/SVGFECompositeElement[JC] def children: HTMLCollection
raw/SVGFECompositeElement[JC] var classList: DOMTokenList
raw/SVGFECompositeElement[JC] var className: SVGAnimatedString
raw/SVGFECompositeElement[JC] def clientHeight: Int
raw/SVGFECompositeElement[JC] def clientLeft: Int
raw/SVGFECompositeElement[JC] def clientTop: Int
raw/SVGFECompositeElement[JC] def clientWidth: Int
raw/SVGFECompositeElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFECompositeElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFECompositeElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFECompositeElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFECompositeElement[JC] def firstChild: Node
raw/SVGFECompositeElement[JC] def firstElementChild: Element
raw/SVGFECompositeElement[JC] def getAttribute(name: String): String
raw/SVGFECompositeElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFECompositeElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFECompositeElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFECompositeElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFECompositeElement[JC] def getClientRects(): ClientRectList
raw/SVGFECompositeElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFECompositeElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFECompositeElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFECompositeElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFECompositeElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFECompositeElement[JC] def hasAttributes(): Boolean
raw/SVGFECompositeElement[JC] def hasChildNodes(): Boolean
raw/SVGFECompositeElement[JC] def height: SVGAnimatedLength
raw/SVGFECompositeElement[JC] var id: String
raw/SVGFECompositeElement[JC] def in1: SVGAnimatedString
raw/SVGFECompositeElement[JC] def in2: SVGAnimatedString
raw/SVGFECompositeElement[JC] var innerHTML: String
raw/SVGFECompositeElement[JC] var innerText: String
raw/SVGFECompositeElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFECompositeElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFECompositeElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFECompositeElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFECompositeElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFECompositeElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFECompositeElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFECompositeElement[JC] def k1: SVGAnimatedNumber
raw/SVGFECompositeElement[JC] def k2: SVGAnimatedNumber
raw/SVGFECompositeElement[JC] def k3: SVGAnimatedNumber
raw/SVGFECompositeElement[JC] def k4: SVGAnimatedNumber
raw/SVGFECompositeElement[JC] def lastChild: Node
raw/SVGFECompositeElement[JC] def lastElementChild: Element
raw/SVGFECompositeElement[JC] def localName: String
raw/SVGFECompositeElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFECompositeElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFECompositeElement[JC] def matches(selector: String): Boolean
raw/SVGFECompositeElement[JC] def namespaceURI: String
raw/SVGFECompositeElement[JC] def nextElementSibling: Element
raw/SVGFECompositeElement[JC] def nextSibling: Node
raw/SVGFECompositeElement[JC] def nodeName: String
raw/SVGFECompositeElement[JC] def nodeType: Int
raw/SVGFECompositeElement[JC] var nodeValue: String
raw/SVGFECompositeElement[JC] def normalize(): Unit
raw/SVGFECompositeElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFECompositeElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFECompositeElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFECompositeElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFECompositeElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFECompositeElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFECompositeElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFECompositeElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFECompositeElement[JC] var onload: js.Function1[Event, _]
raw/SVGFECompositeElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFECompositeElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFECompositeElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFECompositeElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFECompositeElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFECompositeElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFECompositeElement[JC] def operator: SVGAnimatedEnumeration
raw/SVGFECompositeElement[JC] var outerHTML: String
raw/SVGFECompositeElement[JC] def ownerDocument: Document
raw/SVGFECompositeElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFECompositeElement[JC] def parentNode: Node
raw/SVGFECompositeElement[JC] def prefix: String
raw/SVGFECompositeElement[JC] def previousElementSibling: Element
raw/SVGFECompositeElement[JC] def previousSibling: Node
raw/SVGFECompositeElement[JC] def querySelector(selectors: String): Element
raw/SVGFECompositeElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFECompositeElement[JC] def removeAttribute(name: String): Unit
raw/SVGFECompositeElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFECompositeElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFECompositeElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFECompositeElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFECompositeElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFECompositeElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFECompositeElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFECompositeElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFECompositeElement[JC] def result: SVGAnimatedString
raw/SVGFECompositeElement[JC] def scrollHeight: Int
raw/SVGFECompositeElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFECompositeElement[JC] var scrollLeft: Double
raw/SVGFECompositeElement[JC] var scrollTop: Double
raw/SVGFECompositeElement[JC] def scrollWidth: Int
raw/SVGFECompositeElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFECompositeElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFECompositeElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFECompositeElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFECompositeElement[JC] var style: CSSStyleDeclaration
raw/SVGFECompositeElement[JC] def tagName: String
raw/SVGFECompositeElement[JC] var textContent: String
raw/SVGFECompositeElement[JC] def viewportElement: SVGElement
raw/SVGFECompositeElement[JC] def width: SVGAnimatedLength
raw/SVGFECompositeElement[JC] def x: SVGAnimatedLength
raw/SVGFECompositeElement[JC] var xmlbase: String
raw/SVGFECompositeElement[JC] def y: SVGAnimatedLength
raw/SVGFECompositeElement[JO] val SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: Int
raw/SVGFECompositeElement[JO] val SVG_FECOMPOSITE_OPERATOR_ATOP: Int
raw/SVGFECompositeElement[JO] val SVG_FECOMPOSITE_OPERATOR_IN: Int
raw/SVGFECompositeElement[JO] val SVG_FECOMPOSITE_OPERATOR_OUT: Int
raw/SVGFECompositeElement[JO] val SVG_FECOMPOSITE_OPERATOR_OVER: Int
raw/SVGFECompositeElement[JO] val SVG_FECOMPOSITE_OPERATOR_UNKNOWN: Int
raw/SVGFECompositeElement[JO] val SVG_FECOMPOSITE_OPERATOR_XOR: Int
raw/SVGFEConvolveMatrixElement[JC] var accessKey: String
raw/SVGFEConvolveMatrixElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEConvolveMatrixElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEConvolveMatrixElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEConvolveMatrixElement[JC] def attributes: NamedNodeMap
raw/SVGFEConvolveMatrixElement[JC] def bias: SVGAnimatedNumber
raw/SVGFEConvolveMatrixElement[JC] def childElementCount: Int
raw/SVGFEConvolveMatrixElement[JC] def childNodes: NodeList
raw/SVGFEConvolveMatrixElement[JC] def children: HTMLCollection
raw/SVGFEConvolveMatrixElement[JC] var classList: DOMTokenList
raw/SVGFEConvolveMatrixElement[JC] var className: SVGAnimatedString
raw/SVGFEConvolveMatrixElement[JC] def clientHeight: Int
raw/SVGFEConvolveMatrixElement[JC] def clientLeft: Int
raw/SVGFEConvolveMatrixElement[JC] def clientTop: Int
raw/SVGFEConvolveMatrixElement[JC] def clientWidth: Int
raw/SVGFEConvolveMatrixElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEConvolveMatrixElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEConvolveMatrixElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEConvolveMatrixElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEConvolveMatrixElement[JC] def divisor: SVGAnimatedNumber
raw/SVGFEConvolveMatrixElement[JC] def edgeMode: SVGAnimatedEnumeration
raw/SVGFEConvolveMatrixElement[JC] def firstChild: Node
raw/SVGFEConvolveMatrixElement[JC] def firstElementChild: Element
raw/SVGFEConvolveMatrixElement[JC] def getAttribute(name: String): String
raw/SVGFEConvolveMatrixElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEConvolveMatrixElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEConvolveMatrixElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEConvolveMatrixElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEConvolveMatrixElement[JC] def getClientRects(): ClientRectList
raw/SVGFEConvolveMatrixElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEConvolveMatrixElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEConvolveMatrixElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEConvolveMatrixElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEConvolveMatrixElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEConvolveMatrixElement[JC] def hasAttributes(): Boolean
raw/SVGFEConvolveMatrixElement[JC] def hasChildNodes(): Boolean
raw/SVGFEConvolveMatrixElement[JC] def height: SVGAnimatedLength
raw/SVGFEConvolveMatrixElement[JC] var id: String
raw/SVGFEConvolveMatrixElement[JC] def in1: SVGAnimatedString
raw/SVGFEConvolveMatrixElement[JC] var innerHTML: String
raw/SVGFEConvolveMatrixElement[JC] var innerText: String
raw/SVGFEConvolveMatrixElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEConvolveMatrixElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEConvolveMatrixElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEConvolveMatrixElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEConvolveMatrixElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEConvolveMatrixElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEConvolveMatrixElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEConvolveMatrixElement[JC] def kernelMatrix: SVGAnimatedNumberList
raw/SVGFEConvolveMatrixElement[JC] def kernelUnitLengthX: SVGAnimatedNumber
raw/SVGFEConvolveMatrixElement[JC] def kernelUnitLengthY: SVGAnimatedNumber
raw/SVGFEConvolveMatrixElement[JC] def lastChild: Node
raw/SVGFEConvolveMatrixElement[JC] def lastElementChild: Element
raw/SVGFEConvolveMatrixElement[JC] def localName: String
raw/SVGFEConvolveMatrixElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEConvolveMatrixElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEConvolveMatrixElement[JC] def matches(selector: String): Boolean
raw/SVGFEConvolveMatrixElement[JC] def namespaceURI: String
raw/SVGFEConvolveMatrixElement[JC] def nextElementSibling: Element
raw/SVGFEConvolveMatrixElement[JC] def nextSibling: Node
raw/SVGFEConvolveMatrixElement[JC] def nodeName: String
raw/SVGFEConvolveMatrixElement[JC] def nodeType: Int
raw/SVGFEConvolveMatrixElement[JC] var nodeValue: String
raw/SVGFEConvolveMatrixElement[JC] def normalize(): Unit
raw/SVGFEConvolveMatrixElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEConvolveMatrixElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEConvolveMatrixElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEConvolveMatrixElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEConvolveMatrixElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEConvolveMatrixElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEConvolveMatrixElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEConvolveMatrixElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEConvolveMatrixElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEConvolveMatrixElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEConvolveMatrixElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEConvolveMatrixElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEConvolveMatrixElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEConvolveMatrixElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEConvolveMatrixElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEConvolveMatrixElement[JC] def orderX: SVGAnimatedInteger
raw/SVGFEConvolveMatrixElement[JC] def orderY: SVGAnimatedInteger
raw/SVGFEConvolveMatrixElement[JC] var outerHTML: String
raw/SVGFEConvolveMatrixElement[JC] def ownerDocument: Document
raw/SVGFEConvolveMatrixElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEConvolveMatrixElement[JC] def parentNode: Node
raw/SVGFEConvolveMatrixElement[JC] def prefix: String
raw/SVGFEConvolveMatrixElement[JC] def preserveAlpha: SVGAnimatedBoolean
raw/SVGFEConvolveMatrixElement[JC] def previousElementSibling: Element
raw/SVGFEConvolveMatrixElement[JC] def previousSibling: Node
raw/SVGFEConvolveMatrixElement[JC] def querySelector(selectors: String): Element
raw/SVGFEConvolveMatrixElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEConvolveMatrixElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEConvolveMatrixElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEConvolveMatrixElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEConvolveMatrixElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEConvolveMatrixElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEConvolveMatrixElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEConvolveMatrixElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEConvolveMatrixElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEConvolveMatrixElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEConvolveMatrixElement[JC] def result: SVGAnimatedString
raw/SVGFEConvolveMatrixElement[JC] def scrollHeight: Int
raw/SVGFEConvolveMatrixElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEConvolveMatrixElement[JC] var scrollLeft: Double
raw/SVGFEConvolveMatrixElement[JC] var scrollTop: Double
raw/SVGFEConvolveMatrixElement[JC] def scrollWidth: Int
raw/SVGFEConvolveMatrixElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEConvolveMatrixElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEConvolveMatrixElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEConvolveMatrixElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEConvolveMatrixElement[JC] var style: CSSStyleDeclaration
raw/SVGFEConvolveMatrixElement[JC] def tagName: String
raw/SVGFEConvolveMatrixElement[JC] def targetX: SVGAnimatedInteger
raw/SVGFEConvolveMatrixElement[JC] def targetY: SVGAnimatedInteger
raw/SVGFEConvolveMatrixElement[JC] var textContent: String
raw/SVGFEConvolveMatrixElement[JC] def viewportElement: SVGElement
raw/SVGFEConvolveMatrixElement[JC] def width: SVGAnimatedLength
raw/SVGFEConvolveMatrixElement[JC] def x: SVGAnimatedLength
raw/SVGFEConvolveMatrixElement[JC] var xmlbase: String
raw/SVGFEConvolveMatrixElement[JC] def y: SVGAnimatedLength
raw/SVGFEConvolveMatrixElement[JO] val SVG_EDGEMODE_DUPLICATE: Int
raw/SVGFEConvolveMatrixElement[JO] val SVG_EDGEMODE_NONE: Int
raw/SVGFEConvolveMatrixElement[JO] val SVG_EDGEMODE_UNKNOWN: Int
raw/SVGFEConvolveMatrixElement[JO] val SVG_EDGEMODE_WRAP: Int
raw/SVGFEDiffuseLightingElement[JC] var accessKey: String
raw/SVGFEDiffuseLightingElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEDiffuseLightingElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEDiffuseLightingElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEDiffuseLightingElement[JC] def attributes: NamedNodeMap
raw/SVGFEDiffuseLightingElement[JC] def childElementCount: Int
raw/SVGFEDiffuseLightingElement[JC] def childNodes: NodeList
raw/SVGFEDiffuseLightingElement[JC] def children: HTMLCollection
raw/SVGFEDiffuseLightingElement[JC] var classList: DOMTokenList
raw/SVGFEDiffuseLightingElement[JC] var className: SVGAnimatedString
raw/SVGFEDiffuseLightingElement[JC] def clientHeight: Int
raw/SVGFEDiffuseLightingElement[JC] def clientLeft: Int
raw/SVGFEDiffuseLightingElement[JC] def clientTop: Int
raw/SVGFEDiffuseLightingElement[JC] def clientWidth: Int
raw/SVGFEDiffuseLightingElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEDiffuseLightingElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEDiffuseLightingElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEDiffuseLightingElement[JC] def diffuseConstant: SVGAnimatedNumber
raw/SVGFEDiffuseLightingElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEDiffuseLightingElement[JC] def firstChild: Node
raw/SVGFEDiffuseLightingElement[JC] def firstElementChild: Element
raw/SVGFEDiffuseLightingElement[JC] def getAttribute(name: String): String
raw/SVGFEDiffuseLightingElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEDiffuseLightingElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEDiffuseLightingElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEDiffuseLightingElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEDiffuseLightingElement[JC] def getClientRects(): ClientRectList
raw/SVGFEDiffuseLightingElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEDiffuseLightingElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEDiffuseLightingElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEDiffuseLightingElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEDiffuseLightingElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEDiffuseLightingElement[JC] def hasAttributes(): Boolean
raw/SVGFEDiffuseLightingElement[JC] def hasChildNodes(): Boolean
raw/SVGFEDiffuseLightingElement[JC] def height: SVGAnimatedLength
raw/SVGFEDiffuseLightingElement[JC] var id: String
raw/SVGFEDiffuseLightingElement[JC] def in1: SVGAnimatedString
raw/SVGFEDiffuseLightingElement[JC] var innerHTML: String
raw/SVGFEDiffuseLightingElement[JC] var innerText: String
raw/SVGFEDiffuseLightingElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEDiffuseLightingElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEDiffuseLightingElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEDiffuseLightingElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEDiffuseLightingElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEDiffuseLightingElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEDiffuseLightingElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEDiffuseLightingElement[JC] def kernelUnitLengthX: SVGAnimatedNumber
raw/SVGFEDiffuseLightingElement[JC] def kernelUnitLengthY: SVGAnimatedNumber
raw/SVGFEDiffuseLightingElement[JC] def lastChild: Node
raw/SVGFEDiffuseLightingElement[JC] def lastElementChild: Element
raw/SVGFEDiffuseLightingElement[JC] def localName: String
raw/SVGFEDiffuseLightingElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEDiffuseLightingElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEDiffuseLightingElement[JC] def matches(selector: String): Boolean
raw/SVGFEDiffuseLightingElement[JC] def namespaceURI: String
raw/SVGFEDiffuseLightingElement[JC] def nextElementSibling: Element
raw/SVGFEDiffuseLightingElement[JC] def nextSibling: Node
raw/SVGFEDiffuseLightingElement[JC] def nodeName: String
raw/SVGFEDiffuseLightingElement[JC] def nodeType: Int
raw/SVGFEDiffuseLightingElement[JC] var nodeValue: String
raw/SVGFEDiffuseLightingElement[JC] def normalize(): Unit
raw/SVGFEDiffuseLightingElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEDiffuseLightingElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEDiffuseLightingElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEDiffuseLightingElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEDiffuseLightingElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEDiffuseLightingElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEDiffuseLightingElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEDiffuseLightingElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEDiffuseLightingElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEDiffuseLightingElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEDiffuseLightingElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEDiffuseLightingElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEDiffuseLightingElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEDiffuseLightingElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEDiffuseLightingElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEDiffuseLightingElement[JC] var outerHTML: String
raw/SVGFEDiffuseLightingElement[JC] def ownerDocument: Document
raw/SVGFEDiffuseLightingElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEDiffuseLightingElement[JC] def parentNode: Node
raw/SVGFEDiffuseLightingElement[JC] def prefix: String
raw/SVGFEDiffuseLightingElement[JC] def previousElementSibling: Element
raw/SVGFEDiffuseLightingElement[JC] def previousSibling: Node
raw/SVGFEDiffuseLightingElement[JC] def querySelector(selectors: String): Element
raw/SVGFEDiffuseLightingElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEDiffuseLightingElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEDiffuseLightingElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEDiffuseLightingElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEDiffuseLightingElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEDiffuseLightingElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEDiffuseLightingElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEDiffuseLightingElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEDiffuseLightingElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEDiffuseLightingElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEDiffuseLightingElement[JC] def result: SVGAnimatedString
raw/SVGFEDiffuseLightingElement[JC] def scrollHeight: Int
raw/SVGFEDiffuseLightingElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEDiffuseLightingElement[JC] var scrollLeft: Double
raw/SVGFEDiffuseLightingElement[JC] var scrollTop: Double
raw/SVGFEDiffuseLightingElement[JC] def scrollWidth: Int
raw/SVGFEDiffuseLightingElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEDiffuseLightingElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEDiffuseLightingElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEDiffuseLightingElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEDiffuseLightingElement[JC] var style: CSSStyleDeclaration
raw/SVGFEDiffuseLightingElement[JC] def surfaceScale: SVGAnimatedNumber
raw/SVGFEDiffuseLightingElement[JC] def tagName: String
raw/SVGFEDiffuseLightingElement[JC] var textContent: String
raw/SVGFEDiffuseLightingElement[JC] def viewportElement: SVGElement
raw/SVGFEDiffuseLightingElement[JC] def width: SVGAnimatedLength
raw/SVGFEDiffuseLightingElement[JC] def x: SVGAnimatedLength
raw/SVGFEDiffuseLightingElement[JC] var xmlbase: String
raw/SVGFEDiffuseLightingElement[JC] def y: SVGAnimatedLength
raw/SVGFEDisplacementMapElement[JC] var accessKey: String
raw/SVGFEDisplacementMapElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEDisplacementMapElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEDisplacementMapElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEDisplacementMapElement[JC] def attributes: NamedNodeMap
raw/SVGFEDisplacementMapElement[JC] def childElementCount: Int
raw/SVGFEDisplacementMapElement[JC] def childNodes: NodeList
raw/SVGFEDisplacementMapElement[JC] def children: HTMLCollection
raw/SVGFEDisplacementMapElement[JC] var classList: DOMTokenList
raw/SVGFEDisplacementMapElement[JC] var className: SVGAnimatedString
raw/SVGFEDisplacementMapElement[JC] def clientHeight: Int
raw/SVGFEDisplacementMapElement[JC] def clientLeft: Int
raw/SVGFEDisplacementMapElement[JC] def clientTop: Int
raw/SVGFEDisplacementMapElement[JC] def clientWidth: Int
raw/SVGFEDisplacementMapElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEDisplacementMapElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEDisplacementMapElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEDisplacementMapElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEDisplacementMapElement[JC] def firstChild: Node
raw/SVGFEDisplacementMapElement[JC] def firstElementChild: Element
raw/SVGFEDisplacementMapElement[JC] def getAttribute(name: String): String
raw/SVGFEDisplacementMapElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEDisplacementMapElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEDisplacementMapElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEDisplacementMapElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEDisplacementMapElement[JC] def getClientRects(): ClientRectList
raw/SVGFEDisplacementMapElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEDisplacementMapElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEDisplacementMapElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEDisplacementMapElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEDisplacementMapElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEDisplacementMapElement[JC] def hasAttributes(): Boolean
raw/SVGFEDisplacementMapElement[JC] def hasChildNodes(): Boolean
raw/SVGFEDisplacementMapElement[JC] def height: SVGAnimatedLength
raw/SVGFEDisplacementMapElement[JC] var id: String
raw/SVGFEDisplacementMapElement[JC] def in1: SVGAnimatedString
raw/SVGFEDisplacementMapElement[JC] def in2: SVGAnimatedString
raw/SVGFEDisplacementMapElement[JC] var innerHTML: String
raw/SVGFEDisplacementMapElement[JC] var innerText: String
raw/SVGFEDisplacementMapElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEDisplacementMapElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEDisplacementMapElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEDisplacementMapElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEDisplacementMapElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEDisplacementMapElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEDisplacementMapElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEDisplacementMapElement[JC] def lastChild: Node
raw/SVGFEDisplacementMapElement[JC] def lastElementChild: Element
raw/SVGFEDisplacementMapElement[JC] def localName: String
raw/SVGFEDisplacementMapElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEDisplacementMapElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEDisplacementMapElement[JC] def matches(selector: String): Boolean
raw/SVGFEDisplacementMapElement[JC] def namespaceURI: String
raw/SVGFEDisplacementMapElement[JC] def nextElementSibling: Element
raw/SVGFEDisplacementMapElement[JC] def nextSibling: Node
raw/SVGFEDisplacementMapElement[JC] def nodeName: String
raw/SVGFEDisplacementMapElement[JC] def nodeType: Int
raw/SVGFEDisplacementMapElement[JC] var nodeValue: String
raw/SVGFEDisplacementMapElement[JC] def normalize(): Unit
raw/SVGFEDisplacementMapElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEDisplacementMapElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEDisplacementMapElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEDisplacementMapElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEDisplacementMapElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEDisplacementMapElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEDisplacementMapElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEDisplacementMapElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEDisplacementMapElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEDisplacementMapElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEDisplacementMapElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEDisplacementMapElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEDisplacementMapElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEDisplacementMapElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEDisplacementMapElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEDisplacementMapElement[JC] var outerHTML: String
raw/SVGFEDisplacementMapElement[JC] def ownerDocument: Document
raw/SVGFEDisplacementMapElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEDisplacementMapElement[JC] def parentNode: Node
raw/SVGFEDisplacementMapElement[JC] def prefix: String
raw/SVGFEDisplacementMapElement[JC] def previousElementSibling: Element
raw/SVGFEDisplacementMapElement[JC] def previousSibling: Node
raw/SVGFEDisplacementMapElement[JC] def querySelector(selectors: String): Element
raw/SVGFEDisplacementMapElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEDisplacementMapElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEDisplacementMapElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEDisplacementMapElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEDisplacementMapElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEDisplacementMapElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEDisplacementMapElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEDisplacementMapElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEDisplacementMapElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEDisplacementMapElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEDisplacementMapElement[JC] def result: SVGAnimatedString
raw/SVGFEDisplacementMapElement[JC] def scale: SVGAnimatedNumber
raw/SVGFEDisplacementMapElement[JC] def scrollHeight: Int
raw/SVGFEDisplacementMapElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEDisplacementMapElement[JC] var scrollLeft: Double
raw/SVGFEDisplacementMapElement[JC] var scrollTop: Double
raw/SVGFEDisplacementMapElement[JC] def scrollWidth: Int
raw/SVGFEDisplacementMapElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEDisplacementMapElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEDisplacementMapElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEDisplacementMapElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEDisplacementMapElement[JC] var style: CSSStyleDeclaration
raw/SVGFEDisplacementMapElement[JC] def tagName: String
raw/SVGFEDisplacementMapElement[JC] var textContent: String
raw/SVGFEDisplacementMapElement[JC] def viewportElement: SVGElement
raw/SVGFEDisplacementMapElement[JC] def width: SVGAnimatedLength
raw/SVGFEDisplacementMapElement[JC] def x: SVGAnimatedLength
raw/SVGFEDisplacementMapElement[JC] def xChannelSelector: SVGAnimatedEnumeration
raw/SVGFEDisplacementMapElement[JC] var xmlbase: String
raw/SVGFEDisplacementMapElement[JC] def y: SVGAnimatedLength
raw/SVGFEDisplacementMapElement[JC] def yChannelSelector: SVGAnimatedEnumeration
raw/SVGFEDisplacementMapElement[JO] val SVG_CHANNEL_A: Int
raw/SVGFEDisplacementMapElement[JO] val SVG_CHANNEL_B: Int
raw/SVGFEDisplacementMapElement[JO] val SVG_CHANNEL_G: Int
raw/SVGFEDisplacementMapElement[JO] val SVG_CHANNEL_R: Int
raw/SVGFEDisplacementMapElement[JO] val SVG_CHANNEL_UNKNOWN: Int
raw/SVGFEDistantLightElement[JC] var accessKey: String
raw/SVGFEDistantLightElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEDistantLightElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEDistantLightElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEDistantLightElement[JC] def attributes: NamedNodeMap
raw/SVGFEDistantLightElement[JC] def azimuth: SVGAnimatedNumber
raw/SVGFEDistantLightElement[JC] def childElementCount: Int
raw/SVGFEDistantLightElement[JC] def childNodes: NodeList
raw/SVGFEDistantLightElement[JC] def children: HTMLCollection
raw/SVGFEDistantLightElement[JC] var classList: DOMTokenList
raw/SVGFEDistantLightElement[JC] def clientHeight: Int
raw/SVGFEDistantLightElement[JC] def clientLeft: Int
raw/SVGFEDistantLightElement[JC] def clientTop: Int
raw/SVGFEDistantLightElement[JC] def clientWidth: Int
raw/SVGFEDistantLightElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEDistantLightElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEDistantLightElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEDistantLightElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEDistantLightElement[JC] def elevation: SVGAnimatedNumber
raw/SVGFEDistantLightElement[JC] def firstChild: Node
raw/SVGFEDistantLightElement[JC] def firstElementChild: Element
raw/SVGFEDistantLightElement[JC] def getAttribute(name: String): String
raw/SVGFEDistantLightElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEDistantLightElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEDistantLightElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEDistantLightElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEDistantLightElement[JC] def getClientRects(): ClientRectList
raw/SVGFEDistantLightElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEDistantLightElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEDistantLightElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEDistantLightElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEDistantLightElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEDistantLightElement[JC] def hasAttributes(): Boolean
raw/SVGFEDistantLightElement[JC] def hasChildNodes(): Boolean
raw/SVGFEDistantLightElement[JC] var id: String
raw/SVGFEDistantLightElement[JC] var innerHTML: String
raw/SVGFEDistantLightElement[JC] var innerText: String
raw/SVGFEDistantLightElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEDistantLightElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEDistantLightElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEDistantLightElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEDistantLightElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEDistantLightElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEDistantLightElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEDistantLightElement[JC] def lastChild: Node
raw/SVGFEDistantLightElement[JC] def lastElementChild: Element
raw/SVGFEDistantLightElement[JC] def localName: String
raw/SVGFEDistantLightElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEDistantLightElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEDistantLightElement[JC] def matches(selector: String): Boolean
raw/SVGFEDistantLightElement[JC] def namespaceURI: String
raw/SVGFEDistantLightElement[JC] def nextElementSibling: Element
raw/SVGFEDistantLightElement[JC] def nextSibling: Node
raw/SVGFEDistantLightElement[JC] def nodeName: String
raw/SVGFEDistantLightElement[JC] def nodeType: Int
raw/SVGFEDistantLightElement[JC] var nodeValue: String
raw/SVGFEDistantLightElement[JC] def normalize(): Unit
raw/SVGFEDistantLightElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEDistantLightElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEDistantLightElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEDistantLightElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEDistantLightElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEDistantLightElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEDistantLightElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEDistantLightElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEDistantLightElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEDistantLightElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEDistantLightElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEDistantLightElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEDistantLightElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEDistantLightElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEDistantLightElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEDistantLightElement[JC] var outerHTML: String
raw/SVGFEDistantLightElement[JC] def ownerDocument: Document
raw/SVGFEDistantLightElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEDistantLightElement[JC] def parentNode: Node
raw/SVGFEDistantLightElement[JC] def prefix: String
raw/SVGFEDistantLightElement[JC] def previousElementSibling: Element
raw/SVGFEDistantLightElement[JC] def previousSibling: Node
raw/SVGFEDistantLightElement[JC] def querySelector(selectors: String): Element
raw/SVGFEDistantLightElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEDistantLightElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEDistantLightElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEDistantLightElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEDistantLightElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEDistantLightElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEDistantLightElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEDistantLightElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEDistantLightElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEDistantLightElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEDistantLightElement[JC] def scrollHeight: Int
raw/SVGFEDistantLightElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEDistantLightElement[JC] var scrollLeft: Double
raw/SVGFEDistantLightElement[JC] var scrollTop: Double
raw/SVGFEDistantLightElement[JC] def scrollWidth: Int
raw/SVGFEDistantLightElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEDistantLightElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEDistantLightElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEDistantLightElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEDistantLightElement[JC] def tagName: String
raw/SVGFEDistantLightElement[JC] var textContent: String
raw/SVGFEDistantLightElement[JC] def viewportElement: SVGElement
raw/SVGFEDistantLightElement[JC] var xmlbase: String
raw/SVGFEFloodElement[JC] var accessKey: String
raw/SVGFEFloodElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEFloodElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEFloodElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEFloodElement[JC] def attributes: NamedNodeMap
raw/SVGFEFloodElement[JC] def childElementCount: Int
raw/SVGFEFloodElement[JC] def childNodes: NodeList
raw/SVGFEFloodElement[JC] def children: HTMLCollection
raw/SVGFEFloodElement[JC] var classList: DOMTokenList
raw/SVGFEFloodElement[JC] var className: SVGAnimatedString
raw/SVGFEFloodElement[JC] def clientHeight: Int
raw/SVGFEFloodElement[JC] def clientLeft: Int
raw/SVGFEFloodElement[JC] def clientTop: Int
raw/SVGFEFloodElement[JC] def clientWidth: Int
raw/SVGFEFloodElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEFloodElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEFloodElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEFloodElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEFloodElement[JC] def firstChild: Node
raw/SVGFEFloodElement[JC] def firstElementChild: Element
raw/SVGFEFloodElement[JC] def getAttribute(name: String): String
raw/SVGFEFloodElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEFloodElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEFloodElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEFloodElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEFloodElement[JC] def getClientRects(): ClientRectList
raw/SVGFEFloodElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEFloodElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEFloodElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEFloodElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEFloodElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEFloodElement[JC] def hasAttributes(): Boolean
raw/SVGFEFloodElement[JC] def hasChildNodes(): Boolean
raw/SVGFEFloodElement[JC] def height: SVGAnimatedLength
raw/SVGFEFloodElement[JC] var id: String
raw/SVGFEFloodElement[JC] var innerHTML: String
raw/SVGFEFloodElement[JC] var innerText: String
raw/SVGFEFloodElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEFloodElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEFloodElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEFloodElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEFloodElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEFloodElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEFloodElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEFloodElement[JC] def lastChild: Node
raw/SVGFEFloodElement[JC] def lastElementChild: Element
raw/SVGFEFloodElement[JC] def localName: String
raw/SVGFEFloodElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEFloodElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEFloodElement[JC] def matches(selector: String): Boolean
raw/SVGFEFloodElement[JC] def namespaceURI: String
raw/SVGFEFloodElement[JC] def nextElementSibling: Element
raw/SVGFEFloodElement[JC] def nextSibling: Node
raw/SVGFEFloodElement[JC] def nodeName: String
raw/SVGFEFloodElement[JC] def nodeType: Int
raw/SVGFEFloodElement[JC] var nodeValue: String
raw/SVGFEFloodElement[JC] def normalize(): Unit
raw/SVGFEFloodElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEFloodElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEFloodElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEFloodElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEFloodElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEFloodElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEFloodElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEFloodElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEFloodElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEFloodElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEFloodElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEFloodElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEFloodElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEFloodElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEFloodElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEFloodElement[JC] var outerHTML: String
raw/SVGFEFloodElement[JC] def ownerDocument: Document
raw/SVGFEFloodElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEFloodElement[JC] def parentNode: Node
raw/SVGFEFloodElement[JC] def prefix: String
raw/SVGFEFloodElement[JC] def previousElementSibling: Element
raw/SVGFEFloodElement[JC] def previousSibling: Node
raw/SVGFEFloodElement[JC] def querySelector(selectors: String): Element
raw/SVGFEFloodElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEFloodElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEFloodElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEFloodElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEFloodElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEFloodElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEFloodElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEFloodElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEFloodElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEFloodElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEFloodElement[JC] def result: SVGAnimatedString
raw/SVGFEFloodElement[JC] def scrollHeight: Int
raw/SVGFEFloodElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEFloodElement[JC] var scrollLeft: Double
raw/SVGFEFloodElement[JC] var scrollTop: Double
raw/SVGFEFloodElement[JC] def scrollWidth: Int
raw/SVGFEFloodElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEFloodElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEFloodElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEFloodElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEFloodElement[JC] var style: CSSStyleDeclaration
raw/SVGFEFloodElement[JC] def tagName: String
raw/SVGFEFloodElement[JC] var textContent: String
raw/SVGFEFloodElement[JC] def viewportElement: SVGElement
raw/SVGFEFloodElement[JC] def width: SVGAnimatedLength
raw/SVGFEFloodElement[JC] def x: SVGAnimatedLength
raw/SVGFEFloodElement[JC] var xmlbase: String
raw/SVGFEFloodElement[JC] def y: SVGAnimatedLength
raw/SVGFEFuncAElement[JC] var accessKey: String
raw/SVGFEFuncAElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEFuncAElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEFuncAElement[JC] def amplitude: SVGAnimatedNumber
raw/SVGFEFuncAElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEFuncAElement[JC] def attributes: NamedNodeMap
raw/SVGFEFuncAElement[JC] def childElementCount: Int
raw/SVGFEFuncAElement[JC] def childNodes: NodeList
raw/SVGFEFuncAElement[JC] def children: HTMLCollection
raw/SVGFEFuncAElement[JC] var classList: DOMTokenList
raw/SVGFEFuncAElement[JC] def clientHeight: Int
raw/SVGFEFuncAElement[JC] def clientLeft: Int
raw/SVGFEFuncAElement[JC] def clientTop: Int
raw/SVGFEFuncAElement[JC] def clientWidth: Int
raw/SVGFEFuncAElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEFuncAElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEFuncAElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEFuncAElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEFuncAElement[JC] def exponent: SVGAnimatedNumber
raw/SVGFEFuncAElement[JC] def firstChild: Node
raw/SVGFEFuncAElement[JC] def firstElementChild: Element
raw/SVGFEFuncAElement[JC] def getAttribute(name: String): String
raw/SVGFEFuncAElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEFuncAElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEFuncAElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEFuncAElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEFuncAElement[JC] def getClientRects(): ClientRectList
raw/SVGFEFuncAElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEFuncAElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEFuncAElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEFuncAElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEFuncAElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEFuncAElement[JC] def hasAttributes(): Boolean
raw/SVGFEFuncAElement[JC] def hasChildNodes(): Boolean
raw/SVGFEFuncAElement[JC] var id: String
raw/SVGFEFuncAElement[JC] var innerHTML: String
raw/SVGFEFuncAElement[JC] var innerText: String
raw/SVGFEFuncAElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEFuncAElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEFuncAElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEFuncAElement[JC] def intercept: SVGAnimatedNumber
raw/SVGFEFuncAElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEFuncAElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEFuncAElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEFuncAElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEFuncAElement[JC] def lastChild: Node
raw/SVGFEFuncAElement[JC] def lastElementChild: Element
raw/SVGFEFuncAElement[JC] def localName: String
raw/SVGFEFuncAElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEFuncAElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEFuncAElement[JC] def matches(selector: String): Boolean
raw/SVGFEFuncAElement[JC] def namespaceURI: String
raw/SVGFEFuncAElement[JC] def nextElementSibling: Element
raw/SVGFEFuncAElement[JC] def nextSibling: Node
raw/SVGFEFuncAElement[JC] def nodeName: String
raw/SVGFEFuncAElement[JC] def nodeType: Int
raw/SVGFEFuncAElement[JC] var nodeValue: String
raw/SVGFEFuncAElement[JC] def normalize(): Unit
raw/SVGFEFuncAElement[JC] def offset: SVGAnimatedNumber
raw/SVGFEFuncAElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEFuncAElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEFuncAElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEFuncAElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEFuncAElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEFuncAElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEFuncAElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEFuncAElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEFuncAElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEFuncAElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEFuncAElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEFuncAElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEFuncAElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEFuncAElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEFuncAElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEFuncAElement[JC] var outerHTML: String
raw/SVGFEFuncAElement[JC] def ownerDocument: Document
raw/SVGFEFuncAElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEFuncAElement[JC] def parentNode: Node
raw/SVGFEFuncAElement[JC] def prefix: String
raw/SVGFEFuncAElement[JC] def previousElementSibling: Element
raw/SVGFEFuncAElement[JC] def previousSibling: Node
raw/SVGFEFuncAElement[JC] def querySelector(selectors: String): Element
raw/SVGFEFuncAElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEFuncAElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEFuncAElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEFuncAElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEFuncAElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEFuncAElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEFuncAElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEFuncAElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEFuncAElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEFuncAElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEFuncAElement[JC] def scrollHeight: Int
raw/SVGFEFuncAElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEFuncAElement[JC] var scrollLeft: Double
raw/SVGFEFuncAElement[JC] var scrollTop: Double
raw/SVGFEFuncAElement[JC] def scrollWidth: Int
raw/SVGFEFuncAElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEFuncAElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEFuncAElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEFuncAElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEFuncAElement[JC] def slope: SVGAnimatedNumber
raw/SVGFEFuncAElement[JC] def tableValues: SVGAnimatedNumberList
raw/SVGFEFuncAElement[JC] def tagName: String
raw/SVGFEFuncAElement[JC] var textContent: String
raw/SVGFEFuncAElement[JC] def `type`: SVGAnimatedEnumeration
raw/SVGFEFuncAElement[JC] def viewportElement: SVGElement
raw/SVGFEFuncAElement[JC] var xmlbase: String
raw/SVGFEFuncBElement[JC] var accessKey: String
raw/SVGFEFuncBElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEFuncBElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEFuncBElement[JC] def amplitude: SVGAnimatedNumber
raw/SVGFEFuncBElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEFuncBElement[JC] def attributes: NamedNodeMap
raw/SVGFEFuncBElement[JC] def childElementCount: Int
raw/SVGFEFuncBElement[JC] def childNodes: NodeList
raw/SVGFEFuncBElement[JC] def children: HTMLCollection
raw/SVGFEFuncBElement[JC] var classList: DOMTokenList
raw/SVGFEFuncBElement[JC] def clientHeight: Int
raw/SVGFEFuncBElement[JC] def clientLeft: Int
raw/SVGFEFuncBElement[JC] def clientTop: Int
raw/SVGFEFuncBElement[JC] def clientWidth: Int
raw/SVGFEFuncBElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEFuncBElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEFuncBElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEFuncBElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEFuncBElement[JC] def exponent: SVGAnimatedNumber
raw/SVGFEFuncBElement[JC] def firstChild: Node
raw/SVGFEFuncBElement[JC] def firstElementChild: Element
raw/SVGFEFuncBElement[JC] def getAttribute(name: String): String
raw/SVGFEFuncBElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEFuncBElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEFuncBElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEFuncBElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEFuncBElement[JC] def getClientRects(): ClientRectList
raw/SVGFEFuncBElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEFuncBElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEFuncBElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEFuncBElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEFuncBElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEFuncBElement[JC] def hasAttributes(): Boolean
raw/SVGFEFuncBElement[JC] def hasChildNodes(): Boolean
raw/SVGFEFuncBElement[JC] var id: String
raw/SVGFEFuncBElement[JC] var innerHTML: String
raw/SVGFEFuncBElement[JC] var innerText: String
raw/SVGFEFuncBElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEFuncBElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEFuncBElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEFuncBElement[JC] def intercept: SVGAnimatedNumber
raw/SVGFEFuncBElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEFuncBElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEFuncBElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEFuncBElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEFuncBElement[JC] def lastChild: Node
raw/SVGFEFuncBElement[JC] def lastElementChild: Element
raw/SVGFEFuncBElement[JC] def localName: String
raw/SVGFEFuncBElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEFuncBElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEFuncBElement[JC] def matches(selector: String): Boolean
raw/SVGFEFuncBElement[JC] def namespaceURI: String
raw/SVGFEFuncBElement[JC] def nextElementSibling: Element
raw/SVGFEFuncBElement[JC] def nextSibling: Node
raw/SVGFEFuncBElement[JC] def nodeName: String
raw/SVGFEFuncBElement[JC] def nodeType: Int
raw/SVGFEFuncBElement[JC] var nodeValue: String
raw/SVGFEFuncBElement[JC] def normalize(): Unit
raw/SVGFEFuncBElement[JC] def offset: SVGAnimatedNumber
raw/SVGFEFuncBElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEFuncBElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEFuncBElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEFuncBElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEFuncBElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEFuncBElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEFuncBElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEFuncBElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEFuncBElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEFuncBElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEFuncBElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEFuncBElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEFuncBElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEFuncBElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEFuncBElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEFuncBElement[JC] var outerHTML: String
raw/SVGFEFuncBElement[JC] def ownerDocument: Document
raw/SVGFEFuncBElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEFuncBElement[JC] def parentNode: Node
raw/SVGFEFuncBElement[JC] def prefix: String
raw/SVGFEFuncBElement[JC] def previousElementSibling: Element
raw/SVGFEFuncBElement[JC] def previousSibling: Node
raw/SVGFEFuncBElement[JC] def querySelector(selectors: String): Element
raw/SVGFEFuncBElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEFuncBElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEFuncBElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEFuncBElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEFuncBElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEFuncBElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEFuncBElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEFuncBElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEFuncBElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEFuncBElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEFuncBElement[JC] def scrollHeight: Int
raw/SVGFEFuncBElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEFuncBElement[JC] var scrollLeft: Double
raw/SVGFEFuncBElement[JC] var scrollTop: Double
raw/SVGFEFuncBElement[JC] def scrollWidth: Int
raw/SVGFEFuncBElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEFuncBElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEFuncBElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEFuncBElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEFuncBElement[JC] def slope: SVGAnimatedNumber
raw/SVGFEFuncBElement[JC] def tableValues: SVGAnimatedNumberList
raw/SVGFEFuncBElement[JC] def tagName: String
raw/SVGFEFuncBElement[JC] var textContent: String
raw/SVGFEFuncBElement[JC] def `type`: SVGAnimatedEnumeration
raw/SVGFEFuncBElement[JC] def viewportElement: SVGElement
raw/SVGFEFuncBElement[JC] var xmlbase: String
raw/SVGFEFuncGElement[JC] var accessKey: String
raw/SVGFEFuncGElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEFuncGElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEFuncGElement[JC] def amplitude: SVGAnimatedNumber
raw/SVGFEFuncGElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEFuncGElement[JC] def attributes: NamedNodeMap
raw/SVGFEFuncGElement[JC] def childElementCount: Int
raw/SVGFEFuncGElement[JC] def childNodes: NodeList
raw/SVGFEFuncGElement[JC] def children: HTMLCollection
raw/SVGFEFuncGElement[JC] var classList: DOMTokenList
raw/SVGFEFuncGElement[JC] def clientHeight: Int
raw/SVGFEFuncGElement[JC] def clientLeft: Int
raw/SVGFEFuncGElement[JC] def clientTop: Int
raw/SVGFEFuncGElement[JC] def clientWidth: Int
raw/SVGFEFuncGElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEFuncGElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEFuncGElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEFuncGElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEFuncGElement[JC] def exponent: SVGAnimatedNumber
raw/SVGFEFuncGElement[JC] def firstChild: Node
raw/SVGFEFuncGElement[JC] def firstElementChild: Element
raw/SVGFEFuncGElement[JC] def getAttribute(name: String): String
raw/SVGFEFuncGElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEFuncGElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEFuncGElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEFuncGElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEFuncGElement[JC] def getClientRects(): ClientRectList
raw/SVGFEFuncGElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEFuncGElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEFuncGElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEFuncGElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEFuncGElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEFuncGElement[JC] def hasAttributes(): Boolean
raw/SVGFEFuncGElement[JC] def hasChildNodes(): Boolean
raw/SVGFEFuncGElement[JC] var id: String
raw/SVGFEFuncGElement[JC] var innerHTML: String
raw/SVGFEFuncGElement[JC] var innerText: String
raw/SVGFEFuncGElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEFuncGElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEFuncGElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEFuncGElement[JC] def intercept: SVGAnimatedNumber
raw/SVGFEFuncGElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEFuncGElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEFuncGElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEFuncGElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEFuncGElement[JC] def lastChild: Node
raw/SVGFEFuncGElement[JC] def lastElementChild: Element
raw/SVGFEFuncGElement[JC] def localName: String
raw/SVGFEFuncGElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEFuncGElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEFuncGElement[JC] def matches(selector: String): Boolean
raw/SVGFEFuncGElement[JC] def namespaceURI: String
raw/SVGFEFuncGElement[JC] def nextElementSibling: Element
raw/SVGFEFuncGElement[JC] def nextSibling: Node
raw/SVGFEFuncGElement[JC] def nodeName: String
raw/SVGFEFuncGElement[JC] def nodeType: Int
raw/SVGFEFuncGElement[JC] var nodeValue: String
raw/SVGFEFuncGElement[JC] def normalize(): Unit
raw/SVGFEFuncGElement[JC] def offset: SVGAnimatedNumber
raw/SVGFEFuncGElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEFuncGElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEFuncGElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEFuncGElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEFuncGElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEFuncGElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEFuncGElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEFuncGElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEFuncGElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEFuncGElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEFuncGElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEFuncGElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEFuncGElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEFuncGElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEFuncGElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEFuncGElement[JC] var outerHTML: String
raw/SVGFEFuncGElement[JC] def ownerDocument: Document
raw/SVGFEFuncGElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEFuncGElement[JC] def parentNode: Node
raw/SVGFEFuncGElement[JC] def prefix: String
raw/SVGFEFuncGElement[JC] def previousElementSibling: Element
raw/SVGFEFuncGElement[JC] def previousSibling: Node
raw/SVGFEFuncGElement[JC] def querySelector(selectors: String): Element
raw/SVGFEFuncGElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEFuncGElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEFuncGElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEFuncGElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEFuncGElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEFuncGElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEFuncGElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEFuncGElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEFuncGElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEFuncGElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEFuncGElement[JC] def scrollHeight: Int
raw/SVGFEFuncGElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEFuncGElement[JC] var scrollLeft: Double
raw/SVGFEFuncGElement[JC] var scrollTop: Double
raw/SVGFEFuncGElement[JC] def scrollWidth: Int
raw/SVGFEFuncGElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEFuncGElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEFuncGElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEFuncGElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEFuncGElement[JC] def slope: SVGAnimatedNumber
raw/SVGFEFuncGElement[JC] def tableValues: SVGAnimatedNumberList
raw/SVGFEFuncGElement[JC] def tagName: String
raw/SVGFEFuncGElement[JC] var textContent: String
raw/SVGFEFuncGElement[JC] def `type`: SVGAnimatedEnumeration
raw/SVGFEFuncGElement[JC] def viewportElement: SVGElement
raw/SVGFEFuncGElement[JC] var xmlbase: String
raw/SVGFEFuncRElement[JC] var accessKey: String
raw/SVGFEFuncRElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEFuncRElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEFuncRElement[JC] def amplitude: SVGAnimatedNumber
raw/SVGFEFuncRElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEFuncRElement[JC] def attributes: NamedNodeMap
raw/SVGFEFuncRElement[JC] def childElementCount: Int
raw/SVGFEFuncRElement[JC] def childNodes: NodeList
raw/SVGFEFuncRElement[JC] def children: HTMLCollection
raw/SVGFEFuncRElement[JC] var classList: DOMTokenList
raw/SVGFEFuncRElement[JC] def clientHeight: Int
raw/SVGFEFuncRElement[JC] def clientLeft: Int
raw/SVGFEFuncRElement[JC] def clientTop: Int
raw/SVGFEFuncRElement[JC] def clientWidth: Int
raw/SVGFEFuncRElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEFuncRElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEFuncRElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEFuncRElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEFuncRElement[JC] def exponent: SVGAnimatedNumber
raw/SVGFEFuncRElement[JC] def firstChild: Node
raw/SVGFEFuncRElement[JC] def firstElementChild: Element
raw/SVGFEFuncRElement[JC] def getAttribute(name: String): String
raw/SVGFEFuncRElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEFuncRElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEFuncRElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEFuncRElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEFuncRElement[JC] def getClientRects(): ClientRectList
raw/SVGFEFuncRElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEFuncRElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEFuncRElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEFuncRElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEFuncRElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEFuncRElement[JC] def hasAttributes(): Boolean
raw/SVGFEFuncRElement[JC] def hasChildNodes(): Boolean
raw/SVGFEFuncRElement[JC] var id: String
raw/SVGFEFuncRElement[JC] var innerHTML: String
raw/SVGFEFuncRElement[JC] var innerText: String
raw/SVGFEFuncRElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEFuncRElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEFuncRElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEFuncRElement[JC] def intercept: SVGAnimatedNumber
raw/SVGFEFuncRElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEFuncRElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEFuncRElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEFuncRElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEFuncRElement[JC] def lastChild: Node
raw/SVGFEFuncRElement[JC] def lastElementChild: Element
raw/SVGFEFuncRElement[JC] def localName: String
raw/SVGFEFuncRElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEFuncRElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEFuncRElement[JC] def matches(selector: String): Boolean
raw/SVGFEFuncRElement[JC] def namespaceURI: String
raw/SVGFEFuncRElement[JC] def nextElementSibling: Element
raw/SVGFEFuncRElement[JC] def nextSibling: Node
raw/SVGFEFuncRElement[JC] def nodeName: String
raw/SVGFEFuncRElement[JC] def nodeType: Int
raw/SVGFEFuncRElement[JC] var nodeValue: String
raw/SVGFEFuncRElement[JC] def normalize(): Unit
raw/SVGFEFuncRElement[JC] def offset: SVGAnimatedNumber
raw/SVGFEFuncRElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEFuncRElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEFuncRElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEFuncRElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEFuncRElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEFuncRElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEFuncRElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEFuncRElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEFuncRElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEFuncRElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEFuncRElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEFuncRElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEFuncRElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEFuncRElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEFuncRElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEFuncRElement[JC] var outerHTML: String
raw/SVGFEFuncRElement[JC] def ownerDocument: Document
raw/SVGFEFuncRElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEFuncRElement[JC] def parentNode: Node
raw/SVGFEFuncRElement[JC] def prefix: String
raw/SVGFEFuncRElement[JC] def previousElementSibling: Element
raw/SVGFEFuncRElement[JC] def previousSibling: Node
raw/SVGFEFuncRElement[JC] def querySelector(selectors: String): Element
raw/SVGFEFuncRElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEFuncRElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEFuncRElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEFuncRElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEFuncRElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEFuncRElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEFuncRElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEFuncRElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEFuncRElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEFuncRElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEFuncRElement[JC] def scrollHeight: Int
raw/SVGFEFuncRElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEFuncRElement[JC] var scrollLeft: Double
raw/SVGFEFuncRElement[JC] var scrollTop: Double
raw/SVGFEFuncRElement[JC] def scrollWidth: Int
raw/SVGFEFuncRElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEFuncRElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEFuncRElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEFuncRElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEFuncRElement[JC] def slope: SVGAnimatedNumber
raw/SVGFEFuncRElement[JC] def tableValues: SVGAnimatedNumberList
raw/SVGFEFuncRElement[JC] def tagName: String
raw/SVGFEFuncRElement[JC] var textContent: String
raw/SVGFEFuncRElement[JC] def `type`: SVGAnimatedEnumeration
raw/SVGFEFuncRElement[JC] def viewportElement: SVGElement
raw/SVGFEFuncRElement[JC] var xmlbase: String
raw/SVGFEGaussianBlurElement[JC] var accessKey: String
raw/SVGFEGaussianBlurElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEGaussianBlurElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEGaussianBlurElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEGaussianBlurElement[JC] def attributes: NamedNodeMap
raw/SVGFEGaussianBlurElement[JC] def childElementCount: Int
raw/SVGFEGaussianBlurElement[JC] def childNodes: NodeList
raw/SVGFEGaussianBlurElement[JC] def children: HTMLCollection
raw/SVGFEGaussianBlurElement[JC] var classList: DOMTokenList
raw/SVGFEGaussianBlurElement[JC] var className: SVGAnimatedString
raw/SVGFEGaussianBlurElement[JC] def clientHeight: Int
raw/SVGFEGaussianBlurElement[JC] def clientLeft: Int
raw/SVGFEGaussianBlurElement[JC] def clientTop: Int
raw/SVGFEGaussianBlurElement[JC] def clientWidth: Int
raw/SVGFEGaussianBlurElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEGaussianBlurElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEGaussianBlurElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEGaussianBlurElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEGaussianBlurElement[JC] def firstChild: Node
raw/SVGFEGaussianBlurElement[JC] def firstElementChild: Element
raw/SVGFEGaussianBlurElement[JC] def getAttribute(name: String): String
raw/SVGFEGaussianBlurElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEGaussianBlurElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEGaussianBlurElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEGaussianBlurElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEGaussianBlurElement[JC] def getClientRects(): ClientRectList
raw/SVGFEGaussianBlurElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEGaussianBlurElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEGaussianBlurElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEGaussianBlurElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEGaussianBlurElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEGaussianBlurElement[JC] def hasAttributes(): Boolean
raw/SVGFEGaussianBlurElement[JC] def hasChildNodes(): Boolean
raw/SVGFEGaussianBlurElement[JC] def height: SVGAnimatedLength
raw/SVGFEGaussianBlurElement[JC] var id: String
raw/SVGFEGaussianBlurElement[JC] def in1: SVGAnimatedString
raw/SVGFEGaussianBlurElement[JC] var innerHTML: String
raw/SVGFEGaussianBlurElement[JC] var innerText: String
raw/SVGFEGaussianBlurElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEGaussianBlurElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEGaussianBlurElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEGaussianBlurElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEGaussianBlurElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEGaussianBlurElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEGaussianBlurElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEGaussianBlurElement[JC] def lastChild: Node
raw/SVGFEGaussianBlurElement[JC] def lastElementChild: Element
raw/SVGFEGaussianBlurElement[JC] def localName: String
raw/SVGFEGaussianBlurElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEGaussianBlurElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEGaussianBlurElement[JC] def matches(selector: String): Boolean
raw/SVGFEGaussianBlurElement[JC] def namespaceURI: String
raw/SVGFEGaussianBlurElement[JC] def nextElementSibling: Element
raw/SVGFEGaussianBlurElement[JC] def nextSibling: Node
raw/SVGFEGaussianBlurElement[JC] def nodeName: String
raw/SVGFEGaussianBlurElement[JC] def nodeType: Int
raw/SVGFEGaussianBlurElement[JC] var nodeValue: String
raw/SVGFEGaussianBlurElement[JC] def normalize(): Unit
raw/SVGFEGaussianBlurElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEGaussianBlurElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEGaussianBlurElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEGaussianBlurElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEGaussianBlurElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEGaussianBlurElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEGaussianBlurElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEGaussianBlurElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEGaussianBlurElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEGaussianBlurElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEGaussianBlurElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEGaussianBlurElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEGaussianBlurElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEGaussianBlurElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEGaussianBlurElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEGaussianBlurElement[JC] var outerHTML: String
raw/SVGFEGaussianBlurElement[JC] def ownerDocument: Document
raw/SVGFEGaussianBlurElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEGaussianBlurElement[JC] def parentNode: Node
raw/SVGFEGaussianBlurElement[JC] def prefix: String
raw/SVGFEGaussianBlurElement[JC] def previousElementSibling: Element
raw/SVGFEGaussianBlurElement[JC] def previousSibling: Node
raw/SVGFEGaussianBlurElement[JC] def querySelector(selectors: String): Element
raw/SVGFEGaussianBlurElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEGaussianBlurElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEGaussianBlurElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEGaussianBlurElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEGaussianBlurElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEGaussianBlurElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEGaussianBlurElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEGaussianBlurElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEGaussianBlurElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEGaussianBlurElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEGaussianBlurElement[JC] def result: SVGAnimatedString
raw/SVGFEGaussianBlurElement[JC] def scrollHeight: Int
raw/SVGFEGaussianBlurElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEGaussianBlurElement[JC] var scrollLeft: Double
raw/SVGFEGaussianBlurElement[JC] var scrollTop: Double
raw/SVGFEGaussianBlurElement[JC] def scrollWidth: Int
raw/SVGFEGaussianBlurElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEGaussianBlurElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEGaussianBlurElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEGaussianBlurElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEGaussianBlurElement[JC] def setStdDeviation(stdDeviationX: Double, stdDeviationY: Double): Unit
raw/SVGFEGaussianBlurElement[JC] def stdDeviationX: SVGAnimatedNumber
raw/SVGFEGaussianBlurElement[JC] def stdDeviationY: SVGAnimatedNumber
raw/SVGFEGaussianBlurElement[JC] var style: CSSStyleDeclaration
raw/SVGFEGaussianBlurElement[JC] def tagName: String
raw/SVGFEGaussianBlurElement[JC] var textContent: String
raw/SVGFEGaussianBlurElement[JC] def viewportElement: SVGElement
raw/SVGFEGaussianBlurElement[JC] def width: SVGAnimatedLength
raw/SVGFEGaussianBlurElement[JC] def x: SVGAnimatedLength
raw/SVGFEGaussianBlurElement[JC] var xmlbase: String
raw/SVGFEGaussianBlurElement[JC] def y: SVGAnimatedLength
raw/SVGFEImageElement[JC] var accessKey: String
raw/SVGFEImageElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEImageElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEImageElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEImageElement[JC] def attributes: NamedNodeMap
raw/SVGFEImageElement[JC] def childElementCount: Int
raw/SVGFEImageElement[JC] def childNodes: NodeList
raw/SVGFEImageElement[JC] def children: HTMLCollection
raw/SVGFEImageElement[JC] var classList: DOMTokenList
raw/SVGFEImageElement[JC] var className: SVGAnimatedString
raw/SVGFEImageElement[JC] def clientHeight: Int
raw/SVGFEImageElement[JC] def clientLeft: Int
raw/SVGFEImageElement[JC] def clientTop: Int
raw/SVGFEImageElement[JC] def clientWidth: Int
raw/SVGFEImageElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEImageElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEImageElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEImageElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEImageElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGFEImageElement[JC] def firstChild: Node
raw/SVGFEImageElement[JC] def firstElementChild: Element
raw/SVGFEImageElement[JC] def getAttribute(name: String): String
raw/SVGFEImageElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEImageElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEImageElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEImageElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEImageElement[JC] def getClientRects(): ClientRectList
raw/SVGFEImageElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEImageElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEImageElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEImageElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEImageElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEImageElement[JC] def hasAttributes(): Boolean
raw/SVGFEImageElement[JC] def hasChildNodes(): Boolean
raw/SVGFEImageElement[JC] def height: SVGAnimatedLength
raw/SVGFEImageElement[JC] var href: SVGAnimatedString
raw/SVGFEImageElement[JC] var id: String
raw/SVGFEImageElement[JC] var innerHTML: String
raw/SVGFEImageElement[JC] var innerText: String
raw/SVGFEImageElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEImageElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEImageElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEImageElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEImageElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEImageElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEImageElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEImageElement[JC] def lastChild: Node
raw/SVGFEImageElement[JC] def lastElementChild: Element
raw/SVGFEImageElement[JC] def localName: String
raw/SVGFEImageElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEImageElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEImageElement[JC] def matches(selector: String): Boolean
raw/SVGFEImageElement[JC] def namespaceURI: String
raw/SVGFEImageElement[JC] def nextElementSibling: Element
raw/SVGFEImageElement[JC] def nextSibling: Node
raw/SVGFEImageElement[JC] def nodeName: String
raw/SVGFEImageElement[JC] def nodeType: Int
raw/SVGFEImageElement[JC] var nodeValue: String
raw/SVGFEImageElement[JC] def normalize(): Unit
raw/SVGFEImageElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEImageElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEImageElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEImageElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEImageElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEImageElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEImageElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEImageElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEImageElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEImageElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEImageElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEImageElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEImageElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEImageElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEImageElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEImageElement[JC] var outerHTML: String
raw/SVGFEImageElement[JC] def ownerDocument: Document
raw/SVGFEImageElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEImageElement[JC] def parentNode: Node
raw/SVGFEImageElement[JC] def prefix: String
raw/SVGFEImageElement[JC] def preserveAspectRatio: SVGAnimatedPreserveAspectRatio
raw/SVGFEImageElement[JC] def previousElementSibling: Element
raw/SVGFEImageElement[JC] def previousSibling: Node
raw/SVGFEImageElement[JC] def querySelector(selectors: String): Element
raw/SVGFEImageElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEImageElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEImageElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEImageElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEImageElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEImageElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEImageElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEImageElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEImageElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEImageElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEImageElement[JC] def result: SVGAnimatedString
raw/SVGFEImageElement[JC] def scrollHeight: Int
raw/SVGFEImageElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEImageElement[JC] var scrollLeft: Double
raw/SVGFEImageElement[JC] var scrollTop: Double
raw/SVGFEImageElement[JC] def scrollWidth: Int
raw/SVGFEImageElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEImageElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEImageElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEImageElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEImageElement[JC] var style: CSSStyleDeclaration
raw/SVGFEImageElement[JC] def tagName: String
raw/SVGFEImageElement[JC] var textContent: String
raw/SVGFEImageElement[JC] def viewportElement: SVGElement
raw/SVGFEImageElement[JC] def width: SVGAnimatedLength
raw/SVGFEImageElement[JC] def x: SVGAnimatedLength
raw/SVGFEImageElement[JC] var xmlbase: String
raw/SVGFEImageElement[JC] var xmllang: String
raw/SVGFEImageElement[JC] var xmlspace: String
raw/SVGFEImageElement[JC] def y: SVGAnimatedLength
raw/SVGFEMergeElement[JC] var accessKey: String
raw/SVGFEMergeElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEMergeElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEMergeElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEMergeElement[JC] def attributes: NamedNodeMap
raw/SVGFEMergeElement[JC] def childElementCount: Int
raw/SVGFEMergeElement[JC] def childNodes: NodeList
raw/SVGFEMergeElement[JC] def children: HTMLCollection
raw/SVGFEMergeElement[JC] var classList: DOMTokenList
raw/SVGFEMergeElement[JC] var className: SVGAnimatedString
raw/SVGFEMergeElement[JC] def clientHeight: Int
raw/SVGFEMergeElement[JC] def clientLeft: Int
raw/SVGFEMergeElement[JC] def clientTop: Int
raw/SVGFEMergeElement[JC] def clientWidth: Int
raw/SVGFEMergeElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEMergeElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEMergeElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEMergeElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEMergeElement[JC] def firstChild: Node
raw/SVGFEMergeElement[JC] def firstElementChild: Element
raw/SVGFEMergeElement[JC] def getAttribute(name: String): String
raw/SVGFEMergeElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEMergeElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEMergeElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEMergeElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEMergeElement[JC] def getClientRects(): ClientRectList
raw/SVGFEMergeElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEMergeElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEMergeElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEMergeElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEMergeElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEMergeElement[JC] def hasAttributes(): Boolean
raw/SVGFEMergeElement[JC] def hasChildNodes(): Boolean
raw/SVGFEMergeElement[JC] def height: SVGAnimatedLength
raw/SVGFEMergeElement[JC] var id: String
raw/SVGFEMergeElement[JC] var innerHTML: String
raw/SVGFEMergeElement[JC] var innerText: String
raw/SVGFEMergeElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEMergeElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEMergeElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEMergeElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEMergeElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEMergeElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEMergeElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEMergeElement[JC] def lastChild: Node
raw/SVGFEMergeElement[JC] def lastElementChild: Element
raw/SVGFEMergeElement[JC] def localName: String
raw/SVGFEMergeElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEMergeElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEMergeElement[JC] def matches(selector: String): Boolean
raw/SVGFEMergeElement[JC] def namespaceURI: String
raw/SVGFEMergeElement[JC] def nextElementSibling: Element
raw/SVGFEMergeElement[JC] def nextSibling: Node
raw/SVGFEMergeElement[JC] def nodeName: String
raw/SVGFEMergeElement[JC] def nodeType: Int
raw/SVGFEMergeElement[JC] var nodeValue: String
raw/SVGFEMergeElement[JC] def normalize(): Unit
raw/SVGFEMergeElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEMergeElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEMergeElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEMergeElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEMergeElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEMergeElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEMergeElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEMergeElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEMergeElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEMergeElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEMergeElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEMergeElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEMergeElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEMergeElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEMergeElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEMergeElement[JC] var outerHTML: String
raw/SVGFEMergeElement[JC] def ownerDocument: Document
raw/SVGFEMergeElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEMergeElement[JC] def parentNode: Node
raw/SVGFEMergeElement[JC] def prefix: String
raw/SVGFEMergeElement[JC] def previousElementSibling: Element
raw/SVGFEMergeElement[JC] def previousSibling: Node
raw/SVGFEMergeElement[JC] def querySelector(selectors: String): Element
raw/SVGFEMergeElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEMergeElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEMergeElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEMergeElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEMergeElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEMergeElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEMergeElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEMergeElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEMergeElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEMergeElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEMergeElement[JC] def result: SVGAnimatedString
raw/SVGFEMergeElement[JC] def scrollHeight: Int
raw/SVGFEMergeElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEMergeElement[JC] var scrollLeft: Double
raw/SVGFEMergeElement[JC] var scrollTop: Double
raw/SVGFEMergeElement[JC] def scrollWidth: Int
raw/SVGFEMergeElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEMergeElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEMergeElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEMergeElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEMergeElement[JC] var style: CSSStyleDeclaration
raw/SVGFEMergeElement[JC] def tagName: String
raw/SVGFEMergeElement[JC] var textContent: String
raw/SVGFEMergeElement[JC] def viewportElement: SVGElement
raw/SVGFEMergeElement[JC] def width: SVGAnimatedLength
raw/SVGFEMergeElement[JC] def x: SVGAnimatedLength
raw/SVGFEMergeElement[JC] var xmlbase: String
raw/SVGFEMergeElement[JC] def y: SVGAnimatedLength
raw/SVGFEMergeNodeElement[JC] var accessKey: String
raw/SVGFEMergeNodeElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEMergeNodeElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEMergeNodeElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEMergeNodeElement[JC] def attributes: NamedNodeMap
raw/SVGFEMergeNodeElement[JC] def childElementCount: Int
raw/SVGFEMergeNodeElement[JC] def childNodes: NodeList
raw/SVGFEMergeNodeElement[JC] def children: HTMLCollection
raw/SVGFEMergeNodeElement[JC] var classList: DOMTokenList
raw/SVGFEMergeNodeElement[JC] def clientHeight: Int
raw/SVGFEMergeNodeElement[JC] def clientLeft: Int
raw/SVGFEMergeNodeElement[JC] def clientTop: Int
raw/SVGFEMergeNodeElement[JC] def clientWidth: Int
raw/SVGFEMergeNodeElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEMergeNodeElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEMergeNodeElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEMergeNodeElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEMergeNodeElement[JC] def firstChild: Node
raw/SVGFEMergeNodeElement[JC] def firstElementChild: Element
raw/SVGFEMergeNodeElement[JC] def getAttribute(name: String): String
raw/SVGFEMergeNodeElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEMergeNodeElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEMergeNodeElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEMergeNodeElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEMergeNodeElement[JC] def getClientRects(): ClientRectList
raw/SVGFEMergeNodeElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEMergeNodeElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEMergeNodeElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEMergeNodeElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEMergeNodeElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEMergeNodeElement[JC] def hasAttributes(): Boolean
raw/SVGFEMergeNodeElement[JC] def hasChildNodes(): Boolean
raw/SVGFEMergeNodeElement[JC] var id: String
raw/SVGFEMergeNodeElement[JC] def in1: SVGAnimatedString
raw/SVGFEMergeNodeElement[JC] var innerHTML: String
raw/SVGFEMergeNodeElement[JC] var innerText: String
raw/SVGFEMergeNodeElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEMergeNodeElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEMergeNodeElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEMergeNodeElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEMergeNodeElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEMergeNodeElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEMergeNodeElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEMergeNodeElement[JC] def lastChild: Node
raw/SVGFEMergeNodeElement[JC] def lastElementChild: Element
raw/SVGFEMergeNodeElement[JC] def localName: String
raw/SVGFEMergeNodeElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEMergeNodeElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEMergeNodeElement[JC] def matches(selector: String): Boolean
raw/SVGFEMergeNodeElement[JC] def namespaceURI: String
raw/SVGFEMergeNodeElement[JC] def nextElementSibling: Element
raw/SVGFEMergeNodeElement[JC] def nextSibling: Node
raw/SVGFEMergeNodeElement[JC] def nodeName: String
raw/SVGFEMergeNodeElement[JC] def nodeType: Int
raw/SVGFEMergeNodeElement[JC] var nodeValue: String
raw/SVGFEMergeNodeElement[JC] def normalize(): Unit
raw/SVGFEMergeNodeElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEMergeNodeElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEMergeNodeElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEMergeNodeElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEMergeNodeElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEMergeNodeElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEMergeNodeElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEMergeNodeElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEMergeNodeElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEMergeNodeElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEMergeNodeElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEMergeNodeElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEMergeNodeElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEMergeNodeElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEMergeNodeElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEMergeNodeElement[JC] var outerHTML: String
raw/SVGFEMergeNodeElement[JC] def ownerDocument: Document
raw/SVGFEMergeNodeElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEMergeNodeElement[JC] def parentNode: Node
raw/SVGFEMergeNodeElement[JC] def prefix: String
raw/SVGFEMergeNodeElement[JC] def previousElementSibling: Element
raw/SVGFEMergeNodeElement[JC] def previousSibling: Node
raw/SVGFEMergeNodeElement[JC] def querySelector(selectors: String): Element
raw/SVGFEMergeNodeElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEMergeNodeElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEMergeNodeElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEMergeNodeElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEMergeNodeElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEMergeNodeElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEMergeNodeElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEMergeNodeElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEMergeNodeElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEMergeNodeElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEMergeNodeElement[JC] def scrollHeight: Int
raw/SVGFEMergeNodeElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEMergeNodeElement[JC] var scrollLeft: Double
raw/SVGFEMergeNodeElement[JC] var scrollTop: Double
raw/SVGFEMergeNodeElement[JC] def scrollWidth: Int
raw/SVGFEMergeNodeElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEMergeNodeElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEMergeNodeElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEMergeNodeElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEMergeNodeElement[JC] def tagName: String
raw/SVGFEMergeNodeElement[JC] var textContent: String
raw/SVGFEMergeNodeElement[JC] def viewportElement: SVGElement
raw/SVGFEMergeNodeElement[JC] var xmlbase: String
raw/SVGFEMorphologyElement[JC] var accessKey: String
raw/SVGFEMorphologyElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEMorphologyElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEMorphologyElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEMorphologyElement[JC] def attributes: NamedNodeMap
raw/SVGFEMorphologyElement[JC] def childElementCount: Int
raw/SVGFEMorphologyElement[JC] def childNodes: NodeList
raw/SVGFEMorphologyElement[JC] def children: HTMLCollection
raw/SVGFEMorphologyElement[JC] var classList: DOMTokenList
raw/SVGFEMorphologyElement[JC] var className: SVGAnimatedString
raw/SVGFEMorphologyElement[JC] def clientHeight: Int
raw/SVGFEMorphologyElement[JC] def clientLeft: Int
raw/SVGFEMorphologyElement[JC] def clientTop: Int
raw/SVGFEMorphologyElement[JC] def clientWidth: Int
raw/SVGFEMorphologyElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEMorphologyElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEMorphologyElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEMorphologyElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEMorphologyElement[JC] def firstChild: Node
raw/SVGFEMorphologyElement[JC] def firstElementChild: Element
raw/SVGFEMorphologyElement[JC] def getAttribute(name: String): String
raw/SVGFEMorphologyElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEMorphologyElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEMorphologyElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEMorphologyElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEMorphologyElement[JC] def getClientRects(): ClientRectList
raw/SVGFEMorphologyElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEMorphologyElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEMorphologyElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEMorphologyElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEMorphologyElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEMorphologyElement[JC] def hasAttributes(): Boolean
raw/SVGFEMorphologyElement[JC] def hasChildNodes(): Boolean
raw/SVGFEMorphologyElement[JC] def height: SVGAnimatedLength
raw/SVGFEMorphologyElement[JC] var id: String
raw/SVGFEMorphologyElement[JC] def in1: SVGAnimatedString
raw/SVGFEMorphologyElement[JC] var innerHTML: String
raw/SVGFEMorphologyElement[JC] var innerText: String
raw/SVGFEMorphologyElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEMorphologyElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEMorphologyElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEMorphologyElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEMorphologyElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEMorphologyElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEMorphologyElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEMorphologyElement[JC] def lastChild: Node
raw/SVGFEMorphologyElement[JC] def lastElementChild: Element
raw/SVGFEMorphologyElement[JC] def localName: String
raw/SVGFEMorphologyElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEMorphologyElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEMorphologyElement[JC] def matches(selector: String): Boolean
raw/SVGFEMorphologyElement[JC] def namespaceURI: String
raw/SVGFEMorphologyElement[JC] def nextElementSibling: Element
raw/SVGFEMorphologyElement[JC] def nextSibling: Node
raw/SVGFEMorphologyElement[JC] def nodeName: String
raw/SVGFEMorphologyElement[JC] def nodeType: Int
raw/SVGFEMorphologyElement[JC] var nodeValue: String
raw/SVGFEMorphologyElement[JC] def normalize(): Unit
raw/SVGFEMorphologyElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEMorphologyElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEMorphologyElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEMorphologyElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEMorphologyElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEMorphologyElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEMorphologyElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEMorphologyElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEMorphologyElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEMorphologyElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEMorphologyElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEMorphologyElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEMorphologyElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEMorphologyElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEMorphologyElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEMorphologyElement[JC] def operator: SVGAnimatedEnumeration
raw/SVGFEMorphologyElement[JC] var outerHTML: String
raw/SVGFEMorphologyElement[JC] def ownerDocument: Document
raw/SVGFEMorphologyElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEMorphologyElement[JC] def parentNode: Node
raw/SVGFEMorphologyElement[JC] def prefix: String
raw/SVGFEMorphologyElement[JC] def previousElementSibling: Element
raw/SVGFEMorphologyElement[JC] def previousSibling: Node
raw/SVGFEMorphologyElement[JC] def querySelector(selectors: String): Element
raw/SVGFEMorphologyElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEMorphologyElement[JC] def radiusX: SVGAnimatedNumber
raw/SVGFEMorphologyElement[JC] def radiusY: SVGAnimatedNumber
raw/SVGFEMorphologyElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEMorphologyElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEMorphologyElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEMorphologyElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEMorphologyElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEMorphologyElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEMorphologyElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEMorphologyElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEMorphologyElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEMorphologyElement[JC] def result: SVGAnimatedString
raw/SVGFEMorphologyElement[JC] def scrollHeight: Int
raw/SVGFEMorphologyElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEMorphologyElement[JC] var scrollLeft: Double
raw/SVGFEMorphologyElement[JC] var scrollTop: Double
raw/SVGFEMorphologyElement[JC] def scrollWidth: Int
raw/SVGFEMorphologyElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEMorphologyElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEMorphologyElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEMorphologyElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEMorphologyElement[JC] var style: CSSStyleDeclaration
raw/SVGFEMorphologyElement[JC] def tagName: String
raw/SVGFEMorphologyElement[JC] var textContent: String
raw/SVGFEMorphologyElement[JC] def viewportElement: SVGElement
raw/SVGFEMorphologyElement[JC] def width: SVGAnimatedLength
raw/SVGFEMorphologyElement[JC] def x: SVGAnimatedLength
raw/SVGFEMorphologyElement[JC] var xmlbase: String
raw/SVGFEMorphologyElement[JC] def y: SVGAnimatedLength
raw/SVGFEMorphologyElement[JO] val SVG_MORPHOLOGY_OPERATOR_DILATE: Int
raw/SVGFEMorphologyElement[JO] val SVG_MORPHOLOGY_OPERATOR_ERODE: Int
raw/SVGFEMorphologyElement[JO] val SVG_MORPHOLOGY_OPERATOR_UNKNOWN: Int
raw/SVGFEOffsetElement[JC] var accessKey: String
raw/SVGFEOffsetElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEOffsetElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEOffsetElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEOffsetElement[JC] def attributes: NamedNodeMap
raw/SVGFEOffsetElement[JC] def childElementCount: Int
raw/SVGFEOffsetElement[JC] def childNodes: NodeList
raw/SVGFEOffsetElement[JC] def children: HTMLCollection
raw/SVGFEOffsetElement[JC] var classList: DOMTokenList
raw/SVGFEOffsetElement[JC] var className: SVGAnimatedString
raw/SVGFEOffsetElement[JC] def clientHeight: Int
raw/SVGFEOffsetElement[JC] def clientLeft: Int
raw/SVGFEOffsetElement[JC] def clientTop: Int
raw/SVGFEOffsetElement[JC] def clientWidth: Int
raw/SVGFEOffsetElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEOffsetElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEOffsetElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEOffsetElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEOffsetElement[JC] def dx: SVGAnimatedNumber
raw/SVGFEOffsetElement[JC] def dy: SVGAnimatedNumber
raw/SVGFEOffsetElement[JC] def firstChild: Node
raw/SVGFEOffsetElement[JC] def firstElementChild: Element
raw/SVGFEOffsetElement[JC] def getAttribute(name: String): String
raw/SVGFEOffsetElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEOffsetElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEOffsetElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEOffsetElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEOffsetElement[JC] def getClientRects(): ClientRectList
raw/SVGFEOffsetElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEOffsetElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEOffsetElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEOffsetElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEOffsetElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEOffsetElement[JC] def hasAttributes(): Boolean
raw/SVGFEOffsetElement[JC] def hasChildNodes(): Boolean
raw/SVGFEOffsetElement[JC] def height: SVGAnimatedLength
raw/SVGFEOffsetElement[JC] var id: String
raw/SVGFEOffsetElement[JC] def in1: SVGAnimatedString
raw/SVGFEOffsetElement[JC] var innerHTML: String
raw/SVGFEOffsetElement[JC] var innerText: String
raw/SVGFEOffsetElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEOffsetElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEOffsetElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEOffsetElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEOffsetElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEOffsetElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEOffsetElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEOffsetElement[JC] def lastChild: Node
raw/SVGFEOffsetElement[JC] def lastElementChild: Element
raw/SVGFEOffsetElement[JC] def localName: String
raw/SVGFEOffsetElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEOffsetElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEOffsetElement[JC] def matches(selector: String): Boolean
raw/SVGFEOffsetElement[JC] def namespaceURI: String
raw/SVGFEOffsetElement[JC] def nextElementSibling: Element
raw/SVGFEOffsetElement[JC] def nextSibling: Node
raw/SVGFEOffsetElement[JC] def nodeName: String
raw/SVGFEOffsetElement[JC] def nodeType: Int
raw/SVGFEOffsetElement[JC] var nodeValue: String
raw/SVGFEOffsetElement[JC] def normalize(): Unit
raw/SVGFEOffsetElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEOffsetElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEOffsetElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEOffsetElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEOffsetElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEOffsetElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEOffsetElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEOffsetElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEOffsetElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEOffsetElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEOffsetElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEOffsetElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEOffsetElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEOffsetElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEOffsetElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEOffsetElement[JC] var outerHTML: String
raw/SVGFEOffsetElement[JC] def ownerDocument: Document
raw/SVGFEOffsetElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEOffsetElement[JC] def parentNode: Node
raw/SVGFEOffsetElement[JC] def prefix: String
raw/SVGFEOffsetElement[JC] def previousElementSibling: Element
raw/SVGFEOffsetElement[JC] def previousSibling: Node
raw/SVGFEOffsetElement[JC] def querySelector(selectors: String): Element
raw/SVGFEOffsetElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEOffsetElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEOffsetElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEOffsetElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEOffsetElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEOffsetElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEOffsetElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEOffsetElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEOffsetElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEOffsetElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEOffsetElement[JC] def result: SVGAnimatedString
raw/SVGFEOffsetElement[JC] def scrollHeight: Int
raw/SVGFEOffsetElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEOffsetElement[JC] var scrollLeft: Double
raw/SVGFEOffsetElement[JC] var scrollTop: Double
raw/SVGFEOffsetElement[JC] def scrollWidth: Int
raw/SVGFEOffsetElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEOffsetElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEOffsetElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEOffsetElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEOffsetElement[JC] var style: CSSStyleDeclaration
raw/SVGFEOffsetElement[JC] def tagName: String
raw/SVGFEOffsetElement[JC] var textContent: String
raw/SVGFEOffsetElement[JC] def viewportElement: SVGElement
raw/SVGFEOffsetElement[JC] def width: SVGAnimatedLength
raw/SVGFEOffsetElement[JC] def x: SVGAnimatedLength
raw/SVGFEOffsetElement[JC] var xmlbase: String
raw/SVGFEOffsetElement[JC] def y: SVGAnimatedLength
raw/SVGFEPointLightElement[JC] var accessKey: String
raw/SVGFEPointLightElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEPointLightElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEPointLightElement[JC] def appendChild(newChild: Node): Node
raw/SVGFEPointLightElement[JC] def attributes: NamedNodeMap
raw/SVGFEPointLightElement[JC] def childElementCount: Int
raw/SVGFEPointLightElement[JC] def childNodes: NodeList
raw/SVGFEPointLightElement[JC] def children: HTMLCollection
raw/SVGFEPointLightElement[JC] var classList: DOMTokenList
raw/SVGFEPointLightElement[JC] def clientHeight: Int
raw/SVGFEPointLightElement[JC] def clientLeft: Int
raw/SVGFEPointLightElement[JC] def clientTop: Int
raw/SVGFEPointLightElement[JC] def clientWidth: Int
raw/SVGFEPointLightElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFEPointLightElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFEPointLightElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFEPointLightElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFEPointLightElement[JC] def firstChild: Node
raw/SVGFEPointLightElement[JC] def firstElementChild: Element
raw/SVGFEPointLightElement[JC] def getAttribute(name: String): String
raw/SVGFEPointLightElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFEPointLightElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFEPointLightElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFEPointLightElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFEPointLightElement[JC] def getClientRects(): ClientRectList
raw/SVGFEPointLightElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFEPointLightElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFEPointLightElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFEPointLightElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFEPointLightElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFEPointLightElement[JC] def hasAttributes(): Boolean
raw/SVGFEPointLightElement[JC] def hasChildNodes(): Boolean
raw/SVGFEPointLightElement[JC] var id: String
raw/SVGFEPointLightElement[JC] var innerHTML: String
raw/SVGFEPointLightElement[JC] var innerText: String
raw/SVGFEPointLightElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFEPointLightElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFEPointLightElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFEPointLightElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFEPointLightElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFEPointLightElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFEPointLightElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFEPointLightElement[JC] def lastChild: Node
raw/SVGFEPointLightElement[JC] def lastElementChild: Element
raw/SVGFEPointLightElement[JC] def localName: String
raw/SVGFEPointLightElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFEPointLightElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFEPointLightElement[JC] def matches(selector: String): Boolean
raw/SVGFEPointLightElement[JC] def namespaceURI: String
raw/SVGFEPointLightElement[JC] def nextElementSibling: Element
raw/SVGFEPointLightElement[JC] def nextSibling: Node
raw/SVGFEPointLightElement[JC] def nodeName: String
raw/SVGFEPointLightElement[JC] def nodeType: Int
raw/SVGFEPointLightElement[JC] var nodeValue: String
raw/SVGFEPointLightElement[JC] def normalize(): Unit
raw/SVGFEPointLightElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFEPointLightElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFEPointLightElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFEPointLightElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFEPointLightElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFEPointLightElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFEPointLightElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFEPointLightElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFEPointLightElement[JC] var onload: js.Function1[Event, _]
raw/SVGFEPointLightElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFEPointLightElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFEPointLightElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFEPointLightElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFEPointLightElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFEPointLightElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFEPointLightElement[JC] var outerHTML: String
raw/SVGFEPointLightElement[JC] def ownerDocument: Document
raw/SVGFEPointLightElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFEPointLightElement[JC] def parentNode: Node
raw/SVGFEPointLightElement[JC] def prefix: String
raw/SVGFEPointLightElement[JC] def previousElementSibling: Element
raw/SVGFEPointLightElement[JC] def previousSibling: Node
raw/SVGFEPointLightElement[JC] def querySelector(selectors: String): Element
raw/SVGFEPointLightElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFEPointLightElement[JC] def removeAttribute(name: String): Unit
raw/SVGFEPointLightElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFEPointLightElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFEPointLightElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFEPointLightElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFEPointLightElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFEPointLightElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFEPointLightElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFEPointLightElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFEPointLightElement[JC] def scrollHeight: Int
raw/SVGFEPointLightElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFEPointLightElement[JC] var scrollLeft: Double
raw/SVGFEPointLightElement[JC] var scrollTop: Double
raw/SVGFEPointLightElement[JC] def scrollWidth: Int
raw/SVGFEPointLightElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFEPointLightElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFEPointLightElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFEPointLightElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFEPointLightElement[JC] def tagName: String
raw/SVGFEPointLightElement[JC] var textContent: String
raw/SVGFEPointLightElement[JC] def viewportElement: SVGElement
raw/SVGFEPointLightElement[JC] def x: SVGAnimatedNumber
raw/SVGFEPointLightElement[JC] var xmlbase: String
raw/SVGFEPointLightElement[JC] def y: SVGAnimatedNumber
raw/SVGFEPointLightElement[JC] def z: SVGAnimatedNumber
raw/SVGFESpecularLightingElement[JC] var accessKey: String
raw/SVGFESpecularLightingElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFESpecularLightingElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFESpecularLightingElement[JC] def appendChild(newChild: Node): Node
raw/SVGFESpecularLightingElement[JC] def attributes: NamedNodeMap
raw/SVGFESpecularLightingElement[JC] def childElementCount: Int
raw/SVGFESpecularLightingElement[JC] def childNodes: NodeList
raw/SVGFESpecularLightingElement[JC] def children: HTMLCollection
raw/SVGFESpecularLightingElement[JC] var classList: DOMTokenList
raw/SVGFESpecularLightingElement[JC] var className: SVGAnimatedString
raw/SVGFESpecularLightingElement[JC] def clientHeight: Int
raw/SVGFESpecularLightingElement[JC] def clientLeft: Int
raw/SVGFESpecularLightingElement[JC] def clientTop: Int
raw/SVGFESpecularLightingElement[JC] def clientWidth: Int
raw/SVGFESpecularLightingElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFESpecularLightingElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFESpecularLightingElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFESpecularLightingElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFESpecularLightingElement[JC] def firstChild: Node
raw/SVGFESpecularLightingElement[JC] def firstElementChild: Element
raw/SVGFESpecularLightingElement[JC] def getAttribute(name: String): String
raw/SVGFESpecularLightingElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFESpecularLightingElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFESpecularLightingElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFESpecularLightingElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFESpecularLightingElement[JC] def getClientRects(): ClientRectList
raw/SVGFESpecularLightingElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFESpecularLightingElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFESpecularLightingElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFESpecularLightingElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFESpecularLightingElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFESpecularLightingElement[JC] def hasAttributes(): Boolean
raw/SVGFESpecularLightingElement[JC] def hasChildNodes(): Boolean
raw/SVGFESpecularLightingElement[JC] def height: SVGAnimatedLength
raw/SVGFESpecularLightingElement[JC] var id: String
raw/SVGFESpecularLightingElement[JC] def in1: SVGAnimatedString
raw/SVGFESpecularLightingElement[JC] var innerHTML: String
raw/SVGFESpecularLightingElement[JC] var innerText: String
raw/SVGFESpecularLightingElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFESpecularLightingElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFESpecularLightingElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFESpecularLightingElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFESpecularLightingElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFESpecularLightingElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFESpecularLightingElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFESpecularLightingElement[JC] def kernelUnitLengthX: SVGAnimatedNumber
raw/SVGFESpecularLightingElement[JC] def kernelUnitLengthY: SVGAnimatedNumber
raw/SVGFESpecularLightingElement[JC] def lastChild: Node
raw/SVGFESpecularLightingElement[JC] def lastElementChild: Element
raw/SVGFESpecularLightingElement[JC] def localName: String
raw/SVGFESpecularLightingElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFESpecularLightingElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFESpecularLightingElement[JC] def matches(selector: String): Boolean
raw/SVGFESpecularLightingElement[JC] def namespaceURI: String
raw/SVGFESpecularLightingElement[JC] def nextElementSibling: Element
raw/SVGFESpecularLightingElement[JC] def nextSibling: Node
raw/SVGFESpecularLightingElement[JC] def nodeName: String
raw/SVGFESpecularLightingElement[JC] def nodeType: Int
raw/SVGFESpecularLightingElement[JC] var nodeValue: String
raw/SVGFESpecularLightingElement[JC] def normalize(): Unit
raw/SVGFESpecularLightingElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFESpecularLightingElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFESpecularLightingElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFESpecularLightingElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFESpecularLightingElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFESpecularLightingElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFESpecularLightingElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFESpecularLightingElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFESpecularLightingElement[JC] var onload: js.Function1[Event, _]
raw/SVGFESpecularLightingElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFESpecularLightingElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFESpecularLightingElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFESpecularLightingElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFESpecularLightingElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFESpecularLightingElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFESpecularLightingElement[JC] var outerHTML: String
raw/SVGFESpecularLightingElement[JC] def ownerDocument: Document
raw/SVGFESpecularLightingElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFESpecularLightingElement[JC] def parentNode: Node
raw/SVGFESpecularLightingElement[JC] def prefix: String
raw/SVGFESpecularLightingElement[JC] def previousElementSibling: Element
raw/SVGFESpecularLightingElement[JC] def previousSibling: Node
raw/SVGFESpecularLightingElement[JC] def querySelector(selectors: String): Element
raw/SVGFESpecularLightingElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFESpecularLightingElement[JC] def removeAttribute(name: String): Unit
raw/SVGFESpecularLightingElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFESpecularLightingElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFESpecularLightingElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFESpecularLightingElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFESpecularLightingElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFESpecularLightingElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFESpecularLightingElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFESpecularLightingElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFESpecularLightingElement[JC] def result: SVGAnimatedString
raw/SVGFESpecularLightingElement[JC] def scrollHeight: Int
raw/SVGFESpecularLightingElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFESpecularLightingElement[JC] var scrollLeft: Double
raw/SVGFESpecularLightingElement[JC] var scrollTop: Double
raw/SVGFESpecularLightingElement[JC] def scrollWidth: Int
raw/SVGFESpecularLightingElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFESpecularLightingElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFESpecularLightingElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFESpecularLightingElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFESpecularLightingElement[JC] def specularConstant: SVGAnimatedNumber
raw/SVGFESpecularLightingElement[JC] def specularExponent: SVGAnimatedNumber
raw/SVGFESpecularLightingElement[JC] var style: CSSStyleDeclaration
raw/SVGFESpecularLightingElement[JC] def surfaceScale: SVGAnimatedNumber
raw/SVGFESpecularLightingElement[JC] def tagName: String
raw/SVGFESpecularLightingElement[JC] var textContent: String
raw/SVGFESpecularLightingElement[JC] def viewportElement: SVGElement
raw/SVGFESpecularLightingElement[JC] def width: SVGAnimatedLength
raw/SVGFESpecularLightingElement[JC] def x: SVGAnimatedLength
raw/SVGFESpecularLightingElement[JC] var xmlbase: String
raw/SVGFESpecularLightingElement[JC] def y: SVGAnimatedLength
raw/SVGFESpotLightElement[JC] var accessKey: String
raw/SVGFESpotLightElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFESpotLightElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFESpotLightElement[JC] def appendChild(newChild: Node): Node
raw/SVGFESpotLightElement[JC] def attributes: NamedNodeMap
raw/SVGFESpotLightElement[JC] def childElementCount: Int
raw/SVGFESpotLightElement[JC] def childNodes: NodeList
raw/SVGFESpotLightElement[JC] def children: HTMLCollection
raw/SVGFESpotLightElement[JC] var classList: DOMTokenList
raw/SVGFESpotLightElement[JC] def clientHeight: Int
raw/SVGFESpotLightElement[JC] def clientLeft: Int
raw/SVGFESpotLightElement[JC] def clientTop: Int
raw/SVGFESpotLightElement[JC] def clientWidth: Int
raw/SVGFESpotLightElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFESpotLightElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFESpotLightElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFESpotLightElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFESpotLightElement[JC] def firstChild: Node
raw/SVGFESpotLightElement[JC] def firstElementChild: Element
raw/SVGFESpotLightElement[JC] def getAttribute(name: String): String
raw/SVGFESpotLightElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFESpotLightElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFESpotLightElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFESpotLightElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFESpotLightElement[JC] def getClientRects(): ClientRectList
raw/SVGFESpotLightElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFESpotLightElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFESpotLightElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFESpotLightElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFESpotLightElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFESpotLightElement[JC] def hasAttributes(): Boolean
raw/SVGFESpotLightElement[JC] def hasChildNodes(): Boolean
raw/SVGFESpotLightElement[JC] var id: String
raw/SVGFESpotLightElement[JC] var innerHTML: String
raw/SVGFESpotLightElement[JC] var innerText: String
raw/SVGFESpotLightElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFESpotLightElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFESpotLightElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFESpotLightElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFESpotLightElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFESpotLightElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFESpotLightElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFESpotLightElement[JC] def lastChild: Node
raw/SVGFESpotLightElement[JC] def lastElementChild: Element
raw/SVGFESpotLightElement[JC] def limitingConeAngle: SVGAnimatedNumber
raw/SVGFESpotLightElement[JC] def localName: String
raw/SVGFESpotLightElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFESpotLightElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFESpotLightElement[JC] def matches(selector: String): Boolean
raw/SVGFESpotLightElement[JC] def namespaceURI: String
raw/SVGFESpotLightElement[JC] def nextElementSibling: Element
raw/SVGFESpotLightElement[JC] def nextSibling: Node
raw/SVGFESpotLightElement[JC] def nodeName: String
raw/SVGFESpotLightElement[JC] def nodeType: Int
raw/SVGFESpotLightElement[JC] var nodeValue: String
raw/SVGFESpotLightElement[JC] def normalize(): Unit
raw/SVGFESpotLightElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFESpotLightElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFESpotLightElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFESpotLightElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFESpotLightElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFESpotLightElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFESpotLightElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFESpotLightElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFESpotLightElement[JC] var onload: js.Function1[Event, _]
raw/SVGFESpotLightElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFESpotLightElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFESpotLightElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFESpotLightElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFESpotLightElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFESpotLightElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFESpotLightElement[JC] var outerHTML: String
raw/SVGFESpotLightElement[JC] def ownerDocument: Document
raw/SVGFESpotLightElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFESpotLightElement[JC] def parentNode: Node
raw/SVGFESpotLightElement[JC] def pointsAtX: SVGAnimatedNumber
raw/SVGFESpotLightElement[JC] def pointsAtY: SVGAnimatedNumber
raw/SVGFESpotLightElement[JC] def pointsAtZ: SVGAnimatedNumber
raw/SVGFESpotLightElement[JC] def prefix: String
raw/SVGFESpotLightElement[JC] def previousElementSibling: Element
raw/SVGFESpotLightElement[JC] def previousSibling: Node
raw/SVGFESpotLightElement[JC] def querySelector(selectors: String): Element
raw/SVGFESpotLightElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFESpotLightElement[JC] def removeAttribute(name: String): Unit
raw/SVGFESpotLightElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFESpotLightElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFESpotLightElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFESpotLightElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFESpotLightElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFESpotLightElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFESpotLightElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFESpotLightElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFESpotLightElement[JC] def scrollHeight: Int
raw/SVGFESpotLightElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFESpotLightElement[JC] var scrollLeft: Double
raw/SVGFESpotLightElement[JC] var scrollTop: Double
raw/SVGFESpotLightElement[JC] def scrollWidth: Int
raw/SVGFESpotLightElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFESpotLightElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFESpotLightElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFESpotLightElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFESpotLightElement[JC] def specularExponent: SVGAnimatedNumber
raw/SVGFESpotLightElement[JC] def tagName: String
raw/SVGFESpotLightElement[JC] var textContent: String
raw/SVGFESpotLightElement[JC] def viewportElement: SVGElement
raw/SVGFESpotLightElement[JC] def x: SVGAnimatedNumber
raw/SVGFESpotLightElement[JC] var xmlbase: String
raw/SVGFESpotLightElement[JC] def y: SVGAnimatedNumber
raw/SVGFESpotLightElement[JC] def z: SVGAnimatedNumber
raw/SVGFETileElement[JC] var accessKey: String
raw/SVGFETileElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFETileElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFETileElement[JC] def appendChild(newChild: Node): Node
raw/SVGFETileElement[JC] def attributes: NamedNodeMap
raw/SVGFETileElement[JC] def childElementCount: Int
raw/SVGFETileElement[JC] def childNodes: NodeList
raw/SVGFETileElement[JC] def children: HTMLCollection
raw/SVGFETileElement[JC] var classList: DOMTokenList
raw/SVGFETileElement[JC] var className: SVGAnimatedString
raw/SVGFETileElement[JC] def clientHeight: Int
raw/SVGFETileElement[JC] def clientLeft: Int
raw/SVGFETileElement[JC] def clientTop: Int
raw/SVGFETileElement[JC] def clientWidth: Int
raw/SVGFETileElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFETileElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFETileElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFETileElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFETileElement[JC] def firstChild: Node
raw/SVGFETileElement[JC] def firstElementChild: Element
raw/SVGFETileElement[JC] def getAttribute(name: String): String
raw/SVGFETileElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFETileElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFETileElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFETileElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFETileElement[JC] def getClientRects(): ClientRectList
raw/SVGFETileElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFETileElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFETileElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFETileElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFETileElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFETileElement[JC] def hasAttributes(): Boolean
raw/SVGFETileElement[JC] def hasChildNodes(): Boolean
raw/SVGFETileElement[JC] def height: SVGAnimatedLength
raw/SVGFETileElement[JC] var id: String
raw/SVGFETileElement[JC] def in1: SVGAnimatedString
raw/SVGFETileElement[JC] var innerHTML: String
raw/SVGFETileElement[JC] var innerText: String
raw/SVGFETileElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFETileElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFETileElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFETileElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFETileElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFETileElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFETileElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFETileElement[JC] def lastChild: Node
raw/SVGFETileElement[JC] def lastElementChild: Element
raw/SVGFETileElement[JC] def localName: String
raw/SVGFETileElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFETileElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFETileElement[JC] def matches(selector: String): Boolean
raw/SVGFETileElement[JC] def namespaceURI: String
raw/SVGFETileElement[JC] def nextElementSibling: Element
raw/SVGFETileElement[JC] def nextSibling: Node
raw/SVGFETileElement[JC] def nodeName: String
raw/SVGFETileElement[JC] def nodeType: Int
raw/SVGFETileElement[JC] var nodeValue: String
raw/SVGFETileElement[JC] def normalize(): Unit
raw/SVGFETileElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFETileElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFETileElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFETileElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFETileElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFETileElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFETileElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFETileElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFETileElement[JC] var onload: js.Function1[Event, _]
raw/SVGFETileElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFETileElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFETileElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFETileElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFETileElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFETileElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFETileElement[JC] var outerHTML: String
raw/SVGFETileElement[JC] def ownerDocument: Document
raw/SVGFETileElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFETileElement[JC] def parentNode: Node
raw/SVGFETileElement[JC] def prefix: String
raw/SVGFETileElement[JC] def previousElementSibling: Element
raw/SVGFETileElement[JC] def previousSibling: Node
raw/SVGFETileElement[JC] def querySelector(selectors: String): Element
raw/SVGFETileElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFETileElement[JC] def removeAttribute(name: String): Unit
raw/SVGFETileElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFETileElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFETileElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFETileElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFETileElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFETileElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFETileElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFETileElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFETileElement[JC] def result: SVGAnimatedString
raw/SVGFETileElement[JC] def scrollHeight: Int
raw/SVGFETileElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFETileElement[JC] var scrollLeft: Double
raw/SVGFETileElement[JC] var scrollTop: Double
raw/SVGFETileElement[JC] def scrollWidth: Int
raw/SVGFETileElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFETileElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFETileElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFETileElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFETileElement[JC] var style: CSSStyleDeclaration
raw/SVGFETileElement[JC] def tagName: String
raw/SVGFETileElement[JC] var textContent: String
raw/SVGFETileElement[JC] def viewportElement: SVGElement
raw/SVGFETileElement[JC] def width: SVGAnimatedLength
raw/SVGFETileElement[JC] def x: SVGAnimatedLength
raw/SVGFETileElement[JC] var xmlbase: String
raw/SVGFETileElement[JC] def y: SVGAnimatedLength
raw/SVGFETurbulenceElement[JC] var accessKey: String
raw/SVGFETurbulenceElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFETurbulenceElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFETurbulenceElement[JC] def appendChild(newChild: Node): Node
raw/SVGFETurbulenceElement[JC] def attributes: NamedNodeMap
raw/SVGFETurbulenceElement[JC] def baseFrequencyX: SVGAnimatedNumber
raw/SVGFETurbulenceElement[JC] def baseFrequencyY: SVGAnimatedNumber
raw/SVGFETurbulenceElement[JC] def childElementCount: Int
raw/SVGFETurbulenceElement[JC] def childNodes: NodeList
raw/SVGFETurbulenceElement[JC] def children: HTMLCollection
raw/SVGFETurbulenceElement[JC] var classList: DOMTokenList
raw/SVGFETurbulenceElement[JC] var className: SVGAnimatedString
raw/SVGFETurbulenceElement[JC] def clientHeight: Int
raw/SVGFETurbulenceElement[JC] def clientLeft: Int
raw/SVGFETurbulenceElement[JC] def clientTop: Int
raw/SVGFETurbulenceElement[JC] def clientWidth: Int
raw/SVGFETurbulenceElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFETurbulenceElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFETurbulenceElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFETurbulenceElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFETurbulenceElement[JC] def firstChild: Node
raw/SVGFETurbulenceElement[JC] def firstElementChild: Element
raw/SVGFETurbulenceElement[JC] def getAttribute(name: String): String
raw/SVGFETurbulenceElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFETurbulenceElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFETurbulenceElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFETurbulenceElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFETurbulenceElement[JC] def getClientRects(): ClientRectList
raw/SVGFETurbulenceElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFETurbulenceElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFETurbulenceElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFETurbulenceElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFETurbulenceElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFETurbulenceElement[JC] def hasAttributes(): Boolean
raw/SVGFETurbulenceElement[JC] def hasChildNodes(): Boolean
raw/SVGFETurbulenceElement[JC] def height: SVGAnimatedLength
raw/SVGFETurbulenceElement[JC] var id: String
raw/SVGFETurbulenceElement[JC] var innerHTML: String
raw/SVGFETurbulenceElement[JC] var innerText: String
raw/SVGFETurbulenceElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFETurbulenceElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFETurbulenceElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFETurbulenceElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFETurbulenceElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFETurbulenceElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFETurbulenceElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFETurbulenceElement[JC] def lastChild: Node
raw/SVGFETurbulenceElement[JC] def lastElementChild: Element
raw/SVGFETurbulenceElement[JC] def localName: String
raw/SVGFETurbulenceElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFETurbulenceElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFETurbulenceElement[JC] def matches(selector: String): Boolean
raw/SVGFETurbulenceElement[JC] def namespaceURI: String
raw/SVGFETurbulenceElement[JC] def nextElementSibling: Element
raw/SVGFETurbulenceElement[JC] def nextSibling: Node
raw/SVGFETurbulenceElement[JC] def nodeName: String
raw/SVGFETurbulenceElement[JC] def nodeType: Int
raw/SVGFETurbulenceElement[JC] var nodeValue: String
raw/SVGFETurbulenceElement[JC] def normalize(): Unit
raw/SVGFETurbulenceElement[JC] def numOctaves: SVGAnimatedInteger
raw/SVGFETurbulenceElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFETurbulenceElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFETurbulenceElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFETurbulenceElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFETurbulenceElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFETurbulenceElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFETurbulenceElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFETurbulenceElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFETurbulenceElement[JC] var onload: js.Function1[Event, _]
raw/SVGFETurbulenceElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFETurbulenceElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFETurbulenceElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFETurbulenceElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFETurbulenceElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFETurbulenceElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFETurbulenceElement[JC] var outerHTML: String
raw/SVGFETurbulenceElement[JC] def ownerDocument: Document
raw/SVGFETurbulenceElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFETurbulenceElement[JC] def parentNode: Node
raw/SVGFETurbulenceElement[JC] def prefix: String
raw/SVGFETurbulenceElement[JC] def previousElementSibling: Element
raw/SVGFETurbulenceElement[JC] def previousSibling: Node
raw/SVGFETurbulenceElement[JC] def querySelector(selectors: String): Element
raw/SVGFETurbulenceElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFETurbulenceElement[JC] def removeAttribute(name: String): Unit
raw/SVGFETurbulenceElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFETurbulenceElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFETurbulenceElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFETurbulenceElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFETurbulenceElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFETurbulenceElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFETurbulenceElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFETurbulenceElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFETurbulenceElement[JC] def result: SVGAnimatedString
raw/SVGFETurbulenceElement[JC] def scrollHeight: Int
raw/SVGFETurbulenceElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFETurbulenceElement[JC] var scrollLeft: Double
raw/SVGFETurbulenceElement[JC] var scrollTop: Double
raw/SVGFETurbulenceElement[JC] def scrollWidth: Int
raw/SVGFETurbulenceElement[JC] def seed: SVGAnimatedNumber
raw/SVGFETurbulenceElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFETurbulenceElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFETurbulenceElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFETurbulenceElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFETurbulenceElement[JC] def stitchTiles: SVGAnimatedEnumeration
raw/SVGFETurbulenceElement[JC] var style: CSSStyleDeclaration
raw/SVGFETurbulenceElement[JC] def tagName: String
raw/SVGFETurbulenceElement[JC] var textContent: String
raw/SVGFETurbulenceElement[JC] def `type`: SVGAnimatedEnumeration
raw/SVGFETurbulenceElement[JC] def viewportElement: SVGElement
raw/SVGFETurbulenceElement[JC] def width: SVGAnimatedLength
raw/SVGFETurbulenceElement[JC] def x: SVGAnimatedLength
raw/SVGFETurbulenceElement[JC] var xmlbase: String
raw/SVGFETurbulenceElement[JC] def y: SVGAnimatedLength
raw/SVGFETurbulenceElement[JO] val SVG_STITCHTYPE_NOSTITCH: Int
raw/SVGFETurbulenceElement[JO] val SVG_STITCHTYPE_STITCH: Int
raw/SVGFETurbulenceElement[JO] val SVG_STITCHTYPE_UNKNOWN: Int
raw/SVGFETurbulenceElement[JO] val SVG_TURBULENCE_TYPE_FRACTALNOISE: Int
raw/SVGFETurbulenceElement[JO] val SVG_TURBULENCE_TYPE_TURBULENCE: Int
raw/SVGFETurbulenceElement[JO] val SVG_TURBULENCE_TYPE_UNKNOWN: Int
raw/SVGFilterElement[JC] val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Int
raw/SVGFilterElement[JC] val SVG_UNIT_TYPE_UNKNOWN: Int
raw/SVGFilterElement[JC] val SVG_UNIT_TYPE_USERSPACEONUSE: Int
raw/SVGFilterElement[JC] var accessKey: String
raw/SVGFilterElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFilterElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFilterElement[JC] def appendChild(newChild: Node): Node
raw/SVGFilterElement[JC] def attributes: NamedNodeMap
raw/SVGFilterElement[JC] def childElementCount: Int
raw/SVGFilterElement[JC] def childNodes: NodeList
raw/SVGFilterElement[JC] def children: HTMLCollection
raw/SVGFilterElement[JC] var classList: DOMTokenList
raw/SVGFilterElement[JC] var className: SVGAnimatedString
raw/SVGFilterElement[JC] def clientHeight: Int
raw/SVGFilterElement[JC] def clientLeft: Int
raw/SVGFilterElement[JC] def clientTop: Int
raw/SVGFilterElement[JC] def clientWidth: Int
raw/SVGFilterElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGFilterElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGFilterElement[JC] def contains(otherNode: Node): Boolean
raw/SVGFilterElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGFilterElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGFilterElement[JC] def filterResX: SVGAnimatedInteger
raw/SVGFilterElement[JC] def filterResY: SVGAnimatedInteger
raw/SVGFilterElement[JC] def filterUnits: SVGAnimatedEnumeration
raw/SVGFilterElement[JC] def firstChild: Node
raw/SVGFilterElement[JC] def firstElementChild: Element
raw/SVGFilterElement[JC] def getAttribute(name: String): String
raw/SVGFilterElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGFilterElement[JC] def getAttributeNode(name: String): Attr
raw/SVGFilterElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGFilterElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGFilterElement[JC] def getClientRects(): ClientRectList
raw/SVGFilterElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGFilterElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGFilterElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGFilterElement[JC] def hasAttribute(name: String): Boolean
raw/SVGFilterElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGFilterElement[JC] def hasAttributes(): Boolean
raw/SVGFilterElement[JC] def hasChildNodes(): Boolean
raw/SVGFilterElement[JC] def height: SVGAnimatedLength
raw/SVGFilterElement[JC] var href: SVGAnimatedString
raw/SVGFilterElement[JC] var id: String
raw/SVGFilterElement[JC] var innerHTML: String
raw/SVGFilterElement[JC] var innerText: String
raw/SVGFilterElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGFilterElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGFilterElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGFilterElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGFilterElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGFilterElement[JC] def isSameNode(other: Node): Boolean
raw/SVGFilterElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGFilterElement[JC] def lastChild: Node
raw/SVGFilterElement[JC] def lastElementChild: Element
raw/SVGFilterElement[JC] def localName: String
raw/SVGFilterElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGFilterElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGFilterElement[JC] def matches(selector: String): Boolean
raw/SVGFilterElement[JC] def namespaceURI: String
raw/SVGFilterElement[JC] def nextElementSibling: Element
raw/SVGFilterElement[JC] def nextSibling: Node
raw/SVGFilterElement[JC] def nodeName: String
raw/SVGFilterElement[JC] def nodeType: Int
raw/SVGFilterElement[JC] var nodeValue: String
raw/SVGFilterElement[JC] def normalize(): Unit
raw/SVGFilterElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGFilterElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGFilterElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGFilterElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGFilterElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGFilterElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGFilterElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGFilterElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGFilterElement[JC] var onload: js.Function1[Event, _]
raw/SVGFilterElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGFilterElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGFilterElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGFilterElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGFilterElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGFilterElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGFilterElement[JC] var outerHTML: String
raw/SVGFilterElement[JC] def ownerDocument: Document
raw/SVGFilterElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGFilterElement[JC] def parentNode: Node
raw/SVGFilterElement[JC] def prefix: String
raw/SVGFilterElement[JC] def previousElementSibling: Element
raw/SVGFilterElement[JC] def previousSibling: Node
raw/SVGFilterElement[JC] def primitiveUnits: SVGAnimatedEnumeration
raw/SVGFilterElement[JC] def querySelector(selectors: String): Element
raw/SVGFilterElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGFilterElement[JC] def removeAttribute(name: String): Unit
raw/SVGFilterElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGFilterElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGFilterElement[JC] def removeChild(oldChild: Node): Node
raw/SVGFilterElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGFilterElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGFilterElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGFilterElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGFilterElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGFilterElement[JC] def scrollHeight: Int
raw/SVGFilterElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGFilterElement[JC] var scrollLeft: Double
raw/SVGFilterElement[JC] var scrollTop: Double
raw/SVGFilterElement[JC] def scrollWidth: Int
raw/SVGFilterElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGFilterElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGFilterElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGFilterElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGFilterElement[JC] def setFilterRes(filterResX: Double, filterResY: Double): Unit
raw/SVGFilterElement[JC] var style: CSSStyleDeclaration
raw/SVGFilterElement[JC] def tagName: String
raw/SVGFilterElement[JC] var textContent: String
raw/SVGFilterElement[JC] def viewportElement: SVGElement
raw/SVGFilterElement[JC] def width: SVGAnimatedLength
raw/SVGFilterElement[JC] def x: SVGAnimatedLength
raw/SVGFilterElement[JC] var xmlbase: String
raw/SVGFilterElement[JC] var xmllang: String
raw/SVGFilterElement[JC] var xmlspace: String
raw/SVGFilterElement[JC] def y: SVGAnimatedLength
raw/SVGFilterPrimitiveStandardAttributes[JT] var className: SVGAnimatedString
raw/SVGFilterPrimitiveStandardAttributes[JT] def height: SVGAnimatedLength
raw/SVGFilterPrimitiveStandardAttributes[JT] def result: SVGAnimatedString
raw/SVGFilterPrimitiveStandardAttributes[JT] var style: CSSStyleDeclaration
raw/SVGFilterPrimitiveStandardAttributes[JT] def width: SVGAnimatedLength
raw/SVGFilterPrimitiveStandardAttributes[JT] def x: SVGAnimatedLength
raw/SVGFilterPrimitiveStandardAttributes[JT] def y: SVGAnimatedLength
raw/SVGFitToViewBox[JT] var preserveAspectRatio: SVGAnimatedPreserveAspectRatio
raw/SVGFitToViewBox[JT] var viewBox: SVGAnimatedRect
raw/SVGGElement[JC] var accessKey: String
raw/SVGGElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGGElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGGElement[JC] def appendChild(newChild: Node): Node
raw/SVGGElement[JC] def attributes: NamedNodeMap
raw/SVGGElement[JC] def childElementCount: Int
raw/SVGGElement[JC] def childNodes: NodeList
raw/SVGGElement[JC] def children: HTMLCollection
raw/SVGGElement[JC] var classList: DOMTokenList
raw/SVGGElement[JC] var className: SVGAnimatedString
raw/SVGGElement[JC] def clientHeight: Int
raw/SVGGElement[JC] def clientLeft: Int
raw/SVGGElement[JC] def clientTop: Int
raw/SVGGElement[JC] def clientWidth: Int
raw/SVGGElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGGElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGGElement[JC] def contains(otherNode: Node): Boolean
raw/SVGGElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGGElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGGElement[JC] var farthestViewportElement: SVGElement
raw/SVGGElement[JC] def firstChild: Node
raw/SVGGElement[JC] def firstElementChild: Element
raw/SVGGElement[JC] def getAttribute(name: String): String
raw/SVGGElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGGElement[JC] def getAttributeNode(name: String): Attr
raw/SVGGElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGGElement[JC] def getBBox(): SVGRect
raw/SVGGElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGGElement[JC] def getCTM(): SVGMatrix
raw/SVGGElement[JC] def getClientRects(): ClientRectList
raw/SVGGElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGGElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGGElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGGElement[JC] def getScreenCTM(): SVGMatrix
raw/SVGGElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
raw/SVGGElement[JC] def hasAttribute(name: String): Boolean
raw/SVGGElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGGElement[JC] def hasAttributes(): Boolean
raw/SVGGElement[JC] def hasChildNodes(): Boolean
raw/SVGGElement[JC] def hasExtension(extension: String): Boolean
raw/SVGGElement[JC] var id: String
raw/SVGGElement[JC] var innerHTML: String
raw/SVGGElement[JC] var innerText: String
raw/SVGGElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGGElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGGElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGGElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGGElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGGElement[JC] def isSameNode(other: Node): Boolean
raw/SVGGElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGGElement[JC] def lastChild: Node
raw/SVGGElement[JC] def lastElementChild: Element
raw/SVGGElement[JC] def localName: String
raw/SVGGElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGGElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGGElement[JC] def matches(selector: String): Boolean
raw/SVGGElement[JC] def namespaceURI: String
raw/SVGGElement[JC] var nearestViewportElement: SVGElement
raw/SVGGElement[JC] def nextElementSibling: Element
raw/SVGGElement[JC] def nextSibling: Node
raw/SVGGElement[JC] def nodeName: String
raw/SVGGElement[JC] def nodeType: Int
raw/SVGGElement[JC] var nodeValue: String
raw/SVGGElement[JC] def normalize(): Unit
raw/SVGGElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGGElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGGElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGGElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGGElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGGElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGGElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGGElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGGElement[JC] var onload: js.Function1[Event, _]
raw/SVGGElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGGElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGGElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGGElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGGElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGGElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGGElement[JC] var outerHTML: String
raw/SVGGElement[JC] def ownerDocument: Document
raw/SVGGElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGGElement[JC] def parentNode: Node
raw/SVGGElement[JC] def prefix: String
raw/SVGGElement[JC] def previousElementSibling: Element
raw/SVGGElement[JC] def previousSibling: Node
raw/SVGGElement[JC] def querySelector(selectors: String): Element
raw/SVGGElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGGElement[JC] def removeAttribute(name: String): Unit
raw/SVGGElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGGElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGGElement[JC] def removeChild(oldChild: Node): Node
raw/SVGGElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGGElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGGElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGGElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGGElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGGElement[JC] var requiredExtensions: SVGStringList
raw/SVGGElement[JC] var requiredFeatures: SVGStringList
raw/SVGGElement[JC] def scrollHeight: Int
raw/SVGGElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGGElement[JC] var scrollLeft: Double
raw/SVGGElement[JC] var scrollTop: Double
raw/SVGGElement[JC] def scrollWidth: Int
raw/SVGGElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGGElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGGElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGGElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGGElement[JC] var style: CSSStyleDeclaration
raw/SVGGElement[JC] var systemLanguage: SVGStringList
raw/SVGGElement[JC] def tagName: String
raw/SVGGElement[JC] var textContent: String
raw/SVGGElement[JC] var transform: SVGAnimatedTransformList
raw/SVGGElement[JC] def viewportElement: SVGElement
raw/SVGGElement[JC] var xmlbase: String
raw/SVGGElement[JC] var xmllang: String
raw/SVGGElement[JC] var xmlspace: String
raw/SVGGradientElement[JC] val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Int
raw/SVGGradientElement[JC] val SVG_UNIT_TYPE_UNKNOWN: Int
raw/SVGGradientElement[JC] val SVG_UNIT_TYPE_USERSPACEONUSE: Int
raw/SVGGradientElement[JC] var accessKey: String
raw/SVGGradientElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGGradientElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGGradientElement[JC] def appendChild(newChild: Node): Node
raw/SVGGradientElement[JC] def attributes: NamedNodeMap
raw/SVGGradientElement[JC] def childElementCount: Int
raw/SVGGradientElement[JC] def childNodes: NodeList
raw/SVGGradientElement[JC] def children: HTMLCollection
raw/SVGGradientElement[JC] var classList: DOMTokenList
raw/SVGGradientElement[JC] var className: SVGAnimatedString
raw/SVGGradientElement[JC] def clientHeight: Int
raw/SVGGradientElement[JC] def clientLeft: Int
raw/SVGGradientElement[JC] def clientTop: Int
raw/SVGGradientElement[JC] def clientWidth: Int
raw/SVGGradientElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGGradientElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGGradientElement[JC] def contains(otherNode: Node): Boolean
raw/SVGGradientElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGGradientElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGGradientElement[JC] def firstChild: Node
raw/SVGGradientElement[JC] def firstElementChild: Element
raw/SVGGradientElement[JC] def getAttribute(name: String): String
raw/SVGGradientElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGGradientElement[JC] def getAttributeNode(name: String): Attr
raw/SVGGradientElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGGradientElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGGradientElement[JC] def getClientRects(): ClientRectList
raw/SVGGradientElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGGradientElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGGradientElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGGradientElement[JC] def gradientTransform: SVGAnimatedTransformList
raw/SVGGradientElement[JC] def gradientUnits: SVGAnimatedEnumeration
raw/SVGGradientElement[JC] def hasAttribute(name: String): Boolean
raw/SVGGradientElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGGradientElement[JC] def hasAttributes(): Boolean
raw/SVGGradientElement[JC] def hasChildNodes(): Boolean
raw/SVGGradientElement[JC] var href: SVGAnimatedString
raw/SVGGradientElement[JC] var id: String
raw/SVGGradientElement[JC] var innerHTML: String
raw/SVGGradientElement[JC] var innerText: String
raw/SVGGradientElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGGradientElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGGradientElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGGradientElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGGradientElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGGradientElement[JC] def isSameNode(other: Node): Boolean
raw/SVGGradientElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGGradientElement[JC] def lastChild: Node
raw/SVGGradientElement[JC] def lastElementChild: Element
raw/SVGGradientElement[JC] def localName: String
raw/SVGGradientElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGGradientElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGGradientElement[JC] def matches(selector: String): Boolean
raw/SVGGradientElement[JC] def namespaceURI: String
raw/SVGGradientElement[JC] def nextElementSibling: Element
raw/SVGGradientElement[JC] def nextSibling: Node
raw/SVGGradientElement[JC] def nodeName: String
raw/SVGGradientElement[JC] def nodeType: Int
raw/SVGGradientElement[JC] var nodeValue: String
raw/SVGGradientElement[JC] def normalize(): Unit
raw/SVGGradientElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGGradientElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGGradientElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGGradientElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGGradientElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGGradientElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGGradientElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGGradientElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGGradientElement[JC] var onload: js.Function1[Event, _]
raw/SVGGradientElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGGradientElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGGradientElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGGradientElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGGradientElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGGradientElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGGradientElement[JC] var outerHTML: String
raw/SVGGradientElement[JC] def ownerDocument: Document
raw/SVGGradientElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGGradientElement[JC] def parentNode: Node
raw/SVGGradientElement[JC] def prefix: String
raw/SVGGradientElement[JC] def previousElementSibling: Element
raw/SVGGradientElement[JC] def previousSibling: Node
raw/SVGGradientElement[JC] def querySelector(selectors: String): Element
raw/SVGGradientElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGGradientElement[JC] def removeAttribute(name: String): Unit
raw/SVGGradientElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGGradientElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGGradientElement[JC] def removeChild(oldChild: Node): Node
raw/SVGGradientElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGGradientElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGGradientElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGGradientElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGGradientElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGGradientElement[JC] def scrollHeight: Int
raw/SVGGradientElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGGradientElement[JC] var scrollLeft: Double
raw/SVGGradientElement[JC] var scrollTop: Double
raw/SVGGradientElement[JC] def scrollWidth: Int
raw/SVGGradientElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGGradientElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGGradientElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGGradientElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGGradientElement[JC] def spreadMethod: SVGAnimatedEnumeration
raw/SVGGradientElement[JC] var style: CSSStyleDeclaration
raw/SVGGradientElement[JC] def tagName: String
raw/SVGGradientElement[JC] var textContent: String
raw/SVGGradientElement[JC] def viewportElement: SVGElement
raw/SVGGradientElement[JC] var xmlbase: String
raw/SVGGradientElement[JO] val SVG_SPREADMETHOD_PAD: Int
raw/SVGGradientElement[JO] val SVG_SPREADMETHOD_REFLECT: Int
raw/SVGGradientElement[JO] val SVG_SPREADMETHOD_REPEAT: Int
raw/SVGGradientElement[JO] val SVG_SPREADMETHOD_UNKNOWN: Int
raw/SVGImageElement[JC] var accessKey: String
raw/SVGImageElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGImageElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGImageElement[JC] def appendChild(newChild: Node): Node
raw/SVGImageElement[JC] def attributes: NamedNodeMap
raw/SVGImageElement[JC] def childElementCount: Int
raw/SVGImageElement[JC] def childNodes: NodeList
raw/SVGImageElement[JC] def children: HTMLCollection
raw/SVGImageElement[JC] var classList: DOMTokenList
raw/SVGImageElement[JC] var className: SVGAnimatedString
raw/SVGImageElement[JC] def clientHeight: Int
raw/SVGImageElement[JC] def clientLeft: Int
raw/SVGImageElement[JC] def clientTop: Int
raw/SVGImageElement[JC] def clientWidth: Int
raw/SVGImageElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGImageElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGImageElement[JC] def contains(otherNode: Node): Boolean
raw/SVGImageElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGImageElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGImageElement[JC] var farthestViewportElement: SVGElement
raw/SVGImageElement[JC] def firstChild: Node
raw/SVGImageElement[JC] def firstElementChild: Element
raw/SVGImageElement[JC] def getAttribute(name: String): String
raw/SVGImageElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGImageElement[JC] def getAttributeNode(name: String): Attr
raw/SVGImageElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGImageElement[JC] def getBBox(): SVGRect
raw/SVGImageElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGImageElement[JC] def getCTM(): SVGMatrix
raw/SVGImageElement[JC] def getClientRects(): ClientRectList
raw/SVGImageElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGImageElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGImageElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGImageElement[JC] def getScreenCTM(): SVGMatrix
raw/SVGImageElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
raw/SVGImageElement[JC] def hasAttribute(name: String): Boolean
raw/SVGImageElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGImageElement[JC] def hasAttributes(): Boolean
raw/SVGImageElement[JC] def hasChildNodes(): Boolean
raw/SVGImageElement[JC] def hasExtension(extension: String): Boolean
raw/SVGImageElement[JC] def height: SVGAnimatedLength
raw/SVGImageElement[JC] var href: SVGAnimatedString
raw/SVGImageElement[JC] var id: String
raw/SVGImageElement[JC] var innerHTML: String
raw/SVGImageElement[JC] var innerText: String
raw/SVGImageElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGImageElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGImageElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGImageElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGImageElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGImageElement[JC] def isSameNode(other: Node): Boolean
raw/SVGImageElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGImageElement[JC] def lastChild: Node
raw/SVGImageElement[JC] def lastElementChild: Element
raw/SVGImageElement[JC] def localName: String
raw/SVGImageElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGImageElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGImageElement[JC] def matches(selector: String): Boolean
raw/SVGImageElement[JC] def namespaceURI: String
raw/SVGImageElement[JC] var nearestViewportElement: SVGElement
raw/SVGImageElement[JC] def nextElementSibling: Element
raw/SVGImageElement[JC] def nextSibling: Node
raw/SVGImageElement[JC] def nodeName: String
raw/SVGImageElement[JC] def nodeType: Int
raw/SVGImageElement[JC] var nodeValue: String
raw/SVGImageElement[JC] def normalize(): Unit
raw/SVGImageElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGImageElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGImageElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGImageElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGImageElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGImageElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGImageElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGImageElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGImageElement[JC] var onload: js.Function1[Event, _]
raw/SVGImageElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGImageElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGImageElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGImageElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGImageElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGImageElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGImageElement[JC] var outerHTML: String
raw/SVGImageElement[JC] def ownerDocument: Document
raw/SVGImageElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGImageElement[JC] def parentNode: Node
raw/SVGImageElement[JC] def prefix: String
raw/SVGImageElement[JC] def preserveAspectRatio: SVGAnimatedPreserveAspectRatio
raw/SVGImageElement[JC] def previousElementSibling: Element
raw/SVGImageElement[JC] def previousSibling: Node
raw/SVGImageElement[JC] def querySelector(selectors: String): Element
raw/SVGImageElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGImageElement[JC] def removeAttribute(name: String): Unit
raw/SVGImageElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGImageElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGImageElement[JC] def removeChild(oldChild: Node): Node
raw/SVGImageElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGImageElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGImageElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGImageElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGImageElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGImageElement[JC] var requiredExtensions: SVGStringList
raw/SVGImageElement[JC] var requiredFeatures: SVGStringList
raw/SVGImageElement[JC] def scrollHeight: Int
raw/SVGImageElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGImageElement[JC] var scrollLeft: Double
raw/SVGImageElement[JC] var scrollTop: Double
raw/SVGImageElement[JC] def scrollWidth: Int
raw/SVGImageElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGImageElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGImageElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGImageElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGImageElement[JC] var style: CSSStyleDeclaration
raw/SVGImageElement[JC] var systemLanguage: SVGStringList
raw/SVGImageElement[JC] def tagName: String
raw/SVGImageElement[JC] var textContent: String
raw/SVGImageElement[JC] var transform: SVGAnimatedTransformList
raw/SVGImageElement[JC] def viewportElement: SVGElement
raw/SVGImageElement[JC] def width: SVGAnimatedLength
raw/SVGImageElement[JC] def x: SVGAnimatedLength
raw/SVGImageElement[JC] var xmlbase: String
raw/SVGImageElement[JC] var xmllang: String
raw/SVGImageElement[JC] var xmlspace: String
raw/SVGImageElement[JC] def y: SVGAnimatedLength
raw/SVGLangSpace[JT] var xmllang: String
raw/SVGLangSpace[JT] var xmlspace: String
raw/SVGLength[JC] def convertToSpecifiedUnits(unitType: Int): Unit
raw/SVGLength[JC] def newValueSpecifiedUnits(unitType: Int, valueInSpecifiedUnits: Double): Unit
raw/SVGLength[JC] def unitType: Int
raw/SVGLength[JC] var value: Double
raw/SVGLength[JC] var valueAsString: String
raw/SVGLength[JC] var valueInSpecifiedUnits: Double
raw/SVGLength[JO] val SVG_LENGTHTYPE_CM: Int
raw/SVGLength[JO] val SVG_LENGTHTYPE_EMS: Int
raw/SVGLength[JO] val SVG_LENGTHTYPE_EXS: Int
raw/SVGLength[JO] val SVG_LENGTHTYPE_IN: Int
raw/SVGLength[JO] val SVG_LENGTHTYPE_MM: Int
raw/SVGLength[JO] val SVG_LENGTHTYPE_NUMBER: Int
raw/SVGLength[JO] val SVG_LENGTHTYPE_PC: Int
raw/SVGLength[JO] val SVG_LENGTHTYPE_PERCENTAGE: Int
raw/SVGLength[JO] val SVG_LENGTHTYPE_PT: Int
raw/SVGLength[JO] val SVG_LENGTHTYPE_PX: Int
raw/SVGLength[JO] val SVG_LENGTHTYPE_UNKNOWN: Int
raw/SVGLengthList[JC] def appendItem(newItem: SVGLength): SVGLength
raw/SVGLengthList[JC] def clear(): Unit
raw/SVGLengthList[JC] def getItem(index: Int): SVGLength
raw/SVGLengthList[JC] def initialize(newItem: SVGLength): SVGLength
raw/SVGLengthList[JC] def insertItemBefore(newItem: SVGLength, index: Int): SVGLength
raw/SVGLengthList[JC] def numberOfItems: Int
raw/SVGLengthList[JC] def removeItem(index: Int): SVGLength
raw/SVGLengthList[JC] def replaceItem(newItem: SVGLength, index: Int): SVGLength
raw/SVGLineElement[JC] var accessKey: String
raw/SVGLineElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGLineElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGLineElement[JC] def appendChild(newChild: Node): Node
raw/SVGLineElement[JC] def attributes: NamedNodeMap
raw/SVGLineElement[JC] def childElementCount: Int
raw/SVGLineElement[JC] def childNodes: NodeList
raw/SVGLineElement[JC] def children: HTMLCollection
raw/SVGLineElement[JC] var classList: DOMTokenList
raw/SVGLineElement[JC] var className: SVGAnimatedString
raw/SVGLineElement[JC] def clientHeight: Int
raw/SVGLineElement[JC] def clientLeft: Int
raw/SVGLineElement[JC] def clientTop: Int
raw/SVGLineElement[JC] def clientWidth: Int
raw/SVGLineElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGLineElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGLineElement[JC] def contains(otherNode: Node): Boolean
raw/SVGLineElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGLineElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGLineElement[JC] var farthestViewportElement: SVGElement
raw/SVGLineElement[JC] def firstChild: Node
raw/SVGLineElement[JC] def firstElementChild: Element
raw/SVGLineElement[JC] def getAttribute(name: String): String
raw/SVGLineElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGLineElement[JC] def getAttributeNode(name: String): Attr
raw/SVGLineElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGLineElement[JC] def getBBox(): SVGRect
raw/SVGLineElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGLineElement[JC] def getCTM(): SVGMatrix
raw/SVGLineElement[JC] def getClientRects(): ClientRectList
raw/SVGLineElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGLineElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGLineElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGLineElement[JC] def getScreenCTM(): SVGMatrix
raw/SVGLineElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
raw/SVGLineElement[JC] def hasAttribute(name: String): Boolean
raw/SVGLineElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGLineElement[JC] def hasAttributes(): Boolean
raw/SVGLineElement[JC] def hasChildNodes(): Boolean
raw/SVGLineElement[JC] def hasExtension(extension: String): Boolean
raw/SVGLineElement[JC] var id: String
raw/SVGLineElement[JC] var innerHTML: String
raw/SVGLineElement[JC] var innerText: String
raw/SVGLineElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGLineElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGLineElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGLineElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGLineElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGLineElement[JC] def isSameNode(other: Node): Boolean
raw/SVGLineElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGLineElement[JC] def lastChild: Node
raw/SVGLineElement[JC] def lastElementChild: Element
raw/SVGLineElement[JC] def localName: String
raw/SVGLineElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGLineElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGLineElement[JC] def matches(selector: String): Boolean
raw/SVGLineElement[JC] def namespaceURI: String
raw/SVGLineElement[JC] var nearestViewportElement: SVGElement
raw/SVGLineElement[JC] def nextElementSibling: Element
raw/SVGLineElement[JC] def nextSibling: Node
raw/SVGLineElement[JC] def nodeName: String
raw/SVGLineElement[JC] def nodeType: Int
raw/SVGLineElement[JC] var nodeValue: String
raw/SVGLineElement[JC] def normalize(): Unit
raw/SVGLineElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGLineElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGLineElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGLineElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGLineElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGLineElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGLineElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGLineElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGLineElement[JC] var onload: js.Function1[Event, _]
raw/SVGLineElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGLineElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGLineElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGLineElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGLineElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGLineElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGLineElement[JC] var outerHTML: String
raw/SVGLineElement[JC] def ownerDocument: Document
raw/SVGLineElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGLineElement[JC] def parentNode: Node
raw/SVGLineElement[JC] def prefix: String
raw/SVGLineElement[JC] def previousElementSibling: Element
raw/SVGLineElement[JC] def previousSibling: Node
raw/SVGLineElement[JC] def querySelector(selectors: String): Element
raw/SVGLineElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGLineElement[JC] def removeAttribute(name: String): Unit
raw/SVGLineElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGLineElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGLineElement[JC] def removeChild(oldChild: Node): Node
raw/SVGLineElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGLineElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGLineElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGLineElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGLineElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGLineElement[JC] var requiredExtensions: SVGStringList
raw/SVGLineElement[JC] var requiredFeatures: SVGStringList
raw/SVGLineElement[JC] def scrollHeight: Int
raw/SVGLineElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGLineElement[JC] var scrollLeft: Double
raw/SVGLineElement[JC] var scrollTop: Double
raw/SVGLineElement[JC] def scrollWidth: Int
raw/SVGLineElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGLineElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGLineElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGLineElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGLineElement[JC] var style: CSSStyleDeclaration
raw/SVGLineElement[JC] var systemLanguage: SVGStringList
raw/SVGLineElement[JC] def tagName: String
raw/SVGLineElement[JC] var textContent: String
raw/SVGLineElement[JC] var transform: SVGAnimatedTransformList
raw/SVGLineElement[JC] def viewportElement: SVGElement
raw/SVGLineElement[JC] def x1: SVGAnimatedLength
raw/SVGLineElement[JC] def x2: SVGAnimatedLength
raw/SVGLineElement[JC] var xmlbase: String
raw/SVGLineElement[JC] var xmllang: String
raw/SVGLineElement[JC] var xmlspace: String
raw/SVGLineElement[JC] def y1: SVGAnimatedLength
raw/SVGLineElement[JC] def y2: SVGAnimatedLength
raw/SVGLinearGradientElement[JC] val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Int
raw/SVGLinearGradientElement[JC] val SVG_UNIT_TYPE_UNKNOWN: Int
raw/SVGLinearGradientElement[JC] val SVG_UNIT_TYPE_USERSPACEONUSE: Int
raw/SVGLinearGradientElement[JC] var accessKey: String
raw/SVGLinearGradientElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGLinearGradientElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGLinearGradientElement[JC] def appendChild(newChild: Node): Node
raw/SVGLinearGradientElement[JC] def attributes: NamedNodeMap
raw/SVGLinearGradientElement[JC] def childElementCount: Int
raw/SVGLinearGradientElement[JC] def childNodes: NodeList
raw/SVGLinearGradientElement[JC] def children: HTMLCollection
raw/SVGLinearGradientElement[JC] var classList: DOMTokenList
raw/SVGLinearGradientElement[JC] var className: SVGAnimatedString
raw/SVGLinearGradientElement[JC] def clientHeight: Int
raw/SVGLinearGradientElement[JC] def clientLeft: Int
raw/SVGLinearGradientElement[JC] def clientTop: Int
raw/SVGLinearGradientElement[JC] def clientWidth: Int
raw/SVGLinearGradientElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGLinearGradientElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGLinearGradientElement[JC] def contains(otherNode: Node): Boolean
raw/SVGLinearGradientElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGLinearGradientElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGLinearGradientElement[JC] def firstChild: Node
raw/SVGLinearGradientElement[JC] def firstElementChild: Element
raw/SVGLinearGradientElement[JC] def getAttribute(name: String): String
raw/SVGLinearGradientElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGLinearGradientElement[JC] def getAttributeNode(name: String): Attr
raw/SVGLinearGradientElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGLinearGradientElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGLinearGradientElement[JC] def getClientRects(): ClientRectList
raw/SVGLinearGradientElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGLinearGradientElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGLinearGradientElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGLinearGradientElement[JC] def gradientTransform: SVGAnimatedTransformList
raw/SVGLinearGradientElement[JC] def gradientUnits: SVGAnimatedEnumeration
raw/SVGLinearGradientElement[JC] def hasAttribute(name: String): Boolean
raw/SVGLinearGradientElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGLinearGradientElement[JC] def hasAttributes(): Boolean
raw/SVGLinearGradientElement[JC] def hasChildNodes(): Boolean
raw/SVGLinearGradientElement[JC] var href: SVGAnimatedString
raw/SVGLinearGradientElement[JC] var id: String
raw/SVGLinearGradientElement[JC] var innerHTML: String
raw/SVGLinearGradientElement[JC] var innerText: String
raw/SVGLinearGradientElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGLinearGradientElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGLinearGradientElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGLinearGradientElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGLinearGradientElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGLinearGradientElement[JC] def isSameNode(other: Node): Boolean
raw/SVGLinearGradientElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGLinearGradientElement[JC] def lastChild: Node
raw/SVGLinearGradientElement[JC] def lastElementChild: Element
raw/SVGLinearGradientElement[JC] def localName: String
raw/SVGLinearGradientElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGLinearGradientElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGLinearGradientElement[JC] def matches(selector: String): Boolean
raw/SVGLinearGradientElement[JC] def namespaceURI: String
raw/SVGLinearGradientElement[JC] def nextElementSibling: Element
raw/SVGLinearGradientElement[JC] def nextSibling: Node
raw/SVGLinearGradientElement[JC] def nodeName: String
raw/SVGLinearGradientElement[JC] def nodeType: Int
raw/SVGLinearGradientElement[JC] var nodeValue: String
raw/SVGLinearGradientElement[JC] def normalize(): Unit
raw/SVGLinearGradientElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGLinearGradientElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGLinearGradientElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGLinearGradientElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGLinearGradientElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGLinearGradientElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGLinearGradientElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGLinearGradientElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGLinearGradientElement[JC] var onload: js.Function1[Event, _]
raw/SVGLinearGradientElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGLinearGradientElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGLinearGradientElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGLinearGradientElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGLinearGradientElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGLinearGradientElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGLinearGradientElement[JC] var outerHTML: String
raw/SVGLinearGradientElement[JC] def ownerDocument: Document
raw/SVGLinearGradientElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGLinearGradientElement[JC] def parentNode: Node
raw/SVGLinearGradientElement[JC] def prefix: String
raw/SVGLinearGradientElement[JC] def previousElementSibling: Element
raw/SVGLinearGradientElement[JC] def previousSibling: Node
raw/SVGLinearGradientElement[JC] def querySelector(selectors: String): Element
raw/SVGLinearGradientElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGLinearGradientElement[JC] def removeAttribute(name: String): Unit
raw/SVGLinearGradientElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGLinearGradientElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGLinearGradientElement[JC] def removeChild(oldChild: Node): Node
raw/SVGLinearGradientElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGLinearGradientElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGLinearGradientElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGLinearGradientElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGLinearGradientElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGLinearGradientElement[JC] def scrollHeight: Int
raw/SVGLinearGradientElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGLinearGradientElement[JC] var scrollLeft: Double
raw/SVGLinearGradientElement[JC] var scrollTop: Double
raw/SVGLinearGradientElement[JC] def scrollWidth: Int
raw/SVGLinearGradientElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGLinearGradientElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGLinearGradientElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGLinearGradientElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGLinearGradientElement[JC] def spreadMethod: SVGAnimatedEnumeration
raw/SVGLinearGradientElement[JC] var style: CSSStyleDeclaration
raw/SVGLinearGradientElement[JC] def tagName: String
raw/SVGLinearGradientElement[JC] var textContent: String
raw/SVGLinearGradientElement[JC] def viewportElement: SVGElement
raw/SVGLinearGradientElement[JC] def x1: SVGAnimatedLength
raw/SVGLinearGradientElement[JC] def x2: SVGAnimatedLength
raw/SVGLinearGradientElement[JC] var xmlbase: String
raw/SVGLinearGradientElement[JC] def y1: SVGAnimatedLength
raw/SVGLinearGradientElement[JC] def y2: SVGAnimatedLength
raw/SVGLocatable[JT] var farthestViewportElement: SVGElement
raw/SVGLocatable[JT] def getBBox(): SVGRect
raw/SVGLocatable[JT] def getCTM(): SVGMatrix
raw/SVGLocatable[JT] def getScreenCTM(): SVGMatrix
raw/SVGLocatable[JT] def getTransformToElement(element: SVGElement): SVGMatrix
raw/SVGLocatable[JT] var nearestViewportElement: SVGElement
raw/SVGMarkerElement[JC] var accessKey: String
raw/SVGMarkerElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGMarkerElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGMarkerElement[JC] def appendChild(newChild: Node): Node
raw/SVGMarkerElement[JC] def attributes: NamedNodeMap
raw/SVGMarkerElement[JC] def childElementCount: Int
raw/SVGMarkerElement[JC] def childNodes: NodeList
raw/SVGMarkerElement[JC] def children: HTMLCollection
raw/SVGMarkerElement[JC] var classList: DOMTokenList
raw/SVGMarkerElement[JC] var className: SVGAnimatedString
raw/SVGMarkerElement[JC] def clientHeight: Int
raw/SVGMarkerElement[JC] def clientLeft: Int
raw/SVGMarkerElement[JC] def clientTop: Int
raw/SVGMarkerElement[JC] def clientWidth: Int
raw/SVGMarkerElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGMarkerElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGMarkerElement[JC] def contains(otherNode: Node): Boolean
raw/SVGMarkerElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGMarkerElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGMarkerElement[JC] def firstChild: Node
raw/SVGMarkerElement[JC] def firstElementChild: Element
raw/SVGMarkerElement[JC] def getAttribute(name: String): String
raw/SVGMarkerElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGMarkerElement[JC] def getAttributeNode(name: String): Attr
raw/SVGMarkerElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGMarkerElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGMarkerElement[JC] def getClientRects(): ClientRectList
raw/SVGMarkerElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGMarkerElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGMarkerElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGMarkerElement[JC] def hasAttribute(name: String): Boolean
raw/SVGMarkerElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGMarkerElement[JC] def hasAttributes(): Boolean
raw/SVGMarkerElement[JC] def hasChildNodes(): Boolean
raw/SVGMarkerElement[JC] var id: String
raw/SVGMarkerElement[JC] var innerHTML: String
raw/SVGMarkerElement[JC] var innerText: String
raw/SVGMarkerElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGMarkerElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGMarkerElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGMarkerElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGMarkerElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGMarkerElement[JC] def isSameNode(other: Node): Boolean
raw/SVGMarkerElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGMarkerElement[JC] def lastChild: Node
raw/SVGMarkerElement[JC] def lastElementChild: Element
raw/SVGMarkerElement[JC] def localName: String
raw/SVGMarkerElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGMarkerElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGMarkerElement[JC] def markerHeight: SVGAnimatedLength
raw/SVGMarkerElement[JC] var markerUnits: SVGAnimatedEnumeration
raw/SVGMarkerElement[JC] def markerWidth: SVGAnimatedLength
raw/SVGMarkerElement[JC] def matches(selector: String): Boolean
raw/SVGMarkerElement[JC] def namespaceURI: String
raw/SVGMarkerElement[JC] def nextElementSibling: Element
raw/SVGMarkerElement[JC] def nextSibling: Node
raw/SVGMarkerElement[JC] def nodeName: String
raw/SVGMarkerElement[JC] def nodeType: Int
raw/SVGMarkerElement[JC] var nodeValue: String
raw/SVGMarkerElement[JC] def normalize(): Unit
raw/SVGMarkerElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGMarkerElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGMarkerElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGMarkerElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGMarkerElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGMarkerElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGMarkerElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGMarkerElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGMarkerElement[JC] var onload: js.Function1[Event, _]
raw/SVGMarkerElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGMarkerElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGMarkerElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGMarkerElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGMarkerElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGMarkerElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGMarkerElement[JC] def orientAngle: SVGAnimatedAngle
raw/SVGMarkerElement[JC] var orientType: SVGAnimatedEnumeration
raw/SVGMarkerElement[JC] var outerHTML: String
raw/SVGMarkerElement[JC] def ownerDocument: Document
raw/SVGMarkerElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGMarkerElement[JC] def parentNode: Node
raw/SVGMarkerElement[JC] def prefix: String
raw/SVGMarkerElement[JC] var preserveAspectRatio: SVGAnimatedPreserveAspectRatio
raw/SVGMarkerElement[JC] def previousElementSibling: Element
raw/SVGMarkerElement[JC] def previousSibling: Node
raw/SVGMarkerElement[JC] def querySelector(selectors: String): Element
raw/SVGMarkerElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGMarkerElement[JC] def refX: SVGAnimatedLength
raw/SVGMarkerElement[JC] def refY: SVGAnimatedLength
raw/SVGMarkerElement[JC] def removeAttribute(name: String): Unit
raw/SVGMarkerElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGMarkerElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGMarkerElement[JC] def removeChild(oldChild: Node): Node
raw/SVGMarkerElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGMarkerElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGMarkerElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGMarkerElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGMarkerElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGMarkerElement[JC] def scrollHeight: Int
raw/SVGMarkerElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGMarkerElement[JC] var scrollLeft: Double
raw/SVGMarkerElement[JC] var scrollTop: Double
raw/SVGMarkerElement[JC] def scrollWidth: Int
raw/SVGMarkerElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGMarkerElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGMarkerElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGMarkerElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGMarkerElement[JC] def setOrientToAngle(angle: SVGAngle): Unit
raw/SVGMarkerElement[JC] def setOrientToAuto(): Unit
raw/SVGMarkerElement[JC] var style: CSSStyleDeclaration
raw/SVGMarkerElement[JC] def tagName: String
raw/SVGMarkerElement[JC] var textContent: String
raw/SVGMarkerElement[JC] var viewBox: SVGAnimatedRect
raw/SVGMarkerElement[JC] def viewportElement: SVGElement
raw/SVGMarkerElement[JC] var xmlbase: String
raw/SVGMarkerElement[JC] var xmllang: String
raw/SVGMarkerElement[JC] var xmlspace: String
raw/SVGMarkerElement[JO] val SVG_MARKERUNITS_STROKEWIDTH: Int
raw/SVGMarkerElement[JO] val SVG_MARKERUNITS_UNKNOWN: Int
raw/SVGMarkerElement[JO] val SVG_MARKERUNITS_USERSPACEONUSE: Int
raw/SVGMarkerElement[JO] val SVG_MARKER_ORIENT_ANGLE: Int
raw/SVGMarkerElement[JO] val SVG_MARKER_ORIENT_AUTO: Int
raw/SVGMarkerElement[JO] val SVG_MARKER_ORIENT_UNKNOWN: Int
raw/SVGMaskElement[JC] val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Int
raw/SVGMaskElement[JC] val SVG_UNIT_TYPE_UNKNOWN: Int
raw/SVGMaskElement[JC] val SVG_UNIT_TYPE_USERSPACEONUSE: Int
raw/SVGMaskElement[JC] var accessKey: String
raw/SVGMaskElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGMaskElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGMaskElement[JC] def appendChild(newChild: Node): Node
raw/SVGMaskElement[JC] def attributes: NamedNodeMap
raw/SVGMaskElement[JC] def childElementCount: Int
raw/SVGMaskElement[JC] def childNodes: NodeList
raw/SVGMaskElement[JC] def children: HTMLCollection
raw/SVGMaskElement[JC] var classList: DOMTokenList
raw/SVGMaskElement[JC] var className: SVGAnimatedString
raw/SVGMaskElement[JC] def clientHeight: Int
raw/SVGMaskElement[JC] def clientLeft: Int
raw/SVGMaskElement[JC] def clientTop: Int
raw/SVGMaskElement[JC] def clientWidth: Int
raw/SVGMaskElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGMaskElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGMaskElement[JC] def contains(otherNode: Node): Boolean
raw/SVGMaskElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGMaskElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGMaskElement[JC] def firstChild: Node
raw/SVGMaskElement[JC] def firstElementChild: Element
raw/SVGMaskElement[JC] def getAttribute(name: String): String
raw/SVGMaskElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGMaskElement[JC] def getAttributeNode(name: String): Attr
raw/SVGMaskElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGMaskElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGMaskElement[JC] def getClientRects(): ClientRectList
raw/SVGMaskElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGMaskElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGMaskElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGMaskElement[JC] def hasAttribute(name: String): Boolean
raw/SVGMaskElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGMaskElement[JC] def hasAttributes(): Boolean
raw/SVGMaskElement[JC] def hasChildNodes(): Boolean
raw/SVGMaskElement[JC] def hasExtension(extension: String): Boolean
raw/SVGMaskElement[JC] def height: SVGAnimatedLength
raw/SVGMaskElement[JC] var id: String
raw/SVGMaskElement[JC] var innerHTML: String
raw/SVGMaskElement[JC] var innerText: String
raw/SVGMaskElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGMaskElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGMaskElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGMaskElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGMaskElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGMaskElement[JC] def isSameNode(other: Node): Boolean
raw/SVGMaskElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGMaskElement[JC] def lastChild: Node
raw/SVGMaskElement[JC] def lastElementChild: Element
raw/SVGMaskElement[JC] def localName: String
raw/SVGMaskElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGMaskElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGMaskElement[JC] def maskContentUnits: SVGAnimatedEnumeration
raw/SVGMaskElement[JC] def maskUnits: SVGAnimatedEnumeration
raw/SVGMaskElement[JC] def matches(selector: String): Boolean
raw/SVGMaskElement[JC] def namespaceURI: String
raw/SVGMaskElement[JC] def nextElementSibling: Element
raw/SVGMaskElement[JC] def nextSibling: Node
raw/SVGMaskElement[JC] def nodeName: String
raw/SVGMaskElement[JC] def nodeType: Int
raw/SVGMaskElement[JC] var nodeValue: String
raw/SVGMaskElement[JC] def normalize(): Unit
raw/SVGMaskElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGMaskElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGMaskElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGMaskElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGMaskElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGMaskElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGMaskElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGMaskElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGMaskElement[JC] var onload: js.Function1[Event, _]
raw/SVGMaskElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGMaskElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGMaskElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGMaskElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGMaskElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGMaskElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGMaskElement[JC] var outerHTML: String
raw/SVGMaskElement[JC] def ownerDocument: Document
raw/SVGMaskElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGMaskElement[JC] def parentNode: Node
raw/SVGMaskElement[JC] def prefix: String
raw/SVGMaskElement[JC] def previousElementSibling: Element
raw/SVGMaskElement[JC] def previousSibling: Node
raw/SVGMaskElement[JC] def querySelector(selectors: String): Element
raw/SVGMaskElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGMaskElement[JC] def removeAttribute(name: String): Unit
raw/SVGMaskElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGMaskElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGMaskElement[JC] def removeChild(oldChild: Node): Node
raw/SVGMaskElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGMaskElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGMaskElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGMaskElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGMaskElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGMaskElement[JC] var requiredExtensions: SVGStringList
raw/SVGMaskElement[JC] var requiredFeatures: SVGStringList
raw/SVGMaskElement[JC] def scrollHeight: Int
raw/SVGMaskElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGMaskElement[JC] var scrollLeft: Double
raw/SVGMaskElement[JC] var scrollTop: Double
raw/SVGMaskElement[JC] def scrollWidth: Int
raw/SVGMaskElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGMaskElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGMaskElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGMaskElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGMaskElement[JC] var style: CSSStyleDeclaration
raw/SVGMaskElement[JC] var systemLanguage: SVGStringList
raw/SVGMaskElement[JC] def tagName: String
raw/SVGMaskElement[JC] var textContent: String
raw/SVGMaskElement[JC] def viewportElement: SVGElement
raw/SVGMaskElement[JC] def width: SVGAnimatedLength
raw/SVGMaskElement[JC] def x: SVGAnimatedLength
raw/SVGMaskElement[JC] var xmlbase: String
raw/SVGMaskElement[JC] var xmllang: String
raw/SVGMaskElement[JC] var xmlspace: String
raw/SVGMaskElement[JC] def y: SVGAnimatedLength
raw/SVGMatrix[JC] var a: Double
raw/SVGMatrix[JC] var b: Double
raw/SVGMatrix[JC] var c: Double
raw/SVGMatrix[JC] var d: Double
raw/SVGMatrix[JC] var e: Double
raw/SVGMatrix[JC] var f: Double
raw/SVGMatrix[JC] def flipX(): SVGMatrix
raw/SVGMatrix[JC] def flipY(): SVGMatrix
raw/SVGMatrix[JC] def inverse(): SVGMatrix
raw/SVGMatrix[JC] def multiply(secondMatrix: SVGMatrix): SVGMatrix
raw/SVGMatrix[JC] def rotate(angle: Double): SVGMatrix
raw/SVGMatrix[JC] def rotateFromVector(x: Double, y: Double): SVGMatrix
raw/SVGMatrix[JC] def scale(scaleFactor: Double): SVGMatrix
raw/SVGMatrix[JC] def scaleNonUniform(scaleFactorX: Double, scaleFactorY: Double): SVGMatrix
raw/SVGMatrix[JC] def skewX(angle: Double): SVGMatrix
raw/SVGMatrix[JC] def skewY(angle: Double): SVGMatrix
raw/SVGMatrix[JC] def translate(x: Double, y: Double): SVGMatrix
raw/SVGMetadataElement[JC] var accessKey: String
raw/SVGMetadataElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGMetadataElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGMetadataElement[JC] def appendChild(newChild: Node): Node
raw/SVGMetadataElement[JC] def attributes: NamedNodeMap
raw/SVGMetadataElement[JC] def childElementCount: Int
raw/SVGMetadataElement[JC] def childNodes: NodeList
raw/SVGMetadataElement[JC] def children: HTMLCollection
raw/SVGMetadataElement[JC] var classList: DOMTokenList
raw/SVGMetadataElement[JC] def clientHeight: Int
raw/SVGMetadataElement[JC] def clientLeft: Int
raw/SVGMetadataElement[JC] def clientTop: Int
raw/SVGMetadataElement[JC] def clientWidth: Int
raw/SVGMetadataElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGMetadataElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGMetadataElement[JC] def contains(otherNode: Node): Boolean
raw/SVGMetadataElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGMetadataElement[JC] def firstChild: Node
raw/SVGMetadataElement[JC] def firstElementChild: Element
raw/SVGMetadataElement[JC] def getAttribute(name: String): String
raw/SVGMetadataElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGMetadataElement[JC] def getAttributeNode(name: String): Attr
raw/SVGMetadataElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGMetadataElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGMetadataElement[JC] def getClientRects(): ClientRectList
raw/SVGMetadataElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGMetadataElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGMetadataElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGMetadataElement[JC] def hasAttribute(name: String): Boolean
raw/SVGMetadataElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGMetadataElement[JC] def hasAttributes(): Boolean
raw/SVGMetadataElement[JC] def hasChildNodes(): Boolean
raw/SVGMetadataElement[JC] var id: String
raw/SVGMetadataElement[JC] var innerHTML: String
raw/SVGMetadataElement[JC] var innerText: String
raw/SVGMetadataElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGMetadataElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGMetadataElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGMetadataElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGMetadataElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGMetadataElement[JC] def isSameNode(other: Node): Boolean
raw/SVGMetadataElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGMetadataElement[JC] def lastChild: Node
raw/SVGMetadataElement[JC] def lastElementChild: Element
raw/SVGMetadataElement[JC] def localName: String
raw/SVGMetadataElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGMetadataElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGMetadataElement[JC] def matches(selector: String): Boolean
raw/SVGMetadataElement[JC] def namespaceURI: String
raw/SVGMetadataElement[JC] def nextElementSibling: Element
raw/SVGMetadataElement[JC] def nextSibling: Node
raw/SVGMetadataElement[JC] def nodeName: String
raw/SVGMetadataElement[JC] def nodeType: Int
raw/SVGMetadataElement[JC] var nodeValue: String
raw/SVGMetadataElement[JC] def normalize(): Unit
raw/SVGMetadataElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGMetadataElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGMetadataElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGMetadataElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGMetadataElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGMetadataElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGMetadataElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGMetadataElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGMetadataElement[JC] var onload: js.Function1[Event, _]
raw/SVGMetadataElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGMetadataElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGMetadataElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGMetadataElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGMetadataElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGMetadataElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGMetadataElement[JC] var outerHTML: String
raw/SVGMetadataElement[JC] def ownerDocument: Document
raw/SVGMetadataElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGMetadataElement[JC] def parentNode: Node
raw/SVGMetadataElement[JC] def prefix: String
raw/SVGMetadataElement[JC] def previousElementSibling: Element
raw/SVGMetadataElement[JC] def previousSibling: Node
raw/SVGMetadataElement[JC] def querySelector(selectors: String): Element
raw/SVGMetadataElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGMetadataElement[JC] def removeAttribute(name: String): Unit
raw/SVGMetadataElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGMetadataElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGMetadataElement[JC] def removeChild(oldChild: Node): Node
raw/SVGMetadataElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGMetadataElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGMetadataElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGMetadataElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGMetadataElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGMetadataElement[JC] def scrollHeight: Int
raw/SVGMetadataElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGMetadataElement[JC] var scrollLeft: Double
raw/SVGMetadataElement[JC] var scrollTop: Double
raw/SVGMetadataElement[JC] def scrollWidth: Int
raw/SVGMetadataElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGMetadataElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGMetadataElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGMetadataElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGMetadataElement[JC] def tagName: String
raw/SVGMetadataElement[JC] var textContent: String
raw/SVGMetadataElement[JC] def viewportElement: SVGElement
raw/SVGMetadataElement[JC] var xmlbase: String
raw/SVGNumber[JC] var value: Double
raw/SVGNumberList[JC] def appendItem(newItem: SVGNumber): SVGNumber
raw/SVGNumberList[JC] def clear(): Unit
raw/SVGNumberList[JC] def getItem(index: Int): SVGNumber
raw/SVGNumberList[JC] def initialize(newItem: SVGNumber): SVGNumber
raw/SVGNumberList[JC] def insertItemBefore(newItem: SVGNumber, index: Int): SVGNumber
raw/SVGNumberList[JC] def numberOfItems: Int
raw/SVGNumberList[JC] def removeItem(index: Int): SVGNumber
raw/SVGNumberList[JC] def replaceItem(newItem: SVGNumber, index: Int): SVGNumber
raw/SVGPathElement[JC] var accessKey: String
raw/SVGPathElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGPathElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGPathElement[JC] def appendChild(newChild: Node): Node
raw/SVGPathElement[JC] def attributes: NamedNodeMap
raw/SVGPathElement[JC] def childElementCount: Int
raw/SVGPathElement[JC] def childNodes: NodeList
raw/SVGPathElement[JC] def children: HTMLCollection
raw/SVGPathElement[JC] var classList: DOMTokenList
raw/SVGPathElement[JC] var className: SVGAnimatedString
raw/SVGPathElement[JC] def clientHeight: Int
raw/SVGPathElement[JC] def clientLeft: Int
raw/SVGPathElement[JC] def clientTop: Int
raw/SVGPathElement[JC] def clientWidth: Int
raw/SVGPathElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGPathElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGPathElement[JC] def contains(otherNode: Node): Boolean
raw/SVGPathElement[JC] def createSVGPathSegArcAbs(x: Double, y: Double, r1: Double, r2: Double, angle: Double, largeArcFlag: Boolean, sweepFlag: Boolean): SVGPathSegArcAbs
raw/SVGPathElement[JC] def createSVGPathSegArcRel(x: Double, y: Double, r1: Double, r2: Double, angle: Double, largeArcFlag: Boolean, sweepFlag: Boolean): SVGPathSegArcRel
raw/SVGPathElement[JC] def createSVGPathSegClosePath(): SVGPathSegClosePath
raw/SVGPathElement[JC] def createSVGPathSegCurvetoCubicAbs(x: Double, y: Double, x1: Double, y1: Double, x2: Double, y2: Double): SVGPathSegCurvetoCubicAbs
raw/SVGPathElement[JC] def createSVGPathSegCurvetoCubicRel(x: Double, y: Double, x1: Double, y1: Double, x2: Double, y2: Double): SVGPathSegCurvetoCubicRel
raw/SVGPathElement[JC] def createSVGPathSegCurvetoCubicSmoothAbs(x: Double, y: Double, x2: Double, y2: Double): SVGPathSegCurvetoCubicSmoothAbs
raw/SVGPathElement[JC] def createSVGPathSegCurvetoCubicSmoothRel(x: Double, y: Double, x2: Double, y2: Double): SVGPathSegCurvetoCubicSmoothRel
raw/SVGPathElement[JC] def createSVGPathSegCurvetoQuadraticAbs(x: Double, y: Double, x1: Double, y1: Double): SVGPathSegCurvetoQuadraticAbs
raw/SVGPathElement[JC] def createSVGPathSegCurvetoQuadraticRel(x: Double, y: Double, x1: Double, y1: Double): SVGPathSegCurvetoQuadraticRel
raw/SVGPathElement[JC] def createSVGPathSegCurvetoQuadraticSmoothAbs(x: Double, y: Double): SVGPathSegCurvetoQuadraticSmoothAbs
raw/SVGPathElement[JC] def createSVGPathSegCurvetoQuadraticSmoothRel(x: Double, y: Double): SVGPathSegCurvetoQuadraticSmoothRel
raw/SVGPathElement[JC] def createSVGPathSegLinetoAbs(x: Double, y: Double): SVGPathSegLinetoAbs
raw/SVGPathElement[JC] def createSVGPathSegLinetoHorizontalAbs(x: Double): SVGPathSegLinetoHorizontalAbs
raw/SVGPathElement[JC] def createSVGPathSegLinetoHorizontalRel(x: Double): SVGPathSegLinetoHorizontalRel
raw/SVGPathElement[JC] def createSVGPathSegLinetoRel(x: Double, y: Double): SVGPathSegLinetoRel
raw/SVGPathElement[JC] def createSVGPathSegLinetoVerticalAbs(y: Double): SVGPathSegLinetoVerticalAbs
raw/SVGPathElement[JC] def createSVGPathSegLinetoVerticalRel(y: Double): SVGPathSegLinetoVerticalRel
raw/SVGPathElement[JC] def createSVGPathSegMovetoAbs(x: Double, y: Double): SVGPathSegMovetoAbs
raw/SVGPathElement[JC] def createSVGPathSegMovetoRel(x: Double, y: Double): SVGPathSegMovetoRel
raw/SVGPathElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGPathElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGPathElement[JC] var farthestViewportElement: SVGElement
raw/SVGPathElement[JC] def firstChild: Node
raw/SVGPathElement[JC] def firstElementChild: Element
raw/SVGPathElement[JC] def getAttribute(name: String): String
raw/SVGPathElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGPathElement[JC] def getAttributeNode(name: String): Attr
raw/SVGPathElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGPathElement[JC] def getBBox(): SVGRect
raw/SVGPathElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGPathElement[JC] def getCTM(): SVGMatrix
raw/SVGPathElement[JC] def getClientRects(): ClientRectList
raw/SVGPathElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGPathElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGPathElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGPathElement[JC] def getPathSegAtLength(distance: Double): Int
raw/SVGPathElement[JC] def getPointAtLength(distance: Double): SVGPoint
raw/SVGPathElement[JC] def getScreenCTM(): SVGMatrix
raw/SVGPathElement[JC] def getTotalLength(): Double
raw/SVGPathElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
raw/SVGPathElement[JC] def hasAttribute(name: String): Boolean
raw/SVGPathElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGPathElement[JC] def hasAttributes(): Boolean
raw/SVGPathElement[JC] def hasChildNodes(): Boolean
raw/SVGPathElement[JC] def hasExtension(extension: String): Boolean
raw/SVGPathElement[JC] var id: String
raw/SVGPathElement[JC] var innerHTML: String
raw/SVGPathElement[JC] var innerText: String
raw/SVGPathElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGPathElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGPathElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGPathElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGPathElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGPathElement[JC] def isSameNode(other: Node): Boolean
raw/SVGPathElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGPathElement[JC] def lastChild: Node
raw/SVGPathElement[JC] def lastElementChild: Element
raw/SVGPathElement[JC] def localName: String
raw/SVGPathElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGPathElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGPathElement[JC] def matches(selector: String): Boolean
raw/SVGPathElement[JC] def namespaceURI: String
raw/SVGPathElement[JC] var nearestViewportElement: SVGElement
raw/SVGPathElement[JC] def nextElementSibling: Element
raw/SVGPathElement[JC] def nextSibling: Node
raw/SVGPathElement[JC] def nodeName: String
raw/SVGPathElement[JC] def nodeType: Int
raw/SVGPathElement[JC] var nodeValue: String
raw/SVGPathElement[JC] def normalize(): Unit
raw/SVGPathElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGPathElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGPathElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGPathElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGPathElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGPathElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGPathElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGPathElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGPathElement[JC] var onload: js.Function1[Event, _]
raw/SVGPathElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGPathElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGPathElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGPathElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGPathElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGPathElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGPathElement[JC] var outerHTML: String
raw/SVGPathElement[JC] def ownerDocument: Document
raw/SVGPathElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGPathElement[JC] def parentNode: Node
raw/SVGPathElement[JC] var pathSegList: SVGPathSegList
raw/SVGPathElement[JC] def prefix: String
raw/SVGPathElement[JC] def previousElementSibling: Element
raw/SVGPathElement[JC] def previousSibling: Node
raw/SVGPathElement[JC] def querySelector(selectors: String): Element
raw/SVGPathElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGPathElement[JC] def removeAttribute(name: String): Unit
raw/SVGPathElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGPathElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGPathElement[JC] def removeChild(oldChild: Node): Node
raw/SVGPathElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGPathElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGPathElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGPathElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGPathElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGPathElement[JC] var requiredExtensions: SVGStringList
raw/SVGPathElement[JC] var requiredFeatures: SVGStringList
raw/SVGPathElement[JC] def scrollHeight: Int
raw/SVGPathElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGPathElement[JC] var scrollLeft: Double
raw/SVGPathElement[JC] var scrollTop: Double
raw/SVGPathElement[JC] def scrollWidth: Int
raw/SVGPathElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGPathElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGPathElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGPathElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGPathElement[JC] var style: CSSStyleDeclaration
raw/SVGPathElement[JC] var systemLanguage: SVGStringList
raw/SVGPathElement[JC] def tagName: String
raw/SVGPathElement[JC] var textContent: String
raw/SVGPathElement[JC] var transform: SVGAnimatedTransformList
raw/SVGPathElement[JC] def viewportElement: SVGElement
raw/SVGPathElement[JC] var xmlbase: String
raw/SVGPathElement[JC] var xmllang: String
raw/SVGPathElement[JC] var xmlspace: String
raw/SVGPathSeg[JC] def pathSegType: Int
raw/SVGPathSeg[JC] def pathSegTypeAsLetter: String
raw/SVGPathSeg[JO] val PATHSEG_ARC_ABS: Int
raw/SVGPathSeg[JO] val PATHSEG_ARC_REL: Int
raw/SVGPathSeg[JO] val PATHSEG_CLOSEPATH: Int
raw/SVGPathSeg[JO] val PATHSEG_CURVETO_CUBIC_ABS: Int
raw/SVGPathSeg[JO] val PATHSEG_CURVETO_CUBIC_REL: Int
raw/SVGPathSeg[JO] val PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: Int
raw/SVGPathSeg[JO] val PATHSEG_CURVETO_CUBIC_SMOOTH_REL: Int
raw/SVGPathSeg[JO] val PATHSEG_CURVETO_QUADRATIC_ABS: Int
raw/SVGPathSeg[JO] val PATHSEG_CURVETO_QUADRATIC_REL: Int
raw/SVGPathSeg[JO] val PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: Int
raw/SVGPathSeg[JO] val PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: Int
raw/SVGPathSeg[JO] val PATHSEG_LINETO_ABS: Int
raw/SVGPathSeg[JO] val PATHSEG_LINETO_HORIZONTAL_ABS: Int
raw/SVGPathSeg[JO] val PATHSEG_LINETO_HORIZONTAL_REL: Int
raw/SVGPathSeg[JO] val PATHSEG_LINETO_REL: Int
raw/SVGPathSeg[JO] val PATHSEG_LINETO_VERTICAL_ABS: Int
raw/SVGPathSeg[JO] val PATHSEG_LINETO_VERTICAL_REL: Int
raw/SVGPathSeg[JO] val PATHSEG_MOVETO_ABS: Int
raw/SVGPathSeg[JO] val PATHSEG_MOVETO_REL: Int
raw/SVGPathSeg[JO] val PATHSEG_UNKNOWN: Int
raw/SVGPathSegArcAbs[JC] var angle: Double
raw/SVGPathSegArcAbs[JC] var largeArcFlag: Boolean
raw/SVGPathSegArcAbs[JC] def pathSegType: Int
raw/SVGPathSegArcAbs[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegArcAbs[JC] var r1: Double
raw/SVGPathSegArcAbs[JC] var r2: Double
raw/SVGPathSegArcAbs[JC] var sweepFlag: Boolean
raw/SVGPathSegArcAbs[JC] var x: Double
raw/SVGPathSegArcAbs[JC] var y: Double
raw/SVGPathSegArcRel[JC] var angle: Double
raw/SVGPathSegArcRel[JC] var largeArcFlag: Boolean
raw/SVGPathSegArcRel[JC] def pathSegType: Int
raw/SVGPathSegArcRel[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegArcRel[JC] var r1: Double
raw/SVGPathSegArcRel[JC] var r2: Double
raw/SVGPathSegArcRel[JC] var sweepFlag: Boolean
raw/SVGPathSegArcRel[JC] var x: Double
raw/SVGPathSegArcRel[JC] var y: Double
raw/SVGPathSegClosePath[JC] def pathSegType: Int
raw/SVGPathSegClosePath[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegCurvetoCubicAbs[JC] def pathSegType: Int
raw/SVGPathSegCurvetoCubicAbs[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegCurvetoCubicAbs[JC] var x: Double
raw/SVGPathSegCurvetoCubicAbs[JC] var x1: Double
raw/SVGPathSegCurvetoCubicAbs[JC] var x2: Double
raw/SVGPathSegCurvetoCubicAbs[JC] var y: Double
raw/SVGPathSegCurvetoCubicAbs[JC] var y1: Double
raw/SVGPathSegCurvetoCubicAbs[JC] var y2: Double
raw/SVGPathSegCurvetoCubicRel[JC] def pathSegType: Int
raw/SVGPathSegCurvetoCubicRel[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegCurvetoCubicRel[JC] var x: Double
raw/SVGPathSegCurvetoCubicRel[JC] var x1: Double
raw/SVGPathSegCurvetoCubicRel[JC] var x2: Double
raw/SVGPathSegCurvetoCubicRel[JC] var y: Double
raw/SVGPathSegCurvetoCubicRel[JC] var y1: Double
raw/SVGPathSegCurvetoCubicRel[JC] var y2: Double
raw/SVGPathSegCurvetoCubicSmoothAbs[JC] def pathSegType: Int
raw/SVGPathSegCurvetoCubicSmoothAbs[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegCurvetoCubicSmoothAbs[JC] var x: Double
raw/SVGPathSegCurvetoCubicSmoothAbs[JC] var x2: Double
raw/SVGPathSegCurvetoCubicSmoothAbs[JC] var y: Double
raw/SVGPathSegCurvetoCubicSmoothAbs[JC] var y2: Double
raw/SVGPathSegCurvetoCubicSmoothRel[JC] def pathSegType: Int
raw/SVGPathSegCurvetoCubicSmoothRel[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegCurvetoCubicSmoothRel[JC] var x: Double
raw/SVGPathSegCurvetoCubicSmoothRel[JC] var x2: Double
raw/SVGPathSegCurvetoCubicSmoothRel[JC] var y: Double
raw/SVGPathSegCurvetoCubicSmoothRel[JC] var y2: Double
raw/SVGPathSegCurvetoQuadraticAbs[JC] def pathSegType: Int
raw/SVGPathSegCurvetoQuadraticAbs[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegCurvetoQuadraticAbs[JC] var x: Double
raw/SVGPathSegCurvetoQuadraticAbs[JC] var x1: Double
raw/SVGPathSegCurvetoQuadraticAbs[JC] var y: Double
raw/SVGPathSegCurvetoQuadraticAbs[JC] var y1: Double
raw/SVGPathSegCurvetoQuadraticRel[JC] def pathSegType: Int
raw/SVGPathSegCurvetoQuadraticRel[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegCurvetoQuadraticRel[JC] var x: Double
raw/SVGPathSegCurvetoQuadraticRel[JC] var x1: Double
raw/SVGPathSegCurvetoQuadraticRel[JC] var y: Double
raw/SVGPathSegCurvetoQuadraticRel[JC] var y1: Double
raw/SVGPathSegCurvetoQuadraticSmoothAbs[JC] def pathSegType: Int
raw/SVGPathSegCurvetoQuadraticSmoothAbs[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegCurvetoQuadraticSmoothAbs[JC] var x: Double
raw/SVGPathSegCurvetoQuadraticSmoothAbs[JC] var y: Double
raw/SVGPathSegCurvetoQuadraticSmoothRel[JC] def pathSegType: Int
raw/SVGPathSegCurvetoQuadraticSmoothRel[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegCurvetoQuadraticSmoothRel[JC] var x: Double
raw/SVGPathSegCurvetoQuadraticSmoothRel[JC] var y: Double
raw/SVGPathSegLinetoAbs[JC] def pathSegType: Int
raw/SVGPathSegLinetoAbs[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegLinetoAbs[JC] var x: Double
raw/SVGPathSegLinetoAbs[JC] var y: Double
raw/SVGPathSegLinetoHorizontalAbs[JC] def pathSegType: Int
raw/SVGPathSegLinetoHorizontalAbs[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegLinetoHorizontalAbs[JC] var x: Double
raw/SVGPathSegLinetoHorizontalRel[JC] def pathSegType: Int
raw/SVGPathSegLinetoHorizontalRel[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegLinetoHorizontalRel[JC] var x: Double
raw/SVGPathSegLinetoRel[JC] def pathSegType: Int
raw/SVGPathSegLinetoRel[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegLinetoRel[JC] var x: Double
raw/SVGPathSegLinetoRel[JC] var y: Double
raw/SVGPathSegLinetoVerticalAbs[JC] def pathSegType: Int
raw/SVGPathSegLinetoVerticalAbs[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegLinetoVerticalAbs[JC] var y: Double
raw/SVGPathSegLinetoVerticalRel[JC] def pathSegType: Int
raw/SVGPathSegLinetoVerticalRel[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegLinetoVerticalRel[JC] var y: Double
raw/SVGPathSegList[JC] def appendItem(newItem: SVGPathSeg): SVGPathSeg
raw/SVGPathSegList[JC] def clear(): Unit
raw/SVGPathSegList[JC] def getItem(index: Int): SVGPathSeg
raw/SVGPathSegList[JC] def initialize(newItem: SVGPathSeg): SVGPathSeg
raw/SVGPathSegList[JC] def insertItemBefore(newItem: SVGPathSeg, index: Int): SVGPathSeg
raw/SVGPathSegList[JC] def numberOfItems: Int
raw/SVGPathSegList[JC] def removeItem(index: Int): SVGPathSeg
raw/SVGPathSegList[JC] def replaceItem(newItem: SVGPathSeg, index: Int): SVGPathSeg
raw/SVGPathSegMovetoAbs[JC] def pathSegType: Int
raw/SVGPathSegMovetoAbs[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegMovetoAbs[JC] var x: Double
raw/SVGPathSegMovetoAbs[JC] var y: Double
raw/SVGPathSegMovetoRel[JC] def pathSegType: Int
raw/SVGPathSegMovetoRel[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegMovetoRel[JC] var x: Double
raw/SVGPathSegMovetoRel[JC] var y: Double
raw/SVGPatternElement[JC] val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Int
raw/SVGPatternElement[JC] val SVG_UNIT_TYPE_UNKNOWN: Int
raw/SVGPatternElement[JC] val SVG_UNIT_TYPE_USERSPACEONUSE: Int
raw/SVGPatternElement[JC] var accessKey: String
raw/SVGPatternElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGPatternElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGPatternElement[JC] def appendChild(newChild: Node): Node
raw/SVGPatternElement[JC] def attributes: NamedNodeMap
raw/SVGPatternElement[JC] def childElementCount: Int
raw/SVGPatternElement[JC] def childNodes: NodeList
raw/SVGPatternElement[JC] def children: HTMLCollection
raw/SVGPatternElement[JC] var classList: DOMTokenList
raw/SVGPatternElement[JC] var className: SVGAnimatedString
raw/SVGPatternElement[JC] def clientHeight: Int
raw/SVGPatternElement[JC] def clientLeft: Int
raw/SVGPatternElement[JC] def clientTop: Int
raw/SVGPatternElement[JC] def clientWidth: Int
raw/SVGPatternElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGPatternElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGPatternElement[JC] def contains(otherNode: Node): Boolean
raw/SVGPatternElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGPatternElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGPatternElement[JC] def firstChild: Node
raw/SVGPatternElement[JC] def firstElementChild: Element
raw/SVGPatternElement[JC] def getAttribute(name: String): String
raw/SVGPatternElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGPatternElement[JC] def getAttributeNode(name: String): Attr
raw/SVGPatternElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGPatternElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGPatternElement[JC] def getClientRects(): ClientRectList
raw/SVGPatternElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGPatternElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGPatternElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGPatternElement[JC] def hasAttribute(name: String): Boolean
raw/SVGPatternElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGPatternElement[JC] def hasAttributes(): Boolean
raw/SVGPatternElement[JC] def hasChildNodes(): Boolean
raw/SVGPatternElement[JC] def hasExtension(extension: String): Boolean
raw/SVGPatternElement[JC] def height: SVGAnimatedLength
raw/SVGPatternElement[JC] var href: SVGAnimatedString
raw/SVGPatternElement[JC] var id: String
raw/SVGPatternElement[JC] var innerHTML: String
raw/SVGPatternElement[JC] var innerText: String
raw/SVGPatternElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGPatternElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGPatternElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGPatternElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGPatternElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGPatternElement[JC] def isSameNode(other: Node): Boolean
raw/SVGPatternElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGPatternElement[JC] def lastChild: Node
raw/SVGPatternElement[JC] def lastElementChild: Element
raw/SVGPatternElement[JC] def localName: String
raw/SVGPatternElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGPatternElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGPatternElement[JC] def matches(selector: String): Boolean
raw/SVGPatternElement[JC] def namespaceURI: String
raw/SVGPatternElement[JC] def nextElementSibling: Element
raw/SVGPatternElement[JC] def nextSibling: Node
raw/SVGPatternElement[JC] def nodeName: String
raw/SVGPatternElement[JC] def nodeType: Int
raw/SVGPatternElement[JC] var nodeValue: String
raw/SVGPatternElement[JC] def normalize(): Unit
raw/SVGPatternElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGPatternElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGPatternElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGPatternElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGPatternElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGPatternElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGPatternElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGPatternElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGPatternElement[JC] var onload: js.Function1[Event, _]
raw/SVGPatternElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGPatternElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGPatternElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGPatternElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGPatternElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGPatternElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGPatternElement[JC] var outerHTML: String
raw/SVGPatternElement[JC] def ownerDocument: Document
raw/SVGPatternElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGPatternElement[JC] def parentNode: Node
raw/SVGPatternElement[JC] def patternContentUnits: SVGAnimatedEnumeration
raw/SVGPatternElement[JC] def patternTransform: SVGAnimatedTransformList
raw/SVGPatternElement[JC] def patternUnits: SVGAnimatedEnumeration
raw/SVGPatternElement[JC] def prefix: String
raw/SVGPatternElement[JC] var preserveAspectRatio: SVGAnimatedPreserveAspectRatio
raw/SVGPatternElement[JC] def previousElementSibling: Element
raw/SVGPatternElement[JC] def previousSibling: Node
raw/SVGPatternElement[JC] def querySelector(selectors: String): Element
raw/SVGPatternElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGPatternElement[JC] def removeAttribute(name: String): Unit
raw/SVGPatternElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGPatternElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGPatternElement[JC] def removeChild(oldChild: Node): Node
raw/SVGPatternElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGPatternElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGPatternElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGPatternElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGPatternElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGPatternElement[JC] var requiredExtensions: SVGStringList
raw/SVGPatternElement[JC] var requiredFeatures: SVGStringList
raw/SVGPatternElement[JC] def scrollHeight: Int
raw/SVGPatternElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGPatternElement[JC] var scrollLeft: Double
raw/SVGPatternElement[JC] var scrollTop: Double
raw/SVGPatternElement[JC] def scrollWidth: Int
raw/SVGPatternElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGPatternElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGPatternElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGPatternElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGPatternElement[JC] var style: CSSStyleDeclaration
raw/SVGPatternElement[JC] var systemLanguage: SVGStringList
raw/SVGPatternElement[JC] def tagName: String
raw/SVGPatternElement[JC] var textContent: String
raw/SVGPatternElement[JC] var viewBox: SVGAnimatedRect
raw/SVGPatternElement[JC] def viewportElement: SVGElement
raw/SVGPatternElement[JC] def width: SVGAnimatedLength
raw/SVGPatternElement[JC] def x: SVGAnimatedLength
raw/SVGPatternElement[JC] var xmlbase: String
raw/SVGPatternElement[JC] var xmllang: String
raw/SVGPatternElement[JC] var xmlspace: String
raw/SVGPatternElement[JC] def y: SVGAnimatedLength
raw/SVGPoint[JC] def matrixTransform(matrix: SVGMatrix): SVGPoint
raw/SVGPoint[JC] var x: Double
raw/SVGPoint[JC] var y: Double
raw/SVGPointList[JC] def appendItem(newItem: SVGPoint): SVGPoint
raw/SVGPointList[JC] def clear(): Unit
raw/SVGPointList[JC] def getItem(index: Int): SVGPoint
raw/SVGPointList[JC] def initialize(newItem: SVGPoint): SVGPoint
raw/SVGPointList[JC] def insertItemBefore(newItem: SVGPoint, index: Int): SVGPoint
raw/SVGPointList[JC] def numberOfItems: Int
raw/SVGPointList[JC] def removeItem(index: Int): SVGPoint
raw/SVGPointList[JC] def replaceItem(newItem: SVGPoint, index: Int): SVGPoint
raw/SVGPolygonElement[JC] var accessKey: String
raw/SVGPolygonElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGPolygonElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGPolygonElement[JC] def animatedPoints: SVGPointList
raw/SVGPolygonElement[JC] def appendChild(newChild: Node): Node
raw/SVGPolygonElement[JC] def attributes: NamedNodeMap
raw/SVGPolygonElement[JC] def childElementCount: Int
raw/SVGPolygonElement[JC] def childNodes: NodeList
raw/SVGPolygonElement[JC] def children: HTMLCollection
raw/SVGPolygonElement[JC] var classList: DOMTokenList
raw/SVGPolygonElement[JC] var className: SVGAnimatedString
raw/SVGPolygonElement[JC] def clientHeight: Int
raw/SVGPolygonElement[JC] def clientLeft: Int
raw/SVGPolygonElement[JC] def clientTop: Int
raw/SVGPolygonElement[JC] def clientWidth: Int
raw/SVGPolygonElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGPolygonElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGPolygonElement[JC] def contains(otherNode: Node): Boolean
raw/SVGPolygonElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGPolygonElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGPolygonElement[JC] var farthestViewportElement: SVGElement
raw/SVGPolygonElement[JC] def firstChild: Node
raw/SVGPolygonElement[JC] def firstElementChild: Element
raw/SVGPolygonElement[JC] def getAttribute(name: String): String
raw/SVGPolygonElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGPolygonElement[JC] def getAttributeNode(name: String): Attr
raw/SVGPolygonElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGPolygonElement[JC] def getBBox(): SVGRect
raw/SVGPolygonElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGPolygonElement[JC] def getCTM(): SVGMatrix
raw/SVGPolygonElement[JC] def getClientRects(): ClientRectList
raw/SVGPolygonElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGPolygonElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGPolygonElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGPolygonElement[JC] def getScreenCTM(): SVGMatrix
raw/SVGPolygonElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
raw/SVGPolygonElement[JC] def hasAttribute(name: String): Boolean
raw/SVGPolygonElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGPolygonElement[JC] def hasAttributes(): Boolean
raw/SVGPolygonElement[JC] def hasChildNodes(): Boolean
raw/SVGPolygonElement[JC] def hasExtension(extension: String): Boolean
raw/SVGPolygonElement[JC] var id: String
raw/SVGPolygonElement[JC] var innerHTML: String
raw/SVGPolygonElement[JC] var innerText: String
raw/SVGPolygonElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGPolygonElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGPolygonElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGPolygonElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGPolygonElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGPolygonElement[JC] def isSameNode(other: Node): Boolean
raw/SVGPolygonElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGPolygonElement[JC] def lastChild: Node
raw/SVGPolygonElement[JC] def lastElementChild: Element
raw/SVGPolygonElement[JC] def localName: String
raw/SVGPolygonElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGPolygonElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGPolygonElement[JC] def matches(selector: String): Boolean
raw/SVGPolygonElement[JC] def namespaceURI: String
raw/SVGPolygonElement[JC] var nearestViewportElement: SVGElement
raw/SVGPolygonElement[JC] def nextElementSibling: Element
raw/SVGPolygonElement[JC] def nextSibling: Node
raw/SVGPolygonElement[JC] def nodeName: String
raw/SVGPolygonElement[JC] def nodeType: Int
raw/SVGPolygonElement[JC] var nodeValue: String
raw/SVGPolygonElement[JC] def normalize(): Unit
raw/SVGPolygonElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGPolygonElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGPolygonElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGPolygonElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGPolygonElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGPolygonElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGPolygonElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGPolygonElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGPolygonElement[JC] var onload: js.Function1[Event, _]
raw/SVGPolygonElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGPolygonElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGPolygonElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGPolygonElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGPolygonElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGPolygonElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGPolygonElement[JC] var outerHTML: String
raw/SVGPolygonElement[JC] def ownerDocument: Document
raw/SVGPolygonElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGPolygonElement[JC] def parentNode: Node
raw/SVGPolygonElement[JC] var points: SVGPointList
raw/SVGPolygonElement[JC] def prefix: String
raw/SVGPolygonElement[JC] def previousElementSibling: Element
raw/SVGPolygonElement[JC] def previousSibling: Node
raw/SVGPolygonElement[JC] def querySelector(selectors: String): Element
raw/SVGPolygonElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGPolygonElement[JC] def removeAttribute(name: String): Unit
raw/SVGPolygonElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGPolygonElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGPolygonElement[JC] def removeChild(oldChild: Node): Node
raw/SVGPolygonElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGPolygonElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGPolygonElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGPolygonElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGPolygonElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGPolygonElement[JC] var requiredExtensions: SVGStringList
raw/SVGPolygonElement[JC] var requiredFeatures: SVGStringList
raw/SVGPolygonElement[JC] def scrollHeight: Int
raw/SVGPolygonElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGPolygonElement[JC] var scrollLeft: Double
raw/SVGPolygonElement[JC] var scrollTop: Double
raw/SVGPolygonElement[JC] def scrollWidth: Int
raw/SVGPolygonElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGPolygonElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGPolygonElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGPolygonElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGPolygonElement[JC] var style: CSSStyleDeclaration
raw/SVGPolygonElement[JC] var systemLanguage: SVGStringList
raw/SVGPolygonElement[JC] def tagName: String
raw/SVGPolygonElement[JC] var textContent: String
raw/SVGPolygonElement[JC] var transform: SVGAnimatedTransformList
raw/SVGPolygonElement[JC] def viewportElement: SVGElement
raw/SVGPolygonElement[JC] var xmlbase: String
raw/SVGPolygonElement[JC] var xmllang: String
raw/SVGPolygonElement[JC] var xmlspace: String
raw/SVGPolylineElement[JC] var accessKey: String
raw/SVGPolylineElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGPolylineElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGPolylineElement[JC] def animatedPoints: SVGPointList
raw/SVGPolylineElement[JC] def appendChild(newChild: Node): Node
raw/SVGPolylineElement[JC] def attributes: NamedNodeMap
raw/SVGPolylineElement[JC] def childElementCount: Int
raw/SVGPolylineElement[JC] def childNodes: NodeList
raw/SVGPolylineElement[JC] def children: HTMLCollection
raw/SVGPolylineElement[JC] var classList: DOMTokenList
raw/SVGPolylineElement[JC] var className: SVGAnimatedString
raw/SVGPolylineElement[JC] def clientHeight: Int
raw/SVGPolylineElement[JC] def clientLeft: Int
raw/SVGPolylineElement[JC] def clientTop: Int
raw/SVGPolylineElement[JC] def clientWidth: Int
raw/SVGPolylineElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGPolylineElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGPolylineElement[JC] def contains(otherNode: Node): Boolean
raw/SVGPolylineElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGPolylineElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGPolylineElement[JC] var farthestViewportElement: SVGElement
raw/SVGPolylineElement[JC] def firstChild: Node
raw/SVGPolylineElement[JC] def firstElementChild: Element
raw/SVGPolylineElement[JC] def getAttribute(name: String): String
raw/SVGPolylineElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGPolylineElement[JC] def getAttributeNode(name: String): Attr
raw/SVGPolylineElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGPolylineElement[JC] def getBBox(): SVGRect
raw/SVGPolylineElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGPolylineElement[JC] def getCTM(): SVGMatrix
raw/SVGPolylineElement[JC] def getClientRects(): ClientRectList
raw/SVGPolylineElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGPolylineElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGPolylineElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGPolylineElement[JC] def getScreenCTM(): SVGMatrix
raw/SVGPolylineElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
raw/SVGPolylineElement[JC] def hasAttribute(name: String): Boolean
raw/SVGPolylineElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGPolylineElement[JC] def hasAttributes(): Boolean
raw/SVGPolylineElement[JC] def hasChildNodes(): Boolean
raw/SVGPolylineElement[JC] def hasExtension(extension: String): Boolean
raw/SVGPolylineElement[JC] var id: String
raw/SVGPolylineElement[JC] var innerHTML: String
raw/SVGPolylineElement[JC] var innerText: String
raw/SVGPolylineElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGPolylineElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGPolylineElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGPolylineElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGPolylineElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGPolylineElement[JC] def isSameNode(other: Node): Boolean
raw/SVGPolylineElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGPolylineElement[JC] def lastChild: Node
raw/SVGPolylineElement[JC] def lastElementChild: Element
raw/SVGPolylineElement[JC] def localName: String
raw/SVGPolylineElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGPolylineElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGPolylineElement[JC] def matches(selector: String): Boolean
raw/SVGPolylineElement[JC] def namespaceURI: String
raw/SVGPolylineElement[JC] var nearestViewportElement: SVGElement
raw/SVGPolylineElement[JC] def nextElementSibling: Element
raw/SVGPolylineElement[JC] def nextSibling: Node
raw/SVGPolylineElement[JC] def nodeName: String
raw/SVGPolylineElement[JC] def nodeType: Int
raw/SVGPolylineElement[JC] var nodeValue: String
raw/SVGPolylineElement[JC] def normalize(): Unit
raw/SVGPolylineElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGPolylineElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGPolylineElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGPolylineElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGPolylineElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGPolylineElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGPolylineElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGPolylineElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGPolylineElement[JC] var onload: js.Function1[Event, _]
raw/SVGPolylineElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGPolylineElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGPolylineElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGPolylineElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGPolylineElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGPolylineElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGPolylineElement[JC] var outerHTML: String
raw/SVGPolylineElement[JC] def ownerDocument: Document
raw/SVGPolylineElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGPolylineElement[JC] def parentNode: Node
raw/SVGPolylineElement[JC] var points: SVGPointList
raw/SVGPolylineElement[JC] def prefix: String
raw/SVGPolylineElement[JC] def previousElementSibling: Element
raw/SVGPolylineElement[JC] def previousSibling: Node
raw/SVGPolylineElement[JC] def querySelector(selectors: String): Element
raw/SVGPolylineElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGPolylineElement[JC] def removeAttribute(name: String): Unit
raw/SVGPolylineElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGPolylineElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGPolylineElement[JC] def removeChild(oldChild: Node): Node
raw/SVGPolylineElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGPolylineElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGPolylineElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGPolylineElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGPolylineElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGPolylineElement[JC] var requiredExtensions: SVGStringList
raw/SVGPolylineElement[JC] var requiredFeatures: SVGStringList
raw/SVGPolylineElement[JC] def scrollHeight: Int
raw/SVGPolylineElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGPolylineElement[JC] var scrollLeft: Double
raw/SVGPolylineElement[JC] var scrollTop: Double
raw/SVGPolylineElement[JC] def scrollWidth: Int
raw/SVGPolylineElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGPolylineElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGPolylineElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGPolylineElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGPolylineElement[JC] var style: CSSStyleDeclaration
raw/SVGPolylineElement[JC] var systemLanguage: SVGStringList
raw/SVGPolylineElement[JC] def tagName: String
raw/SVGPolylineElement[JC] var textContent: String
raw/SVGPolylineElement[JC] var transform: SVGAnimatedTransformList
raw/SVGPolylineElement[JC] def viewportElement: SVGElement
raw/SVGPolylineElement[JC] var xmlbase: String
raw/SVGPolylineElement[JC] var xmllang: String
raw/SVGPolylineElement[JC] var xmlspace: String
raw/SVGPreserveAspectRatio[JC] var align: Int
raw/SVGPreserveAspectRatio[JC] var meetOrSlice: Int
raw/SVGPreserveAspectRatio[JO] val SVG_MEETORSLICE_MEET: Int
raw/SVGPreserveAspectRatio[JO] val SVG_MEETORSLICE_SLICE: Int
raw/SVGPreserveAspectRatio[JO] val SVG_MEETORSLICE_UNKNOWN: Int
raw/SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_NONE: Int
raw/SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_UNKNOWN: Int
raw/SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_XMAXYMAX: Int
raw/SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_XMAXYMID: Int
raw/SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_XMAXYMIN: Int
raw/SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_XMIDYMAX: Int
raw/SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_XMIDYMID: Int
raw/SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_XMIDYMIN: Int
raw/SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_XMINYMAX: Int
raw/SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_XMINYMID: Int
raw/SVGPreserveAspectRatio[JO] val SVG_PRESERVEASPECTRATIO_XMINYMIN: Int
raw/SVGRadialGradientElement[JC] val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Int
raw/SVGRadialGradientElement[JC] val SVG_UNIT_TYPE_UNKNOWN: Int
raw/SVGRadialGradientElement[JC] val SVG_UNIT_TYPE_USERSPACEONUSE: Int
raw/SVGRadialGradientElement[JC] var accessKey: String
raw/SVGRadialGradientElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGRadialGradientElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGRadialGradientElement[JC] def appendChild(newChild: Node): Node
raw/SVGRadialGradientElement[JC] def attributes: NamedNodeMap
raw/SVGRadialGradientElement[JC] def childElementCount: Int
raw/SVGRadialGradientElement[JC] def childNodes: NodeList
raw/SVGRadialGradientElement[JC] def children: HTMLCollection
raw/SVGRadialGradientElement[JC] var classList: DOMTokenList
raw/SVGRadialGradientElement[JC] var className: SVGAnimatedString
raw/SVGRadialGradientElement[JC] def clientHeight: Int
raw/SVGRadialGradientElement[JC] def clientLeft: Int
raw/SVGRadialGradientElement[JC] def clientTop: Int
raw/SVGRadialGradientElement[JC] def clientWidth: Int
raw/SVGRadialGradientElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGRadialGradientElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGRadialGradientElement[JC] def contains(otherNode: Node): Boolean
raw/SVGRadialGradientElement[JC] def cx: SVGAnimatedLength
raw/SVGRadialGradientElement[JC] def cy: SVGAnimatedLength
raw/SVGRadialGradientElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGRadialGradientElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGRadialGradientElement[JC] def firstChild: Node
raw/SVGRadialGradientElement[JC] def firstElementChild: Element
raw/SVGRadialGradientElement[JC] def fx: SVGAnimatedLength
raw/SVGRadialGradientElement[JC] def fy: SVGAnimatedLength
raw/SVGRadialGradientElement[JC] def getAttribute(name: String): String
raw/SVGRadialGradientElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGRadialGradientElement[JC] def getAttributeNode(name: String): Attr
raw/SVGRadialGradientElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGRadialGradientElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGRadialGradientElement[JC] def getClientRects(): ClientRectList
raw/SVGRadialGradientElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGRadialGradientElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGRadialGradientElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGRadialGradientElement[JC] def gradientTransform: SVGAnimatedTransformList
raw/SVGRadialGradientElement[JC] def gradientUnits: SVGAnimatedEnumeration
raw/SVGRadialGradientElement[JC] def hasAttribute(name: String): Boolean
raw/SVGRadialGradientElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGRadialGradientElement[JC] def hasAttributes(): Boolean
raw/SVGRadialGradientElement[JC] def hasChildNodes(): Boolean
raw/SVGRadialGradientElement[JC] var href: SVGAnimatedString
raw/SVGRadialGradientElement[JC] var id: String
raw/SVGRadialGradientElement[JC] var innerHTML: String
raw/SVGRadialGradientElement[JC] var innerText: String
raw/SVGRadialGradientElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGRadialGradientElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGRadialGradientElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGRadialGradientElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGRadialGradientElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGRadialGradientElement[JC] def isSameNode(other: Node): Boolean
raw/SVGRadialGradientElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGRadialGradientElement[JC] def lastChild: Node
raw/SVGRadialGradientElement[JC] def lastElementChild: Element
raw/SVGRadialGradientElement[JC] def localName: String
raw/SVGRadialGradientElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGRadialGradientElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGRadialGradientElement[JC] def matches(selector: String): Boolean
raw/SVGRadialGradientElement[JC] def namespaceURI: String
raw/SVGRadialGradientElement[JC] def nextElementSibling: Element
raw/SVGRadialGradientElement[JC] def nextSibling: Node
raw/SVGRadialGradientElement[JC] def nodeName: String
raw/SVGRadialGradientElement[JC] def nodeType: Int
raw/SVGRadialGradientElement[JC] var nodeValue: String
raw/SVGRadialGradientElement[JC] def normalize(): Unit
raw/SVGRadialGradientElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGRadialGradientElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGRadialGradientElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGRadialGradientElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGRadialGradientElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGRadialGradientElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGRadialGradientElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGRadialGradientElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGRadialGradientElement[JC] var onload: js.Function1[Event, _]
raw/SVGRadialGradientElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGRadialGradientElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGRadialGradientElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGRadialGradientElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGRadialGradientElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGRadialGradientElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGRadialGradientElement[JC] var outerHTML: String
raw/SVGRadialGradientElement[JC] def ownerDocument: Document
raw/SVGRadialGradientElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGRadialGradientElement[JC] def parentNode: Node
raw/SVGRadialGradientElement[JC] def prefix: String
raw/SVGRadialGradientElement[JC] def previousElementSibling: Element
raw/SVGRadialGradientElement[JC] def previousSibling: Node
raw/SVGRadialGradientElement[JC] def querySelector(selectors: String): Element
raw/SVGRadialGradientElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGRadialGradientElement[JC] def r: SVGAnimatedLength
raw/SVGRadialGradientElement[JC] def removeAttribute(name: String): Unit
raw/SVGRadialGradientElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGRadialGradientElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGRadialGradientElement[JC] def removeChild(oldChild: Node): Node
raw/SVGRadialGradientElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGRadialGradientElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGRadialGradientElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGRadialGradientElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGRadialGradientElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGRadialGradientElement[JC] def scrollHeight: Int
raw/SVGRadialGradientElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGRadialGradientElement[JC] var scrollLeft: Double
raw/SVGRadialGradientElement[JC] var scrollTop: Double
raw/SVGRadialGradientElement[JC] def scrollWidth: Int
raw/SVGRadialGradientElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGRadialGradientElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGRadialGradientElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGRadialGradientElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGRadialGradientElement[JC] def spreadMethod: SVGAnimatedEnumeration
raw/SVGRadialGradientElement[JC] var style: CSSStyleDeclaration
raw/SVGRadialGradientElement[JC] def tagName: String
raw/SVGRadialGradientElement[JC] var textContent: String
raw/SVGRadialGradientElement[JC] def viewportElement: SVGElement
raw/SVGRadialGradientElement[JC] var xmlbase: String
raw/SVGRect[JC] var height: Double
raw/SVGRect[JC] var width: Double
raw/SVGRect[JC] var x: Double
raw/SVGRect[JC] var y: Double
raw/SVGRectElement[JC] var accessKey: String
raw/SVGRectElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGRectElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGRectElement[JC] def appendChild(newChild: Node): Node
raw/SVGRectElement[JC] def attributes: NamedNodeMap
raw/SVGRectElement[JC] def childElementCount: Int
raw/SVGRectElement[JC] def childNodes: NodeList
raw/SVGRectElement[JC] def children: HTMLCollection
raw/SVGRectElement[JC] var classList: DOMTokenList
raw/SVGRectElement[JC] var className: SVGAnimatedString
raw/SVGRectElement[JC] def clientHeight: Int
raw/SVGRectElement[JC] def clientLeft: Int
raw/SVGRectElement[JC] def clientTop: Int
raw/SVGRectElement[JC] def clientWidth: Int
raw/SVGRectElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGRectElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGRectElement[JC] def contains(otherNode: Node): Boolean
raw/SVGRectElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGRectElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGRectElement[JC] var farthestViewportElement: SVGElement
raw/SVGRectElement[JC] def firstChild: Node
raw/SVGRectElement[JC] def firstElementChild: Element
raw/SVGRectElement[JC] def getAttribute(name: String): String
raw/SVGRectElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGRectElement[JC] def getAttributeNode(name: String): Attr
raw/SVGRectElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGRectElement[JC] def getBBox(): SVGRect
raw/SVGRectElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGRectElement[JC] def getCTM(): SVGMatrix
raw/SVGRectElement[JC] def getClientRects(): ClientRectList
raw/SVGRectElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGRectElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGRectElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGRectElement[JC] def getScreenCTM(): SVGMatrix
raw/SVGRectElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
raw/SVGRectElement[JC] def hasAttribute(name: String): Boolean
raw/SVGRectElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGRectElement[JC] def hasAttributes(): Boolean
raw/SVGRectElement[JC] def hasChildNodes(): Boolean
raw/SVGRectElement[JC] def hasExtension(extension: String): Boolean
raw/SVGRectElement[JC] def height: SVGAnimatedLength
raw/SVGRectElement[JC] var id: String
raw/SVGRectElement[JC] var innerHTML: String
raw/SVGRectElement[JC] var innerText: String
raw/SVGRectElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGRectElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGRectElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGRectElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGRectElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGRectElement[JC] def isSameNode(other: Node): Boolean
raw/SVGRectElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGRectElement[JC] def lastChild: Node
raw/SVGRectElement[JC] def lastElementChild: Element
raw/SVGRectElement[JC] def localName: String
raw/SVGRectElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGRectElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGRectElement[JC] def matches(selector: String): Boolean
raw/SVGRectElement[JC] def namespaceURI: String
raw/SVGRectElement[JC] var nearestViewportElement: SVGElement
raw/SVGRectElement[JC] def nextElementSibling: Element
raw/SVGRectElement[JC] def nextSibling: Node
raw/SVGRectElement[JC] def nodeName: String
raw/SVGRectElement[JC] def nodeType: Int
raw/SVGRectElement[JC] var nodeValue: String
raw/SVGRectElement[JC] def normalize(): Unit
raw/SVGRectElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGRectElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGRectElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGRectElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGRectElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGRectElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGRectElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGRectElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGRectElement[JC] var onload: js.Function1[Event, _]
raw/SVGRectElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGRectElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGRectElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGRectElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGRectElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGRectElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGRectElement[JC] var outerHTML: String
raw/SVGRectElement[JC] def ownerDocument: Document
raw/SVGRectElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGRectElement[JC] def parentNode: Node
raw/SVGRectElement[JC] def prefix: String
raw/SVGRectElement[JC] def previousElementSibling: Element
raw/SVGRectElement[JC] def previousSibling: Node
raw/SVGRectElement[JC] def querySelector(selectors: String): Element
raw/SVGRectElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGRectElement[JC] def removeAttribute(name: String): Unit
raw/SVGRectElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGRectElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGRectElement[JC] def removeChild(oldChild: Node): Node
raw/SVGRectElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGRectElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGRectElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGRectElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGRectElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGRectElement[JC] var requiredExtensions: SVGStringList
raw/SVGRectElement[JC] var requiredFeatures: SVGStringList
raw/SVGRectElement[JC] def rx: SVGAnimatedLength
raw/SVGRectElement[JC] def ry: SVGAnimatedLength
raw/SVGRectElement[JC] def scrollHeight: Int
raw/SVGRectElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGRectElement[JC] var scrollLeft: Double
raw/SVGRectElement[JC] var scrollTop: Double
raw/SVGRectElement[JC] def scrollWidth: Int
raw/SVGRectElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGRectElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGRectElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGRectElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGRectElement[JC] var style: CSSStyleDeclaration
raw/SVGRectElement[JC] var systemLanguage: SVGStringList
raw/SVGRectElement[JC] def tagName: String
raw/SVGRectElement[JC] var textContent: String
raw/SVGRectElement[JC] var transform: SVGAnimatedTransformList
raw/SVGRectElement[JC] def viewportElement: SVGElement
raw/SVGRectElement[JC] def width: SVGAnimatedLength
raw/SVGRectElement[JC] def x: SVGAnimatedLength
raw/SVGRectElement[JC] var xmlbase: String
raw/SVGRectElement[JC] var xmllang: String
raw/SVGRectElement[JC] var xmlspace: String
raw/SVGRectElement[JC] def y: SVGAnimatedLength
raw/SVGSVGElement[JC] var accessKey: String
raw/SVGSVGElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGSVGElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGSVGElement[JC] def appendChild(newChild: Node): Node
raw/SVGSVGElement[JC] def attributes: NamedNodeMap
raw/SVGSVGElement[JC] def checkEnclosure(element: SVGElement, rect: SVGRect): Boolean
raw/SVGSVGElement[JC] def checkIntersection(element: SVGElement, rect: SVGRect): Boolean
raw/SVGSVGElement[JC] def childElementCount: Int
raw/SVGSVGElement[JC] def childNodes: NodeList
raw/SVGSVGElement[JC] def children: HTMLCollection
raw/SVGSVGElement[JC] var classList: DOMTokenList
raw/SVGSVGElement[JC] var className: SVGAnimatedString
raw/SVGSVGElement[JC] def clientHeight: Int
raw/SVGSVGElement[JC] def clientLeft: Int
raw/SVGSVGElement[JC] def clientTop: Int
raw/SVGSVGElement[JC] def clientWidth: Int
raw/SVGSVGElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGSVGElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGSVGElement[JC] def contains(otherNode: Node): Boolean
raw/SVGSVGElement[JC] var contentScriptType: String
raw/SVGSVGElement[JC] var contentStyleType: String
raw/SVGSVGElement[JC] def createEvent(eventInterface: String): Event
raw/SVGSVGElement[JC] def createSVGAngle(): SVGAngle
raw/SVGSVGElement[JC] def createSVGLength(): SVGLength
raw/SVGSVGElement[JC] def createSVGMatrix(): SVGMatrix
raw/SVGSVGElement[JC] def createSVGNumber(): SVGNumber
raw/SVGSVGElement[JC] def createSVGPoint(): SVGPoint
raw/SVGSVGElement[JC] def createSVGRect(): SVGRect
raw/SVGSVGElement[JC] def createSVGTransform(): SVGTransform
raw/SVGSVGElement[JC] def createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform
raw/SVGSVGElement[JC] def currentScale: Double
raw/SVGSVGElement[JC] def currentTranslate: SVGPoint
raw/SVGSVGElement[JC] def deselectAll(): Unit
raw/SVGSVGElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGSVGElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGSVGElement[JC] var farthestViewportElement: SVGElement
raw/SVGSVGElement[JC] def firstChild: Node
raw/SVGSVGElement[JC] def firstElementChild: Element
raw/SVGSVGElement[JC] def forceRedraw(): Unit
raw/SVGSVGElement[JC] def getAttribute(name: String): String
raw/SVGSVGElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGSVGElement[JC] def getAttributeNode(name: String): Attr
raw/SVGSVGElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGSVGElement[JC] def getBBox(): SVGRect
raw/SVGSVGElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGSVGElement[JC] def getCTM(): SVGMatrix
raw/SVGSVGElement[JC] def getClientRects(): ClientRectList
raw/SVGSVGElement[JC] def getComputedStyle(elt: Element, pseudoElt: String?): CSSStyleDeclaration
raw/SVGSVGElement[JC] def getCurrentTime(): Int
raw/SVGSVGElement[JC] def getElementById(elementId: String): Element
raw/SVGSVGElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGSVGElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGSVGElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGSVGElement[JC] def getEnclosureList(rect: SVGRect, referenceElement: SVGElement): NodeList
raw/SVGSVGElement[JC] def getIntersectionList(rect: SVGRect, referenceElement: SVGElement): NodeList
raw/SVGSVGElement[JC] def getScreenCTM(): SVGMatrix
raw/SVGSVGElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
raw/SVGSVGElement[JC] def hasAttribute(name: String): Boolean
raw/SVGSVGElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGSVGElement[JC] def hasAttributes(): Boolean
raw/SVGSVGElement[JC] def hasChildNodes(): Boolean
raw/SVGSVGElement[JC] def hasExtension(extension: String): Boolean
raw/SVGSVGElement[JC] def height: SVGAnimatedLength
raw/SVGSVGElement[JC] var id: String
raw/SVGSVGElement[JC] var innerHTML: String
raw/SVGSVGElement[JC] var innerText: String
raw/SVGSVGElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGSVGElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGSVGElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGSVGElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGSVGElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGSVGElement[JC] def isSameNode(other: Node): Boolean
raw/SVGSVGElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGSVGElement[JC] def lastChild: Node
raw/SVGSVGElement[JC] def lastElementChild: Element
raw/SVGSVGElement[JC] def localName: String
raw/SVGSVGElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGSVGElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGSVGElement[JC] def matches(selector: String): Boolean
raw/SVGSVGElement[JC] def namespaceURI: String
raw/SVGSVGElement[JC] var nearestViewportElement: SVGElement
raw/SVGSVGElement[JC] def nextElementSibling: Element
raw/SVGSVGElement[JC] def nextSibling: Node
raw/SVGSVGElement[JC] def nodeName: String
raw/SVGSVGElement[JC] def nodeType: Int
raw/SVGSVGElement[JC] var nodeValue: String
raw/SVGSVGElement[JC] def normalize(): Unit
raw/SVGSVGElement[JC] var onabort: js.Function1[UIEvent, _]
raw/SVGSVGElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGSVGElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGSVGElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGSVGElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGSVGElement[JC] var onerror: js.Function1[Event, _]
raw/SVGSVGElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGSVGElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGSVGElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGSVGElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGSVGElement[JC] var onload: js.Function1[Event, _]
raw/SVGSVGElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGSVGElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGSVGElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGSVGElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGSVGElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGSVGElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGSVGElement[JC] var onresize: js.Function1[UIEvent, _]
raw/SVGSVGElement[JC] var onscroll: js.Function1[UIEvent, _]
raw/SVGSVGElement[JC] var onunload: js.Function1[Event, _]
raw/SVGSVGElement[JC] var onzoom: js.Function1[js.Any, _]
raw/SVGSVGElement[JC] var outerHTML: String
raw/SVGSVGElement[JC] def ownerDocument: Document
raw/SVGSVGElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGSVGElement[JC] def parentNode: Node
raw/SVGSVGElement[JC] def pauseAnimations(): Unit
raw/SVGSVGElement[JC] def pixelUnitToMillimeterX: Double
raw/SVGSVGElement[JC] def pixelUnitToMillimeterY: Double
raw/SVGSVGElement[JC] def prefix: String
raw/SVGSVGElement[JC] var preserveAspectRatio: SVGAnimatedPreserveAspectRatio
raw/SVGSVGElement[JC] def previousElementSibling: Element
raw/SVGSVGElement[JC] def previousSibling: Node
raw/SVGSVGElement[JC] def querySelector(selectors: String): Element
raw/SVGSVGElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGSVGElement[JC] def removeAttribute(name: String): Unit
raw/SVGSVGElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGSVGElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGSVGElement[JC] def removeChild(oldChild: Node): Node
raw/SVGSVGElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGSVGElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGSVGElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGSVGElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGSVGElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGSVGElement[JC] var requiredExtensions: SVGStringList
raw/SVGSVGElement[JC] var requiredFeatures: SVGStringList
raw/SVGSVGElement[JC] def screenPixelToMillimeterX: Double
raw/SVGSVGElement[JC] def screenPixelToMillimeterY: Double
raw/SVGSVGElement[JC] def scrollHeight: Int
raw/SVGSVGElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGSVGElement[JC] var scrollLeft: Double
raw/SVGSVGElement[JC] var scrollTop: Double
raw/SVGSVGElement[JC] def scrollWidth: Int
raw/SVGSVGElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGSVGElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGSVGElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGSVGElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGSVGElement[JC] def setCurrentTime(seconds: Double): Unit
raw/SVGSVGElement[JC] var style: CSSStyleDeclaration
raw/SVGSVGElement[JC] def suspendRedraw(maxWaitMilliseconds: Int): Int
raw/SVGSVGElement[JC] var systemLanguage: SVGStringList
raw/SVGSVGElement[JC] def tagName: String
raw/SVGSVGElement[JC] var textContent: String
raw/SVGSVGElement[JC] def unpauseAnimations(): Unit
raw/SVGSVGElement[JC] def unsuspendRedraw(suspendHandleID: Int): Unit
raw/SVGSVGElement[JC] def unsuspendRedrawAll(): Unit
raw/SVGSVGElement[JC] var viewBox: SVGAnimatedRect
raw/SVGSVGElement[JC] def viewport: SVGRect
raw/SVGSVGElement[JC] def viewportElement: SVGElement
raw/SVGSVGElement[JC] def width: SVGAnimatedLength
raw/SVGSVGElement[JC] def x: SVGAnimatedLength
raw/SVGSVGElement[JC] var xmlbase: String
raw/SVGSVGElement[JC] var xmllang: String
raw/SVGSVGElement[JC] var xmlspace: String
raw/SVGSVGElement[JC] def y: SVGAnimatedLength
raw/SVGSVGElement[JC] var zoomAndPan: Int
raw/SVGScriptElement[JC] var accessKey: String
raw/SVGScriptElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGScriptElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGScriptElement[JC] def appendChild(newChild: Node): Node
raw/SVGScriptElement[JC] def attributes: NamedNodeMap
raw/SVGScriptElement[JC] def childElementCount: Int
raw/SVGScriptElement[JC] def childNodes: NodeList
raw/SVGScriptElement[JC] def children: HTMLCollection
raw/SVGScriptElement[JC] var classList: DOMTokenList
raw/SVGScriptElement[JC] def clientHeight: Int
raw/SVGScriptElement[JC] def clientLeft: Int
raw/SVGScriptElement[JC] def clientTop: Int
raw/SVGScriptElement[JC] def clientWidth: Int
raw/SVGScriptElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGScriptElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGScriptElement[JC] def contains(otherNode: Node): Boolean
raw/SVGScriptElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGScriptElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGScriptElement[JC] def firstChild: Node
raw/SVGScriptElement[JC] def firstElementChild: Element
raw/SVGScriptElement[JC] def getAttribute(name: String): String
raw/SVGScriptElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGScriptElement[JC] def getAttributeNode(name: String): Attr
raw/SVGScriptElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGScriptElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGScriptElement[JC] def getClientRects(): ClientRectList
raw/SVGScriptElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGScriptElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGScriptElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGScriptElement[JC] def hasAttribute(name: String): Boolean
raw/SVGScriptElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGScriptElement[JC] def hasAttributes(): Boolean
raw/SVGScriptElement[JC] def hasChildNodes(): Boolean
raw/SVGScriptElement[JC] var href: SVGAnimatedString
raw/SVGScriptElement[JC] var id: String
raw/SVGScriptElement[JC] var innerHTML: String
raw/SVGScriptElement[JC] var innerText: String
raw/SVGScriptElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGScriptElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGScriptElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGScriptElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGScriptElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGScriptElement[JC] def isSameNode(other: Node): Boolean
raw/SVGScriptElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGScriptElement[JC] def lastChild: Node
raw/SVGScriptElement[JC] def lastElementChild: Element
raw/SVGScriptElement[JC] def localName: String
raw/SVGScriptElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGScriptElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGScriptElement[JC] def matches(selector: String): Boolean
raw/SVGScriptElement[JC] def namespaceURI: String
raw/SVGScriptElement[JC] def nextElementSibling: Element
raw/SVGScriptElement[JC] def nextSibling: Node
raw/SVGScriptElement[JC] def nodeName: String
raw/SVGScriptElement[JC] def nodeType: Int
raw/SVGScriptElement[JC] var nodeValue: String
raw/SVGScriptElement[JC] def normalize(): Unit
raw/SVGScriptElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGScriptElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGScriptElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGScriptElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGScriptElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGScriptElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGScriptElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGScriptElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGScriptElement[JC] var onload: js.Function1[Event, _]
raw/SVGScriptElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGScriptElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGScriptElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGScriptElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGScriptElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGScriptElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGScriptElement[JC] var outerHTML: String
raw/SVGScriptElement[JC] def ownerDocument: Document
raw/SVGScriptElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGScriptElement[JC] def parentNode: Node
raw/SVGScriptElement[JC] def prefix: String
raw/SVGScriptElement[JC] def previousElementSibling: Element
raw/SVGScriptElement[JC] def previousSibling: Node
raw/SVGScriptElement[JC] def querySelector(selectors: String): Element
raw/SVGScriptElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGScriptElement[JC] def removeAttribute(name: String): Unit
raw/SVGScriptElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGScriptElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGScriptElement[JC] def removeChild(oldChild: Node): Node
raw/SVGScriptElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGScriptElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGScriptElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGScriptElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGScriptElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGScriptElement[JC] def scrollHeight: Int
raw/SVGScriptElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGScriptElement[JC] var scrollLeft: Double
raw/SVGScriptElement[JC] var scrollTop: Double
raw/SVGScriptElement[JC] def scrollWidth: Int
raw/SVGScriptElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGScriptElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGScriptElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGScriptElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGScriptElement[JC] def tagName: String
raw/SVGScriptElement[JC] var textContent: String
raw/SVGScriptElement[JC] def `type`: String
raw/SVGScriptElement[JC] def viewportElement: SVGElement
raw/SVGScriptElement[JC] var xmlbase: String
raw/SVGStopElement[JC] var accessKey: String
raw/SVGStopElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGStopElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGStopElement[JC] def appendChild(newChild: Node): Node
raw/SVGStopElement[JC] def attributes: NamedNodeMap
raw/SVGStopElement[JC] def childElementCount: Int
raw/SVGStopElement[JC] def childNodes: NodeList
raw/SVGStopElement[JC] def children: HTMLCollection
raw/SVGStopElement[JC] var classList: DOMTokenList
raw/SVGStopElement[JC] var className: SVGAnimatedString
raw/SVGStopElement[JC] def clientHeight: Int
raw/SVGStopElement[JC] def clientLeft: Int
raw/SVGStopElement[JC] def clientTop: Int
raw/SVGStopElement[JC] def clientWidth: Int
raw/SVGStopElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGStopElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGStopElement[JC] def contains(otherNode: Node): Boolean
raw/SVGStopElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGStopElement[JC] def firstChild: Node
raw/SVGStopElement[JC] def firstElementChild: Element
raw/SVGStopElement[JC] def getAttribute(name: String): String
raw/SVGStopElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGStopElement[JC] def getAttributeNode(name: String): Attr
raw/SVGStopElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGStopElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGStopElement[JC] def getClientRects(): ClientRectList
raw/SVGStopElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGStopElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGStopElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGStopElement[JC] def hasAttribute(name: String): Boolean
raw/SVGStopElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGStopElement[JC] def hasAttributes(): Boolean
raw/SVGStopElement[JC] def hasChildNodes(): Boolean
raw/SVGStopElement[JC] var id: String
raw/SVGStopElement[JC] var innerHTML: String
raw/SVGStopElement[JC] var innerText: String
raw/SVGStopElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGStopElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGStopElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGStopElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGStopElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGStopElement[JC] def isSameNode(other: Node): Boolean
raw/SVGStopElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGStopElement[JC] def lastChild: Node
raw/SVGStopElement[JC] def lastElementChild: Element
raw/SVGStopElement[JC] def localName: String
raw/SVGStopElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGStopElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGStopElement[JC] def matches(selector: String): Boolean
raw/SVGStopElement[JC] def namespaceURI: String
raw/SVGStopElement[JC] def nextElementSibling: Element
raw/SVGStopElement[JC] def nextSibling: Node
raw/SVGStopElement[JC] def nodeName: String
raw/SVGStopElement[JC] def nodeType: Int
raw/SVGStopElement[JC] var nodeValue: String
raw/SVGStopElement[JC] def normalize(): Unit
raw/SVGStopElement[JC] var offset: SVGAnimatedNumber
raw/SVGStopElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGStopElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGStopElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGStopElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGStopElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGStopElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGStopElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGStopElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGStopElement[JC] var onload: js.Function1[Event, _]
raw/SVGStopElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGStopElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGStopElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGStopElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGStopElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGStopElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGStopElement[JC] var outerHTML: String
raw/SVGStopElement[JC] def ownerDocument: Document
raw/SVGStopElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGStopElement[JC] def parentNode: Node
raw/SVGStopElement[JC] def prefix: String
raw/SVGStopElement[JC] def previousElementSibling: Element
raw/SVGStopElement[JC] def previousSibling: Node
raw/SVGStopElement[JC] def querySelector(selectors: String): Element
raw/SVGStopElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGStopElement[JC] def removeAttribute(name: String): Unit
raw/SVGStopElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGStopElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGStopElement[JC] def removeChild(oldChild: Node): Node
raw/SVGStopElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGStopElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGStopElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGStopElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGStopElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGStopElement[JC] def scrollHeight: Int
raw/SVGStopElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGStopElement[JC] var scrollLeft: Double
raw/SVGStopElement[JC] var scrollTop: Double
raw/SVGStopElement[JC] def scrollWidth: Int
raw/SVGStopElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGStopElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGStopElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGStopElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGStopElement[JC] var style: CSSStyleDeclaration
raw/SVGStopElement[JC] def tagName: String
raw/SVGStopElement[JC] var textContent: String
raw/SVGStopElement[JC] def viewportElement: SVGElement
raw/SVGStopElement[JC] var xmlbase: String
raw/SVGStringList[JC] def appendItem(newItem: String): String
raw/SVGStringList[JC] def clear(): Unit
raw/SVGStringList[JC] def getItem(index: Int): String
raw/SVGStringList[JC] def initialize(newItem: String): String
raw/SVGStringList[JC] def insertItemBefore(newItem: String, index: Int): String
raw/SVGStringList[JC] def numberOfItems: Int
raw/SVGStringList[JC] def removeItem(index: Int): String
raw/SVGStringList[JC] def replaceItem(newItem: String, index: Int): String
raw/SVGStylable[JT] var className: SVGAnimatedString
raw/SVGStylable[JT] var style: CSSStyleDeclaration
raw/SVGStyleElement[JC] var accessKey: String
raw/SVGStyleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGStyleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGStyleElement[JC] def appendChild(newChild: Node): Node
raw/SVGStyleElement[JC] def attributes: NamedNodeMap
raw/SVGStyleElement[JC] def childElementCount: Int
raw/SVGStyleElement[JC] def childNodes: NodeList
raw/SVGStyleElement[JC] def children: HTMLCollection
raw/SVGStyleElement[JC] var classList: DOMTokenList
raw/SVGStyleElement[JC] def clientHeight: Int
raw/SVGStyleElement[JC] def clientLeft: Int
raw/SVGStyleElement[JC] def clientTop: Int
raw/SVGStyleElement[JC] def clientWidth: Int
raw/SVGStyleElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGStyleElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGStyleElement[JC] def contains(otherNode: Node): Boolean
raw/SVGStyleElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGStyleElement[JC] def firstChild: Node
raw/SVGStyleElement[JC] def firstElementChild: Element
raw/SVGStyleElement[JC] def getAttribute(name: String): String
raw/SVGStyleElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGStyleElement[JC] def getAttributeNode(name: String): Attr
raw/SVGStyleElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGStyleElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGStyleElement[JC] def getClientRects(): ClientRectList
raw/SVGStyleElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGStyleElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGStyleElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGStyleElement[JC] def hasAttribute(name: String): Boolean
raw/SVGStyleElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGStyleElement[JC] def hasAttributes(): Boolean
raw/SVGStyleElement[JC] def hasChildNodes(): Boolean
raw/SVGStyleElement[JC] var id: String
raw/SVGStyleElement[JC] var innerHTML: String
raw/SVGStyleElement[JC] var innerText: String
raw/SVGStyleElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGStyleElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGStyleElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGStyleElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGStyleElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGStyleElement[JC] def isSameNode(other: Node): Boolean
raw/SVGStyleElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGStyleElement[JC] def lastChild: Node
raw/SVGStyleElement[JC] def lastElementChild: Element
raw/SVGStyleElement[JC] def localName: String
raw/SVGStyleElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGStyleElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGStyleElement[JC] def matches(selector: String): Boolean
raw/SVGStyleElement[JC] var media: String
raw/SVGStyleElement[JC] def namespaceURI: String
raw/SVGStyleElement[JC] def nextElementSibling: Element
raw/SVGStyleElement[JC] def nextSibling: Node
raw/SVGStyleElement[JC] def nodeName: String
raw/SVGStyleElement[JC] def nodeType: Int
raw/SVGStyleElement[JC] var nodeValue: String
raw/SVGStyleElement[JC] def normalize(): Unit
raw/SVGStyleElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGStyleElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGStyleElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGStyleElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGStyleElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGStyleElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGStyleElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGStyleElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGStyleElement[JC] var onload: js.Function1[Event, _]
raw/SVGStyleElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGStyleElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGStyleElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGStyleElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGStyleElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGStyleElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGStyleElement[JC] var outerHTML: String
raw/SVGStyleElement[JC] def ownerDocument: Document
raw/SVGStyleElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGStyleElement[JC] def parentNode: Node
raw/SVGStyleElement[JC] def prefix: String
raw/SVGStyleElement[JC] def previousElementSibling: Element
raw/SVGStyleElement[JC] def previousSibling: Node
raw/SVGStyleElement[JC] def querySelector(selectors: String): Element
raw/SVGStyleElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGStyleElement[JC] def removeAttribute(name: String): Unit
raw/SVGStyleElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGStyleElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGStyleElement[JC] def removeChild(oldChild: Node): Node
raw/SVGStyleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGStyleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGStyleElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGStyleElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGStyleElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGStyleElement[JC] def scrollHeight: Int
raw/SVGStyleElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGStyleElement[JC] var scrollLeft: Double
raw/SVGStyleElement[JC] var scrollTop: Double
raw/SVGStyleElement[JC] def scrollWidth: Int
raw/SVGStyleElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGStyleElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGStyleElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGStyleElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGStyleElement[JC] def tagName: String
raw/SVGStyleElement[JC] var textContent: String
raw/SVGStyleElement[JC] var title: String
raw/SVGStyleElement[JC] def `type`: String
raw/SVGStyleElement[JC] def viewportElement: SVGElement
raw/SVGStyleElement[JC] var xmlbase: String
raw/SVGStyleElement[JC] var xmllang: String
raw/SVGStyleElement[JC] var xmlspace: String
raw/SVGSwitchElement[JC] var accessKey: String
raw/SVGSwitchElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGSwitchElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGSwitchElement[JC] def appendChild(newChild: Node): Node
raw/SVGSwitchElement[JC] def attributes: NamedNodeMap
raw/SVGSwitchElement[JC] def childElementCount: Int
raw/SVGSwitchElement[JC] def childNodes: NodeList
raw/SVGSwitchElement[JC] def children: HTMLCollection
raw/SVGSwitchElement[JC] var classList: DOMTokenList
raw/SVGSwitchElement[JC] var className: SVGAnimatedString
raw/SVGSwitchElement[JC] def clientHeight: Int
raw/SVGSwitchElement[JC] def clientLeft: Int
raw/SVGSwitchElement[JC] def clientTop: Int
raw/SVGSwitchElement[JC] def clientWidth: Int
raw/SVGSwitchElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGSwitchElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGSwitchElement[JC] def contains(otherNode: Node): Boolean
raw/SVGSwitchElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGSwitchElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGSwitchElement[JC] var farthestViewportElement: SVGElement
raw/SVGSwitchElement[JC] def firstChild: Node
raw/SVGSwitchElement[JC] def firstElementChild: Element
raw/SVGSwitchElement[JC] def getAttribute(name: String): String
raw/SVGSwitchElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGSwitchElement[JC] def getAttributeNode(name: String): Attr
raw/SVGSwitchElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGSwitchElement[JC] def getBBox(): SVGRect
raw/SVGSwitchElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGSwitchElement[JC] def getCTM(): SVGMatrix
raw/SVGSwitchElement[JC] def getClientRects(): ClientRectList
raw/SVGSwitchElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGSwitchElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGSwitchElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGSwitchElement[JC] def getScreenCTM(): SVGMatrix
raw/SVGSwitchElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
raw/SVGSwitchElement[JC] def hasAttribute(name: String): Boolean
raw/SVGSwitchElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGSwitchElement[JC] def hasAttributes(): Boolean
raw/SVGSwitchElement[JC] def hasChildNodes(): Boolean
raw/SVGSwitchElement[JC] def hasExtension(extension: String): Boolean
raw/SVGSwitchElement[JC] var id: String
raw/SVGSwitchElement[JC] var innerHTML: String
raw/SVGSwitchElement[JC] var innerText: String
raw/SVGSwitchElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGSwitchElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGSwitchElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGSwitchElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGSwitchElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGSwitchElement[JC] def isSameNode(other: Node): Boolean
raw/SVGSwitchElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGSwitchElement[JC] def lastChild: Node
raw/SVGSwitchElement[JC] def lastElementChild: Element
raw/SVGSwitchElement[JC] def localName: String
raw/SVGSwitchElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGSwitchElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGSwitchElement[JC] def matches(selector: String): Boolean
raw/SVGSwitchElement[JC] def namespaceURI: String
raw/SVGSwitchElement[JC] var nearestViewportElement: SVGElement
raw/SVGSwitchElement[JC] def nextElementSibling: Element
raw/SVGSwitchElement[JC] def nextSibling: Node
raw/SVGSwitchElement[JC] def nodeName: String
raw/SVGSwitchElement[JC] def nodeType: Int
raw/SVGSwitchElement[JC] var nodeValue: String
raw/SVGSwitchElement[JC] def normalize(): Unit
raw/SVGSwitchElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGSwitchElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGSwitchElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGSwitchElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGSwitchElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGSwitchElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGSwitchElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGSwitchElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGSwitchElement[JC] var onload: js.Function1[Event, _]
raw/SVGSwitchElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGSwitchElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGSwitchElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGSwitchElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGSwitchElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGSwitchElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGSwitchElement[JC] var outerHTML: String
raw/SVGSwitchElement[JC] def ownerDocument: Document
raw/SVGSwitchElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGSwitchElement[JC] def parentNode: Node
raw/SVGSwitchElement[JC] def prefix: String
raw/SVGSwitchElement[JC] def previousElementSibling: Element
raw/SVGSwitchElement[JC] def previousSibling: Node
raw/SVGSwitchElement[JC] def querySelector(selectors: String): Element
raw/SVGSwitchElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGSwitchElement[JC] def removeAttribute(name: String): Unit
raw/SVGSwitchElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGSwitchElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGSwitchElement[JC] def removeChild(oldChild: Node): Node
raw/SVGSwitchElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGSwitchElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGSwitchElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGSwitchElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGSwitchElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGSwitchElement[JC] var requiredExtensions: SVGStringList
raw/SVGSwitchElement[JC] var requiredFeatures: SVGStringList
raw/SVGSwitchElement[JC] def scrollHeight: Int
raw/SVGSwitchElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGSwitchElement[JC] var scrollLeft: Double
raw/SVGSwitchElement[JC] var scrollTop: Double
raw/SVGSwitchElement[JC] def scrollWidth: Int
raw/SVGSwitchElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGSwitchElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGSwitchElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGSwitchElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGSwitchElement[JC] var style: CSSStyleDeclaration
raw/SVGSwitchElement[JC] var systemLanguage: SVGStringList
raw/SVGSwitchElement[JC] def tagName: String
raw/SVGSwitchElement[JC] var textContent: String
raw/SVGSwitchElement[JC] var transform: SVGAnimatedTransformList
raw/SVGSwitchElement[JC] def viewportElement: SVGElement
raw/SVGSwitchElement[JC] var xmlbase: String
raw/SVGSwitchElement[JC] var xmllang: String
raw/SVGSwitchElement[JC] var xmlspace: String
raw/SVGSymbolElement[JC] var accessKey: String
raw/SVGSymbolElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGSymbolElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGSymbolElement[JC] def appendChild(newChild: Node): Node
raw/SVGSymbolElement[JC] def attributes: NamedNodeMap
raw/SVGSymbolElement[JC] def childElementCount: Int
raw/SVGSymbolElement[JC] def childNodes: NodeList
raw/SVGSymbolElement[JC] def children: HTMLCollection
raw/SVGSymbolElement[JC] var classList: DOMTokenList
raw/SVGSymbolElement[JC] var className: SVGAnimatedString
raw/SVGSymbolElement[JC] def clientHeight: Int
raw/SVGSymbolElement[JC] def clientLeft: Int
raw/SVGSymbolElement[JC] def clientTop: Int
raw/SVGSymbolElement[JC] def clientWidth: Int
raw/SVGSymbolElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGSymbolElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGSymbolElement[JC] def contains(otherNode: Node): Boolean
raw/SVGSymbolElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGSymbolElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGSymbolElement[JC] def firstChild: Node
raw/SVGSymbolElement[JC] def firstElementChild: Element
raw/SVGSymbolElement[JC] def getAttribute(name: String): String
raw/SVGSymbolElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGSymbolElement[JC] def getAttributeNode(name: String): Attr
raw/SVGSymbolElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGSymbolElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGSymbolElement[JC] def getClientRects(): ClientRectList
raw/SVGSymbolElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGSymbolElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGSymbolElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGSymbolElement[JC] def hasAttribute(name: String): Boolean
raw/SVGSymbolElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGSymbolElement[JC] def hasAttributes(): Boolean
raw/SVGSymbolElement[JC] def hasChildNodes(): Boolean
raw/SVGSymbolElement[JC] var id: String
raw/SVGSymbolElement[JC] var innerHTML: String
raw/SVGSymbolElement[JC] var innerText: String
raw/SVGSymbolElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGSymbolElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGSymbolElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGSymbolElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGSymbolElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGSymbolElement[JC] def isSameNode(other: Node): Boolean
raw/SVGSymbolElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGSymbolElement[JC] def lastChild: Node
raw/SVGSymbolElement[JC] def lastElementChild: Element
raw/SVGSymbolElement[JC] def localName: String
raw/SVGSymbolElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGSymbolElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGSymbolElement[JC] def matches(selector: String): Boolean
raw/SVGSymbolElement[JC] def namespaceURI: String
raw/SVGSymbolElement[JC] def nextElementSibling: Element
raw/SVGSymbolElement[JC] def nextSibling: Node
raw/SVGSymbolElement[JC] def nodeName: String
raw/SVGSymbolElement[JC] def nodeType: Int
raw/SVGSymbolElement[JC] var nodeValue: String
raw/SVGSymbolElement[JC] def normalize(): Unit
raw/SVGSymbolElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGSymbolElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGSymbolElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGSymbolElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGSymbolElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGSymbolElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGSymbolElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGSymbolElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGSymbolElement[JC] var onload: js.Function1[Event, _]
raw/SVGSymbolElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGSymbolElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGSymbolElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGSymbolElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGSymbolElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGSymbolElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGSymbolElement[JC] var outerHTML: String
raw/SVGSymbolElement[JC] def ownerDocument: Document
raw/SVGSymbolElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGSymbolElement[JC] def parentNode: Node
raw/SVGSymbolElement[JC] def prefix: String
raw/SVGSymbolElement[JC] var preserveAspectRatio: SVGAnimatedPreserveAspectRatio
raw/SVGSymbolElement[JC] def previousElementSibling: Element
raw/SVGSymbolElement[JC] def previousSibling: Node
raw/SVGSymbolElement[JC] def querySelector(selectors: String): Element
raw/SVGSymbolElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGSymbolElement[JC] def removeAttribute(name: String): Unit
raw/SVGSymbolElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGSymbolElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGSymbolElement[JC] def removeChild(oldChild: Node): Node
raw/SVGSymbolElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGSymbolElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGSymbolElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGSymbolElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGSymbolElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGSymbolElement[JC] def scrollHeight: Int
raw/SVGSymbolElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGSymbolElement[JC] var scrollLeft: Double
raw/SVGSymbolElement[JC] var scrollTop: Double
raw/SVGSymbolElement[JC] def scrollWidth: Int
raw/SVGSymbolElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGSymbolElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGSymbolElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGSymbolElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGSymbolElement[JC] var style: CSSStyleDeclaration
raw/SVGSymbolElement[JC] def tagName: String
raw/SVGSymbolElement[JC] var textContent: String
raw/SVGSymbolElement[JC] var viewBox: SVGAnimatedRect
raw/SVGSymbolElement[JC] def viewportElement: SVGElement
raw/SVGSymbolElement[JC] var xmlbase: String
raw/SVGSymbolElement[JC] var xmllang: String
raw/SVGSymbolElement[JC] var xmlspace: String
raw/SVGTSpanElement[JC] var accessKey: String
raw/SVGTSpanElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGTSpanElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGTSpanElement[JC] def appendChild(newChild: Node): Node
raw/SVGTSpanElement[JC] def attributes: NamedNodeMap
raw/SVGTSpanElement[JC] def childElementCount: Int
raw/SVGTSpanElement[JC] def childNodes: NodeList
raw/SVGTSpanElement[JC] def children: HTMLCollection
raw/SVGTSpanElement[JC] var classList: DOMTokenList
raw/SVGTSpanElement[JC] var className: SVGAnimatedString
raw/SVGTSpanElement[JC] def clientHeight: Int
raw/SVGTSpanElement[JC] def clientLeft: Int
raw/SVGTSpanElement[JC] def clientTop: Int
raw/SVGTSpanElement[JC] def clientWidth: Int
raw/SVGTSpanElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGTSpanElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGTSpanElement[JC] def contains(otherNode: Node): Boolean
raw/SVGTSpanElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGTSpanElement[JC] def dx: SVGAnimatedLengthList
raw/SVGTSpanElement[JC] def dy: SVGAnimatedLengthList
raw/SVGTSpanElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGTSpanElement[JC] def firstChild: Node
raw/SVGTSpanElement[JC] def firstElementChild: Element
raw/SVGTSpanElement[JC] def getAttribute(name: String): String
raw/SVGTSpanElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGTSpanElement[JC] def getAttributeNode(name: String): Attr
raw/SVGTSpanElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGTSpanElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGTSpanElement[JC] def getCharNumAtPosition(point: SVGPoint): Int
raw/SVGTSpanElement[JC] def getClientRects(): ClientRectList
raw/SVGTSpanElement[JC] def getComputedTextLength(): Double
raw/SVGTSpanElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGTSpanElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGTSpanElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGTSpanElement[JC] def getEndPositionOfChar(charnum: Int): SVGPoint
raw/SVGTSpanElement[JC] def getExtentOfChar(charnum: Int): SVGRect
raw/SVGTSpanElement[JC] def getNumberOfChars(): Int
raw/SVGTSpanElement[JC] def getRotationOfChar(charnum: Int): Double
raw/SVGTSpanElement[JC] def getStartPositionOfChar(charnum: Int): SVGPoint
raw/SVGTSpanElement[JC] def getSubStringLength(charnum: Int, nchars: Int): Double
raw/SVGTSpanElement[JC] def hasAttribute(name: String): Boolean
raw/SVGTSpanElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGTSpanElement[JC] def hasAttributes(): Boolean
raw/SVGTSpanElement[JC] def hasChildNodes(): Boolean
raw/SVGTSpanElement[JC] def hasExtension(extension: String): Boolean
raw/SVGTSpanElement[JC] var id: String
raw/SVGTSpanElement[JC] var innerHTML: String
raw/SVGTSpanElement[JC] var innerText: String
raw/SVGTSpanElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGTSpanElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGTSpanElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGTSpanElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGTSpanElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGTSpanElement[JC] def isSameNode(other: Node): Boolean
raw/SVGTSpanElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGTSpanElement[JC] def lastChild: Node
raw/SVGTSpanElement[JC] def lastElementChild: Element
raw/SVGTSpanElement[JC] def lengthAdjust: SVGAnimatedEnumeration
raw/SVGTSpanElement[JC] def localName: String
raw/SVGTSpanElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGTSpanElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGTSpanElement[JC] def matches(selector: String): Boolean
raw/SVGTSpanElement[JC] def namespaceURI: String
raw/SVGTSpanElement[JC] def nextElementSibling: Element
raw/SVGTSpanElement[JC] def nextSibling: Node
raw/SVGTSpanElement[JC] def nodeName: String
raw/SVGTSpanElement[JC] def nodeType: Int
raw/SVGTSpanElement[JC] var nodeValue: String
raw/SVGTSpanElement[JC] def normalize(): Unit
raw/SVGTSpanElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGTSpanElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGTSpanElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGTSpanElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGTSpanElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGTSpanElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGTSpanElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGTSpanElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGTSpanElement[JC] var onload: js.Function1[Event, _]
raw/SVGTSpanElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGTSpanElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGTSpanElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGTSpanElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGTSpanElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGTSpanElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGTSpanElement[JC] var outerHTML: String
raw/SVGTSpanElement[JC] def ownerDocument: Document
raw/SVGTSpanElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGTSpanElement[JC] def parentNode: Node
raw/SVGTSpanElement[JC] def prefix: String
raw/SVGTSpanElement[JC] def previousElementSibling: Element
raw/SVGTSpanElement[JC] def previousSibling: Node
raw/SVGTSpanElement[JC] def querySelector(selectors: String): Element
raw/SVGTSpanElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGTSpanElement[JC] def removeAttribute(name: String): Unit
raw/SVGTSpanElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGTSpanElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGTSpanElement[JC] def removeChild(oldChild: Node): Node
raw/SVGTSpanElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGTSpanElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGTSpanElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGTSpanElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGTSpanElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGTSpanElement[JC] var requiredExtensions: SVGStringList
raw/SVGTSpanElement[JC] var requiredFeatures: SVGStringList
raw/SVGTSpanElement[JC] def rotate: SVGAnimatedNumberList
raw/SVGTSpanElement[JC] def scrollHeight: Int
raw/SVGTSpanElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGTSpanElement[JC] var scrollLeft: Double
raw/SVGTSpanElement[JC] var scrollTop: Double
raw/SVGTSpanElement[JC] def scrollWidth: Int
raw/SVGTSpanElement[JC] def selectSubString(charnum: Int, nchars: Int): Unit
raw/SVGTSpanElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGTSpanElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGTSpanElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGTSpanElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGTSpanElement[JC] var style: CSSStyleDeclaration
raw/SVGTSpanElement[JC] var systemLanguage: SVGStringList
raw/SVGTSpanElement[JC] def tagName: String
raw/SVGTSpanElement[JC] var textContent: String
raw/SVGTSpanElement[JC] def textLength: SVGAnimatedLength
raw/SVGTSpanElement[JC] def viewportElement: SVGElement
raw/SVGTSpanElement[JC] def x: SVGAnimatedLengthList
raw/SVGTSpanElement[JC] var xmlbase: String
raw/SVGTSpanElement[JC] var xmllang: String
raw/SVGTSpanElement[JC] var xmlspace: String
raw/SVGTSpanElement[JC] def y: SVGAnimatedLengthList
raw/SVGTests[JT] def hasExtension(extension: String): Boolean
raw/SVGTests[JT] var requiredExtensions: SVGStringList
raw/SVGTests[JT] var requiredFeatures: SVGStringList
raw/SVGTests[JT] var systemLanguage: SVGStringList
raw/SVGTextContentElement[JC] var accessKey: String
raw/SVGTextContentElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGTextContentElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGTextContentElement[JC] def appendChild(newChild: Node): Node
raw/SVGTextContentElement[JC] def attributes: NamedNodeMap
raw/SVGTextContentElement[JC] def childElementCount: Int
raw/SVGTextContentElement[JC] def childNodes: NodeList
raw/SVGTextContentElement[JC] def children: HTMLCollection
raw/SVGTextContentElement[JC] var classList: DOMTokenList
raw/SVGTextContentElement[JC] var className: SVGAnimatedString
raw/SVGTextContentElement[JC] def clientHeight: Int
raw/SVGTextContentElement[JC] def clientLeft: Int
raw/SVGTextContentElement[JC] def clientTop: Int
raw/SVGTextContentElement[JC] def clientWidth: Int
raw/SVGTextContentElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGTextContentElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGTextContentElement[JC] def contains(otherNode: Node): Boolean
raw/SVGTextContentElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGTextContentElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGTextContentElement[JC] def firstChild: Node
raw/SVGTextContentElement[JC] def firstElementChild: Element
raw/SVGTextContentElement[JC] def getAttribute(name: String): String
raw/SVGTextContentElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGTextContentElement[JC] def getAttributeNode(name: String): Attr
raw/SVGTextContentElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGTextContentElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGTextContentElement[JC] def getCharNumAtPosition(point: SVGPoint): Int
raw/SVGTextContentElement[JC] def getClientRects(): ClientRectList
raw/SVGTextContentElement[JC] def getComputedTextLength(): Double
raw/SVGTextContentElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGTextContentElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGTextContentElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGTextContentElement[JC] def getEndPositionOfChar(charnum: Int): SVGPoint
raw/SVGTextContentElement[JC] def getExtentOfChar(charnum: Int): SVGRect
raw/SVGTextContentElement[JC] def getNumberOfChars(): Int
raw/SVGTextContentElement[JC] def getRotationOfChar(charnum: Int): Double
raw/SVGTextContentElement[JC] def getStartPositionOfChar(charnum: Int): SVGPoint
raw/SVGTextContentElement[JC] def getSubStringLength(charnum: Int, nchars: Int): Double
raw/SVGTextContentElement[JC] def hasAttribute(name: String): Boolean
raw/SVGTextContentElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGTextContentElement[JC] def hasAttributes(): Boolean
raw/SVGTextContentElement[JC] def hasChildNodes(): Boolean
raw/SVGTextContentElement[JC] def hasExtension(extension: String): Boolean
raw/SVGTextContentElement[JC] var id: String
raw/SVGTextContentElement[JC] var innerHTML: String
raw/SVGTextContentElement[JC] var innerText: String
raw/SVGTextContentElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGTextContentElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGTextContentElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGTextContentElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGTextContentElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGTextContentElement[JC] def isSameNode(other: Node): Boolean
raw/SVGTextContentElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGTextContentElement[JC] def lastChild: Node
raw/SVGTextContentElement[JC] def lastElementChild: Element
raw/SVGTextContentElement[JC] def lengthAdjust: SVGAnimatedEnumeration
raw/SVGTextContentElement[JC] def localName: String
raw/SVGTextContentElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGTextContentElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGTextContentElement[JC] def matches(selector: String): Boolean
raw/SVGTextContentElement[JC] def namespaceURI: String
raw/SVGTextContentElement[JC] def nextElementSibling: Element
raw/SVGTextContentElement[JC] def nextSibling: Node
raw/SVGTextContentElement[JC] def nodeName: String
raw/SVGTextContentElement[JC] def nodeType: Int
raw/SVGTextContentElement[JC] var nodeValue: String
raw/SVGTextContentElement[JC] def normalize(): Unit
raw/SVGTextContentElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGTextContentElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGTextContentElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGTextContentElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGTextContentElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGTextContentElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGTextContentElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGTextContentElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGTextContentElement[JC] var onload: js.Function1[Event, _]
raw/SVGTextContentElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGTextContentElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGTextContentElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGTextContentElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGTextContentElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGTextContentElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGTextContentElement[JC] var outerHTML: String
raw/SVGTextContentElement[JC] def ownerDocument: Document
raw/SVGTextContentElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGTextContentElement[JC] def parentNode: Node
raw/SVGTextContentElement[JC] def prefix: String
raw/SVGTextContentElement[JC] def previousElementSibling: Element
raw/SVGTextContentElement[JC] def previousSibling: Node
raw/SVGTextContentElement[JC] def querySelector(selectors: String): Element
raw/SVGTextContentElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGTextContentElement[JC] def removeAttribute(name: String): Unit
raw/SVGTextContentElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGTextContentElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGTextContentElement[JC] def removeChild(oldChild: Node): Node
raw/SVGTextContentElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGTextContentElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGTextContentElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGTextContentElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGTextContentElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGTextContentElement[JC] var requiredExtensions: SVGStringList
raw/SVGTextContentElement[JC] var requiredFeatures: SVGStringList
raw/SVGTextContentElement[JC] def scrollHeight: Int
raw/SVGTextContentElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGTextContentElement[JC] var scrollLeft: Double
raw/SVGTextContentElement[JC] var scrollTop: Double
raw/SVGTextContentElement[JC] def scrollWidth: Int
raw/SVGTextContentElement[JC] def selectSubString(charnum: Int, nchars: Int): Unit
raw/SVGTextContentElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGTextContentElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGTextContentElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGTextContentElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGTextContentElement[JC] var style: CSSStyleDeclaration
raw/SVGTextContentElement[JC] var systemLanguage: SVGStringList
raw/SVGTextContentElement[JC] def tagName: String
raw/SVGTextContentElement[JC] var textContent: String
raw/SVGTextContentElement[JC] def textLength: SVGAnimatedLength
raw/SVGTextContentElement[JC] def viewportElement: SVGElement
raw/SVGTextContentElement[JC] var xmlbase: String
raw/SVGTextContentElement[JC] var xmllang: String
raw/SVGTextContentElement[JC] var xmlspace: String
raw/SVGTextContentElement[JO] val LENGTHADJUST_SPACING: Int
raw/SVGTextContentElement[JO] val LENGTHADJUST_SPACINGANDGLYPHS: Int
raw/SVGTextContentElement[JO] val LENGTHADJUST_UNKNOWN: Int
raw/SVGTextElement[JC] var accessKey: String
raw/SVGTextElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGTextElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGTextElement[JC] def appendChild(newChild: Node): Node
raw/SVGTextElement[JC] def attributes: NamedNodeMap
raw/SVGTextElement[JC] def childElementCount: Int
raw/SVGTextElement[JC] def childNodes: NodeList
raw/SVGTextElement[JC] def children: HTMLCollection
raw/SVGTextElement[JC] var classList: DOMTokenList
raw/SVGTextElement[JC] var className: SVGAnimatedString
raw/SVGTextElement[JC] def clientHeight: Int
raw/SVGTextElement[JC] def clientLeft: Int
raw/SVGTextElement[JC] def clientTop: Int
raw/SVGTextElement[JC] def clientWidth: Int
raw/SVGTextElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGTextElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGTextElement[JC] def contains(otherNode: Node): Boolean
raw/SVGTextElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGTextElement[JC] def dx: SVGAnimatedLengthList
raw/SVGTextElement[JC] def dy: SVGAnimatedLengthList
raw/SVGTextElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGTextElement[JC] var farthestViewportElement: SVGElement
raw/SVGTextElement[JC] def firstChild: Node
raw/SVGTextElement[JC] def firstElementChild: Element
raw/SVGTextElement[JC] def getAttribute(name: String): String
raw/SVGTextElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGTextElement[JC] def getAttributeNode(name: String): Attr
raw/SVGTextElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGTextElement[JC] def getBBox(): SVGRect
raw/SVGTextElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGTextElement[JC] def getCTM(): SVGMatrix
raw/SVGTextElement[JC] def getCharNumAtPosition(point: SVGPoint): Int
raw/SVGTextElement[JC] def getClientRects(): ClientRectList
raw/SVGTextElement[JC] def getComputedTextLength(): Double
raw/SVGTextElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGTextElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGTextElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGTextElement[JC] def getEndPositionOfChar(charnum: Int): SVGPoint
raw/SVGTextElement[JC] def getExtentOfChar(charnum: Int): SVGRect
raw/SVGTextElement[JC] def getNumberOfChars(): Int
raw/SVGTextElement[JC] def getRotationOfChar(charnum: Int): Double
raw/SVGTextElement[JC] def getScreenCTM(): SVGMatrix
raw/SVGTextElement[JC] def getStartPositionOfChar(charnum: Int): SVGPoint
raw/SVGTextElement[JC] def getSubStringLength(charnum: Int, nchars: Int): Double
raw/SVGTextElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
raw/SVGTextElement[JC] def hasAttribute(name: String): Boolean
raw/SVGTextElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGTextElement[JC] def hasAttributes(): Boolean
raw/SVGTextElement[JC] def hasChildNodes(): Boolean
raw/SVGTextElement[JC] def hasExtension(extension: String): Boolean
raw/SVGTextElement[JC] var id: String
raw/SVGTextElement[JC] var innerHTML: String
raw/SVGTextElement[JC] var innerText: String
raw/SVGTextElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGTextElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGTextElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGTextElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGTextElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGTextElement[JC] def isSameNode(other: Node): Boolean
raw/SVGTextElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGTextElement[JC] def lastChild: Node
raw/SVGTextElement[JC] def lastElementChild: Element
raw/SVGTextElement[JC] def lengthAdjust: SVGAnimatedEnumeration
raw/SVGTextElement[JC] def localName: String
raw/SVGTextElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGTextElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGTextElement[JC] def matches(selector: String): Boolean
raw/SVGTextElement[JC] def namespaceURI: String
raw/SVGTextElement[JC] var nearestViewportElement: SVGElement
raw/SVGTextElement[JC] def nextElementSibling: Element
raw/SVGTextElement[JC] def nextSibling: Node
raw/SVGTextElement[JC] def nodeName: String
raw/SVGTextElement[JC] def nodeType: Int
raw/SVGTextElement[JC] var nodeValue: String
raw/SVGTextElement[JC] def normalize(): Unit
raw/SVGTextElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGTextElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGTextElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGTextElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGTextElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGTextElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGTextElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGTextElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGTextElement[JC] var onload: js.Function1[Event, _]
raw/SVGTextElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGTextElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGTextElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGTextElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGTextElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGTextElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGTextElement[JC] var outerHTML: String
raw/SVGTextElement[JC] def ownerDocument: Document
raw/SVGTextElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGTextElement[JC] def parentNode: Node
raw/SVGTextElement[JC] def prefix: String
raw/SVGTextElement[JC] def previousElementSibling: Element
raw/SVGTextElement[JC] def previousSibling: Node
raw/SVGTextElement[JC] def querySelector(selectors: String): Element
raw/SVGTextElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGTextElement[JC] def removeAttribute(name: String): Unit
raw/SVGTextElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGTextElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGTextElement[JC] def removeChild(oldChild: Node): Node
raw/SVGTextElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGTextElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGTextElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGTextElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGTextElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGTextElement[JC] var requiredExtensions: SVGStringList
raw/SVGTextElement[JC] var requiredFeatures: SVGStringList
raw/SVGTextElement[JC] def rotate: SVGAnimatedNumberList
raw/SVGTextElement[JC] def scrollHeight: Int
raw/SVGTextElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGTextElement[JC] var scrollLeft: Double
raw/SVGTextElement[JC] var scrollTop: Double
raw/SVGTextElement[JC] def scrollWidth: Int
raw/SVGTextElement[JC] def selectSubString(charnum: Int, nchars: Int): Unit
raw/SVGTextElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGTextElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGTextElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGTextElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGTextElement[JC] var style: CSSStyleDeclaration
raw/SVGTextElement[JC] var systemLanguage: SVGStringList
raw/SVGTextElement[JC] def tagName: String
raw/SVGTextElement[JC] var textContent: String
raw/SVGTextElement[JC] def textLength: SVGAnimatedLength
raw/SVGTextElement[JC] var transform: SVGAnimatedTransformList
raw/SVGTextElement[JC] def viewportElement: SVGElement
raw/SVGTextElement[JC] def x: SVGAnimatedLengthList
raw/SVGTextElement[JC] var xmlbase: String
raw/SVGTextElement[JC] var xmllang: String
raw/SVGTextElement[JC] var xmlspace: String
raw/SVGTextElement[JC] def y: SVGAnimatedLengthList
raw/SVGTextPathElement[JC] var accessKey: String
raw/SVGTextPathElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGTextPathElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGTextPathElement[JC] def appendChild(newChild: Node): Node
raw/SVGTextPathElement[JC] def attributes: NamedNodeMap
raw/SVGTextPathElement[JC] def childElementCount: Int
raw/SVGTextPathElement[JC] def childNodes: NodeList
raw/SVGTextPathElement[JC] def children: HTMLCollection
raw/SVGTextPathElement[JC] var classList: DOMTokenList
raw/SVGTextPathElement[JC] var className: SVGAnimatedString
raw/SVGTextPathElement[JC] def clientHeight: Int
raw/SVGTextPathElement[JC] def clientLeft: Int
raw/SVGTextPathElement[JC] def clientTop: Int
raw/SVGTextPathElement[JC] def clientWidth: Int
raw/SVGTextPathElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGTextPathElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGTextPathElement[JC] def contains(otherNode: Node): Boolean
raw/SVGTextPathElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGTextPathElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGTextPathElement[JC] def firstChild: Node
raw/SVGTextPathElement[JC] def firstElementChild: Element
raw/SVGTextPathElement[JC] def getAttribute(name: String): String
raw/SVGTextPathElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGTextPathElement[JC] def getAttributeNode(name: String): Attr
raw/SVGTextPathElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGTextPathElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGTextPathElement[JC] def getCharNumAtPosition(point: SVGPoint): Int
raw/SVGTextPathElement[JC] def getClientRects(): ClientRectList
raw/SVGTextPathElement[JC] def getComputedTextLength(): Double
raw/SVGTextPathElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGTextPathElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGTextPathElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGTextPathElement[JC] def getEndPositionOfChar(charnum: Int): SVGPoint
raw/SVGTextPathElement[JC] def getExtentOfChar(charnum: Int): SVGRect
raw/SVGTextPathElement[JC] def getNumberOfChars(): Int
raw/SVGTextPathElement[JC] def getRotationOfChar(charnum: Int): Double
raw/SVGTextPathElement[JC] def getStartPositionOfChar(charnum: Int): SVGPoint
raw/SVGTextPathElement[JC] def getSubStringLength(charnum: Int, nchars: Int): Double
raw/SVGTextPathElement[JC] def hasAttribute(name: String): Boolean
raw/SVGTextPathElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGTextPathElement[JC] def hasAttributes(): Boolean
raw/SVGTextPathElement[JC] def hasChildNodes(): Boolean
raw/SVGTextPathElement[JC] def hasExtension(extension: String): Boolean
raw/SVGTextPathElement[JC] var href: SVGAnimatedString
raw/SVGTextPathElement[JC] var id: String
raw/SVGTextPathElement[JC] var innerHTML: String
raw/SVGTextPathElement[JC] var innerText: String
raw/SVGTextPathElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGTextPathElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGTextPathElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGTextPathElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGTextPathElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGTextPathElement[JC] def isSameNode(other: Node): Boolean
raw/SVGTextPathElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGTextPathElement[JC] def lastChild: Node
raw/SVGTextPathElement[JC] def lastElementChild: Element
raw/SVGTextPathElement[JC] def lengthAdjust: SVGAnimatedEnumeration
raw/SVGTextPathElement[JC] def localName: String
raw/SVGTextPathElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGTextPathElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGTextPathElement[JC] def matches(selector: String): Boolean
raw/SVGTextPathElement[JC] def method: SVGAnimatedEnumeration
raw/SVGTextPathElement[JC] def namespaceURI: String
raw/SVGTextPathElement[JC] def nextElementSibling: Element
raw/SVGTextPathElement[JC] def nextSibling: Node
raw/SVGTextPathElement[JC] def nodeName: String
raw/SVGTextPathElement[JC] def nodeType: Int
raw/SVGTextPathElement[JC] var nodeValue: String
raw/SVGTextPathElement[JC] def normalize(): Unit
raw/SVGTextPathElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGTextPathElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGTextPathElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGTextPathElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGTextPathElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGTextPathElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGTextPathElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGTextPathElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGTextPathElement[JC] var onload: js.Function1[Event, _]
raw/SVGTextPathElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGTextPathElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGTextPathElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGTextPathElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGTextPathElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGTextPathElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGTextPathElement[JC] var outerHTML: String
raw/SVGTextPathElement[JC] def ownerDocument: Document
raw/SVGTextPathElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGTextPathElement[JC] def parentNode: Node
raw/SVGTextPathElement[JC] def prefix: String
raw/SVGTextPathElement[JC] def previousElementSibling: Element
raw/SVGTextPathElement[JC] def previousSibling: Node
raw/SVGTextPathElement[JC] def querySelector(selectors: String): Element
raw/SVGTextPathElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGTextPathElement[JC] def removeAttribute(name: String): Unit
raw/SVGTextPathElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGTextPathElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGTextPathElement[JC] def removeChild(oldChild: Node): Node
raw/SVGTextPathElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGTextPathElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGTextPathElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGTextPathElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGTextPathElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGTextPathElement[JC] var requiredExtensions: SVGStringList
raw/SVGTextPathElement[JC] var requiredFeatures: SVGStringList
raw/SVGTextPathElement[JC] def scrollHeight: Int
raw/SVGTextPathElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGTextPathElement[JC] var scrollLeft: Double
raw/SVGTextPathElement[JC] var scrollTop: Double
raw/SVGTextPathElement[JC] def scrollWidth: Int
raw/SVGTextPathElement[JC] def selectSubString(charnum: Int, nchars: Int): Unit
raw/SVGTextPathElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGTextPathElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGTextPathElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGTextPathElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGTextPathElement[JC] def spacing: SVGAnimatedEnumeration
raw/SVGTextPathElement[JC] def startOffset: SVGAnimatedLength
raw/SVGTextPathElement[JC] var style: CSSStyleDeclaration
raw/SVGTextPathElement[JC] var systemLanguage: SVGStringList
raw/SVGTextPathElement[JC] def tagName: String
raw/SVGTextPathElement[JC] var textContent: String
raw/SVGTextPathElement[JC] def textLength: SVGAnimatedLength
raw/SVGTextPathElement[JC] def viewportElement: SVGElement
raw/SVGTextPathElement[JC] var xmlbase: String
raw/SVGTextPathElement[JC] var xmllang: String
raw/SVGTextPathElement[JC] var xmlspace: String
raw/SVGTextPathElement[JO] val TEXTPATH_METHODTYPE_ALIGN: Int
raw/SVGTextPathElement[JO] val TEXTPATH_METHODTYPE_STRETCH: Int
raw/SVGTextPathElement[JO] val TEXTPATH_METHODTYPE_UNKNOWN: Int
raw/SVGTextPathElement[JO] val TEXTPATH_SPACINGTYPE_AUTO: Int
raw/SVGTextPathElement[JO] val TEXTPATH_SPACINGTYPE_EXACT: Int
raw/SVGTextPathElement[JO] val TEXTPATH_SPACINGTYPE_UNKNOWN: Int
raw/SVGTextPositioningElement[JC] var accessKey: String
raw/SVGTextPositioningElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGTextPositioningElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGTextPositioningElement[JC] def appendChild(newChild: Node): Node
raw/SVGTextPositioningElement[JC] def attributes: NamedNodeMap
raw/SVGTextPositioningElement[JC] def childElementCount: Int
raw/SVGTextPositioningElement[JC] def childNodes: NodeList
raw/SVGTextPositioningElement[JC] def children: HTMLCollection
raw/SVGTextPositioningElement[JC] var classList: DOMTokenList
raw/SVGTextPositioningElement[JC] var className: SVGAnimatedString
raw/SVGTextPositioningElement[JC] def clientHeight: Int
raw/SVGTextPositioningElement[JC] def clientLeft: Int
raw/SVGTextPositioningElement[JC] def clientTop: Int
raw/SVGTextPositioningElement[JC] def clientWidth: Int
raw/SVGTextPositioningElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGTextPositioningElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGTextPositioningElement[JC] def contains(otherNode: Node): Boolean
raw/SVGTextPositioningElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGTextPositioningElement[JC] def dx: SVGAnimatedLengthList
raw/SVGTextPositioningElement[JC] def dy: SVGAnimatedLengthList
raw/SVGTextPositioningElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGTextPositioningElement[JC] def firstChild: Node
raw/SVGTextPositioningElement[JC] def firstElementChild: Element
raw/SVGTextPositioningElement[JC] def getAttribute(name: String): String
raw/SVGTextPositioningElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGTextPositioningElement[JC] def getAttributeNode(name: String): Attr
raw/SVGTextPositioningElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGTextPositioningElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGTextPositioningElement[JC] def getCharNumAtPosition(point: SVGPoint): Int
raw/SVGTextPositioningElement[JC] def getClientRects(): ClientRectList
raw/SVGTextPositioningElement[JC] def getComputedTextLength(): Double
raw/SVGTextPositioningElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGTextPositioningElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGTextPositioningElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGTextPositioningElement[JC] def getEndPositionOfChar(charnum: Int): SVGPoint
raw/SVGTextPositioningElement[JC] def getExtentOfChar(charnum: Int): SVGRect
raw/SVGTextPositioningElement[JC] def getNumberOfChars(): Int
raw/SVGTextPositioningElement[JC] def getRotationOfChar(charnum: Int): Double
raw/SVGTextPositioningElement[JC] def getStartPositionOfChar(charnum: Int): SVGPoint
raw/SVGTextPositioningElement[JC] def getSubStringLength(charnum: Int, nchars: Int): Double
raw/SVGTextPositioningElement[JC] def hasAttribute(name: String): Boolean
raw/SVGTextPositioningElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGTextPositioningElement[JC] def hasAttributes(): Boolean
raw/SVGTextPositioningElement[JC] def hasChildNodes(): Boolean
raw/SVGTextPositioningElement[JC] def hasExtension(extension: String): Boolean
raw/SVGTextPositioningElement[JC] var id: String
raw/SVGTextPositioningElement[JC] var innerHTML: String
raw/SVGTextPositioningElement[JC] var innerText: String
raw/SVGTextPositioningElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGTextPositioningElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGTextPositioningElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGTextPositioningElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGTextPositioningElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGTextPositioningElement[JC] def isSameNode(other: Node): Boolean
raw/SVGTextPositioningElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGTextPositioningElement[JC] def lastChild: Node
raw/SVGTextPositioningElement[JC] def lastElementChild: Element
raw/SVGTextPositioningElement[JC] def lengthAdjust: SVGAnimatedEnumeration
raw/SVGTextPositioningElement[JC] def localName: String
raw/SVGTextPositioningElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGTextPositioningElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGTextPositioningElement[JC] def matches(selector: String): Boolean
raw/SVGTextPositioningElement[JC] def namespaceURI: String
raw/SVGTextPositioningElement[JC] def nextElementSibling: Element
raw/SVGTextPositioningElement[JC] def nextSibling: Node
raw/SVGTextPositioningElement[JC] def nodeName: String
raw/SVGTextPositioningElement[JC] def nodeType: Int
raw/SVGTextPositioningElement[JC] var nodeValue: String
raw/SVGTextPositioningElement[JC] def normalize(): Unit
raw/SVGTextPositioningElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGTextPositioningElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGTextPositioningElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGTextPositioningElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGTextPositioningElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGTextPositioningElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGTextPositioningElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGTextPositioningElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGTextPositioningElement[JC] var onload: js.Function1[Event, _]
raw/SVGTextPositioningElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGTextPositioningElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGTextPositioningElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGTextPositioningElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGTextPositioningElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGTextPositioningElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGTextPositioningElement[JC] var outerHTML: String
raw/SVGTextPositioningElement[JC] def ownerDocument: Document
raw/SVGTextPositioningElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGTextPositioningElement[JC] def parentNode: Node
raw/SVGTextPositioningElement[JC] def prefix: String
raw/SVGTextPositioningElement[JC] def previousElementSibling: Element
raw/SVGTextPositioningElement[JC] def previousSibling: Node
raw/SVGTextPositioningElement[JC] def querySelector(selectors: String): Element
raw/SVGTextPositioningElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGTextPositioningElement[JC] def removeAttribute(name: String): Unit
raw/SVGTextPositioningElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGTextPositioningElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGTextPositioningElement[JC] def removeChild(oldChild: Node): Node
raw/SVGTextPositioningElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGTextPositioningElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGTextPositioningElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGTextPositioningElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGTextPositioningElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGTextPositioningElement[JC] var requiredExtensions: SVGStringList
raw/SVGTextPositioningElement[JC] var requiredFeatures: SVGStringList
raw/SVGTextPositioningElement[JC] def rotate: SVGAnimatedNumberList
raw/SVGTextPositioningElement[JC] def scrollHeight: Int
raw/SVGTextPositioningElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGTextPositioningElement[JC] var scrollLeft: Double
raw/SVGTextPositioningElement[JC] var scrollTop: Double
raw/SVGTextPositioningElement[JC] def scrollWidth: Int
raw/SVGTextPositioningElement[JC] def selectSubString(charnum: Int, nchars: Int): Unit
raw/SVGTextPositioningElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGTextPositioningElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGTextPositioningElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGTextPositioningElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGTextPositioningElement[JC] var style: CSSStyleDeclaration
raw/SVGTextPositioningElement[JC] var systemLanguage: SVGStringList
raw/SVGTextPositioningElement[JC] def tagName: String
raw/SVGTextPositioningElement[JC] var textContent: String
raw/SVGTextPositioningElement[JC] def textLength: SVGAnimatedLength
raw/SVGTextPositioningElement[JC] def viewportElement: SVGElement
raw/SVGTextPositioningElement[JC] def x: SVGAnimatedLengthList
raw/SVGTextPositioningElement[JC] var xmlbase: String
raw/SVGTextPositioningElement[JC] var xmllang: String
raw/SVGTextPositioningElement[JC] var xmlspace: String
raw/SVGTextPositioningElement[JC] def y: SVGAnimatedLengthList
raw/SVGTitleElement[JC] var accessKey: String
raw/SVGTitleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGTitleElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGTitleElement[JC] def appendChild(newChild: Node): Node
raw/SVGTitleElement[JC] def attributes: NamedNodeMap
raw/SVGTitleElement[JC] def childElementCount: Int
raw/SVGTitleElement[JC] def childNodes: NodeList
raw/SVGTitleElement[JC] def children: HTMLCollection
raw/SVGTitleElement[JC] var classList: DOMTokenList
raw/SVGTitleElement[JC] var className: SVGAnimatedString
raw/SVGTitleElement[JC] def clientHeight: Int
raw/SVGTitleElement[JC] def clientLeft: Int
raw/SVGTitleElement[JC] def clientTop: Int
raw/SVGTitleElement[JC] def clientWidth: Int
raw/SVGTitleElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGTitleElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGTitleElement[JC] def contains(otherNode: Node): Boolean
raw/SVGTitleElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGTitleElement[JC] def firstChild: Node
raw/SVGTitleElement[JC] def firstElementChild: Element
raw/SVGTitleElement[JC] def getAttribute(name: String): String
raw/SVGTitleElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGTitleElement[JC] def getAttributeNode(name: String): Attr
raw/SVGTitleElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGTitleElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGTitleElement[JC] def getClientRects(): ClientRectList
raw/SVGTitleElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGTitleElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGTitleElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGTitleElement[JC] def hasAttribute(name: String): Boolean
raw/SVGTitleElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGTitleElement[JC] def hasAttributes(): Boolean
raw/SVGTitleElement[JC] def hasChildNodes(): Boolean
raw/SVGTitleElement[JC] var id: String
raw/SVGTitleElement[JC] var innerHTML: String
raw/SVGTitleElement[JC] var innerText: String
raw/SVGTitleElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGTitleElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGTitleElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGTitleElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGTitleElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGTitleElement[JC] def isSameNode(other: Node): Boolean
raw/SVGTitleElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGTitleElement[JC] def lastChild: Node
raw/SVGTitleElement[JC] def lastElementChild: Element
raw/SVGTitleElement[JC] def localName: String
raw/SVGTitleElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGTitleElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGTitleElement[JC] def matches(selector: String): Boolean
raw/SVGTitleElement[JC] def namespaceURI: String
raw/SVGTitleElement[JC] def nextElementSibling: Element
raw/SVGTitleElement[JC] def nextSibling: Node
raw/SVGTitleElement[JC] def nodeName: String
raw/SVGTitleElement[JC] def nodeType: Int
raw/SVGTitleElement[JC] var nodeValue: String
raw/SVGTitleElement[JC] def normalize(): Unit
raw/SVGTitleElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGTitleElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGTitleElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGTitleElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGTitleElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGTitleElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGTitleElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGTitleElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGTitleElement[JC] var onload: js.Function1[Event, _]
raw/SVGTitleElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGTitleElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGTitleElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGTitleElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGTitleElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGTitleElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGTitleElement[JC] var outerHTML: String
raw/SVGTitleElement[JC] def ownerDocument: Document
raw/SVGTitleElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGTitleElement[JC] def parentNode: Node
raw/SVGTitleElement[JC] def prefix: String
raw/SVGTitleElement[JC] def previousElementSibling: Element
raw/SVGTitleElement[JC] def previousSibling: Node
raw/SVGTitleElement[JC] def querySelector(selectors: String): Element
raw/SVGTitleElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGTitleElement[JC] def removeAttribute(name: String): Unit
raw/SVGTitleElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGTitleElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGTitleElement[JC] def removeChild(oldChild: Node): Node
raw/SVGTitleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGTitleElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGTitleElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGTitleElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGTitleElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGTitleElement[JC] def scrollHeight: Int
raw/SVGTitleElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGTitleElement[JC] var scrollLeft: Double
raw/SVGTitleElement[JC] var scrollTop: Double
raw/SVGTitleElement[JC] def scrollWidth: Int
raw/SVGTitleElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGTitleElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGTitleElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGTitleElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGTitleElement[JC] var style: CSSStyleDeclaration
raw/SVGTitleElement[JC] def tagName: String
raw/SVGTitleElement[JC] var textContent: String
raw/SVGTitleElement[JC] def viewportElement: SVGElement
raw/SVGTitleElement[JC] var xmlbase: String
raw/SVGTitleElement[JC] var xmllang: String
raw/SVGTitleElement[JC] var xmlspace: String
raw/SVGTransform[JC] def angle: Double
raw/SVGTransform[JC] def matrix: SVGMatrix
raw/SVGTransform[JC] def setMatrix(matrix: SVGMatrix): Unit
raw/SVGTransform[JC] def setRotate(angle: Double, cx: Double, cy: Double): Unit
raw/SVGTransform[JC] def setScale(sx: Double, sy: Double): Unit
raw/SVGTransform[JC] def setSkewX(angle: Double): Unit
raw/SVGTransform[JC] def setSkewY(angle: Double): Unit
raw/SVGTransform[JC] def setTranslate(tx: Double, ty: Double): Unit
raw/SVGTransform[JC] def `type`: Int
raw/SVGTransform[JO] val SVG_TRANSFORM_MATRIX: Int
raw/SVGTransform[JO] val SVG_TRANSFORM_ROTATE: Int
raw/SVGTransform[JO] val SVG_TRANSFORM_SCALE: Int
raw/SVGTransform[JO] val SVG_TRANSFORM_SKEWX: Int
raw/SVGTransform[JO] val SVG_TRANSFORM_SKEWY: Int
raw/SVGTransform[JO] val SVG_TRANSFORM_TRANSLATE: Int
raw/SVGTransform[JO] val SVG_TRANSFORM_UNKNOWN: Int
raw/SVGTransformList[JC] def appendItem(newItem: SVGTransform): SVGTransform
raw/SVGTransformList[JC] def clear(): Unit
raw/SVGTransformList[JC] def consolidate(): SVGTransform
raw/SVGTransformList[JC] def createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform
raw/SVGTransformList[JC] def getItem(index: Int): SVGTransform
raw/SVGTransformList[JC] def initialize(newItem: SVGTransform): SVGTransform
raw/SVGTransformList[JC] def insertItemBefore(newItem: SVGTransform, index: Int): SVGTransform
raw/SVGTransformList[JC] def numberOfItems: Int
raw/SVGTransformList[JC] def removeItem(index: Int): SVGTransform
raw/SVGTransformList[JC] def replaceItem(newItem: SVGTransform, index: Int): SVGTransform
raw/SVGTransformable[JT] var farthestViewportElement: SVGElement
raw/SVGTransformable[JT] def getBBox(): SVGRect
raw/SVGTransformable[JT] def getCTM(): SVGMatrix
raw/SVGTransformable[JT] def getScreenCTM(): SVGMatrix
raw/SVGTransformable[JT] def getTransformToElement(element: SVGElement): SVGMatrix
raw/SVGTransformable[JT] var nearestViewportElement: SVGElement
raw/SVGTransformable[JT] var transform: SVGAnimatedTransformList
raw/SVGURIReference[JT] var href: SVGAnimatedString
raw/SVGUnitTypes[JO] val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Int
raw/SVGUnitTypes[JO] val SVG_UNIT_TYPE_UNKNOWN: Int
raw/SVGUnitTypes[JO] val SVG_UNIT_TYPE_USERSPACEONUSE: Int
raw/SVGUnitTypes[JT] val SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: Int
raw/SVGUnitTypes[JT] val SVG_UNIT_TYPE_UNKNOWN: Int
raw/SVGUnitTypes[JT] val SVG_UNIT_TYPE_USERSPACEONUSE: Int
raw/SVGUseElement[JC] var accessKey: String
raw/SVGUseElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGUseElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGUseElement[JC] def animatedInstanceRoot: SVGElementInstance
raw/SVGUseElement[JC] def appendChild(newChild: Node): Node
raw/SVGUseElement[JC] def attributes: NamedNodeMap
raw/SVGUseElement[JC] def childElementCount: Int
raw/SVGUseElement[JC] def childNodes: NodeList
raw/SVGUseElement[JC] def children: HTMLCollection
raw/SVGUseElement[JC] var classList: DOMTokenList
raw/SVGUseElement[JC] var className: SVGAnimatedString
raw/SVGUseElement[JC] def clientHeight: Int
raw/SVGUseElement[JC] def clientLeft: Int
raw/SVGUseElement[JC] def clientTop: Int
raw/SVGUseElement[JC] def clientWidth: Int
raw/SVGUseElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGUseElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGUseElement[JC] def contains(otherNode: Node): Boolean
raw/SVGUseElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGUseElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGUseElement[JC] var farthestViewportElement: SVGElement
raw/SVGUseElement[JC] def firstChild: Node
raw/SVGUseElement[JC] def firstElementChild: Element
raw/SVGUseElement[JC] def getAttribute(name: String): String
raw/SVGUseElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGUseElement[JC] def getAttributeNode(name: String): Attr
raw/SVGUseElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGUseElement[JC] def getBBox(): SVGRect
raw/SVGUseElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGUseElement[JC] def getCTM(): SVGMatrix
raw/SVGUseElement[JC] def getClientRects(): ClientRectList
raw/SVGUseElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGUseElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGUseElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGUseElement[JC] def getScreenCTM(): SVGMatrix
raw/SVGUseElement[JC] def getTransformToElement(element: SVGElement): SVGMatrix
raw/SVGUseElement[JC] def hasAttribute(name: String): Boolean
raw/SVGUseElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGUseElement[JC] def hasAttributes(): Boolean
raw/SVGUseElement[JC] def hasChildNodes(): Boolean
raw/SVGUseElement[JC] def hasExtension(extension: String): Boolean
raw/SVGUseElement[JC] def height: SVGAnimatedLength
raw/SVGUseElement[JC] var href: SVGAnimatedString
raw/SVGUseElement[JC] var id: String
raw/SVGUseElement[JC] var innerHTML: String
raw/SVGUseElement[JC] var innerText: String
raw/SVGUseElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGUseElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGUseElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGUseElement[JC] def instanceRoot: SVGElementInstance
raw/SVGUseElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGUseElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGUseElement[JC] def isSameNode(other: Node): Boolean
raw/SVGUseElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGUseElement[JC] def lastChild: Node
raw/SVGUseElement[JC] def lastElementChild: Element
raw/SVGUseElement[JC] def localName: String
raw/SVGUseElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGUseElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGUseElement[JC] def matches(selector: String): Boolean
raw/SVGUseElement[JC] def namespaceURI: String
raw/SVGUseElement[JC] var nearestViewportElement: SVGElement
raw/SVGUseElement[JC] def nextElementSibling: Element
raw/SVGUseElement[JC] def nextSibling: Node
raw/SVGUseElement[JC] def nodeName: String
raw/SVGUseElement[JC] def nodeType: Int
raw/SVGUseElement[JC] var nodeValue: String
raw/SVGUseElement[JC] def normalize(): Unit
raw/SVGUseElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGUseElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGUseElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGUseElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGUseElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGUseElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGUseElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGUseElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGUseElement[JC] var onload: js.Function1[Event, _]
raw/SVGUseElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGUseElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGUseElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGUseElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGUseElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGUseElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGUseElement[JC] var outerHTML: String
raw/SVGUseElement[JC] def ownerDocument: Document
raw/SVGUseElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGUseElement[JC] def parentNode: Node
raw/SVGUseElement[JC] def prefix: String
raw/SVGUseElement[JC] def previousElementSibling: Element
raw/SVGUseElement[JC] def previousSibling: Node
raw/SVGUseElement[JC] def querySelector(selectors: String): Element
raw/SVGUseElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGUseElement[JC] def removeAttribute(name: String): Unit
raw/SVGUseElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGUseElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGUseElement[JC] def removeChild(oldChild: Node): Node
raw/SVGUseElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGUseElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGUseElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGUseElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGUseElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGUseElement[JC] var requiredExtensions: SVGStringList
raw/SVGUseElement[JC] var requiredFeatures: SVGStringList
raw/SVGUseElement[JC] def scrollHeight: Int
raw/SVGUseElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGUseElement[JC] var scrollLeft: Double
raw/SVGUseElement[JC] var scrollTop: Double
raw/SVGUseElement[JC] def scrollWidth: Int
raw/SVGUseElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGUseElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGUseElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGUseElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGUseElement[JC] var style: CSSStyleDeclaration
raw/SVGUseElement[JC] var systemLanguage: SVGStringList
raw/SVGUseElement[JC] def tagName: String
raw/SVGUseElement[JC] var textContent: String
raw/SVGUseElement[JC] var transform: SVGAnimatedTransformList
raw/SVGUseElement[JC] def viewportElement: SVGElement
raw/SVGUseElement[JC] def width: SVGAnimatedLength
raw/SVGUseElement[JC] def x: SVGAnimatedLength
raw/SVGUseElement[JC] var xmlbase: String
raw/SVGUseElement[JC] var xmllang: String
raw/SVGUseElement[JC] var xmlspace: String
raw/SVGUseElement[JC] def y: SVGAnimatedLength
raw/SVGViewElement[JC] var accessKey: String
raw/SVGViewElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGViewElement[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGViewElement[JC] def appendChild(newChild: Node): Node
raw/SVGViewElement[JC] def attributes: NamedNodeMap
raw/SVGViewElement[JC] def childElementCount: Int
raw/SVGViewElement[JC] def childNodes: NodeList
raw/SVGViewElement[JC] def children: HTMLCollection
raw/SVGViewElement[JC] var classList: DOMTokenList
raw/SVGViewElement[JC] def clientHeight: Int
raw/SVGViewElement[JC] def clientLeft: Int
raw/SVGViewElement[JC] def clientTop: Int
raw/SVGViewElement[JC] def clientWidth: Int
raw/SVGViewElement[JC] def cloneNode(deep: Boolean?): Node
raw/SVGViewElement[JC] def compareDocumentPosition(other: Node): Int
raw/SVGViewElement[JC] def contains(otherNode: Node): Boolean
raw/SVGViewElement[JC] def dispatchEvent(evt: Event): Boolean
raw/SVGViewElement[JC] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGViewElement[JC] def firstChild: Node
raw/SVGViewElement[JC] def firstElementChild: Element
raw/SVGViewElement[JC] def getAttribute(name: String): String
raw/SVGViewElement[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/SVGViewElement[JC] def getAttributeNode(name: String): Attr
raw/SVGViewElement[JC] def getAttributeNodeNS(namespaceURI: String, localName: String): Attr
raw/SVGViewElement[JC] def getBoundingClientRect(): ClientRect
raw/SVGViewElement[JC] def getClientRects(): ClientRectList
raw/SVGViewElement[JC] def getElementsByClassName(classNames: String): HTMLCollection
raw/SVGViewElement[JC] def getElementsByTagName(name: String): HTMLCollection
raw/SVGViewElement[JC] def getElementsByTagNameNS(namespaceURI: String, localName: String): HTMLCollection
raw/SVGViewElement[JC] def hasAttribute(name: String): Boolean
raw/SVGViewElement[JC] def hasAttributeNS(namespaceURI: String, localName: String): Boolean
raw/SVGViewElement[JC] def hasAttributes(): Boolean
raw/SVGViewElement[JC] def hasChildNodes(): Boolean
raw/SVGViewElement[JC] var id: String
raw/SVGViewElement[JC] var innerHTML: String
raw/SVGViewElement[JC] var innerText: String
raw/SVGViewElement[JC] def insertAdjacentElement(position: String, element: Element): Element
raw/SVGViewElement[JC] def insertAdjacentHTML(where: String, html: String): Unit
raw/SVGViewElement[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/SVGViewElement[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/SVGViewElement[JC] def isEqualNode(arg: Node): Boolean
raw/SVGViewElement[JC] def isSameNode(other: Node): Boolean
raw/SVGViewElement[JC] def isSupported(feature: String, version: String): Boolean
raw/SVGViewElement[JC] def lastChild: Node
raw/SVGViewElement[JC] def lastElementChild: Element
raw/SVGViewElement[JC] def localName: String
raw/SVGViewElement[JC] def lookupNamespaceURI(prefix: String): String
raw/SVGViewElement[JC] def lookupPrefix(namespaceURI: String): String
raw/SVGViewElement[JC] def matches(selector: String): Boolean
raw/SVGViewElement[JC] def namespaceURI: String
raw/SVGViewElement[JC] def nextElementSibling: Element
raw/SVGViewElement[JC] def nextSibling: Node
raw/SVGViewElement[JC] def nodeName: String
raw/SVGViewElement[JC] def nodeType: Int
raw/SVGViewElement[JC] var nodeValue: String
raw/SVGViewElement[JC] def normalize(): Unit
raw/SVGViewElement[JC] var onclick: js.Function1[MouseEvent, _]
raw/SVGViewElement[JC] var oncopy: js.Function1[ClipboardEvent, _]
raw/SVGViewElement[JC] var oncut: js.Function1[ClipboardEvent, _]
raw/SVGViewElement[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/SVGViewElement[JC] var onfocusin: js.Function1[FocusEvent, _]
raw/SVGViewElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/SVGViewElement[JC] var onfullscreenchange: js.Function1[Event, _]
raw/SVGViewElement[JC] var onfullscreenerror: js.Function1[Event, _]
raw/SVGViewElement[JC] var onload: js.Function1[Event, _]
raw/SVGViewElement[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/SVGViewElement[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/SVGViewElement[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/SVGViewElement[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/SVGViewElement[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/SVGViewElement[JC] var onpaste: js.Function1[ClipboardEvent, _]
raw/SVGViewElement[JC] var outerHTML: String
raw/SVGViewElement[JC] def ownerDocument: Document
raw/SVGViewElement[JC] def ownerSVGElement: SVGSVGElement
raw/SVGViewElement[JC] def parentNode: Node
raw/SVGViewElement[JC] def prefix: String
raw/SVGViewElement[JC] var preserveAspectRatio: SVGAnimatedPreserveAspectRatio
raw/SVGViewElement[JC] def previousElementSibling: Element
raw/SVGViewElement[JC] def previousSibling: Node
raw/SVGViewElement[JC] def querySelector(selectors: String): Element
raw/SVGViewElement[JC] def querySelectorAll(selectors: String): NodeList
raw/SVGViewElement[JC] def removeAttribute(name: String): Unit
raw/SVGViewElement[JC] def removeAttributeNS(namespaceURI: String, localName: String): Unit
raw/SVGViewElement[JC] def removeAttributeNode(oldAttr: Attr): Attr
raw/SVGViewElement[JC] def removeChild(oldChild: Node): Node
raw/SVGViewElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/SVGViewElement[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/SVGViewElement[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/SVGViewElement[JC] def replaceChildren(nodes: Node | String*): Unit
raw/SVGViewElement[JC] def requestFullscreen(options: FullscreenOptions?): js.Promise[Unit]
raw/SVGViewElement[JC] def scrollHeight: Int
raw/SVGViewElement[JC] def scrollIntoView(top: Boolean?): Unit
raw/SVGViewElement[JC] var scrollLeft: Double
raw/SVGViewElement[JC] var scrollTop: Double
raw/SVGViewElement[JC] def scrollWidth: Int
raw/SVGViewElement[JC] def setAttribute(name: String, value: String): Unit
raw/SVGViewElement[JC] def setAttributeNS(namespaceURI: String, qualifiedName: String, value: String): Unit
raw/SVGViewElement[JC] def setAttributeNode(newAttr: Attr): Attr
raw/SVGViewElement[JC] def setAttributeNodeNS(newAttr: Attr): Attr
raw/SVGViewElement[JC] def tagName: String
raw/SVGViewElement[JC] var textContent: String
raw/SVGViewElement[JC] var viewBox: SVGAnimatedRect
raw/SVGViewElement[JC] def viewTarget: SVGStringList
raw/SVGViewElement[JC] def viewportElement: SVGElement
raw/SVGViewElement[JC] var xmlbase: String
raw/SVGViewElement[JC] var zoomAndPan: Int
raw/SVGZoomAndPan[JO] val SVG_ZOOMANDPAN_DISABLE: Int
raw/SVGZoomAndPan[JO] val SVG_ZOOMANDPAN_MAGNIFY: Int
raw/SVGZoomAndPan[JO] val SVG_ZOOMANDPAN_UNKNOWN: Int
raw/SVGZoomAndPan[JT] var zoomAndPan: Int
raw/SVGZoomEventInit[JT] var bubbles: js.UndefOr[Boolean]
raw/SVGZoomEventInit[JT] var cancelable: js.UndefOr[Boolean]
raw/SVGZoomEventInit[JT] var composed: js.UndefOr[Boolean]
raw/SVGZoomEventInit[JT] val detail: js.UndefOr[Int]
raw/SVGZoomEventInit[JT] var newScale: js.UndefOr[Double]
raw/SVGZoomEventInit[JT] var newTranslate: js.UndefOr[SVGPoint]
raw/SVGZoomEventInit[JT] var previousScale: js.UndefOr[Double]
raw/SVGZoomEventInit[JT] var previousTranslate: js.UndefOr[SVGPoint]
raw/SVGZoomEventInit[JT] var scoped: js.UndefOr[Boolean]
raw/SVGZoomEventInit[JT] val view: js.UndefOr[Window]
raw/SVGZoomEventInit[JT] var zoomRectScreen: js.UndefOr[SVGRect]
raw/Screen[JC] def availHeight: Double
raw/Screen[JC] def availWidth: Double
raw/Screen[JC] def colorDepth: Int
raw/Screen[JC] def height: Double
raw/Screen[JC] def pixelDepth: Int
raw/Screen[JC] def width: Double
raw/Selection[JC] def addRange(range: Range): Unit
raw/Selection[JC] def anchorNode: Node
raw/Selection[JC] def anchorOffset: Int
raw/Selection[JC] def collapse(parentNode: Node, offset: Int): Unit
raw/Selection[JC] def collapseToEnd(): Unit
raw/Selection[JC] def collapseToStart(): Unit
raw/Selection[JC] def containsNode(node: Node, partialContainment: Boolean = false): Boolean
raw/Selection[JC] def deleteFromDocument(): Unit
raw/Selection[JC] def extend(node: Node, offset: Int = 0): Unit
raw/Selection[JC] def focusNode: Node
raw/Selection[JC] def focusOffset: Int
raw/Selection[JC] def getRangeAt(index: Int): Range
raw/Selection[JC] def isCollapsed: Boolean
raw/Selection[JC] def rangeCount: Int
raw/Selection[JC] def removeAllRanges(): Unit
raw/Selection[JC] def removeRange(range: Range): Unit
raw/Selection[JC] def selectAllChildren(parentNode: Node): Unit
raw/StereoPannerNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/StereoPannerNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/StereoPannerNode[JT] var channelCount: Int
raw/StereoPannerNode[JT] var channelCountMode: Int
raw/StereoPannerNode[JT] var channelInterpretation: String
raw/StereoPannerNode[JT] def connect(audioNode: AudioNode): Unit
raw/StereoPannerNode[JT] def connect(audioParam: AudioParam): Unit
raw/StereoPannerNode[JT] val context: AudioContext
raw/StereoPannerNode[JT] def disconnect(output: AudioNode?): Unit
raw/StereoPannerNode[JT] def dispatchEvent(evt: Event): Boolean
raw/StereoPannerNode[JT] val numberOfInputs: Int
raw/StereoPannerNode[JT] val numberOfOutputs: Int
raw/StereoPannerNode[JT] val pan: AudioParam
raw/StereoPannerNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/StereoPannerNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Storage[JC] def clear(): Unit
raw/Storage[JC] def getItem(key: String): String
raw/Storage[JC] def key(index: Int): String
raw/Storage[JC] var length: Int
raw/Storage[JC] def removeItem(key: String): Unit
raw/Storage[JC] def setItem(key: String, data: String): Unit
raw/StorageEvent[JC] def bubbles: Boolean
raw/StorageEvent[JC] def cancelBubble: Boolean
raw/StorageEvent[JC] def cancelable: Boolean
raw/StorageEvent[JC] def currentTarget: EventTarget
raw/StorageEvent[JC] def defaultPrevented: Boolean
raw/StorageEvent[JC] def eventPhase: Int
raw/StorageEvent[JC] def isTrusted: Boolean
raw/StorageEvent[JC] def key: String
raw/StorageEvent[JC] def newValue: String
raw/StorageEvent[JC] def oldValue: String
raw/StorageEvent[JC] def preventDefault(): Unit
raw/StorageEvent[JC] def stopImmediatePropagation(): Unit
raw/StorageEvent[JC] def stopPropagation(): Unit
raw/StorageEvent[JC] def storageArea: Storage
raw/StorageEvent[JC] def target: EventTarget
raw/StorageEvent[JC] def timeStamp: Double
raw/StorageEvent[JC] def `type`: String
raw/StorageEvent[JC] def url: String
raw/StorageEventInit[JT] var bubbles: js.UndefOr[Boolean]
raw/StorageEventInit[JT] var cancelable: js.UndefOr[Boolean]
raw/StorageEventInit[JT] var composed: js.UndefOr[Boolean]
raw/StorageEventInit[JT] var key: js.UndefOr[String]
raw/StorageEventInit[JT] var newValue: js.UndefOr[String]
raw/StorageEventInit[JT] var oldValue: js.UndefOr[String]
raw/StorageEventInit[JT] var scoped: js.UndefOr[Boolean]
raw/StorageEventInit[JT] var storageArea: js.UndefOr[Storage]
raw/StorageEventInit[JT] var url: js.UndefOr[String]
raw/StyleMedia[JT] def matchMedium(mediaquery: String): Boolean
raw/StyleMedia[JT] def `type`: String
raw/StyleSheet[JC] def disabled: Boolean
raw/StyleSheet[JC] def href: String
raw/StyleSheet[JC] def media: MediaList
raw/StyleSheet[JC] def ownerNode: Node
raw/StyleSheet[JC] def parentStyleSheet: StyleSheet
raw/StyleSheet[JC] def title: String
raw/StyleSheet[JC] def `type`: String
raw/StyleSheetList[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): StyleSheet
raw/StyleSheetList[JC] def item(index: Int): StyleSheet
raw/StyleSheetList[JC] def length: Int
raw/StyleSheetList[JC] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: StyleSheet): Unit
raw/Text[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/Text[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Text[JC] def appendChild(newChild: Node): Node
raw/Text[JC] def appendData(arg: String): Unit
raw/Text[JC] def attributes: NamedNodeMap
raw/Text[JC] def childNodes: NodeList
raw/Text[JC] def cloneNode(deep: Boolean?): Node
raw/Text[JC] def compareDocumentPosition(other: Node): Int
raw/Text[JC] def contains(otherNode: Node): Boolean
raw/Text[JC] var data: String
raw/Text[JC] def deleteData(offset: Int, count: Int): Unit
raw/Text[JC] def dispatchEvent(evt: Event): Boolean
raw/Text[JC] def firstChild: Node
raw/Text[JC] def hasAttributes(): Boolean
raw/Text[JC] def hasChildNodes(): Boolean
raw/Text[JC] var innerText: String
raw/Text[JC] def insertBefore(newChild: Node, refChild: Node): Node
raw/Text[JC] def insertData(offset: Int, arg: String): Unit
raw/Text[JC] def isDefaultNamespace(namespaceURI: String): Boolean
raw/Text[JC] def isEqualNode(arg: Node): Boolean
raw/Text[JC] def isSameNode(other: Node): Boolean
raw/Text[JC] def isSupported(feature: String, version: String): Boolean
raw/Text[JC] def lastChild: Node
raw/Text[JC] def length: Int
raw/Text[JC] def localName: String
raw/Text[JC] def lookupNamespaceURI(prefix: String): String
raw/Text[JC] def lookupPrefix(namespaceURI: String): String
raw/Text[JC] def namespaceURI: String
raw/Text[JC] def nextElementSibling: Element
raw/Text[JC] def nextSibling: Node
raw/Text[JC] def nodeName: String
raw/Text[JC] def nodeType: Int
raw/Text[JC] var nodeValue: String
raw/Text[JC] def normalize(): Unit
raw/Text[JC] def ownerDocument: Document
raw/Text[JC] def parentNode: Node
raw/Text[JC] def previousElementSibling: Element
raw/Text[JC] def previousSibling: Node
raw/Text[JC] def removeChild(oldChild: Node): Node
raw/Text[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/Text[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Text[JC] def replaceChild(newChild: Node, oldChild: Node): Node
raw/Text[JC] def replaceData(offset: Int, count: Int, arg: String): Unit
raw/Text[JC] def splitText(offset: Int): Text
raw/Text[JC] def substringData(offset: Int, count: Int): String
raw/Text[JC] var textContent: String
raw/Text[JC] def wholeText: String
raw/TextEvent[JC] def bubbles: Boolean
raw/TextEvent[JC] def cancelBubble: Boolean
raw/TextEvent[JC] def cancelable: Boolean
raw/TextEvent[JC] def currentTarget: EventTarget
raw/TextEvent[JC] def data: String
raw/TextEvent[JC] def defaultPrevented: Boolean
raw/TextEvent[JC] def detail: Int
raw/TextEvent[JC] def eventPhase: Int
raw/TextEvent[JC] def initTextEvent(typeArg: String, canBubbleArg: Boolean, cancelableArg: Boolean, viewArg: Window, dataArg: String, inputMethod: Int, locale: String): Unit
raw/TextEvent[JC] def inputMethod: Int
raw/TextEvent[JC] def isTrusted: Boolean
raw/TextEvent[JC] def locale: String
raw/TextEvent[JC] def preventDefault(): Unit
raw/TextEvent[JC] def stopImmediatePropagation(): Unit
raw/TextEvent[JC] def stopPropagation(): Unit
raw/TextEvent[JC] def target: EventTarget
raw/TextEvent[JC] def timeStamp: Double
raw/TextEvent[JC] def `type`: String
raw/TextEvent[JC] def view: Window
raw/TextEvent[JO] val DOM_INPUT_METHOD_DROP: Int
raw/TextEvent[JO] val DOM_INPUT_METHOD_HANDWRITING: Int
raw/TextEvent[JO] val DOM_INPUT_METHOD_IME: Int
raw/TextEvent[JO] val DOM_INPUT_METHOD_KEYBOARD: Int
raw/TextEvent[JO] val DOM_INPUT_METHOD_MULTIMODAL: Int
raw/TextEvent[JO] val DOM_INPUT_METHOD_OPTION: Int
raw/TextEvent[JO] val DOM_INPUT_METHOD_PASTE: Int
raw/TextEvent[JO] val DOM_INPUT_METHOD_SCRIPT: Int
raw/TextEvent[JO] val DOM_INPUT_METHOD_UNKNOWN: Int
raw/TextEvent[JO] val DOM_INPUT_METHOD_VOICE: Int
raw/TextEventInit[JT] var bubbles: js.UndefOr[Boolean]
raw/TextEventInit[JT] var cancelable: js.UndefOr[Boolean]
raw/TextEventInit[JT] var composed: js.UndefOr[Boolean]
raw/TextEventInit[JT] var data: js.UndefOr[String]
raw/TextEventInit[JT] val detail: js.UndefOr[Int]
raw/TextEventInit[JT] var inputMethod: js.UndefOr[Int]
raw/TextEventInit[JT] var locale: js.UndefOr[String]
raw/TextEventInit[JT] var scoped: js.UndefOr[Boolean]
raw/TextEventInit[JT] val view: js.UndefOr[Window]
raw/TextMetrics[JC] var width: Double
raw/TextTrack[JO] var DISABLED: Int
raw/TextTrack[JO] var ERROR: Int
raw/TextTrack[JO] var HIDDEN: Int
raw/TextTrack[JO] var LOADED: Int
raw/TextTrack[JO] var LOADING: Int
raw/TextTrack[JO] var NONE: Int
raw/TextTrack[JO] var SHOWING: Int
raw/TextTrack[JT] var DISABLED: Int
raw/TextTrack[JT] var ERROR: Int
raw/TextTrack[JT] var HIDDEN: Int
raw/TextTrack[JT] var LOADED: Int
raw/TextTrack[JT] var LOADING: Int
raw/TextTrack[JT] var NONE: Int
raw/TextTrack[JT] var SHOWING: Int
raw/TextTrack[JT] var activeCues: TextTrackCueList
raw/TextTrack[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/TextTrack[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/TextTrack[JT] var cues: TextTrackCueList
raw/TextTrack[JT] def dispatchEvent(evt: Event): Boolean
raw/TextTrack[JT] var kind: String
raw/TextTrack[JT] var label: String
raw/TextTrack[JT] var language: String
raw/TextTrack[JT] var mode: js.Any
raw/TextTrack[JT] var oncuechange: js.Function1[Event, _]
raw/TextTrack[JT] var onerror: js.Function1[ErrorEvent, _]
raw/TextTrack[JT] var onload: js.Function1[js.Any, _]
raw/TextTrack[JT] var readyState: Int
raw/TextTrack[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/TextTrack[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/TextTrackCue[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/TextTrackCue[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/TextTrackCue[JT] def dispatchEvent(evt: Event): Boolean
raw/TextTrackCue[JT] var endTime: Double
raw/TextTrackCue[JT] def getCueAsHTML(): DocumentFragment
raw/TextTrackCue[JT] var id: String
raw/TextTrackCue[JT] var onenter: js.Function1[Event, _]
raw/TextTrackCue[JT] var onexit: js.Function1[Event, _]
raw/TextTrackCue[JT] var pauseOnExit: Boolean
raw/TextTrackCue[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/TextTrackCue[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/TextTrackCue[JT] var startTime: Double
raw/TextTrackCue[JT] var text: String
raw/TextTrackCue[JT] var track: TextTrack
raw/TextTrackCueList[JT] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): T
raw/TextTrackCueList[JT] def getCueById(id: String): TextTrackCue
raw/TextTrackCueList[JT] def item(index: Int): T
raw/TextTrackCueList[JT] def length: Int
raw/TextTrackCueList[JT] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: T): Unit
raw/TextTrackList[JT] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): T
raw/TextTrackList[JT] def item(index: Int): T
raw/TextTrackList[JT] def length: Int
raw/TextTrackList[JT] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: T): Unit
raw/TimeRanges[JC] def end(index: Int): Double
raw/TimeRanges[JC] def length: Int
raw/TimeRanges[JC] def start(index: Int): Double
raw/Touch[JC] def clientX: Double
raw/Touch[JC] def clientY: Double
raw/Touch[JC] def force: Double
raw/Touch[JC] def identifier: Double
raw/Touch[JC] def pageX: Double
raw/Touch[JC] def pageY: Double
raw/Touch[JC] def radiusX: Double
raw/Touch[JC] def radiusY: Double
raw/Touch[JC] def rotationAngle: Double
raw/Touch[JC] def screenX: Double
raw/Touch[JC] def screenY: Double
raw/Touch[JC] def target: EventTarget
raw/TouchEvent[JC] def altKey: Boolean
raw/TouchEvent[JC] def bubbles: Boolean
raw/TouchEvent[JC] def cancelBubble: Boolean
raw/TouchEvent[JC] def cancelable: Boolean
raw/TouchEvent[JC] def changedTouches: TouchList
raw/TouchEvent[JC] def ctrlKey: Boolean
raw/TouchEvent[JC] def currentTarget: EventTarget
raw/TouchEvent[JC] def defaultPrevented: Boolean
raw/TouchEvent[JC] def detail: Int
raw/TouchEvent[JC] def eventPhase: Int
raw/TouchEvent[JC] def isTrusted: Boolean
raw/TouchEvent[JC] def metaKey: Boolean
raw/TouchEvent[JC] def preventDefault(): Unit
raw/TouchEvent[JC] def shiftKey: Boolean
raw/TouchEvent[JC] def stopImmediatePropagation(): Unit
raw/TouchEvent[JC] def stopPropagation(): Unit
raw/TouchEvent[JC] def target: EventTarget
raw/TouchEvent[JC] override def target: EventTarget
raw/TouchEvent[JC] def targetTouches: TouchList
raw/TouchEvent[JC] def timeStamp: Double
raw/TouchEvent[JC] def touches: TouchList
raw/TouchEvent[JC] def `type`: String
raw/TouchEvent[JC] def view: Window
raw/TouchEventInit[JT] var altKey: js.UndefOr[Boolean]
raw/TouchEventInit[JT] var bubbles: js.UndefOr[Boolean]
raw/TouchEventInit[JT] var cancelable: js.UndefOr[Boolean]
raw/TouchEventInit[JT] var changedTouches: js.UndefOr[TouchList]
raw/TouchEventInit[JT] var composed: js.UndefOr[Boolean]
raw/TouchEventInit[JT] var ctrlKey: js.UndefOr[Boolean]
raw/TouchEventInit[JT] val detail: js.UndefOr[Int]
raw/TouchEventInit[JT] var metaKey: js.UndefOr[Boolean]
raw/TouchEventInit[JT] var scoped: js.UndefOr[Boolean]
raw/TouchEventInit[JT] var shiftKey: js.UndefOr[Boolean]
raw/TouchEventInit[JT] var targetTouches: js.UndefOr[TouchList]
raw/TouchEventInit[JT] var touches: js.UndefOr[TouchList]
raw/TouchEventInit[JT] val view: js.UndefOr[Window]
raw/TouchList[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(index: Int): T
raw/TouchList[JC] def item(index: Int): T
raw/TouchList[JC] def length: Int
raw/TouchList[JC] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: T): Unit
raw/TrackEvent[JT] def bubbles: Boolean
raw/TrackEvent[JT] def cancelBubble: Boolean
raw/TrackEvent[JT] def cancelable: Boolean
raw/TrackEvent[JT] def currentTarget: EventTarget
raw/TrackEvent[JT] def defaultPrevented: Boolean
raw/TrackEvent[JT] def eventPhase: Int
raw/TrackEvent[JT] def isTrusted: Boolean
raw/TrackEvent[JT] def preventDefault(): Unit
raw/TrackEvent[JT] def stopImmediatePropagation(): Unit
raw/TrackEvent[JT] def stopPropagation(): Unit
raw/TrackEvent[JT] def target: EventTarget
raw/TrackEvent[JT] def timeStamp: Double
raw/TrackEvent[JT] var track: js.Any
raw/TrackEvent[JT] def `type`: String
raw/TransitionEvent[JT] def bubbles: Boolean
raw/TransitionEvent[JT] def cancelBubble: Boolean
raw/TransitionEvent[JT] def cancelable: Boolean
raw/TransitionEvent[JT] def currentTarget: EventTarget
raw/TransitionEvent[JT] def defaultPrevented: Boolean
raw/TransitionEvent[JT] def elapsedTime: Double
raw/TransitionEvent[JT] def eventPhase: Int
raw/TransitionEvent[JT] def isTrusted: Boolean
raw/TransitionEvent[JT] def preventDefault(): Unit
raw/TransitionEvent[JT] def propertyName: String
raw/TransitionEvent[JT] def stopImmediatePropagation(): Unit
raw/TransitionEvent[JT] def stopPropagation(): Unit
raw/TransitionEvent[JT] def target: EventTarget
raw/TransitionEvent[JT] def timeStamp: Double
raw/TransitionEvent[JT] def `type`: String
raw/TreeWalker[JC] var currentNode: Node
raw/TreeWalker[JC] def filter: NodeFilter
raw/TreeWalker[JC] def firstChild(): Node
raw/TreeWalker[JC] def lastChild(): Node
raw/TreeWalker[JC] def nextNode(): Node
raw/TreeWalker[JC] def nextSibling(): Node
raw/TreeWalker[JC] def parentNode(): Node
raw/TreeWalker[JC] def previousNode(): Node
raw/TreeWalker[JC] def previousSibling(): Node
raw/TreeWalker[JC] def root: Node
raw/TreeWalker[JC] def whatToShow: Int
raw/TwoDContextAttributes[JT] var alpha: js.UndefOr[Boolean]
raw/TwoDContextAttributes[JT] var storage: js.UndefOr[String]
raw/TwoDContextAttributes[JT] var willReadFrequently: js.UndefOr[Boolean]
raw/UIEvent[JC] def bubbles: Boolean
raw/UIEvent[JC] def cancelBubble: Boolean
raw/UIEvent[JC] def cancelable: Boolean
raw/UIEvent[JC] def currentTarget: EventTarget
raw/UIEvent[JC] def defaultPrevented: Boolean
raw/UIEvent[JC] def detail: Int
raw/UIEvent[JC] def eventPhase: Int
raw/UIEvent[JC] def isTrusted: Boolean
raw/UIEvent[JC] def preventDefault(): Unit
raw/UIEvent[JC] def stopImmediatePropagation(): Unit
raw/UIEvent[JC] def stopPropagation(): Unit
raw/UIEvent[JC] def target: EventTarget
raw/UIEvent[JC] def timeStamp: Double
raw/UIEvent[JC] def `type`: String
raw/UIEvent[JC] def view: Window
raw/UIEventInit[JT] var bubbles: js.UndefOr[Boolean]
raw/UIEventInit[JT] var cancelable: js.UndefOr[Boolean]
raw/UIEventInit[JT] var composed: js.UndefOr[Boolean]
raw/UIEventInit[JT] val detail: js.UndefOr[Int]
raw/UIEventInit[JT] var scoped: js.UndefOr[Boolean]
raw/UIEventInit[JT] val view: js.UndefOr[Window]
raw/URL[JO] def createObjectURL(blob: Blob): String
raw/URL[JO] def revokeObjectURL(url: String): Unit
raw/ValidityState[JT] def customError: Boolean
raw/ValidityState[JT] def patternMismatch: Boolean
raw/ValidityState[JT] def rangeOverflow: Boolean
raw/ValidityState[JT] def rangeUnderflow: Boolean
raw/ValidityState[JT] def stepMismatch: Boolean
raw/ValidityState[JT] def tooLong: Boolean
raw/ValidityState[JT] def typeMismatch: Boolean
raw/ValidityState[JT] def valid: Boolean
raw/ValidityState[JT] def valueMissing: Boolean
raw/VisibilityState[JT]
raw/VisibilityState[SO] val hidden = "hidden".asInstanceOf[VisibilityState]
raw/VisibilityState[SO] val prerender = "prerender".asInstanceOf[VisibilityState]
raw/VisibilityState[SO] val unloaded = "unloaded".asInstanceOf[VisibilityState]
raw/VisibilityState[SO] val visible = "visible".asInstanceOf[VisibilityState]
raw/WaveShaperNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/WaveShaperNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/WaveShaperNode[JT] var channelCount: Int
raw/WaveShaperNode[JT] var channelCountMode: Int
raw/WaveShaperNode[JT] var channelInterpretation: String
raw/WaveShaperNode[JT] def connect(audioNode: AudioNode): Unit
raw/WaveShaperNode[JT] def connect(audioParam: AudioParam): Unit
raw/WaveShaperNode[JT] val context: AudioContext
raw/WaveShaperNode[JT] var curve: js.typedarray.Float32Array
raw/WaveShaperNode[JT] def disconnect(output: AudioNode?): Unit
raw/WaveShaperNode[JT] def dispatchEvent(evt: Event): Boolean
raw/WaveShaperNode[JT] val numberOfInputs: Int
raw/WaveShaperNode[JT] val numberOfOutputs: Int
raw/WaveShaperNode[JT] var oversample: String
raw/WaveShaperNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/WaveShaperNode[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/WebGLActiveInfo[JC] val name: String
raw/WebGLActiveInfo[JC] val size: Int
raw/WebGLActiveInfo[JC] val `type`: Int
raw/WebGLBuffer[JC]
raw/WebGLContextAttributes[JC] var alpha: Boolean
raw/WebGLContextAttributes[JC] var antialias: Boolean
raw/WebGLContextAttributes[JC] var depth: Boolean
raw/WebGLContextAttributes[JC] var premultipliedAlpha: Boolean
raw/WebGLContextAttributes[JC] var preserveDrawingBuffer: Boolean
raw/WebGLContextAttributes[JC] var stencil: Boolean
raw/WebGLFramebuffer[JC]
raw/WebGLProgram[JC]
raw/WebGLRenderbuffer[JC]
raw/WebGLRenderingContext[JC] def activeTexture(texture: Int): Unit
raw/WebGLRenderingContext[JC] def attachShader(program: WebGLProgram, shader: WebGLShader): Unit
raw/WebGLRenderingContext[JC] def bindAttribLocation(program: WebGLProgram, index: Int, name: String): Unit
raw/WebGLRenderingContext[JC] def bindBuffer(target: Int, buffer: WebGLBuffer): Unit
raw/WebGLRenderingContext[JC] def bindFramebuffer(target: Int, framebuffer: WebGLFramebuffer): Unit
raw/WebGLRenderingContext[JC] def bindRenderbuffer(target: Int, renderbuffer: WebGLRenderbuffer): Unit
raw/WebGLRenderingContext[JC] def bindTexture(target: Int, texture: WebGLTexture): Unit
raw/WebGLRenderingContext[JC] def blendColor(red: Double, green: Double, blue: Double, alpha: Double): Unit
raw/WebGLRenderingContext[JC] def blendEquation(mode: Int): Unit
raw/WebGLRenderingContext[JC] def blendEquationSeparate(modeRGB: Int, modeAlpha: Int): Unit
raw/WebGLRenderingContext[JC] def blendFunc(sfactor: Int, dfactor: Int): Unit
raw/WebGLRenderingContext[JC] def blendFuncSeparate(srcRGB: Int, dstRGB: Int, srcAlpha: Int, dstAlpha: Int): Unit
raw/WebGLRenderingContext[JC] def bufferData(target: Int, data: ArrayBuffer, usage: Int): Unit
raw/WebGLRenderingContext[JC] def bufferData(target: Int, data: ArrayBufferView, usage: Int): Unit
raw/WebGLRenderingContext[JC] def bufferData(target: Int, size: Int, usage: Int): Unit
raw/WebGLRenderingContext[JC] def bufferSubData(target: Int, offset: Int, data: ArrayBuffer): Unit
raw/WebGLRenderingContext[JC] def bufferSubData(target: Int, offset: Int, data: ArrayBufferView): Unit
raw/WebGLRenderingContext[JC] val canvas: HTMLCanvasElement
raw/WebGLRenderingContext[JC] def checkFramebufferStatus(target: Int): Int
raw/WebGLRenderingContext[JC] def clear(mask: Int): Unit
raw/WebGLRenderingContext[JC] def clearColor(red: Double, green: Double, blue: Double, alpha: Double): Unit
raw/WebGLRenderingContext[JC] def clearDepth(depth: Double): Unit
raw/WebGLRenderingContext[JC] def clearStencil(s: Int): Unit
raw/WebGLRenderingContext[JC] def colorMask(red: Boolean, green: Boolean, blue: Boolean, alpha: Boolean): Unit
raw/WebGLRenderingContext[JC] def compileShader(shader: WebGLShader): Unit
raw/WebGLRenderingContext[JC] def compressedTexImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, data: ArrayBufferView): Unit
raw/WebGLRenderingContext[JC] def compressedTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, data: ArrayBufferView): Unit
raw/WebGLRenderingContext[JC] def copyTexImage2D(target: Int, level: Int, internalformat: Int, x: Int, y: Int, width: Int, height: Int, border: Int): Unit
raw/WebGLRenderingContext[JC] def copyTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, x: Int, y: Int, width: Int, height: Int): Unit
raw/WebGLRenderingContext[JC] def createBuffer(): WebGLBuffer
raw/WebGLRenderingContext[JC] def createFramebuffer(): WebGLFramebuffer
raw/WebGLRenderingContext[JC] def createProgram(): WebGLProgram
raw/WebGLRenderingContext[JC] def createRenderbuffer(): WebGLRenderbuffer
raw/WebGLRenderingContext[JC] def createShader(`type`: Int): WebGLShader
raw/WebGLRenderingContext[JC] def createTexture(): WebGLTexture
raw/WebGLRenderingContext[JC] def cullFace(mode: Int): Unit
raw/WebGLRenderingContext[JC] def deleteBuffer(buffer: WebGLBuffer): Unit
raw/WebGLRenderingContext[JC] def deleteFramebuffer(framebuffer: WebGLFramebuffer): Unit
raw/WebGLRenderingContext[JC] def deleteProgram(program: WebGLProgram): Unit
raw/WebGLRenderingContext[JC] def deleteRenderbuffer(renderbuffer: WebGLRenderbuffer): Unit
raw/WebGLRenderingContext[JC] def deleteShader(shader: WebGLShader): Unit
raw/WebGLRenderingContext[JC] def deleteTexture(texture: WebGLTexture): Unit
raw/WebGLRenderingContext[JC] def depthFunc(func: Int): Unit
raw/WebGLRenderingContext[JC] def depthMask(flag: Boolean): Unit
raw/WebGLRenderingContext[JC] def depthRange(zNear: Double, zFar: Double): Unit
raw/WebGLRenderingContext[JC] def detachShader(program: WebGLProgram, shader: WebGLShader): Unit
raw/WebGLRenderingContext[JC] def disable(cap: Int): Unit
raw/WebGLRenderingContext[JC] def disableVertexAttribArray(index: Int): Unit
raw/WebGLRenderingContext[JC] def drawArrays(mode: Int, first: Int, count: Int): Unit
raw/WebGLRenderingContext[JC] def drawElements(mode: Int, count: Int, `type`: Int, offset: Int): Unit
raw/WebGLRenderingContext[JC] val drawingBufferHeight: Int
raw/WebGLRenderingContext[JC] val drawingBufferWidth: Int
raw/WebGLRenderingContext[JC] def enable(cap: Int): Unit
raw/WebGLRenderingContext[JC] def enableVertexAttribArray(index: Int): Unit
raw/WebGLRenderingContext[JC] def finish(): Unit
raw/WebGLRenderingContext[JC] def flush(): Unit
raw/WebGLRenderingContext[JC] def framebufferRenderbuffer(target: Int, attachment: Int, renderbuffertarget: Int, renderbuffer: WebGLRenderbuffer): Unit
raw/WebGLRenderingContext[JC] def framebufferTexture2D(target: Int, attachment: Int, textarget: Int, texture: WebGLTexture, level: Int): Unit
raw/WebGLRenderingContext[JC] def frontFace(mode: Int): Unit
raw/WebGLRenderingContext[JC] def generateMipmap(target: Int): Unit
raw/WebGLRenderingContext[JC] def getActiveAttrib(program: WebGLProgram, index: Int): WebGLActiveInfo
raw/WebGLRenderingContext[JC] def getActiveUniform(program: WebGLProgram, index: Int): WebGLActiveInfo
raw/WebGLRenderingContext[JC] def getAttachedShaders(program: WebGLProgram): js.Array[WebGLShader]
raw/WebGLRenderingContext[JC] def getAttribLocation(program: WebGLProgram, name: String): Int
raw/WebGLRenderingContext[JC] def getBufferParameter(target: Int, pname: Int): Int
raw/WebGLRenderingContext[JC] def getContextAttributes(): WebGLContextAttributes
raw/WebGLRenderingContext[JC] def getError(): Int
raw/WebGLRenderingContext[JC] def getExtension(name: String): js.Any
raw/WebGLRenderingContext[JC] def getFramebufferAttachmentParameter(target: Int, attachment: Int, pname: Int): js.Any
raw/WebGLRenderingContext[JC] def getParameter(pname: Int): js.Any
raw/WebGLRenderingContext[JC] def getProgramInfoLog(program: WebGLProgram): String
raw/WebGLRenderingContext[JC] def getProgramParameter(program: WebGLProgram, pname: Int): js.Any
raw/WebGLRenderingContext[JC] def getRenderbufferParameter(target: Int, pname: Int): js.Any
raw/WebGLRenderingContext[JC] def getShaderInfoLog(shader: WebGLShader): String
raw/WebGLRenderingContext[JC] def getShaderParameter(shader: WebGLShader, pname: Int): js.Any
raw/WebGLRenderingContext[JC] def getShaderPrecisionFormat(shadertype: Int, precisiontype: Int): WebGLShaderPrecisionFormat
raw/WebGLRenderingContext[JC] def getShaderSource(shader: WebGLShader): String
raw/WebGLRenderingContext[JC] def getSupportedExtensions(): js.Array[String]
raw/WebGLRenderingContext[JC] def getTexParameter(target: Int, pname: Int): js.Any
raw/WebGLRenderingContext[JC] def getUniform(program: WebGLProgram, location: WebGLUniformLocation): js.Any
raw/WebGLRenderingContext[JC] def getUniformLocation(program: WebGLProgram, name: String): WebGLUniformLocation
raw/WebGLRenderingContext[JC] def getVertexAttrib(index: Int, pname: Int): js.Any
raw/WebGLRenderingContext[JC] def getVertexAttribOffset(index: Int, pname: Int): Int
raw/WebGLRenderingContext[JC] def hint(target: Int, mode: Int): Unit
raw/WebGLRenderingContext[JC] def isBuffer(buffer: js.Any): Boolean
raw/WebGLRenderingContext[JC] def isContextLost(): Boolean
raw/WebGLRenderingContext[JC] def isEnabled(cap: Int): Boolean
raw/WebGLRenderingContext[JC] def isFramebuffer(framebuffer: js.Any): Boolean
raw/WebGLRenderingContext[JC] def isProgram(program: js.Any): Boolean
raw/WebGLRenderingContext[JC] def isRenderbuffer(renderbuffer: js.Any): Boolean
raw/WebGLRenderingContext[JC] def isShader(shader: js.Any): Boolean
raw/WebGLRenderingContext[JC] def isTexture(texture: js.Any): Boolean
raw/WebGLRenderingContext[JC] def lineWidth(width: Double): Unit
raw/WebGLRenderingContext[JC] def linkProgram(program: WebGLProgram): Unit
raw/WebGLRenderingContext[JC] def pixelStorei(pname: Int, param: Int): Unit
raw/WebGLRenderingContext[JC] def polygonOffset(factor: Double, units: Double): Unit
raw/WebGLRenderingContext[JC] def readPixels(x: Int, y: Int, width: Int, height: Int, format: Int, `type`: Int, pixels: ArrayBufferView): Unit
raw/WebGLRenderingContext[JC] def renderbufferStorage(target: Int, internalformat: Int, width: Int, height: Int): Unit
raw/WebGLRenderingContext[JC] def sampleCoverage(value: Int, invert: Boolean): Unit
raw/WebGLRenderingContext[JC] def scissor(x: Int, y: Int, width: Int, height: Int): Unit
raw/WebGLRenderingContext[JC] def shaderSource(shader: WebGLShader, source: String): Unit
raw/WebGLRenderingContext[JC] def stencilFunc(func: Int, ref: Int, mask: Int): Unit
raw/WebGLRenderingContext[JC] def stencilFuncSeparate(face: Int, func: Int, ref: Int, mask: Int): Unit
raw/WebGLRenderingContext[JC] def stencilMask(mask: Int): Unit
raw/WebGLRenderingContext[JC] def stencilMaskSeparate(face: Int, mask: Int): Unit
raw/WebGLRenderingContext[JC] def stencilOp(fail: Int, zfail: Int, zpass: Int): Unit
raw/WebGLRenderingContext[JC] def stencilOpSeparate(face: Int, fail: Int, zfail: Int, zpass: Int): Unit
raw/WebGLRenderingContext[JC] def texImage2D(target: Int, level: Int, internalformat: Int, format: Int, `type`: Int, pixels: HTMLCanvasElement): Unit
raw/WebGLRenderingContext[JC] def texImage2D(target: Int, level: Int, internalformat: Int, format: Int, `type`: Int, pixels: HTMLImageElement): Unit
raw/WebGLRenderingContext[JC] def texImage2D(target: Int, level: Int, internalformat: Int, format: Int, `type`: Int, pixels: HTMLVideoElement): Unit
raw/WebGLRenderingContext[JC] def texImage2D(target: Int, level: Int, internalformat: Int, format: Int, `type`: Int, pixels: ImageData): Unit
raw/WebGLRenderingContext[JC] def texImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, format: Int, `type`: Int, pixels: ArrayBufferView): Unit
raw/WebGLRenderingContext[JC] def texParameterf(target: Int, pname: Int, param: Double): Unit
raw/WebGLRenderingContext[JC] def texParameteri(target: Int, pname: Int, param: Int): Unit
raw/WebGLRenderingContext[JC] def texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, format: Int, `type`: Int, pixels: HTMLCanvasElement): Unit
raw/WebGLRenderingContext[JC] def texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, format: Int, `type`: Int, pixels: HTMLImageElement): Unit
raw/WebGLRenderingContext[JC] def texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, format: Int, `type`: Int, pixels: HTMLVideoElement): Unit
raw/WebGLRenderingContext[JC] def texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, format: Int, `type`: Int, pixels: ImageData): Unit
raw/WebGLRenderingContext[JC] def texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, `type`: Int, pixels: ArrayBufferView): Unit
raw/WebGLRenderingContext[JC] def uniform1f(location: WebGLUniformLocation, x: Double): Unit
raw/WebGLRenderingContext[JC] def uniform1fv(location: WebGLUniformLocation, v: Float32Array): Unit
raw/WebGLRenderingContext[JC] def uniform1fv(location: WebGLUniformLocation, v: js.Array[Double]): Unit
raw/WebGLRenderingContext[JC] def uniform1i(location: WebGLUniformLocation, x: Int): Unit
raw/WebGLRenderingContext[JC] def uniform1iv(location: WebGLUniformLocation, v: Int32Array): Unit
raw/WebGLRenderingContext[JC] def uniform1iv(location: WebGLUniformLocation, v: js.Array[Int]): Unit
raw/WebGLRenderingContext[JC] def uniform2f(location: WebGLUniformLocation, x: Double, y: Double): Unit
raw/WebGLRenderingContext[JC] def uniform2fv(location: WebGLUniformLocation, v: Float32Array): Unit
raw/WebGLRenderingContext[JC] def uniform2fv(location: WebGLUniformLocation, v: js.Array[Double]): Unit
raw/WebGLRenderingContext[JC] def uniform2i(location: WebGLUniformLocation, x: Int, y: Int): Unit
raw/WebGLRenderingContext[JC] def uniform2iv(location: WebGLUniformLocation, v: Int32Array): Unit
raw/WebGLRenderingContext[JC] def uniform2iv(location: WebGLUniformLocation, v: js.Array[Int]): Unit
raw/WebGLRenderingContext[JC] def uniform3f(location: WebGLUniformLocation, x: Double, y: Double, z: Double): Unit
raw/WebGLRenderingContext[JC] def uniform3fv(location: WebGLUniformLocation, v: Float32Array): Unit
raw/WebGLRenderingContext[JC] def uniform3fv(location: WebGLUniformLocation, v: js.Array[Double]): Unit
raw/WebGLRenderingContext[JC] def uniform3i(location: WebGLUniformLocation, x: Int, y: Int, z: Int): Unit
raw/WebGLRenderingContext[JC] def uniform3iv(location: WebGLUniformLocation, v: Int32Array): Unit
raw/WebGLRenderingContext[JC] def uniform3iv(location: WebGLUniformLocation, v: js.Array[Int]): Unit
raw/WebGLRenderingContext[JC] def uniform4f(location: WebGLUniformLocation, x: Double, y: Double, z: Double, w: Double): Unit
raw/WebGLRenderingContext[JC] def uniform4fv(location: WebGLUniformLocation, v: Float32Array): Unit
raw/WebGLRenderingContext[JC] def uniform4fv(location: WebGLUniformLocation, v: js.Array[Double]): Unit
raw/WebGLRenderingContext[JC] def uniform4i(location: WebGLUniformLocation, x: Int, y: Int, z: Int, w: Int): Unit
raw/WebGLRenderingContext[JC] def uniform4iv(location: WebGLUniformLocation, v: Int32Array): Unit
raw/WebGLRenderingContext[JC] def uniform4iv(location: WebGLUniformLocation, v: js.Array[Int]): Unit
raw/WebGLRenderingContext[JC] def uniformMatrix2fv(location: WebGLUniformLocation, transpose: Boolean, value: Float32Array): Unit
raw/WebGLRenderingContext[JC] def uniformMatrix2fv(location: WebGLUniformLocation, transpose: Boolean, value: js.Array[Double]): Unit
raw/WebGLRenderingContext[JC] def uniformMatrix3fv(location: WebGLUniformLocation, transpose: Boolean, value: Float32Array): Unit
raw/WebGLRenderingContext[JC] def uniformMatrix3fv(location: WebGLUniformLocation, transpose: Boolean, value: js.Array[Double]): Unit
raw/WebGLRenderingContext[JC] def uniformMatrix4fv(location: WebGLUniformLocation, transpose: Boolean, value: Float32Array): Unit
raw/WebGLRenderingContext[JC] def uniformMatrix4fv(location: WebGLUniformLocation, transpose: Boolean, value: js.Array[Double]): Unit
raw/WebGLRenderingContext[JC] def useProgram(program: WebGLProgram): Unit
raw/WebGLRenderingContext[JC] def validateProgram(program: WebGLProgram): Unit
raw/WebGLRenderingContext[JC] def vertexAttrib1f(indx: Int, x: Double): Unit
raw/WebGLRenderingContext[JC] def vertexAttrib1fv(indx: Int, values: Float32Array): Unit
raw/WebGLRenderingContext[JC] def vertexAttrib1fv(indx: Int, values: js.Array[Double]): Unit
raw/WebGLRenderingContext[JC] def vertexAttrib2f(indx: Int, x: Double, y: Double): Unit
raw/WebGLRenderingContext[JC] def vertexAttrib2fv(indx: Int, values: Float32Array): Unit
raw/WebGLRenderingContext[JC] def vertexAttrib2fv(indx: Int, values: js.Array[Double]): Unit
raw/WebGLRenderingContext[JC] def vertexAttrib3f(indx: Int, x: Double, y: Double, z: Double): Unit
raw/WebGLRenderingContext[JC] def vertexAttrib3fv(indx: Int, values: Float32Array): Unit
raw/WebGLRenderingContext[JC] def vertexAttrib3fv(indx: Int, values: js.Array[Double]): Unit
raw/WebGLRenderingContext[JC] def vertexAttrib4f(indx: Int, x: Double, y: Double, z: Double, w: Double): Unit
raw/WebGLRenderingContext[JC] def vertexAttrib4fv(indx: Int, values: Float32Array): Unit
raw/WebGLRenderingContext[JC] def vertexAttrib4fv(indx: Int, values: js.Array[Double]): Unit
raw/WebGLRenderingContext[JC] def vertexAttribPointer(indx: Int, size: Int, `type`: Int, normalized: Boolean, stride: Int, offset: Int): Unit
raw/WebGLRenderingContext[JC] def viewport(x: Double, y: Double, width: Double, height: Double): Unit
raw/WebGLRenderingContext[SO] final val ACTIVE_ATTRIBUTES = 0x8B89
raw/WebGLRenderingContext[SO] final val ACTIVE_TEXTURE = 0x84E0
raw/WebGLRenderingContext[SO] final val ACTIVE_UNIFORMS = 0x8B86
raw/WebGLRenderingContext[SO] final val ALIASED_LINE_WIDTH_RANGE = 0x846E
raw/WebGLRenderingContext[SO] final val ALIASED_POINT_SIZE_RANGE = 0x846D
raw/WebGLRenderingContext[SO] final val ALPHA = 0x1906
raw/WebGLRenderingContext[SO] final val ALPHA_BITS = 0x0D55
raw/WebGLRenderingContext[SO] final val ALWAYS = 0x0207
raw/WebGLRenderingContext[SO] final val ARRAY_BUFFER = 0x8892
raw/WebGLRenderingContext[SO] final val ARRAY_BUFFER_BINDING = 0x8894
raw/WebGLRenderingContext[SO] final val ATTACHED_SHADERS = 0x8B85
raw/WebGLRenderingContext[SO] final val BACK = 0x0405
raw/WebGLRenderingContext[SO] final val BLEND = 0x0BE2
raw/WebGLRenderingContext[SO] final val BLEND_COLOR = 0x8005
raw/WebGLRenderingContext[SO] final val BLEND_DST_ALPHA = 0x80CA
raw/WebGLRenderingContext[SO] final val BLEND_DST_RGB = 0x80C8
raw/WebGLRenderingContext[SO] final val BLEND_EQUATION = 0x8009
raw/WebGLRenderingContext[SO] final val BLEND_EQUATION_ALPHA = 0x883D
raw/WebGLRenderingContext[SO] final val BLEND_EQUATION_RGB = 0x8009
raw/WebGLRenderingContext[SO] final val BLEND_SRC_ALPHA = 0x80CB
raw/WebGLRenderingContext[SO] final val BLEND_SRC_RGB = 0x80C9
raw/WebGLRenderingContext[SO] final val BLUE_BITS = 0x0D54
raw/WebGLRenderingContext[SO] final val BOOL = 0x8B56
raw/WebGLRenderingContext[SO] final val BOOL_VEC2 = 0x8B57
raw/WebGLRenderingContext[SO] final val BOOL_VEC3 = 0x8B58
raw/WebGLRenderingContext[SO] final val BOOL_VEC4 = 0x8B59
raw/WebGLRenderingContext[SO] final val BROWSER_DEFAULT_WEBGL = 0x9244
raw/WebGLRenderingContext[SO] final val BUFFER_SIZE = 0x8764
raw/WebGLRenderingContext[SO] final val BUFFER_USAGE = 0x8765
raw/WebGLRenderingContext[SO] final val BYTE = 0x1400
raw/WebGLRenderingContext[SO] final val CCW = 0x0901
raw/WebGLRenderingContext[SO] final val CLAMP_TO_EDGE = 0x812F
raw/WebGLRenderingContext[SO] final val COLOR_ATTACHMENT0 = 0x8CE0
raw/WebGLRenderingContext[SO] final val COLOR_BUFFER_BIT = 0x00004000
raw/WebGLRenderingContext[SO] final val COLOR_CLEAR_VALUE = 0x0C22
raw/WebGLRenderingContext[SO] final val COLOR_WRITEMASK = 0x0C23
raw/WebGLRenderingContext[SO] final val COMPILE_STATUS = 0x8B81
raw/WebGLRenderingContext[SO] final val COMPRESSED_TEXTURE_FORMATS = 0x86A3
raw/WebGLRenderingContext[SO] final val CONSTANT_ALPHA = 0x8003
raw/WebGLRenderingContext[SO] final val CONSTANT_COLOR = 0x8001
raw/WebGLRenderingContext[SO] final val CONTEXT_LOST_WEBGL = 0x9242
raw/WebGLRenderingContext[SO] final val CULL_FACE = 0x0B44
raw/WebGLRenderingContext[SO] final val CULL_FACE_MODE = 0x0B45
raw/WebGLRenderingContext[SO] final val CURRENT_PROGRAM = 0x8B8D
raw/WebGLRenderingContext[SO] final val CURRENT_VERTEX_ATTRIB = 0x8626
raw/WebGLRenderingContext[SO] final val CW = 0x0900
raw/WebGLRenderingContext[SO] final val DECR = 0x1E03
raw/WebGLRenderingContext[SO] final val DECR_WRAP = 0x8508
raw/WebGLRenderingContext[SO] final val DELETE_STATUS = 0x8B80
raw/WebGLRenderingContext[SO] final val DEPTH_ATTACHMENT = 0x8D00
raw/WebGLRenderingContext[SO] final val DEPTH_BITS = 0x0D56
raw/WebGLRenderingContext[SO] final val DEPTH_BUFFER_BIT = 0x00000100
raw/WebGLRenderingContext[SO] final val DEPTH_CLEAR_VALUE = 0x0B73
raw/WebGLRenderingContext[SO] final val DEPTH_COMPONENT = 0x1902
raw/WebGLRenderingContext[SO] final val DEPTH_COMPONENT16 = 0x81A5
raw/WebGLRenderingContext[SO] final val DEPTH_FUNC = 0x0B74
raw/WebGLRenderingContext[SO] final val DEPTH_RANGE = 0x0B70
raw/WebGLRenderingContext[SO] final val DEPTH_STENCIL = 0x84F9
raw/WebGLRenderingContext[SO] final val DEPTH_STENCIL_ATTACHMENT = 0x821A
raw/WebGLRenderingContext[SO] final val DEPTH_TEST = 0x0B71
raw/WebGLRenderingContext[SO] final val DEPTH_WRITEMASK = 0x0B72
raw/WebGLRenderingContext[SO] final val DITHER = 0x0BD0
raw/WebGLRenderingContext[SO] final val DONT_CARE = 0x1100
raw/WebGLRenderingContext[SO] final val DST_ALPHA = 0x0304
raw/WebGLRenderingContext[SO] final val DST_COLOR = 0x0306
raw/WebGLRenderingContext[SO] final val DYNAMIC_DRAW = 0x88E8
raw/WebGLRenderingContext[SO] final val ELEMENT_ARRAY_BUFFER = 0x8893
raw/WebGLRenderingContext[SO] final val ELEMENT_ARRAY_BUFFER_BINDING = 0x8895
raw/WebGLRenderingContext[SO] final val EQUAL = 0x0202
raw/WebGLRenderingContext[SO] final val FASTEST = 0x1101
raw/WebGLRenderingContext[SO] final val FLOAT = 0x1406
raw/WebGLRenderingContext[SO] final val FLOAT_MAT2 = 0x8B5A
raw/WebGLRenderingContext[SO] final val FLOAT_MAT3 = 0x8B5B
raw/WebGLRenderingContext[SO] final val FLOAT_MAT4 = 0x8B5C
raw/WebGLRenderingContext[SO] final val FLOAT_VEC2 = 0x8B50
raw/WebGLRenderingContext[SO] final val FLOAT_VEC3 = 0x8B51
raw/WebGLRenderingContext[SO] final val FLOAT_VEC4 = 0x8B52
raw/WebGLRenderingContext[SO] final val FRAGMENT_SHADER = 0x8B30
raw/WebGLRenderingContext[SO] final val FRAMEBUFFER = 0x8D40
raw/WebGLRenderingContext[SO] final val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1
raw/WebGLRenderingContext[SO] final val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0
raw/WebGLRenderingContext[SO] final val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3
raw/WebGLRenderingContext[SO] final val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2
raw/WebGLRenderingContext[SO] final val FRAMEBUFFER_BINDING = 0x8CA6
raw/WebGLRenderingContext[SO] final val FRAMEBUFFER_COMPLETE = 0x8CD5
raw/WebGLRenderingContext[SO] final val FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6
raw/WebGLRenderingContext[SO] final val FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9
raw/WebGLRenderingContext[SO] final val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7
raw/WebGLRenderingContext[SO] final val FRAMEBUFFER_UNSUPPORTED = 0x8CDD
raw/WebGLRenderingContext[SO] final val FRONT = 0x0404
raw/WebGLRenderingContext[SO] final val FRONT_AND_BACK = 0x0408
raw/WebGLRenderingContext[SO] final val FRONT_FACE = 0x0B46
raw/WebGLRenderingContext[SO] final val FUNC_ADD = 0x8006
raw/WebGLRenderingContext[SO] final val FUNC_REVERSE_SUBTRACT = 0x800B
raw/WebGLRenderingContext[SO] final val FUNC_SUBTRACT = 0x800A
raw/WebGLRenderingContext[SO] final val GENERATE_MIPMAP_HINT = 0x8192
raw/WebGLRenderingContext[SO] final val GEQUAL = 0x0206
raw/WebGLRenderingContext[SO] final val GREATER = 0x0204
raw/WebGLRenderingContext[SO] final val GREEN_BITS = 0x0D53
raw/WebGLRenderingContext[SO] final val HIGH_FLOAT = 0x8DF2
raw/WebGLRenderingContext[SO] final val HIGH_INT = 0x8DF5
raw/WebGLRenderingContext[SO] final val IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B
raw/WebGLRenderingContext[SO] final val IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A
raw/WebGLRenderingContext[SO] final val INCR = 0x1E02
raw/WebGLRenderingContext[SO] final val INCR_WRAP = 0x8507
raw/WebGLRenderingContext[SO] final val INT = 0x1404
raw/WebGLRenderingContext[SO] final val INT_VEC2 = 0x8B53
raw/WebGLRenderingContext[SO] final val INT_VEC3 = 0x8B54
raw/WebGLRenderingContext[SO] final val INT_VEC4 = 0x8B55
raw/WebGLRenderingContext[SO] final val INVALID_ENUM = 0x0500
raw/WebGLRenderingContext[SO] final val INVALID_FRAMEBUFFER_OPERATION = 0x0506
raw/WebGLRenderingContext[SO] final val INVALID_OPERATION = 0x0502
raw/WebGLRenderingContext[SO] final val INVALID_VALUE = 0x0501
raw/WebGLRenderingContext[SO] final val INVERT = 0x150A
raw/WebGLRenderingContext[SO] final val KEEP = 0x1E00
raw/WebGLRenderingContext[SO] final val LEQUAL = 0x0203
raw/WebGLRenderingContext[SO] final val LESS = 0x0201
raw/WebGLRenderingContext[SO] final val LINEAR = 0x2601
raw/WebGLRenderingContext[SO] final val LINEAR_MIPMAP_LINEAR = 0x2703
raw/WebGLRenderingContext[SO] final val LINEAR_MIPMAP_NEAREST = 0x2701
raw/WebGLRenderingContext[SO] final val LINES = 0x0001
raw/WebGLRenderingContext[SO] final val LINE_LOOP = 0x0002
raw/WebGLRenderingContext[SO] final val LINE_STRIP = 0x0003
raw/WebGLRenderingContext[SO] final val LINE_WIDTH = 0x0B21
raw/WebGLRenderingContext[SO] final val LINK_STATUS = 0x8B82
raw/WebGLRenderingContext[SO] final val LOW_FLOAT = 0x8DF0
raw/WebGLRenderingContext[SO] final val LOW_INT = 0x8DF3
raw/WebGLRenderingContext[SO] final val LUMINANCE = 0x1909
raw/WebGLRenderingContext[SO] final val LUMINANCE_ALPHA = 0x190A
raw/WebGLRenderingContext[SO] final val MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D
raw/WebGLRenderingContext[SO] final val MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C
raw/WebGLRenderingContext[SO] final val MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD
raw/WebGLRenderingContext[SO] final val MAX_RENDERBUFFER_SIZE = 0x84E8
raw/WebGLRenderingContext[SO] final val MAX_TEXTURE_IMAGE_UNITS = 0x8872
raw/WebGLRenderingContext[SO] final val MAX_TEXTURE_SIZE = 0x0D33
raw/WebGLRenderingContext[SO] final val MAX_VARYING_VECTORS = 0x8DFC
raw/WebGLRenderingContext[SO] final val MAX_VERTEX_ATTRIBS = 0x8869
raw/WebGLRenderingContext[SO] final val MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C
raw/WebGLRenderingContext[SO] final val MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB
raw/WebGLRenderingContext[SO] final val MAX_VIEWPORT_DIMS = 0x0D3A
raw/WebGLRenderingContext[SO] final val MEDIUM_FLOAT = 0x8DF1
raw/WebGLRenderingContext[SO] final val MEDIUM_INT = 0x8DF4
raw/WebGLRenderingContext[SO] final val MIRRORED_REPEAT = 0x8370
raw/WebGLRenderingContext[SO] final val NEAREST = 0x2600
raw/WebGLRenderingContext[SO] final val NEAREST_MIPMAP_LINEAR = 0x2702
raw/WebGLRenderingContext[SO] final val NEAREST_MIPMAP_NEAREST = 0x2700
raw/WebGLRenderingContext[SO] final val NEVER = 0x0200
raw/WebGLRenderingContext[SO] final val NICEST = 0x1102
raw/WebGLRenderingContext[SO] final val NONE = 0
raw/WebGLRenderingContext[SO] final val NOTEQUAL = 0x0205
raw/WebGLRenderingContext[SO] final val NO_ERROR = 0
raw/WebGLRenderingContext[SO] final val ONE = 1
raw/WebGLRenderingContext[SO] final val ONE_MINUS_CONSTANT_ALPHA = 0x8004
raw/WebGLRenderingContext[SO] final val ONE_MINUS_CONSTANT_COLOR = 0x8002
raw/WebGLRenderingContext[SO] final val ONE_MINUS_DST_ALPHA = 0x0305
raw/WebGLRenderingContext[SO] final val ONE_MINUS_DST_COLOR = 0x0307
raw/WebGLRenderingContext[SO] final val ONE_MINUS_SRC_ALPHA = 0x0303
raw/WebGLRenderingContext[SO] final val ONE_MINUS_SRC_COLOR = 0x0301
raw/WebGLRenderingContext[SO] final val OUT_OF_MEMORY = 0x0505
raw/WebGLRenderingContext[SO] final val PACK_ALIGNMENT = 0x0D05
raw/WebGLRenderingContext[SO] final val POINTS = 0x0000
raw/WebGLRenderingContext[SO] final val POLYGON_OFFSET_FACTOR = 0x8038
raw/WebGLRenderingContext[SO] final val POLYGON_OFFSET_FILL = 0x8037
raw/WebGLRenderingContext[SO] final val POLYGON_OFFSET_UNITS = 0x2A00
raw/WebGLRenderingContext[SO] final val RED_BITS = 0x0D52
raw/WebGLRenderingContext[SO] final val RENDERBUFFER = 0x8D41
raw/WebGLRenderingContext[SO] final val RENDERBUFFER_ALPHA_SIZE = 0x8D53
raw/WebGLRenderingContext[SO] final val RENDERBUFFER_BINDING = 0x8CA7
raw/WebGLRenderingContext[SO] final val RENDERBUFFER_BLUE_SIZE = 0x8D52
raw/WebGLRenderingContext[SO] final val RENDERBUFFER_DEPTH_SIZE = 0x8D54
raw/WebGLRenderingContext[SO] final val RENDERBUFFER_GREEN_SIZE = 0x8D51
raw/WebGLRenderingContext[SO] final val RENDERBUFFER_HEIGHT = 0x8D43
raw/WebGLRenderingContext[SO] final val RENDERBUFFER_INTERNAL_FORMAT = 0x8D44
raw/WebGLRenderingContext[SO] final val RENDERBUFFER_RED_SIZE = 0x8D50
raw/WebGLRenderingContext[SO] final val RENDERBUFFER_STENCIL_SIZE = 0x8D55
raw/WebGLRenderingContext[SO] final val RENDERBUFFER_WIDTH = 0x8D42
raw/WebGLRenderingContext[SO] final val RENDERER = 0x1F01
raw/WebGLRenderingContext[SO] final val REPEAT = 0x2901
raw/WebGLRenderingContext[SO] final val REPLACE = 0x1E01
raw/WebGLRenderingContext[SO] final val RGB = 0x1907
raw/WebGLRenderingContext[SO] final val RGB565 = 0x8D62
raw/WebGLRenderingContext[SO] final val RGB5_A1 = 0x8057
raw/WebGLRenderingContext[SO] final val RGBA = 0x1908
raw/WebGLRenderingContext[SO] final val RGBA4 = 0x8056
raw/WebGLRenderingContext[SO] final val SAMPLER_2D = 0x8B5E
raw/WebGLRenderingContext[SO] final val SAMPLER_CUBE = 0x8B60
raw/WebGLRenderingContext[SO] final val SAMPLES = 0x80A9
raw/WebGLRenderingContext[SO] final val SAMPLE_ALPHA_TO_COVERAGE = 0x809E
raw/WebGLRenderingContext[SO] final val SAMPLE_BUFFERS = 0x80A8
raw/WebGLRenderingContext[SO] final val SAMPLE_COVERAGE = 0x80A0
raw/WebGLRenderingContext[SO] final val SAMPLE_COVERAGE_INVERT = 0x80AB
raw/WebGLRenderingContext[SO] final val SAMPLE_COVERAGE_VALUE = 0x80AA
raw/WebGLRenderingContext[SO] final val SCISSOR_BOX = 0x0C10
raw/WebGLRenderingContext[SO] final val SCISSOR_TEST = 0x0C11
raw/WebGLRenderingContext[SO] final val SHADER_TYPE = 0x8B4F
raw/WebGLRenderingContext[SO] final val SHADING_LANGUAGE_VERSION = 0x8B8C
raw/WebGLRenderingContext[SO] final val SHORT = 0x1402
raw/WebGLRenderingContext[SO] final val SRC_ALPHA = 0x0302
raw/WebGLRenderingContext[SO] final val SRC_ALPHA_SATURATE = 0x0308
raw/WebGLRenderingContext[SO] final val SRC_COLOR = 0x0300
raw/WebGLRenderingContext[SO] final val STATIC_DRAW = 0x88E4
raw/WebGLRenderingContext[SO] final val STENCIL_ATTACHMENT = 0x8D20
raw/WebGLRenderingContext[SO] final val STENCIL_BACK_FAIL = 0x8801
raw/WebGLRenderingContext[SO] final val STENCIL_BACK_FUNC = 0x8800
raw/WebGLRenderingContext[SO] final val STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802
raw/WebGLRenderingContext[SO] final val STENCIL_BACK_PASS_DEPTH_PASS = 0x8803
raw/WebGLRenderingContext[SO] final val STENCIL_BACK_REF = 0x8CA3
raw/WebGLRenderingContext[SO] final val STENCIL_BACK_VALUE_MASK = 0x8CA4
raw/WebGLRenderingContext[SO] final val STENCIL_BACK_WRITEMASK = 0x8CA5
raw/WebGLRenderingContext[SO] final val STENCIL_BITS = 0x0D57
raw/WebGLRenderingContext[SO] final val STENCIL_BUFFER_BIT = 0x00000400
raw/WebGLRenderingContext[SO] final val STENCIL_CLEAR_VALUE = 0x0B91
raw/WebGLRenderingContext[SO] final val STENCIL_FAIL = 0x0B94
raw/WebGLRenderingContext[SO] final val STENCIL_FUNC = 0x0B92
raw/WebGLRenderingContext[SO] final val STENCIL_INDEX = 0x1901
raw/WebGLRenderingContext[SO] final val STENCIL_INDEX8 = 0x8D48
raw/WebGLRenderingContext[SO] final val STENCIL_PASS_DEPTH_FAIL = 0x0B95
raw/WebGLRenderingContext[SO] final val STENCIL_PASS_DEPTH_PASS = 0x0B96
raw/WebGLRenderingContext[SO] final val STENCIL_REF = 0x0B97
raw/WebGLRenderingContext[SO] final val STENCIL_TEST = 0x0B90
raw/WebGLRenderingContext[SO] final val STENCIL_VALUE_MASK = 0x0B93
raw/WebGLRenderingContext[SO] final val STENCIL_WRITEMASK = 0x0B98
raw/WebGLRenderingContext[SO] final val STREAM_DRAW = 0x88E0
raw/WebGLRenderingContext[SO] final val SUBPIXEL_BITS = 0x0D50
raw/WebGLRenderingContext[SO] final val TEXTURE = 0x1702
raw/WebGLRenderingContext[SO] final val TEXTURE0 = 0x84C0
raw/WebGLRenderingContext[SO] final val TEXTURE1 = 0x84C1
raw/WebGLRenderingContext[SO] final val TEXTURE10 = 0x84CA
raw/WebGLRenderingContext[SO] final val TEXTURE11 = 0x84CB
raw/WebGLRenderingContext[SO] final val TEXTURE12 = 0x84CC
raw/WebGLRenderingContext[SO] final val TEXTURE13 = 0x84CD
raw/WebGLRenderingContext[SO] final val TEXTURE14 = 0x84CE
raw/WebGLRenderingContext[SO] final val TEXTURE15 = 0x84CF
raw/WebGLRenderingContext[SO] final val TEXTURE16 = 0x84D0
raw/WebGLRenderingContext[SO] final val TEXTURE17 = 0x84D1
raw/WebGLRenderingContext[SO] final val TEXTURE18 = 0x84D2
raw/WebGLRenderingContext[SO] final val TEXTURE19 = 0x84D3
raw/WebGLRenderingContext[SO] final val TEXTURE2 = 0x84C2
raw/WebGLRenderingContext[SO] final val TEXTURE20 = 0x84D4
raw/WebGLRenderingContext[SO] final val TEXTURE21 = 0x84D5
raw/WebGLRenderingContext[SO] final val TEXTURE22 = 0x84D6
raw/WebGLRenderingContext[SO] final val TEXTURE23 = 0x84D7
raw/WebGLRenderingContext[SO] final val TEXTURE24 = 0x84D8
raw/WebGLRenderingContext[SO] final val TEXTURE25 = 0x84D9
raw/WebGLRenderingContext[SO] final val TEXTURE26 = 0x84DA
raw/WebGLRenderingContext[SO] final val TEXTURE27 = 0x84DB
raw/WebGLRenderingContext[SO] final val TEXTURE28 = 0x84DC
raw/WebGLRenderingContext[SO] final val TEXTURE29 = 0x84DD
raw/WebGLRenderingContext[SO] final val TEXTURE3 = 0x84C3
raw/WebGLRenderingContext[SO] final val TEXTURE30 = 0x84DE
raw/WebGLRenderingContext[SO] final val TEXTURE31 = 0x84DF
raw/WebGLRenderingContext[SO] final val TEXTURE4 = 0x84C4
raw/WebGLRenderingContext[SO] final val TEXTURE5 = 0x84C5
raw/WebGLRenderingContext[SO] final val TEXTURE6 = 0x84C6
raw/WebGLRenderingContext[SO] final val TEXTURE7 = 0x84C7
raw/WebGLRenderingContext[SO] final val TEXTURE8 = 0x84C8
raw/WebGLRenderingContext[SO] final val TEXTURE9 = 0x84C9
raw/WebGLRenderingContext[SO] final val TEXTURE_2D = 0x0DE1
raw/WebGLRenderingContext[SO] final val TEXTURE_BINDING_2D = 0x8069
raw/WebGLRenderingContext[SO] final val TEXTURE_BINDING_CUBE_MAP = 0x8514
raw/WebGLRenderingContext[SO] final val TEXTURE_CUBE_MAP = 0x8513
raw/WebGLRenderingContext[SO] final val TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516
raw/WebGLRenderingContext[SO] final val TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518
raw/WebGLRenderingContext[SO] final val TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A
raw/WebGLRenderingContext[SO] final val TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515
raw/WebGLRenderingContext[SO] final val TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517
raw/WebGLRenderingContext[SO] final val TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519
raw/WebGLRenderingContext[SO] final val TEXTURE_MAG_FILTER = 0x2800
raw/WebGLRenderingContext[SO] final val TEXTURE_MIN_FILTER = 0x2801
raw/WebGLRenderingContext[SO] final val TEXTURE_WRAP_S = 0x2802
raw/WebGLRenderingContext[SO] final val TEXTURE_WRAP_T = 0x2803
raw/WebGLRenderingContext[SO] final val TRIANGLES = 0x0004
raw/WebGLRenderingContext[SO] final val TRIANGLE_FAN = 0x0006
raw/WebGLRenderingContext[SO] final val TRIANGLE_STRIP = 0x0005
raw/WebGLRenderingContext[SO] final val UNPACK_ALIGNMENT = 0x0CF5
raw/WebGLRenderingContext[SO] final val UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243
raw/WebGLRenderingContext[SO] final val UNPACK_FLIP_Y_WEBGL = 0x9240
raw/WebGLRenderingContext[SO] final val UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241
raw/WebGLRenderingContext[SO] final val UNSIGNED_BYTE = 0x1401
raw/WebGLRenderingContext[SO] final val UNSIGNED_INT = 0x1405
raw/WebGLRenderingContext[SO] final val UNSIGNED_SHORT = 0x1403
raw/WebGLRenderingContext[SO] final val UNSIGNED_SHORT_4_4_4_4 = 0x8033
raw/WebGLRenderingContext[SO] final val UNSIGNED_SHORT_5_5_5_1 = 0x8034
raw/WebGLRenderingContext[SO] final val UNSIGNED_SHORT_5_6_5 = 0x8363
raw/WebGLRenderingContext[SO] final val VALIDATE_STATUS = 0x8B83
raw/WebGLRenderingContext[SO] final val VENDOR = 0x1F00
raw/WebGLRenderingContext[SO] final val VERSION = 0x1F02
raw/WebGLRenderingContext[SO] final val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F
raw/WebGLRenderingContext[SO] final val VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622
raw/WebGLRenderingContext[SO] final val VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A
raw/WebGLRenderingContext[SO] final val VERTEX_ATTRIB_ARRAY_POINTER = 0x8645
raw/WebGLRenderingContext[SO] final val VERTEX_ATTRIB_ARRAY_SIZE = 0x8623
raw/WebGLRenderingContext[SO] final val VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624
raw/WebGLRenderingContext[SO] final val VERTEX_ATTRIB_ARRAY_TYPE = 0x8625
raw/WebGLRenderingContext[SO] final val VERTEX_SHADER = 0x8B31
raw/WebGLRenderingContext[SO] final val VIEWPORT = 0x0BA2
raw/WebGLRenderingContext[SO] final val ZERO = 0
raw/WebGLShader[JC]
raw/WebGLShaderPrecisionFormat[JC] val precision: Int
raw/WebGLShaderPrecisionFormat[JC] val rangeMax: Int
raw/WebGLShaderPrecisionFormat[JC] val rangeMin: Int
raw/WebGLTexture[JC]
raw/WebGLUniformLocation[JC]
raw/WebSocket[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/WebSocket[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/WebSocket[JC] var binaryType: String
raw/WebSocket[JC] def bufferedAmount: Int
raw/WebSocket[JC] def close(code: Int?, reason: String?): Unit
raw/WebSocket[JC] def dispatchEvent(evt: Event): Boolean
raw/WebSocket[JC] def extensions: String
raw/WebSocket[JC] var onclose: js.Function1[CloseEvent, _]
raw/WebSocket[JC] var onerror: js.Function1[Event, _]
raw/WebSocket[JC] var onmessage: js.Function1[MessageEvent, _]
raw/WebSocket[JC] var onopen: js.Function1[Event, _]
raw/WebSocket[JC] def readyState: Int
raw/WebSocket[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/WebSocket[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/WebSocket[JC] def send(data: ArrayBuffer): Unit
raw/WebSocket[JC] def send(data: Blob): Unit
raw/WebSocket[JC] def send(data: String): Unit
raw/WebSocket[JO] val CLOSED: Int
raw/WebSocket[JO] val CLOSING: Int
raw/WebSocket[JO] val CONNECTING: Int
raw/WebSocket[JO] val OPEN: Int
raw/WheelEvent[JC] def altKey: Boolean
raw/WheelEvent[JC] def bubbles: Boolean
raw/WheelEvent[JC] def button: Int
raw/WheelEvent[JC] def buttons: Int
raw/WheelEvent[JC] def cancelBubble: Boolean
raw/WheelEvent[JC] def cancelable: Boolean
raw/WheelEvent[JC] def clientX: Double
raw/WheelEvent[JC] def clientY: Double
raw/WheelEvent[JC] def ctrlKey: Boolean
raw/WheelEvent[JC] def currentTarget: EventTarget
raw/WheelEvent[JC] def defaultPrevented: Boolean
raw/WheelEvent[JC] def deltaMode: Int
raw/WheelEvent[JC] def deltaX: Double
raw/WheelEvent[JC] def deltaY: Double
raw/WheelEvent[JC] def deltaZ: Double
raw/WheelEvent[JC] def detail: Int
raw/WheelEvent[JC] def eventPhase: Int
raw/WheelEvent[JC] def getModifierState(keyArg: String): Boolean
raw/WheelEvent[JC] def isTrusted: Boolean
raw/WheelEvent[JC] def metaKey: Boolean
raw/WheelEvent[JC] def pageX: Double
raw/WheelEvent[JC] def pageY: Double
raw/WheelEvent[JC] def preventDefault(): Unit
raw/WheelEvent[JC] def relatedTarget: EventTarget
raw/WheelEvent[JC] def screenX: Double
raw/WheelEvent[JC] def screenY: Double
raw/WheelEvent[JC] def shiftKey: Boolean
raw/WheelEvent[JC] def stopImmediatePropagation(): Unit
raw/WheelEvent[JC] def stopPropagation(): Unit
raw/WheelEvent[JC] def target: EventTarget
raw/WheelEvent[JC] def timeStamp: Double
raw/WheelEvent[JC] def `type`: String
raw/WheelEvent[JC] def view: Window
raw/WheelEvent[JO] val DOM_DELTA_LINE: Int
raw/WheelEvent[JO] val DOM_DELTA_PAGE: Int
raw/WheelEvent[JO] val DOM_DELTA_PIXEL: Int
raw/WheelEventInit[JT] var altKey: js.UndefOr[Boolean]
raw/WheelEventInit[JT] var bubbles: js.UndefOr[Boolean]
raw/WheelEventInit[JT] var button: js.UndefOr[Int]
raw/WheelEventInit[JT] var buttons: js.UndefOr[Int]
raw/WheelEventInit[JT] var cancelable: js.UndefOr[Boolean]
raw/WheelEventInit[JT] var clientX: js.UndefOr[Double]
raw/WheelEventInit[JT] var clientY: js.UndefOr[Double]
raw/WheelEventInit[JT] var composed: js.UndefOr[Boolean]
raw/WheelEventInit[JT] var ctrlKey: js.UndefOr[Boolean]
raw/WheelEventInit[JT] var deltaMode: js.UndefOr[Int]
raw/WheelEventInit[JT] var deltaX: js.UndefOr[Double]
raw/WheelEventInit[JT] var deltaY: js.UndefOr[Double]
raw/WheelEventInit[JT] var deltaZ: js.UndefOr[Double]
raw/WheelEventInit[JT] val detail: js.UndefOr[Int]
raw/WheelEventInit[JT] var metaKey: js.UndefOr[Boolean]
raw/WheelEventInit[JT] var pageX: js.UndefOr[Double]
raw/WheelEventInit[JT] var pageY: js.UndefOr[Double]
raw/WheelEventInit[JT] var relatedTarget: js.UndefOr[EventTarget]
raw/WheelEventInit[JT] var scoped: js.UndefOr[Boolean]
raw/WheelEventInit[JT] var screenX: js.UndefOr[Double]
raw/WheelEventInit[JT] var screenY: js.UndefOr[Double]
raw/WheelEventInit[JT] var shiftKey: js.UndefOr[Boolean]
raw/WheelEventInit[JT] val view: js.UndefOr[Window]
raw/Window[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/Window[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Window[JC] def alert(): Unit
raw/Window[JC] def alert(message: String): Unit
raw/Window[JC] def applicationCache: ApplicationCache
raw/Window[JC] def atob(encodedString: String): String
raw/Window[JC] def blur(): Unit
raw/Window[JC] def btoa(rawString: String): String
raw/Window[JC] def caches: js.UndefOr[CacheStorage]
raw/Window[JC] def cancelAnimationFrame(handle: Int): Unit
raw/Window[JC] def clearInterval(handle: Int): Unit
raw/Window[JC] def clearTimeout(handle: Int): Unit
raw/Window[JC] def close(): Unit
raw/Window[JC] def closed: Boolean
raw/Window[JC] def confirm(message: String?): Boolean
raw/Window[JC] var console: Console
raw/Window[JC] def createImageBitmap(image: CreateImageBitmapInput): js.Promise[ImageBitmap]
raw/Window[JC] def createImageBitmap(image: CreateImageBitmapInput, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
raw/Window[JC] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double): js.Promise[ImageBitmap]
raw/Window[JC] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
raw/Window[JC] def crossOriginIsolated: Boolean
raw/Window[JC] def devicePixelRatio: Double
raw/Window[JC] def dispatchEvent(evt: Event): Boolean
raw/Window[JC] def document: HTMLDocument
raw/Window[JC] def fetch(info: RequestInfo, init: RequestInit = null): js.Promise[Response]
raw/Window[JC] def focus(): Unit
raw/Window[JC] def frameElement: Element
raw/Window[JC] def frames: Window
raw/Window[JC] def getComputedStyle(elt: Element, pseudoElt: String?): CSSStyleDeclaration
raw/Window[JC] def getSelection(): Selection
raw/Window[JC] var gotpointercapture: js.Function1[PointerEvent, _]
raw/Window[JC] def history: History
raw/Window[JC] def indexedDB: js.UndefOr[IDBFactory]
raw/Window[JC] def innerHeight: Double
raw/Window[JC] def innerWidth: Double
raw/Window[JC] def isSecureContext: Boolean
raw/Window[JC] def length: Int
raw/Window[JC] def localStorage: Storage
raw/Window[JC] var location: Location
raw/Window[JC] var lostpointercapture: js.Function1[PointerEvent, _]
raw/Window[JC] def matchMedia(mediaQuery: String): MediaQueryList
raw/Window[JC] def moveBy(deltaX: Int, deltaY: Int): Unit
raw/Window[JC] def moveTo(x: Int, y: Int): Unit
raw/Window[JC] var name: String
raw/Window[JC] def navigator: Navigator
raw/Window[JC] var onabort: js.Function1[UIEvent, _]
raw/Window[JC] var onafterprint: js.Function1[Event, _]
raw/Window[JC] var onbeforeprint: js.Function1[Event, _]
raw/Window[JC] var onbeforeunload: js.Function1[BeforeUnloadEvent, _]
raw/Window[JC] var onblur: js.Function1[FocusEvent, _]
raw/Window[JC] var oncanplay: js.Function1[Event, _]
raw/Window[JC] var oncanplaythrough: js.Function1[Event, _]
raw/Window[JC] var onchange: js.Function1[Event, _]
raw/Window[JC] var onclick: js.Function1[MouseEvent, _]
raw/Window[JC] var oncontextmenu: js.Function1[MouseEvent, _]
raw/Window[JC] var ondblclick: js.Function1[MouseEvent, _]
raw/Window[JC] var ondrag: js.Function1[DragEvent, _]
raw/Window[JC] var ondragend: js.Function1[DragEvent, _]
raw/Window[JC] var ondragenter: js.Function1[DragEvent, _]
raw/Window[JC] var ondragleave: js.Function1[DragEvent, _]
raw/Window[JC] var ondragover: js.Function1[DragEvent, _]
raw/Window[JC] var ondragstart: js.Function1[DragEvent, _]
raw/Window[JC] var ondrop: js.Function1[DragEvent, _]
raw/Window[JC] var ondurationchange: js.Function1[Event, _]
raw/Window[JC] var onemptied: js.Function1[Event, _]
raw/Window[JC] var onended: js.Function1[Event, _]
raw/Window[JC] var onerror: js.Function5[Event, String, Int, Int, Any, _]
raw/Window[JC] var onfocus: js.Function1[FocusEvent, _]
raw/Window[JC] var onhashchange: js.Function1[HashChangeEvent, _]
raw/Window[JC] var oninput: js.Function1[Event, _]
raw/Window[JC] var onkeydown: js.Function1[KeyboardEvent, _]
raw/Window[JC] var onkeypress: js.Function1[KeyboardEvent, _]
raw/Window[JC] var onkeyup: js.Function1[KeyboardEvent, _]
raw/Window[JC] var onload: js.Function1[Event, _]
raw/Window[JC] var onloadeddata: js.Function1[Event, _]
raw/Window[JC] var onloadedmetadata: js.Function1[Event, _]
raw/Window[JC] var onloadstart: js.Function1[Event, _]
raw/Window[JC] var onmessage: js.Function1[MessageEvent, _]
raw/Window[JC] var onmousedown: js.Function1[MouseEvent, _]
raw/Window[JC] var onmousemove: js.Function1[MouseEvent, _]
raw/Window[JC] var onmouseout: js.Function1[MouseEvent, _]
raw/Window[JC] var onmouseover: js.Function1[MouseEvent, _]
raw/Window[JC] var onmouseup: js.Function1[MouseEvent, _]
raw/Window[JC] var onmousewheel: js.Function1[WheelEvent, _]
raw/Window[JC] var onoffline: js.Function1[Event, _]
raw/Window[JC] var ononline: js.Function1[Event, _]
raw/Window[JC] var onpagehide: js.Function1[PageTransitionEvent, _]
raw/Window[JC] var onpageshow: js.Function1[PageTransitionEvent, _]
raw/Window[JC] var onpause: js.Function1[Event, _]
raw/Window[JC] var onplay: js.Function1[Event, _]
raw/Window[JC] var onplaying: js.Function1[Event, _]
raw/Window[JC] var onpointercancel: js.Function1[PointerEvent, _]
raw/Window[JC] var onpointerdown: js.Function1[PointerEvent, _]
raw/Window[JC] var onpointerenter: js.Function1[PointerEvent, _]
raw/Window[JC] var onpointerleave: js.Function1[PointerEvent, _]
raw/Window[JC] var onpointermove: js.Function1[PointerEvent, _]
raw/Window[JC] var onpointerout: js.Function1[PointerEvent, _]
raw/Window[JC] var onpointerover: js.Function1[PointerEvent, _]
raw/Window[JC] var onpointerup: js.Function1[PointerEvent, _]
raw/Window[JC] var onpopstate: js.Function1[PopStateEvent, _]
raw/Window[JC] var onprogress: js.Function1[js.Any, _]
raw/Window[JC] var onratechange: js.Function1[Event, _]
raw/Window[JC] var onreadystatechange: js.Function1[Event, _]
raw/Window[JC] var onreset: js.Function1[Event, _]
raw/Window[JC] var onresize: js.Function1[UIEvent, _]
raw/Window[JC] var onscroll: js.Function1[UIEvent, _]
raw/Window[JC] var onseeked: js.Function1[Event, _]
raw/Window[JC] var onseeking: js.Function1[Event, _]
raw/Window[JC] var onselect: js.Function1[UIEvent, _]
raw/Window[JC] var onstalled: js.Function1[Event, _]
raw/Window[JC] var onstorage: js.Function1[StorageEvent, _]
raw/Window[JC] var onsubmit: js.Function1[Event, _]
raw/Window[JC] var onsuspend: js.Function1[Event, _]
raw/Window[JC] var ontimeupdate: js.Function1[Event, _]
raw/Window[JC] var onunload: js.Function1[Event, _]
raw/Window[JC] var onvolumechange: js.Function1[Event, _]
raw/Window[JC] var onwaiting: js.Function1[Event, _]
raw/Window[JC] var onwheel: js.Function1[WheelEvent, _]
raw/Window[JC] def open(url: String?, target: String?, features: String?, replace: Boolean?): Window
raw/Window[JC] var opener: Window
raw/Window[JC] def origin: String
raw/Window[JC] def outerHeight: Int
raw/Window[JC] def outerWidth: Int
raw/Window[JC] def pageXOffset: Double
raw/Window[JC] def pageYOffset: Double
raw/Window[JC] def parent: Window
raw/Window[JC] def performance: Performance
raw/Window[JC] def postMessage(message: js.Any, targetOrigin: String, transfer: js.Any?): Unit
raw/Window[JC] def print(): Unit
raw/Window[JC] def prompt(): String
raw/Window[JC] def prompt(message: String, default: String?): String
raw/Window[JC] def queueMicrotask(function: js.Function0[Any]): Unit
raw/Window[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/Window[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Window[JC] def requestAnimationFrame(callback: js.Function1[Double, _]): Int
raw/Window[JC] def resizeBy(deltaX: Int, deltaY: Int): Unit
raw/Window[JC] def resizeTo(width: Int, height: Int): Unit
raw/Window[JC] def screen: Screen
raw/Window[JC] var screenX: Int
raw/Window[JC] def screenY: Int
raw/Window[JC] def scroll(x: Int, y: Int): Unit
raw/Window[JC] def scrollBy(x: Int, y: Int): Unit
raw/Window[JC] def scrollTo(x: Int, y: Int): Unit
raw/Window[JC] def scrollX: Double
raw/Window[JC] def scrollY: Double
raw/Window[JC] def self: Window
raw/Window[JC] def sessionStorage: Storage
raw/Window[JC] def setInterval(handler: js.Function0[Any], timeout: Double): Int
raw/Window[JC] def setTimeout(handler: js.Function0[Any], timeout: Double): Int
raw/Window[JC] def showModalDialog(url: String?, argument: js.Any?, options: js.Any?): js.Dynamic
raw/Window[JC] def styleMedia: StyleMedia
raw/Window[JC] def top: Window
raw/Window[JC] def window: Window
raw/WindowBase64[JT] def atob(encodedString: String): String
raw/WindowBase64[JT] def btoa(rawString: String): String
raw/WindowConsole[JT] var console: Console
raw/WindowLocalStorage[JT] def localStorage: Storage
raw/WindowOrWorkerGlobalScope[JT] def atob(encodedString: String): String
raw/WindowOrWorkerGlobalScope[JT] def btoa(rawString: String): String
raw/WindowOrWorkerGlobalScope[JT] def caches: js.UndefOr[CacheStorage]
raw/WindowOrWorkerGlobalScope[JT] def clearInterval(handle: Int): Unit
raw/WindowOrWorkerGlobalScope[JT] def clearTimeout(handle: Int): Unit
raw/WindowOrWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput): js.Promise[ImageBitmap]
raw/WindowOrWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
raw/WindowOrWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double): js.Promise[ImageBitmap]
raw/WindowOrWorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
raw/WindowOrWorkerGlobalScope[JT] def crossOriginIsolated: Boolean
raw/WindowOrWorkerGlobalScope[JT] def fetch(info: RequestInfo, init: RequestInit = null): js.Promise[Response]
raw/WindowOrWorkerGlobalScope[JT] def indexedDB: js.UndefOr[IDBFactory]
raw/WindowOrWorkerGlobalScope[JT] def isSecureContext: Boolean
raw/WindowOrWorkerGlobalScope[JT] def origin: String
raw/WindowOrWorkerGlobalScope[JT] def queueMicrotask(function: js.Function0[Any]): Unit
raw/WindowOrWorkerGlobalScope[JT] def setInterval(handler: js.Function0[Any], timeout: Double): Int
raw/WindowOrWorkerGlobalScope[JT] def setTimeout(handler: js.Function0[Any], timeout: Double): Int
raw/WindowOrWorkerGlobalScope[SO] type CreateImageBitmapInput = HTMLImageElement | SVGImageElement | HTMLVideoElement | HTMLCanvasElement | HTMLCanvasElement | Blob | ImageData | ImageBitmap | OffscreenCanvas
raw/WindowSessionStorage[JT] def sessionStorage: Storage
raw/WindowTimers[JT] def clearInterval(handle: Int): Unit
raw/WindowTimers[JT] def clearTimeout(handle: Int): Unit
raw/WindowTimers[JT] def setInterval(handler: js.Function0[Any], timeout: Double): Int
raw/WindowTimers[JT] def setTimeout(handler: js.Function0[Any], timeout: Double): Int
raw/Worker[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/Worker[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Worker[JC] def dispatchEvent(evt: Event): Boolean
raw/Worker[JC] var onerror: js.Function1[ErrorEvent, _]
raw/Worker[JC] var onmessage: js.Function1[MessageEvent, _]
raw/Worker[JC] def postMessage(aMessage: js.Any, transferList: js.UndefOr[js.Array[Transferable]]?): Unit
raw/Worker[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/Worker[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/Worker[JC] def terminate(): Unit
raw/WorkerGlobalScope[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/WorkerGlobalScope[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/WorkerGlobalScope[JT] def atob(encodedString: String): String
raw/WorkerGlobalScope[JT] def btoa(rawString: String): String
raw/WorkerGlobalScope[JT] def caches: js.UndefOr[CacheStorage]
raw/WorkerGlobalScope[JT] def clearInterval(handle: Int): Unit
raw/WorkerGlobalScope[JT] def clearTimeout(handle: Int): Unit
raw/WorkerGlobalScope[JT] def close(): Unit
raw/WorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput): js.Promise[ImageBitmap]
raw/WorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
raw/WorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double): js.Promise[ImageBitmap]
raw/WorkerGlobalScope[JT] def createImageBitmap(image: CreateImageBitmapInput, sx: Double, sy: Double, sw: Double, sh: Double, options: CreateImageBitmapOptions): js.Promise[ImageBitmap]
raw/WorkerGlobalScope[JT] def crossOriginIsolated: Boolean
raw/WorkerGlobalScope[JT] def dispatchEvent(evt: Event): Boolean
raw/WorkerGlobalScope[JT] def fetch(info: RequestInfo, init: RequestInit = null): js.Promise[Response]
raw/WorkerGlobalScope[JT] def importScripts(urls: js.Array[String]): Unit
raw/WorkerGlobalScope[JT] def indexedDB: js.UndefOr[IDBFactory]
raw/WorkerGlobalScope[JT] def isSecureContext: Boolean
raw/WorkerGlobalScope[JT] def location: WorkerLocation
raw/WorkerGlobalScope[JT] def navigator: WorkerNavigator
raw/WorkerGlobalScope[JT] var onError: js.Function1[ErrorEvent, _]
raw/WorkerGlobalScope[JT] var onlanguagechange: js.Function1[Event, _]
raw/WorkerGlobalScope[JT] var onoffline: js.Function1[Event, _]
raw/WorkerGlobalScope[JT] var ononline: js.Function1[Event, _]
raw/WorkerGlobalScope[JT] def origin: String
raw/WorkerGlobalScope[JT] def queueMicrotask(function: js.Function0[Any]): Unit
raw/WorkerGlobalScope[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/WorkerGlobalScope[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/WorkerGlobalScope[JT] def self: this.type
raw/WorkerGlobalScope[JT] def setInterval(handler: js.Function0[Any], timeout: Double): Int
raw/WorkerGlobalScope[JT] def setTimeout(handler: js.Function0[Any], timeout: Double): Int
raw/WorkerLocation[JT] def hash: String
raw/WorkerLocation[JT] def host: String
raw/WorkerLocation[JT] def hostname: String
raw/WorkerLocation[JT] def href: String
raw/WorkerLocation[JT] def origin: String
raw/WorkerLocation[JT] def pathname: String
raw/WorkerLocation[JT] def port: String
raw/WorkerLocation[JT] def protocol: String
raw/WorkerLocation[JT] def search: String
raw/WorkerNavigator[JT] def appName: String
raw/WorkerNavigator[JT] def appVersion: String
raw/WorkerNavigator[JT] def language: String
raw/WorkerNavigator[JT] def languages: js.Array[String]
raw/WorkerNavigator[JT] def onLine: Boolean
raw/WorkerNavigator[JT] def platform: String
raw/WorkerNavigator[JT] def userAgent: String
raw/XMLHttpRequest[JC] def abort(): Unit
raw/XMLHttpRequest[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/XMLHttpRequest[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/XMLHttpRequest[JC] def create(): XMLHttpRequest
raw/XMLHttpRequest[JC] def dispatchEvent(evt: Event): Boolean
raw/XMLHttpRequest[JC] def getAllResponseHeaders(): String
raw/XMLHttpRequest[JC] def getResponseHeader(header: String): String
raw/XMLHttpRequest[JC] var onabort: js.Function1[ProgressEvent, _]
raw/XMLHttpRequest[JC] var onerror: js.Function1[ProgressEvent, _]
raw/XMLHttpRequest[JC] var onload: js.Function1[ProgressEvent, _]
raw/XMLHttpRequest[JC] var onloadend: js.Function1[ProgressEvent, _]
raw/XMLHttpRequest[JC] var onloadstart: js.Function1[ProgressEvent, _]
raw/XMLHttpRequest[JC] var onprogress: js.Function1[ProgressEvent, _]
raw/XMLHttpRequest[JC] var onreadystatechange: js.Function1[Event, _]
raw/XMLHttpRequest[JC] var ontimeout: js.Function1[ProgressEvent, _]
raw/XMLHttpRequest[JC] def open(method: String, url: String, async: Boolean?, user: String?, password: String?): Unit
raw/XMLHttpRequest[JC] def overrideMimeType(mimeType: String): Unit
raw/XMLHttpRequest[JC] def readyState: Int
raw/XMLHttpRequest[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/XMLHttpRequest[JC] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/XMLHttpRequest[JC] def response: js.Any
raw/XMLHttpRequest[JC] def responseText: String
raw/XMLHttpRequest[JC] var responseType: String
raw/XMLHttpRequest[JC] def responseURL: js.UndefOr[String]
raw/XMLHttpRequest[JC] def responseXML: Document
raw/XMLHttpRequest[JC] def send(data: js.Any?): Unit
raw/XMLHttpRequest[JC] def setRequestHeader(header: String, value: String): Unit
raw/XMLHttpRequest[JC] def status: Int
raw/XMLHttpRequest[JC] def statusText: String
raw/XMLHttpRequest[JC] var timeout: Double
raw/XMLHttpRequest[JC] var upload: XMLHttpRequestEventTarget
raw/XMLHttpRequest[JC] var withCredentials: Boolean
raw/XMLHttpRequest[JO] var DONE: Int
raw/XMLHttpRequest[JO] var HEADERS_RECEIVED: Int
raw/XMLHttpRequest[JO] var LOADING: Int
raw/XMLHttpRequest[JO] var OPENED: Int
raw/XMLHttpRequest[JO] var UNSENT: Int
raw/XMLHttpRequestEventTarget[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/XMLHttpRequestEventTarget[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/XMLHttpRequestEventTarget[JT] def dispatchEvent(evt: Event): Boolean
raw/XMLHttpRequestEventTarget[JT] var onabort: js.Function1[ProgressEvent, _]
raw/XMLHttpRequestEventTarget[JT] var onerror: js.Function1[ProgressEvent, _]
raw/XMLHttpRequestEventTarget[JT] var onload: js.Function1[ProgressEvent, _]
raw/XMLHttpRequestEventTarget[JT] var onloadend: js.Function1[ProgressEvent, _]
raw/XMLHttpRequestEventTarget[JT] var onloadstart: js.Function1[ProgressEvent, _]
raw/XMLHttpRequestEventTarget[JT] var onprogress: js.Function1[ProgressEvent, _]
raw/XMLHttpRequestEventTarget[JT] var ontimeout: js.Function1[ProgressEvent, _]
raw/XMLHttpRequestEventTarget[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/XMLHttpRequestEventTarget[JT] def removeEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], useCapture: Boolean?): Unit
raw/XMLSerializer[JC] def serializeToString(target: Node): String
raw/XPathNSResolver[JC] def lookupNamespaceURI(prefix: String): String
raw/XPathResult[JC] def booleanValue: Boolean
raw/XPathResult[JC] def invalidIteratorState: Boolean
raw/XPathResult[JC] def iterateNext(): Node
raw/XPathResult[JC] def numberValue: Double
raw/XPathResult[JC] def resultType: Int
raw/XPathResult[JC] def singleNodeValue: Node
raw/XPathResult[JC] def snapshotItem(index: Int): Node
raw/XPathResult[JC] def snapshotLength: Int
raw/XPathResult[JC] def stringValue: String
raw/XPathResult[JO] val ANY_TYPE: Int
raw/XPathResult[JO] val ANY_UNORDERED_NODE_TYPE: Int
raw/XPathResult[JO] val BOOLEAN_TYPE: Int
raw/XPathResult[JO] val FIRST_ORDERED_NODE_TYPE: Int
raw/XPathResult[JO] val NUMBER_TYPE: Int
raw/XPathResult[JO] val ORDERED_NODE_ITERATOR_TYPE: Int
raw/XPathResult[JO] val ORDERED_NODE_SNAPSHOT_TYPE: Int
raw/XPathResult[JO] val STRING_TYPE: Int
raw/XPathResult[JO] val UNORDERED_NODE_ITERATOR_TYPE: Int
raw/XPathResult[JO] val UNORDERED_NODE_SNAPSHOT_TYPE: Int
raw/package[SO] type Transferable = ArrayBuffer | MessagePort
svg[SO] type A = raw.SVGAElement
svg[SO] type Angle = raw.SVGAngle
svg[SO] type AnimatedAngle = raw.SVGAnimatedAngle
svg[SO] type AnimatedBoolean = raw.SVGAnimatedBoolean
svg[SO] type AnimatedEnumeration = raw.SVGAnimatedEnumeration
svg[SO] type AnimatedInteger = raw.SVGAnimatedInteger
svg[SO] type AnimatedLength = raw.SVGAnimatedLength
svg[SO] type AnimatedLengthList = raw.SVGAnimatedLengthList
svg[SO] type AnimatedNumber = raw.SVGAnimatedNumber
svg[SO] type AnimatedNumberList = raw.SVGAnimatedNumberList
svg[SO] type AnimatedPathData = raw.SVGAnimatedPathData
svg[SO] type AnimatedPoints = raw.SVGAnimatedPoints
svg[SO] type AnimatedPreserveAspectRatio = raw.SVGAnimatedPreserveAspectRatio
svg[SO] type AnimatedRect = raw.SVGAnimatedRect
svg[SO] type AnimatedString = raw.SVGAnimatedString
svg[SO] type AnimatedTransformList = raw.SVGAnimatedTransformList
svg[SO] type Circle = raw.SVGCircleElement
svg[SO] type ClipPath = raw.SVGClipPathElement
svg[SO] type ComponentTransferFunction = raw.SVGComponentTransferFunctionElement
svg[SO] type Defs = raw.SVGDefsElement
svg[SO] type Desc = raw.SVGDescElement
svg[SO] type Element = raw.SVGElement
svg[SO] type ElementInstance = raw.SVGElementInstance
svg[SO] type ElementInstanceList = raw.SVGElementInstanceList
svg[SO] type Ellipse = raw.SVGEllipseElement
svg[SO] type Exception = raw.SVGException
svg[SO] type ExternalResourcesRequired = raw.SVGExternalResourcesRequired
svg[SO] type FEBlend = raw.SVGFEBlendElement
svg[SO] type FEColorMatrix = raw.SVGFEColorMatrixElement
svg[SO] type FEComponentTransfer = raw.SVGFEComponentTransferElement
svg[SO] type FEComposite = raw.SVGFECompositeElement
svg[SO] type FEConvolveMatrix = raw.SVGFEConvolveMatrixElement
svg[SO] type FEDiffuseLighting = raw.SVGFEDiffuseLightingElement
svg[SO] type FEDisplacementMap = raw.SVGFEDisplacementMapElement
svg[SO] type FEDistantLight = raw.SVGFEDistantLightElement
svg[SO] type FEFlood = raw.SVGFEFloodElement
svg[SO] type FEFuncA = raw.SVGFEFuncAElement
svg[SO] type FEFuncB = raw.SVGFEFuncBElement
svg[SO] type FEFuncG = raw.SVGFEFuncGElement
svg[SO] type FEFuncR = raw.SVGFEFuncRElement
svg[SO] type FEGaussianBlur = raw.SVGFEGaussianBlurElement
svg[SO] type FEImage = raw.SVGFEImageElement
svg[SO] type FEMerge = raw.SVGFEMergeElement
svg[SO] type FEMergeNode = raw.SVGFEMergeNodeElement
svg[SO] type FEMorphology = raw.SVGFEMorphologyElement
svg[SO] type FEOffset = raw.SVGFEOffsetElement
svg[SO] type FEPointLight = raw.SVGFEPointLightElement
svg[SO] type FESpecularLighting = raw.SVGFESpecularLightingElement
svg[SO] type FESpotLight = raw.SVGFESpotLightElement
svg[SO] type FETile = raw.SVGFETileElement
svg[SO] type FETurbulence = raw.SVGFETurbulenceElement
svg[SO] type Filter = raw.SVGFilterElement
svg[SO] type FilterPrimitiveStandardAttributes = raw.SVGFilterPrimitiveStandardAttributes
svg[SO] type FitToViewBox = raw.SVGFitToViewBox
svg[SO] type G = raw.SVGGElement
svg[SO] type GetSVGDocument = raw.GetSVGDocument
svg[SO] type Gradient = raw.SVGGradientElement
svg[SO] type Image = raw.SVGImageElement
svg[SO] type LangSpace = raw.SVGLangSpace
svg[SO] type Length = raw.SVGLength
svg[SO] type LengthList = raw.SVGLengthList
svg[SO] type Line = raw.SVGLineElement
svg[SO] type LinearGradient = raw.SVGLinearGradientElement
svg[SO] type Locatable = raw.SVGLocatable
svg[SO] type Marker = raw.SVGMarkerElement
svg[SO] type Mask = raw.SVGMaskElement
svg[SO] type Matrix = raw.SVGMatrix
svg[SO] type Metadata = raw.SVGMetadataElement
svg[SO] type Number = raw.SVGNumber
svg[SO] type NumberList = raw.SVGNumberList
svg[SO] type Path = raw.SVGPathElement
svg[SO] type PathSeg = raw.SVGPathSeg
svg[SO] type PathSegArcAbs = raw.SVGPathSegArcAbs
svg[SO] type PathSegArcRel = raw.SVGPathSegArcRel
svg[SO] type PathSegClosePath = raw.SVGPathSegClosePath
svg[SO] type PathSegCurvetoCubicAbs = raw.SVGPathSegCurvetoCubicAbs
svg[SO] type PathSegCurvetoCubicRel = raw.SVGPathSegCurvetoCubicRel
svg[SO] type PathSegCurvetoCubicSmoothAbs = raw.SVGPathSegCurvetoCubicSmoothAbs
svg[SO] type PathSegCurvetoCubicSmoothRel = raw.SVGPathSegCurvetoCubicSmoothRel
svg[SO] type PathSegCurvetoQuadraticAbs = raw.SVGPathSegCurvetoQuadraticAbs
svg[SO] type PathSegCurvetoQuadraticRel = raw.SVGPathSegCurvetoQuadraticRel
svg[SO] type PathSegCurvetoQuadraticSmoothAbs = raw.SVGPathSegCurvetoQuadraticSmoothAbs
svg[SO] type PathSegCurvetoQuadraticSmoothRel = raw.SVGPathSegCurvetoQuadraticSmoothRel
svg[SO] type PathSegLinetoAbs = raw.SVGPathSegLinetoAbs
svg[SO] type PathSegLinetoHorizontalAbs = raw.SVGPathSegLinetoHorizontalAbs
svg[SO] type PathSegLinetoHorizontalRel = raw.SVGPathSegLinetoHorizontalRel
svg[SO] type PathSegLinetoRel = raw.SVGPathSegLinetoRel
svg[SO] type PathSegLinetoVerticalAbs = raw.SVGPathSegLinetoVerticalAbs
svg[SO] type PathSegLinetoVerticalRel = raw.SVGPathSegLinetoVerticalRel
svg[SO] type PathSegList = raw.SVGPathSegList
svg[SO] type PathSegMovetoAbs = raw.SVGPathSegMovetoAbs
svg[SO] type PathSegMovetoRel = raw.SVGPathSegMovetoRel
svg[SO] type Pattern = raw.SVGPatternElement
svg[SO] type Point = raw.SVGPoint
svg[SO] type PointList = raw.SVGPointList
svg[SO] type Polygon = raw.SVGPolygonElement
svg[SO] type Polyline = raw.SVGPolylineElement
svg[SO] type PreserveAspectRatio = raw.SVGPreserveAspectRatio
svg[SO] type RadialGradient = raw.SVGRadialGradientElement
svg[SO] type Rect = raw.SVGRect
svg[SO] type RectElement = raw.SVGRectElement
svg[SO] type SVG = raw.SVGSVGElement
svg[SO] type Script = raw.SVGScriptElement
svg[SO] type Stop = raw.SVGStopElement
svg[SO] type StringList = raw.SVGStringList
svg[SO] type Stylable = raw.SVGStylable
svg[SO] type Style = raw.SVGStyleElement
svg[SO] type Switch = raw.SVGSwitchElement
svg[SO] type Symbol = raw.SVGSymbolElement
svg[SO] type TSpan = raw.SVGTSpanElement
svg[SO] type Tests = raw.SVGTests
svg[SO] type Text = raw.SVGTextElement
svg[SO] type TextContent = raw.SVGTextContentElement
svg[SO] type TextPath = raw.SVGTextPathElement
svg[SO] type TextPositioning = raw.SVGTextPositioningElement
svg[SO] type Title = raw.SVGTitleElement
svg[SO] type Transform = raw.SVGTransform
svg[SO] type TransformList = raw.SVGTransformList
svg[SO] type Transformable = raw.SVGTransformable
svg[SO] type URIReference = raw.SVGURIReference
svg[SO] type UnitTypes = raw.SVGUnitTypes
svg[SO] type Use = raw.SVGUseElement
svg[SO] type View = raw.SVGViewElement
svg[SO] type ZoomAndPan = raw.SVGZoomAndPan
svg[SO] def Angle = raw.SVGAngle
svg[SO] def ComponentTransferFunction = raw.SVGComponentTransferFunctionElement
svg[SO] def Exception = raw.SVGException
svg[SO] def FEBlend = raw.SVGFEBlendElement
svg[SO] def FEColorMatrix = raw.SVGFEColorMatrixElement
svg[SO] def FEComposite = raw.SVGFECompositeElement
svg[SO] def FEConvolveMatrix = raw.SVGFEConvolveMatrixElement
svg[SO] def FEDisplacementMap = raw.SVGFEDisplacementMapElement
svg[SO] def FEMorphology = raw.SVGFEMorphologyElement
svg[SO] def FETurbulence = raw.SVGFETurbulenceElement
svg[SO] def Gradient = raw.SVGGradientElement
svg[SO] def Length = raw.SVGLength
svg[SO] def Marker = raw.SVGMarkerElement
svg[SO] def PathSeg = raw.SVGPathSeg
svg[SO] def PreserveAspectRatio = raw.SVGPreserveAspectRatio
svg[SO] def TextContent = raw.SVGTextContentElement
svg[SO] def TextPath = raw.SVGTextPathElement
svg[SO] def Transform = raw.SVGTransform
svg[SO] def UnitTypes = raw.SVGUnitTypes
svg[SO] def ZoomAndPan = raw.SVGZoomAndPan
webgl[SO] type ActiveInfo = raw.WebGLActiveInfo
webgl[SO] type Buffer = raw.WebGLBuffer
webgl[SO] type ContextAttributes = raw.WebGLContextAttributes
webgl[SO] type Framebuffer = raw.WebGLFramebuffer
webgl[SO] type Program = raw.WebGLProgram
webgl[SO] type Renderbuffer = raw.WebGLRenderbuffer
webgl[SO] type RenderingContext = raw.WebGLRenderingContext
webgl[SO] type Shader = raw.WebGLShader
webgl[SO] type ShaderPrecisionFormat = raw.WebGLShaderPrecisionFormat
webgl[SO] type Texture = raw.WebGLTexture
webgl[SO] type UniformLocation = raw.WebGLUniformLocation
webgl[SO] def RenderingContext = raw.WebGLRenderingContext
webworkers[SO] type AbstractWorker = raw.AbstractWorker
webworkers[SO] type DedicatedWorkerGlobalScope = raw.DedicatedWorkerGlobalScope
webworkers[SO] type Worker = raw.Worker
webworkers[SO] type WorkerGlobalScope = raw.WorkerGlobalScope
webworkers[SO] type WorkerLocation = raw.WorkerLocation
webworkers[SO] type WorkerNavigator = raw.WorkerNavigator
webworkers[SO] def self: DedicatedWorkerGlobalScope
webworkers.DedicatedWorkerGlobalScope[JO] def self: DedicatedWorkerGlobalScope
