scala-js-dom API
================

This is generated automatically on compile via custom Scalafix rule 'GenerateApiReport'.

Flags:
  [J-] = JavaScript type
  [S-] = Scala type
  [-C] = Class
  [-T] = Trait
  [-O] = Object


crypto/AesCbcParams[SO] def apply(name: String, iv: BufferSource): AesCbcParams
crypto/AesCfbParams[SO] def apply(name: String, iv: BufferSource): AesCfbParams
crypto/AesCmacParams[SO] def apply(name: String, length: Int): AesCmacParams
crypto/AesCtrParams[SO] def apply(name: String, counter: BufferSource, length: Short): AesCtrParams
crypto/AesDerivedKeyParams[SO] def apply(name: String, length: Short): AesDerivedKeyParams
crypto/AesGcmParams[JT] var tagLength: Short
crypto/AesKeyAlgorithm[JT] var length: Int
crypto/AesKeyGenParams[JT] var length: Int
crypto/Algorithm[JT] var name: String
crypto/ConcatParams[SO] def apply(name: String, hash: HashAlgorithmIdentifier, algorithmId: BufferSource, partyUInfo: BufferSource, partyVInfo: BufferSource, publicInfo: BufferSource, privateInfo: BufferSource): ConcatParams
crypto/Crypto[JT] val subtle: SubtleCrypto
crypto/CryptoKey[JT] val usages: js.Array[KeyUsage]
crypto/CryptoKeyPair[JT] val publicKey: CryptoKey
crypto/DhImportKeyParams[SO] def apply(name: String, prime: BigInteger, generator: BigInteger): DhImportKeyParams
crypto/DhKeyAlgorithm[SO] def apply(name: String, prime: BigInteger, generator: BigInteger): DhKeyAlgorithm
crypto/DhKeyDeriveParams[JT] var public: CryptoKey
crypto/DhKeyGenParams[SO] def apply(name: String, prime: BigInteger, generator: BigInteger): DhKeyGenParams
crypto/EcKeyAlgorithm[SO] def apply(name: String, namedCurve: String): EcKeyAlgorithm
crypto/EcKeyGenParams[SO] def apply(name: String, namedCurve: String): EcKeyGenParams
crypto/EcKeyImportParams[JT] var namedCurve: String
crypto/EcdhKeyDeriveParams[SO] def apply(name: String, public: CryptoKey): EcdhKeyDeriveParams
crypto/EcdsaParams[SO] def apply(name: String, hash: HashAlgorithmIdentifier): EcdsaParams
crypto/GlobalCrypto[JO] val crypto: Crypto
crypto/HashAlgorithm[SO] val `SHA-256` = named("SHA-256")
crypto/HkdfCtrParams[SO] def apply(name: String, hash: HashAlgorithmIdentifier, label: BufferSource, context: BufferSource): HkdfCtrParams
crypto/HmacImportParams[SO] def apply(name: String, hash: HashAlgorithmIdentifier, length: Long): HmacImportParams
crypto/HmacKeyAlgorithm[JT] var hash: HashAlgorithmIdentifier
crypto/HmacKeyGenParams[SO] def apply(name: String, hash: HashAlgorithmIdentifier, length: Long): HmacKeyGenParams
crypto/JsonWebKey[JT] var crv: String
crypto/KeyAlgorithm[JT] var name: String
crypto/KeyFormat[JT]
crypto/KeyType[SO] val public = "public".asInstanceOf[KeyType]
crypto/KeyUsage[SO] val deriveKey = "deriveKey".asInstanceOf[KeyUsage]
crypto/Pbkdf2Params[JT] var hash: HashAlgorithmIdentifier
crypto/RSAPublicKey[JT] @js.native def n: String
crypto/RsaHashedImportParams[SO] def apply(name: String, hash: HashAlgorithmIdentifier): RsaHashedImportParams
crypto/RsaHashedKeyAlgorithm[SO] def `RSASSA-PKCS1-v1_5`(modulusLength: Long, publicExponent: BigInteger, hash: HashAlgorithmIdentifier): RsaHashedKeyAlgorithm
crypto/RsaHashedKeyGenParams[JT] var hash: HashAlgorithmIdentifier
crypto/RsaKeyAlgorithm[JT] var publicExponent: BigInteger
crypto/RsaKeyGenParams[JT] var publicExponent: BigInteger
crypto/RsaOaepParams[SO] def apply(name: String, label: BufferSource): RsaOaepParams
crypto/RsaOtherPrimesInfo[JT] var d: String
crypto/RsaPssParams[SO] def apply(name: String, saltLength: Long): RsaPssParams
crypto/SubtleCrypto[JT] def importKey(format: KeyFormat, keyData: BufferSource, algorithm: KeyAlgorithmIdentifier, extractable: Boolean, keyUsages: js.Array[KeyUsage]): js.Promise[js.Any]
crypto/package[SO] implicit def arrayBuffer2BufferSource(b: ArrayBuffer): BufferSource
crypto/package.BufferSource[JT]
css[SO] def Rule = raw.CSSRule
experimental/AbortController[JC] val signal: AbortSignal
experimental/AbortSignal[JT] var onabort: js.Function0[Any]
experimental/Body[JT] def text(): js.Promise[String]
experimental/Chunk[JT] def done: Boolean
experimental/Fetch[JO] def fetch(info: RequestInfo, init: RequestInit = null): js.Promise[Response]
experimental/Fullscreen[SO] def fullscreenEnabled: Boolean
experimental/Fullscreen.FullscreenDocument[JT] def fullscreenEnabled: Boolean
experimental/Fullscreen.FullscreenElement[JT] def requestFullscreen(): js.UndefOr[js.Promise[Unit]]
experimental/Headers[JC] def delete(name: ByteString): Unit
experimental/HttpMethod[SO] val GET = "GET".asInstanceOf[HttpMethod]
experimental/Notification[JC] val silent: Boolean
experimental/NotificationOptions[JT] val onerror: js.Function0[Any]
experimental/PointerLock[SO] def movementX: Double
experimental/PointerLock.PointerLockDocument[JT] def exitPointerLock(): Unit
experimental/PointerLock.PointerLockElement[JT] def requestPointerLock(): Unit
experimental/PointerLock.PointerLockMouseEvent[JT] def movementX: Double
experimental/ReadableStream[JT] def pipeThrough[U](pair: Any, options: Any = js.undefined): ReadableStream[U]
experimental/ReadableStreamController[JC] def error(e: Any): Unit
experimental/ReadableStreamReader[JC] def read(): js.Promise[Chunk[T]]
experimental/ReferrerPolicy[JT]
experimental/Request[JC] def headers: Headers
experimental/RequestCache[JT]
experimental/RequestCredentials[JT]
experimental/RequestDestination[SO] val sharedworker = "sharedworker".asInstanceOf[RequestDestination]
experimental/RequestInit[JT] var signal: js.UndefOr[AbortSignal]
experimental/RequestMode[JT]
experimental/RequestRedirect[SO] val follow = "follow".asInstanceOf[RequestRedirect]
experimental/RequestType[SO] val video = "video".asInstanceOf[RequestType]
experimental/Response[JO] def redirect(url: String, status: Int = 302): Response
experimental/ResponseInit[SO] def apply(_status: Int = 200, _statusText: ByteString = "OK", _headers: HeadersInit = js.Dictionary[String]()): ResponseInit
experimental/ResponseType[JT]
experimental/URL[JC] var searchParams: URLSearchParams
experimental/URLSearchParams[JC] def keys(): js.Iterator[String]
experimental/Vibration[SO] def vibrate(duration: Double): Boolean
experimental/Vibration.VibrationNavigator[JT] def vibrate(duration: Double): Boolean
experimental/WriteableState[SO] val closing = "closing".asInstanceOf[WriteableState]
experimental/WriteableStream[JT] def state: WriteableState
experimental/beacon/package[SO] implicit def toBeaconNavigator(n: Navigator): BeaconNavigator
experimental/beacon/package.BeaconNavigator[JT] def sendBeacon(url: String, data: BodyInit = null): Boolean
experimental/beacon/package.BeaconWorkerNavigator[JT] def sendBeacon(url: String, data: BodyInit = null): Boolean
experimental/deviceorientation/DeviceAcceleration[JT] val x: Double
experimental/deviceorientation/DeviceMotionEvent[SC] val interval: Double
experimental/deviceorientation/DeviceMotionEventInit[JT] val rotationRate: js.UndefOr[DeviceRotationRate]
experimental/deviceorientation/DeviceOrientationEvent[SC] val gamma: Double
experimental/deviceorientation/DeviceOrientationEventInit[JT] var absolute: js.UndefOr[Boolean]
experimental/deviceorientation/DeviceRotationRate[JT] val gamma: Double
experimental/domparser/DOMParser[JC] def parseFromString(string: String, supportedType: SupportedType): Document
experimental/domparser/SupportedType[JT]
experimental/gamepad/Gamepad[JT] val index: Double
experimental/gamepad/GamepadButton[JT] val pressed: Boolean
experimental/gamepad/GamepadEvent[SC] val gamepad: Gamepad
experimental/gamepad/GamepadEventInit[JT] var gamepad: js.UndefOr[Gamepad]
experimental/gamepad/GamepadMappingType[JT]
experimental/gamepad/GamepadNavigator[JT] def getGamepads(): js.Array[Gamepad]
experimental/gamepad/package[SO] final val `unknown` = "".asInstanceOf[GamepadMappingType]
experimental/intl/Collator[JC] def compare(string1: String, string2: String): Double
experimental/intl/CollatorOptions[JT] val numeric: js.UndefOr[Boolean]
experimental/intl/DateTimeFormat[JC] def supportedLocalesOf(locales: String | js.Array[String], options: js.Any): js.Array[String]
experimental/intl/DateTimeFormatOptions[SO] def apply(localeMatcher: js.UndefOr[String] = js.undefined, timeZone: js.UndefOr[String] = js.undefined, hour12: js.UndefOr[Boolean] = js.undefined, formatMatcher: js.UndefOr[String] = js.undefined, weekday: js.UndefOr[String] = js.undefined, era: js.UndefOr[String] = js.undefined, year: js.UndefOr[String] = js.undefined, month: js.UndefOr[String] = js.undefined, day: js.UndefOr[String] = js.undefined, hour: js.UndefOr[String] = js.undefined, minute: js.UndefOr[String] = js.undefined, second: js.UndefOr[String] = js.undefined, timeZoneName: js.UndefOr[String] = js.undefined): DateTimeFormatOptions
experimental/intl/NumberFormat[JC] def format(number: Double): String
experimental/intl/NumberFormatOptions[SO] def apply(localeMatcher: js.UndefOr[String] = js.undefined, style: js.UndefOr[String] = js.undefined, currency: js.UndefOr[String] = js.undefined, currencyDisplay: js.UndefOr[String] = js.undefined, useGrouping: js.UndefOr[Boolean] = js.undefined, minimumIntegerDigits: js.UndefOr[Double] = js.undefined, minimumFractionDigits: js.UndefOr[Double] = js.undefined, maximumFractionDigits: js.UndefOr[Double] = js.undefined, minimumSignificantDigits: js.UndefOr[Double] = js.undefined, maximumSignificantDigits: js.UndefOr[Double] = js.undefined): NumberFormatOptions
experimental/mediastream/MediaDeviceInfo[SO] def apply(deviceId: js.UndefOr[String] = js.undefined, groupId: js.UndefOr[String] = js.undefined, kind: js.UndefOr[String] = js.undefined, label: js.UndefOr[String] = js.undefined): MediaDeviceInfo
experimental/mediastream/MediaDeviceKind[SO] val videoinput = "videoinput".asInstanceOf[MediaDeviceKind]
experimental/mediastream/MediaDevices[JT] def getSupportedConstraints(): MediaTrackSupportedConstraints
experimental/mediastream/MediaStream[JC] def addTrack(track: MediaStreamTrack): Unit
experimental/mediastream/MediaStreamConstraints[JT] var video: Boolean | MediaTrackConstraints
experimental/mediastream/MediaStreamTrack[JT] def getConstraints(): MediaTrackConstraints
experimental/mediastream/MediaStreamTrackEvent[JC] val track: MediaStreamTrack
experimental/mediastream/MediaStreamTrackEventInit[JT] var track: js.UndefOr[MediaStreamTrack]
experimental/mediastream/MediaStreamTrackState[SO] val live = "live".asInstanceOf[MediaStreamTrackState]
experimental/mediastream/MediaTrackConstraintSet[SO] def apply(width: js.UndefOr[Double] = js.undefined, height: js.UndefOr[Double] = js.undefined, aspectRatio: js.UndefOr[Double] = js.undefined, frameRate: js.UndefOr[Double] = js.undefined, facingMode: js.UndefOr[String] = js.undefined, volume: js.UndefOr[Double] = js.undefined, sampleRate: js.UndefOr[Double] = js.undefined, sampleSize: js.UndefOr[Double] = js.undefined, echoCancellation: js.UndefOr[Boolean] = js.undefined, deviceId: js.UndefOr[String] = js.undefined, groupId: js.UndefOr[String] = js.undefined): MediaTrackConstraintSet
experimental/mediastream/MediaTrackConstraints[SO] def apply(advanced: js.UndefOr[js.Array[MediaTrackConstraintSet]] = js.undefined): MediaTrackConstraints
experimental/mediastream/MediaTrackSettings[JT] var height: js.UndefOr[Double]
experimental/mediastream/MediaTrackSupportedConstraints[JT] var deviceId: js.UndefOr[Boolean]
experimental/package[SO] type RequestInfo = String | Request
experimental/permissions/package[SO] val name: PermissionName
experimental/permissions/package.PermissionDescriptor[JT] val name: PermissionName
experimental/permissions/package.PermissionName[JT]
experimental/permissions/package.PermissionState[SO] val denied = "denied".asInstanceOf[PermissionState]
experimental/permissions/package.PermissionStatus[JT] var onchange: js.Function1[dom.Event, _]
experimental/permissions/package.Permissions[JT] def query( permissionDescriptor: PermissionDescriptor): js.Promise[PermissionStatus]
experimental/permissions/package.PermissionsNavigator[JT] val permissions: Permissions
experimental/permissions/package.PushPermissionDescriptor[JT] val userVisibleOnly: Boolean
experimental/push/PushEncryptionKeyName[SO] val auth = "auth".asInstanceOf[PushEncryptionKeyName]
experimental/push/PushEvent[ST] val data: PushMessageData
experimental/push/PushManager[JT] def permissionState(options: PushSubscriptionOptions?): js.Promise[PushPermissionState]
experimental/push/PushMessageData[JT] def blob(): Blob
experimental/push/PushPermissionState[SO] val prompt = "prompt".asInstanceOf[PushPermissionState]
experimental/push/PushSubscription[JT] def getKey(name: PushEncryptionKeyName): ArrayBuffer
experimental/push/PushSubscriptionJSON[JT] val keys: js.Dictionary[String]
experimental/push/PushSubscriptionOptions[JT] var userVisibleOnly: js.UndefOr[Boolean]
experimental/push/package[SO] implicit def pushServiceWorkerGlobalScope(swgs: ServiceWorkerGlobalScope): PushServiceWorkerGlobalScope
experimental/push/package.PushServiceWorkerGlobalScope[JT] var onpushsubscriptionchange: js.Function1[PushEvent, _]
experimental/push/package.PushServiceWorkerRegistration[JT] val pushManager: PushManager
experimental/serviceworkers/Cache[JC] def delete(request: RequestInfo, options: js.UndefOr[CacheQueryOptions]?): js.Promise[Boolean]
experimental/serviceworkers/CacheQueryOptions[JT] var ignoreSearch: Boolean
experimental/serviceworkers/CacheStorage[JT] def has(cacheName: String): js.Promise[Boolean]
experimental/serviceworkers/CanvasProxy[JT] def setContext(context: RenderingContext): Unit
experimental/serviceworkers/Client[JT] def id: String
experimental/serviceworkers/ClientQueryOptions[JT] var includeUncontrolled: Boolean
experimental/serviceworkers/ClientType[JT]
experimental/serviceworkers/Clients[JT] def openWindow(url: String): js.Promise[WindowClient]
experimental/serviceworkers/ExtendableEvent[SC] def waitUntil(promise: js.Promise[Any]): Unit
experimental/serviceworkers/ExtendableEventInit[JT] var bubbles: js.UndefOr[Boolean]
experimental/serviceworkers/ExtendableMessageEvent[SC] val data: Any
experimental/serviceworkers/ExtendableMessageEventInit[JT] var lastEventId: js.UndefOr[String]
experimental/serviceworkers/FetchEvent[SC] def clientId: String
experimental/serviceworkers/FetchEventInit[JT] var clientId: js.UndefOr[String]
experimental/serviceworkers/FrameType[JT]
experimental/serviceworkers/GetNotificationOptions[JT] var tag: js.UndefOr[String]
experimental/serviceworkers/ServiceWorker[ST] def postMessage(message: js.Any, transfer: js.Array[Transferable]?): Unit
experimental/serviceworkers/ServiceWorkerContainer[ST] var oncontrollerchange: js.Function1[Event, _]
experimental/serviceworkers/ServiceWorkerGlobalScope[JO] def self: ServiceWorkerGlobalScope
experimental/serviceworkers/ServiceWorkerMessageEventInit[JT] var lastEventId: js.UndefOr[String]
experimental/serviceworkers/ServiceWorkerRegistration[ST] var waiting: ServiceWorker
experimental/serviceworkers/ServiceWorkerState[SO] val redundant = "redundant".asInstanceOf[ServiceWorkerState]
experimental/serviceworkers/WindowClient[JT] def focused: Boolean
experimental/serviceworkers/package[SO] val serviceWorker: ServiceWorkerContainer
experimental/serviceworkers/package.ServiceWorkerNavigator[JT] val serviceWorker: ServiceWorkerContainer
experimental/sharedworkers/SharedWorker[JC] def port: MessagePort
experimental/sharedworkers/SharedWorkerGlobalScope[JO] def self: SharedWorkerGlobalScope
experimental/storage/package[SO] val quota: Double
experimental/storage/package.NavigatorStorage[JT] val storage: StorageManager
experimental/storage/package.StorageEstimate[JT] val quota: Double
experimental/storage/package.StorageManager[JT] def persisted(): js.Promise[Boolean]
experimental/webgl/ANGLE_instanced_arrays[SO]
experimental/webgl/EXT_blend_minmax[SO]
experimental/webgl/EXT_color_buffer_half_float[SO]
experimental/webgl/EXT_disjoint_timer_query[SO]
experimental/webgl/EXT_frag_depth[SO]
experimental/webgl/EXT_sRGB[SO]
experimental/webgl/EXT_shader_texture_lod[SO]
experimental/webgl/EXT_texture_filter_anisotropic[SO]
experimental/webgl/OES_element_index_uint[SO]
experimental/webgl/OES_standard_derivatives[SO]
experimental/webgl/OES_texture_float[SO]
experimental/webgl/OES_texture_float_linear[SO]
experimental/webgl/OES_texture_half_float[SO]
experimental/webgl/OES_texture_half_float_linear[SO]
experimental/webgl/OES_vertex_array_object[SO]
experimental/webgl/WEBGL_color_buffer_float[SO]
experimental/webgl/WEBGL_compressed_texture_atc[SO]
experimental/webgl/WEBGL_compressed_texture_etc1[SO]
experimental/webgl/WEBGL_compressed_texture_pvrtc[SO]
experimental/webgl/WEBGL_compressed_texture_s3tc[SO]
experimental/webgl/WEBGL_debug_renderer_info[SO]
experimental/webgl/WEBGL_debug_shaders[SO]
experimental/webgl/WEBGL_depth_texture[SO]
experimental/webgl/WEBGL_draw_buffers[SO]
experimental/webgl/WEBGL_lose_context[SO]
experimental/webgl/WebGLExtensionIdentifier[SC]
experimental/webgl/extensions/ANGLEInstancedArrays[JT] def drawArraysInstancedANGLE(mode: Int, first: Int, count: Int, primcount: Int): Unit
experimental/webgl/extensions/EXTBlendMinmax[JT] val MIN_EXT: Int
experimental/webgl/extensions/EXTColorBufferHalfFloat[JT] val UNSIGNED_NORMALIZED_EXT: Int
experimental/webgl/extensions/EXTDisjointTimerQuery[JT] def endQueryEXT(target: Int): Unit
experimental/webgl/extensions/EXTFragDepth[JT]
experimental/webgl/extensions/EXTShaderTextureLOD[JT]
experimental/webgl/extensions/EXTTextureFilterAnisotropic[JT] val TEXTURE_MAX_ANISOTROPY_EXT: Int
experimental/webgl/extensions/EXTsRGB[JT] val SRGB_EXT: Int
experimental/webgl/extensions/OESElementIndexUint[JT]
experimental/webgl/extensions/OESStandardDerivatives[JT] val FRAGMENT_SHADER_DERIVATIVE_HINT_OES: Int
experimental/webgl/extensions/OESTextureFloat[JT]
experimental/webgl/extensions/OESTextureFloatLinear[JT]
experimental/webgl/extensions/OESTextureHalfFloat[JT] val HALF_FLOAT_OES: Int
experimental/webgl/extensions/OESTextureHalfFloatLinear[JT]
experimental/webgl/extensions/OESVertexArrayObject[JT] def deleteVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES): Unit
experimental/webgl/extensions/WEBGLColorBufferFloat[JT] val UNSIGNED_NORMALIZED_EXT: Int
experimental/webgl/extensions/WEBGLCompressedTextureETC1[JT] val COMPRESSED_RGB_ETC1_WEBGL: Int
experimental/webgl/extensions/WEBGLDrawBuffers[JT] val DRAW_BUFFER4_WEBGL: Int
experimental/webgl/extensions/WebGLCompressedTextureATC[JT] val COMPRESSED_RGB_ATC_WEBGL: Int
experimental/webgl/extensions/WebGLCompressedTexturePVRTC[JT] val COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: Int
experimental/webgl/extensions/WebGLCompressedTextureS3TC[JT] val COMPRESSED_RGBA_S3TC_DXT1_EXT: Int
experimental/webgl/extensions/WebGLDebugRendererInfo[JT] val UNMASKED_RENDERER_WEBGL: Int
experimental/webgl/extensions/WebGLDebugShaders[JT] def getTranslatedShaderSource(shader: WebGLShader): String
experimental/webgl/extensions/WebGLDepthTexture[JT] val UNSIGNED_INT_24_8_WEBGL: Int
experimental/webgl/extensions/WebGLLoseContext[JT] def loseContext(): Unit
experimental/webgl/extensions/WebGLTimerQueryEXT[JT]
experimental/webgl/extensions/WebGLVertexArrayObjectOES[JT]
experimental/webgl/package[SO] def getExtension[T](id: WebGLExtensionIdentifier[T]): js.UndefOr[T]
experimental/webgl/package.WebGLRenderingContextOps[SC] def getExtension[T](id: WebGLExtensionIdentifier[T]): js.UndefOr[T]
experimental/webrtc/MediaStreamEventInit[JT] var stream: js.UndefOr[MediaStream]
experimental/webrtc/RTCBundlePolicy[SO] val `max-compat` = "max-compat".asInstanceOf[RTCBundlePolicy]
experimental/webrtc/RTCConfiguration[SO] def apply(iceServers: js.UndefOr[js.Array[RTCIceServer]] = js.undefined, iceTransportPolicy: js.UndefOr[RTCIceTransportPolicy] = js.undefined, bundlePolicy: js.UndefOr[RTCBundlePolicy] = js.undefined, peerIdentity: js.UndefOr[String] = js.undefined): RTCConfiguration
experimental/webrtc/RTCDTMFSender[JT] val track: MediaStreamTrack
experimental/webrtc/RTCDataChannel[JT] def bufferedAmount: Double
experimental/webrtc/RTCDataChannelEvent[JC] val channel: RTCDataChannel
experimental/webrtc/RTCDataChannelEventInit[JT] var channel: js.UndefOr[RTCDataChannel]
experimental/webrtc/RTCDataChannelInit[SO] def apply(ordered: js.UndefOr[Boolean] = js.undefined, maxPacketLifeTime: js.UndefOr[Double] = js.undefined, maxRetransmits: js.UndefOr[Double] = js.undefined, protocol: js.UndefOr[String] = js.undefined, negotiated: js.UndefOr[Boolean] = js.undefined, id: js.UndefOr[Double] = js.undefined): RTCDataChannelInit
experimental/webrtc/RTCDataChannelState[JT]
experimental/webrtc/RTCIceCandidate[JC] var candidate: String
experimental/webrtc/RTCIceCandidateInit[JT] var candidate: String
experimental/webrtc/RTCIceConnectionState[JT]
experimental/webrtc/RTCIceGatheringState[SO] val complete = "complete".asInstanceOf[RTCIceGatheringState]
experimental/webrtc/RTCIceServer[SO] def apply(urls: js.UndefOr[String | js.Array[String]] = js.undefined, username: js.UndefOr[String] = js.undefined, credential: js.UndefOr[String] = js.undefined): RTCIceServer
experimental/webrtc/RTCIceTransportPolicy[JT]
experimental/webrtc/RTCIdentityAssertion[SO] def apply(idp: js.UndefOr[String] = js.undefined, name: js.UndefOr[String] = js.undefined): RTCIdentityAssertion
experimental/webrtc/RTCOfferOptions[JT] var offerToReceiveAudio: Double
experimental/webrtc/RTCPeerConnection[JC] def remoteDescription: RTCSessionDescription
experimental/webrtc/RTCPeerConnectionIceEvent[JC] var candidate: RTCIceCandidate
experimental/webrtc/RTCPeerConnectionIceEventInit[JT] var candidate: js.UndefOr[RTCIceCandidate]
experimental/webrtc/RTCSdpType[SO] val offer = "offer".asInstanceOf[RTCSdpType]
experimental/webrtc/RTCSessionDescription[JC] var `type`: RTCSdpType
experimental/webrtc/RTCSessionDescriptionInit[JT] var `type`: RTCSdpType
experimental/webrtc/RTCSignalingState[JT]
experimental/webrtc/RTCStats[JT] var timestamp: Double
experimental/webrtc/RTCStatsReport[JT] def apply(id: String): RTCStats
experimental/webrtc/RTCStatsType[SO] val `inbound-rtp` = "inbound-rtp".asInstanceOf[RTCStatsType]
experimental/webrtc/package[SO] def mediaDevices: MediaDevices
experimental/webrtc/package.NavigatorMediaStream[JT] def mediaDevices: MediaDevices
ext/Ajax[SO] def post(url: String, data: InputData = null, timeout: Int = 0, headers: Map[String, String] = Map.empty, withCredentials: Boolean = false, responseType: String = "") = { apply("POST", url, data, timeout, headers, withCredentials, responseType) }
ext/Ajax.InputData[JT]
ext/AjaxException[SC] def isTimeout = xhr.status = = 0 && xhr.readyState = = 4
ext/Color[SO] val Yellow = Color(255, 255, 0)
ext/EasySeq[SC] def iterator = new Iterator[T] { var index = 0 def hasNext: scala.Boolean = index < jsLength def next() = { val res = jsApply(index) index + = 1 res } }
ext/Image[SO] def createBase64Svg(s: String) = { val img = dom.document.createElement("img").asInstanceOf[html.Image] img.src = "data:image/svg+xml;base64, " + s img }
ext/KeyCode[SO] final val T = 84
ext/KeyLocation[SO] final val Standard = KeyboardEvent.DOM_KEY_LOCATION_STANDARD
ext/KeyValue[SO] final val FavoriteClear1 = "FavoriteClear1"
ext/KeyValue.Application[SO] final val LaunchCalendar = "LaunchCalendar"
ext/KeyValue.Device[SO] final val Standby = "Standby"
ext/KeyValue.IME[SO] final val HanjaMode = "HanjaMode"
ext/KeyValue.MediaControl[SO] final val FavoriteClear1 = "FavoriteClear1"
ext/KeyValue.Multimedia[SO] final val Print = "Print"
ext/LocalStorage[SO] def clear(): Unit
ext/NamedNodeMapMap[SC] override def clear(): Unit
ext/SessionStorage[SO] def clear(): Unit
ext/Storage[SC] def clear(): Unit
ext/TouchEvents[JT] var ontouchstart: js.Function1[raw.TouchEvent, _]
ext/package[SO] def fillPath(points: (Double, Double)*) = { prepPath(points) ctx.fill() }
ext/package.Castable[SC] def cast[T] = x.asInstanceOf[T]
ext/package.PimpedHtmlCollection[SC] def iterator = new Iterator[T] { var index = 0 def hasNext: scala.Boolean = index < jsLength def next() = { val res = jsApply(index) index + = 1 res } }
ext/package.PimpedNodeList[SC] def iterator = new Iterator[T] { var index = 0 def hasNext: scala.Boolean = index < jsLength def next() = { val res = jsApply(index) index + = 1 res } }
ext/package.PimpedSVGTransformList[SC] def iterator = new Iterator[T] { var index = 0 def hasNext: scala.Boolean = index < jsLength def next() = { val res = jsApply(index) index + = 1 res } }
ext/package.PimpedTouchList[SC] def iterator = new Iterator[T] { var index = 0 def hasNext: scala.Boolean = index < jsLength def next() = { val res = jsApply(index) index + = 1 res } }
ext/package.pimpedContext[SC] def fillPath(points: (Double, Double)*) = { prepPath(points) ctx.fill() }
html[SO] type Anchor = raw.HTMLAnchorElement
idb[SO] def Cursor = raw.IDBCursor
package[SO] type NavigatorStorageUtils = raw.NavigatorStorageUtils
raw/AbstractWorker[JT] var onerror: js.Function1[ErrorEvent, _]
raw/AnalyserNode[JT] val frequencyBinCount: Int
raw/AnimationEvent[JT] def animationName: String
raw/ApplicationCache[JO] val UNCACHED: Int
raw/Attr[JC] var value: String
raw/AudioBuffer[JT] def copyToChannel(source: js.typedarray.Float32Array, channelNumber: Int, startInChannel: Int): Unit
raw/AudioBufferSourceNode[JT] def start(when: Double = 0.0d, offset: Double = 0.0d, duration: Double?): Unit
raw/AudioContext[JC] def createMediaStreamSource(stream: MediaStream): MediaStreamAudioSourceNode
raw/AudioDestinationNode[JT] var maxChannelCount: Int
raw/AudioListener[JT] var speedOfSound: Double
raw/AudioNode[JT] def connect(audioNode: AudioNode): Unit
raw/AudioParam[JT] def setValueCurveAtTime(values: js.typedarray.Float32Array, startTime: Double, duration: Double): Unit
raw/AudioTrack[JT] var language: String
raw/AudioTrackList[JT] def getTrackById(id: String): AudioTrack
raw/BeforeUnloadEvent[JC] var returnValue: String
raw/BiquadFilterNode[JT] val gain: AudioParam
raw/Blob[JO]
raw/BlobPropertyBag[SO] def apply(`type`: js.UndefOr[String] = js.undefined): BlobPropertyBag
raw/CDATASection[JC] def wholeText: String
raw/CSSFontFaceRule[JC] var style: CSSStyleDeclaration
raw/CSSImportRule[JC] var styleSheet: CSSStyleSheet
raw/CSSKeyframeRule[JC] var keyText: String
raw/CSSKeyframesRule[JC] def deleteRule(rule: String): Unit
raw/CSSMediaRule[JC] var media: MediaList
raw/CSSNamespaceRule[JC] var namespaceURI: String
raw/CSSPageRule[JC] var selector: String
raw/CSSRule[JO] var IMPORT_RULE: Int
raw/CSSRuleList[JC] def item(index: Int): T
raw/CSSStyleDeclaration[JC] var borderTopStyle: String
raw/CSSStyleRule[JC] var readOnly: Boolean
raw/CSSStyleSheet[JC] var ownerRule: CSSRule
raw/CanvasGradient[JC] def addColorStop(offset: Double, color: String): Unit
raw/CanvasPattern[JC]
raw/CanvasRenderingContext2D[JC] var fillStyle: js.Any
raw/ChannelMergerNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/ChannelSplitterNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/CharacterData[JC] def replaceData(offset: Int, count: Int, arg: String): Unit
raw/ClientRect[JC] var width: Double
raw/ClientRectList[JC] def item(index: Int): T
raw/Clipboard[JT] def read(): js.Promise[DataTransfer]
raw/ClipboardEvent[JC] def clipboardData: DataTransfer
raw/ClipboardEventInit[JT] var data: js.UndefOr[String]
raw/CloseEvent[JT] def wasClean: Boolean
raw/Comment[JC] var text: String
raw/CompositionEvent[JC] def locale: String
raw/CompositionEventInit[JT] var data: js.UndefOr[String]
raw/Console[JT] def dirxml(value: Any): Unit
raw/ConvolverNode[JT] var buffer: AudioBuffer
raw/Coordinates[JT] def latitude: Double
raw/CustomEvent[JC] def detail: Any
raw/CustomEventInit[JT] var detail: js.UndefOr[Any]
raw/DOMException[JO] val URL_MISMATCH_ERR: Int
raw/DOMImplementation[JC] def createHTMLDocument(title: String): Document
raw/DOMList[JT] def item(index: Int): T
raw/DOMParser[JC] def parseFromString(source: String, mimeType: String): Document
raw/DOMSettableTokenList[JT] def value: String
raw/DOMStringList[JT] def contains(str: String): Boolean
raw/DOMTokenList[JT] def remove(token: String): Unit
raw/DataTransfer[JT] var effectAllowed: String
raw/DedicatedWorkerGlobalScope[JO] def self: DedicatedWorkerGlobalScope
raw/DelayNode[JT] val delayTime: AudioParam
raw/Document[JC] def createComment(data: String): Comment
raw/DocumentEvent[JT] def createEvent(eventInterface: String): Event
raw/DocumentFragment[JC] def nextSibling: Node
raw/DocumentType[JC] def name: String
raw/DragEffect[SO] final val Move = "move"
raw/DragEvent[JT] def dataTransfer: DataTransfer
raw/DynamicsCompressorNode[JT] val reduction: AudioParam
raw/Element[JC] def getAttributeNS(namespaceURI: String, localName: String): String
raw/ErrorEvent[JT] def filename: String
raw/Event[JO] def BUBBLING_PHASE: Int
raw/EventException[JO] val UNSPECIFIED_EVENT_TYPE_ERR: Int
raw/EventInit[JT] var bubbles: js.UndefOr[Boolean]
raw/EventListenerOptions[JT] var passive: js.UndefOr[Boolean]
raw/EventSource[JO] val CLOSED: Int
raw/EventTarget[JC] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/External[JT]
raw/File[JC] def name: String
raw/FileList[JT] def item(index: Int): T
raw/FileReader[JC] var onload: js.Function1[UIEvent, _]
raw/FocusEvent[JC] def relatedTarget: EventTarget
raw/FocusEventInit[JT] val relatedTarget: js.UndefOr[EventTarget]
raw/FormData[JO]
raw/FullscreenOptions[JT] var navigationUI: js.UndefOr[String]
raw/GainNode[JT] val gain: AudioParam
raw/Geolocation[JT] def getCurrentPosition(successCallback: js.Function1[Position, _], errorCallback: js.Function1[PositionError, _], options: PositionOptions?): Unit
raw/GetSVGDocument[JT] def getSVGDocument(): Document
raw/HTMLAnchorElement[JC] var hreflang: String
raw/HTMLAreaElement[JC] var pathname: String
raw/HTMLAudioElement[JC] def initialTime: Double
raw/HTMLBRElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLBaseElement[JC] var target: String
raw/HTMLBodyElement[JC] var onload: js.Function1[Event, _]
raw/HTMLButtonElement[JC] def setCustomValidity(error: String): Unit
raw/HTMLCanvasElement[JC] def toDataURL(`type`: String, args: js.Any*): String
raw/HTMLCollection[JC] def namedItem(name: String): Element
raw/HTMLDListElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLDataListElement[JC] def options: HTMLCollection
raw/HTMLDivElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLDocument[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLEmbedElement[JC] var width: String
raw/HTMLFieldSetElement[JC] def validity: ValidityState
raw/HTMLFormElement[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(name: String): js.Any
raw/HTMLHRElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLHeadElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLHeadingElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLHtmlElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLIFrameElement[JC] var width: String
raw/HTMLImageElement[JC] var naturalHeight: Int
raw/HTMLInputElement[JC] var pattern: String
raw/HTMLLIElement[JC] var value: Int
raw/HTMLLabelElement[JC] var htmlFor: String
raw/HTMLLegendElement[JC] var align: String
raw/HTMLLinkElement[JC] var hreflang: String
raw/HTMLMapElement[JC] var name: String
raw/HTMLMediaElement[JO] val HAVE_ENOUGH_DATA: Int
raw/HTMLMenuElement[JC] var `type`: String
raw/HTMLMetaElement[JC] var content: String
raw/HTMLModElement[JC] var dateTime: String
raw/HTMLOListElement[JC] var start: Int
raw/HTMLObjectElement[JC] var BaseHref: String
raw/HTMLOptGroupElement[JC] var label: String
raw/HTMLOptionElement[JC] var label: String
raw/HTMLParagraphElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLParamElement[JC] var name: String
raw/HTMLPreElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLProgressElement[JC] var value: Double
raw/HTMLQuoteElement[JC] var dateTime: String
raw/HTMLScriptElement[JC] var onload: js.Function1[Event, _]
raw/HTMLSelectElement[JC] @scala.scalajs.js.annotation.JSBracketAccess def apply(name: String): js.Any
raw/HTMLSourceElement[JC] var `type`: String
raw/HTMLSpanElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLStyleElement[JC] var `type`: String
raw/HTMLTableAlignment[JT]
raw/HTMLTableCaptionElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLTableCellElement[JC] var colSpan: Int
raw/HTMLTableColElement[JC] var span: Int
raw/HTMLTableElement[JC] def rows: HTMLCollection
raw/HTMLTableRowElement[JC] def rowIndex: Int
raw/HTMLTableSectionElement[JC] def rows: HTMLCollection
raw/HTMLTextAreaElement[JC] def setCustomValidity(error: String): Unit
raw/HTMLTitleElement[JC] var text: String
raw/HTMLTrackElement[JC] var label: String
raw/HTMLUListElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLUnknownElement[JC] var onfocusout: js.Function1[FocusEvent, _]
raw/HTMLVideoElement[JC] def videoHeight: Int
raw/HashChangeEvent[JT] def newURL: String
raw/History[JC] def go(): Unit
raw/IDBCursor[JO] val PREV_NO_DUPLICATE: String
raw/IDBCursorWithValue[JC] def value: js.Any
raw/IDBDatabase[JC] def objectStoreNames: DOMStringList
raw/IDBEnvironment[JT] def indexedDB: IDBFactory
raw/IDBFactory[JC] def cmp(first: js.Any, second: js.Any): Int
raw/IDBIndex[JC] def get(key: js.Any): IDBRequest
raw/IDBKeyRange[JO] def upperBound(bound: js.Any, open: Boolean?): IDBKeyRange
raw/IDBObjectStore[JC] def get(key: js.Any): IDBRequest
raw/IDBOpenDBRequest[JC] var onupgradeneeded: js.Function1[IDBVersionChangeEvent, _]
raw/IDBRequest[JC] def source: js.Any
raw/IDBTransaction[JO] val VERSION_CHANGE: String
raw/IDBVersionChangeEvent[JC] def newVersion: Int
raw/IDBVersionChangeEventInit[JT] var newVersion: js.UndefOr[Int]
raw/ImageData[JC] def data: js.Array[Int]
raw/KeyboardEvent[JO] def DOM_KEY_LOCATION_LEFT: Int
raw/KeyboardEventInit[JT] var key: js.UndefOr[String]
raw/LinkStyle[JT] def sheet: StyleSheet
raw/Location[JT] def assign(url: String): Unit
raw/MediaElementAudioSourceNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/MediaError[JO] val MEDIA_ERR_DECODE: Int
raw/MediaList[JC] def deleteMedium(oldMedium: String): Unit
raw/MediaQueryList[JT] def matches: Boolean
raw/MediaQueryListListener[JT] def apply(mql: MediaQueryList): Unit
raw/MediaStreamAudioDestinationNode[JT] var stream: MediaStream
raw/MediaStreamAudioSourceNode[JT] def addEventListener[T <: Event](`type`: String, listener: js.Function1[T, _], options: EventListenerOptions): Unit
raw/MessageChannel[JC] def port1: MessagePort
raw/MessageEvent[JC] def ports: js.Any
raw/MessageEventInit[JT] var source: js.UndefOr[Window]
raw/MessagePort[JT] def start(): Unit
raw/ModifierKeyEvent[JT] def altKey: Boolean
raw/ModifierKeyEventInit[JT] var metaKey: js.UndefOr[Boolean]
raw/MouseEvent[JC] def relatedTarget: EventTarget
raw/MouseEventInit[JT] var screenY: js.UndefOr[Double]
raw/MutationObserver[JC] def observe(target: Node, options: MutationObserverInit): Unit
raw/MutationObserverInit[SO] def apply(childList: Boolean = false, attributes: Boolean = false, characterData: Boolean = false, subtree: Boolean = false, attributeOldValue: Boolean = false, characterDataOldValue: Boolean = false, attributeFilter: js.UndefOr[js.Array[String]] = js.undefined): MutationObserverInit
raw/MutationRecord[JT] def nextSibling: Node
raw/NamedNodeMap[JC] def removeNamedItemNS(namespaceURI: String, localName: String): Attr
raw/Navigator[JC] def clipboard: Clipboard
raw/NavigatorContentUtils[JT]
raw/NavigatorGeolocation[JT] def geolocation: Geolocation
raw/NavigatorID[JT] def userAgent: String
raw/NavigatorLanguage[JT] def language: String
raw/NavigatorOnLine[JT] def onLine: Boolean
raw/NavigatorStorageUtils[JT]
raw/Node[JC] def nextSibling: Node
raw/NodeFilter[JO] val FILTER_ACCEPT: Int
raw/NodeIterator[JC] def detach(): Unit
raw/NodeList[JC] def item(index: Int): T
raw/NodeListOf[JT] def item(index: Int): T
raw/NodeSelector[JT] def querySelectorAll(selectors: String): NodeList
raw/NonDocumentTypeChildNode[JT] def previousElementSibling: Element
raw/OfflineAudioCompletionEvent[JT] val renderedBuffer: AudioBuffer
raw/OfflineAudioContext[JC] def startRendering(): js.Promise[AudioBuffer]
raw/OscillatorNode[JT] def start(when: Double = 0.0d): Unit
raw/PageTransitionEvent[JT] def persisted: Boolean
raw/PageVisibility[JT] def visibilityState: VisibilityState | String
raw/PannerNode[JT] var coneOuterGain: Double
raw/ParentNode[JT] def firstElementChild: Element
raw/Performance[JC] def toJSON(): js.Dynamic
raw/PerformanceEntry[JC] def name: String
raw/PerformanceMark[JC] def name: String
raw/PerformanceMeasure[JC] def name: String
raw/PerformanceNavigation[JO] val TYPE_BACK_FORWARD: Int
raw/PerformanceResourceTiming[JC] def requestStart: Int
raw/PerformanceTiming[JC] def loadEventEnd: Double
raw/PeriodicWave[JT]
raw/PointerEvent[JC] def pointerType: String
raw/PointerEventInit[JT] var height: js.UndefOr[Double]
raw/PopStateEvent[JT] def state: js.Any
raw/Position[JT] def timestamp: Double
raw/PositionError[JO] val TIMEOUT: Int
raw/PositionOptions[JC] var timeout: Int
raw/ProcessingInstruction[JC] def data: String
raw/ProgressEvent[JT] def total: Double
raw/Range[JO] val START_TO_START: Int
raw/SVGAElement[JC] def target: SVGAnimatedString
raw/SVGAngle[JC] def convertToSpecifiedUnits(unitType: Int): Unit
raw/SVGAnimatedAngle[JC] var baseVal: SVGAngle
raw/SVGAnimatedBoolean[JC] var baseVal: Boolean
raw/SVGAnimatedEnumeration[JC] var baseVal: Int
raw/SVGAnimatedInteger[JC] var baseVal: Int
raw/SVGAnimatedLength[JC] var baseVal: SVGLength
raw/SVGAnimatedLengthList[JC] var baseVal: SVGLengthList
raw/SVGAnimatedNumber[JC] def animVal: Double
raw/SVGAnimatedNumberList[JC] def baseVal: SVGNumberList
raw/SVGAnimatedPathData[JT] var pathSegList: SVGPathSegList
raw/SVGAnimatedPoints[JT] var points: SVGPointList
raw/SVGAnimatedPreserveAspectRatio[JC] var baseVal: SVGPreserveAspectRatio
raw/SVGAnimatedRect[JC] def animVal: SVGRect
raw/SVGAnimatedString[JC] var baseVal: String
raw/SVGAnimatedTransformList[JC] def animVal: SVGTransformList
raw/SVGCircleElement[JC] def cx: SVGAnimatedLength
raw/SVGClipPathElement[JC] def clipPathUnits: SVGAnimatedEnumeration
raw/SVGComponentTransferFunctionElement[JO] val SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: Int
raw/SVGDefsElement[JC] var requiredExtensions: SVGStringList
raw/SVGDescElement[JC] def viewportElement: SVGElement
raw/SVGElement[JC] def viewportElement: SVGElement
raw/SVGElementInstance[JC] def childNodes: SVGElementInstanceList
raw/SVGElementInstanceList[JC] def item(index: Int): SVGElementInstance
raw/SVGEllipseElement[JC] def cx: SVGAnimatedLength
raw/SVGException[JO] val SVG_WRONG_TYPE_ERR: Int
raw/SVGExternalResourcesRequired[JT] var externalResourcesRequired: SVGAnimatedBoolean
raw/SVGFEBlendElement[JC] def mode: SVGAnimatedEnumeration
raw/SVGFEColorMatrixElement[JO] val SVG_FECOLORMATRIX_TYPE_MATRIX: Int
raw/SVGFEComponentTransferElement[JC] def in1: SVGAnimatedString
raw/SVGFECompositeElement[JO] val SVG_FECOMPOSITE_OPERATOR_UNKNOWN: Int
raw/SVGFEConvolveMatrixElement[JO] val SVG_EDGEMODE_WRAP: Int
raw/SVGFEDiffuseLightingElement[JC] def kernelUnitLengthX: SVGAnimatedNumber
raw/SVGFEDisplacementMapElement[JO] val SVG_CHANNEL_G: Int
raw/SVGFEDistantLightElement[JC] def elevation: SVGAnimatedNumber
raw/SVGFEFloodElement[JC] def viewportElement: SVGElement
raw/SVGFEFuncAElement[JC] def `type`: SVGAnimatedEnumeration
raw/SVGFEFuncBElement[JC] def `type`: SVGAnimatedEnumeration
raw/SVGFEFuncGElement[JC] def `type`: SVGAnimatedEnumeration
raw/SVGFEFuncRElement[JC] def `type`: SVGAnimatedEnumeration
raw/SVGFEGaussianBlurElement[JC] def stdDeviationX: SVGAnimatedNumber
raw/SVGFEImageElement[JC] def preserveAspectRatio: SVGAnimatedPreserveAspectRatio
raw/SVGFEMergeElement[JC] def viewportElement: SVGElement
raw/SVGFEMergeNodeElement[JC] def in1: SVGAnimatedString
raw/SVGFEMorphologyElement[JO] val SVG_MORPHOLOGY_OPERATOR_ERODE: Int
raw/SVGFEOffsetElement[JC] def dx: SVGAnimatedNumber
raw/SVGFEPointLightElement[JC] def z: SVGAnimatedNumber
raw/SVGFESpecularLightingElement[JC] def kernelUnitLengthX: SVGAnimatedNumber
raw/SVGFESpotLightElement[JC] def pointsAtX: SVGAnimatedNumber
raw/SVGFETileElement[JC] def in1: SVGAnimatedString
raw/SVGFETurbulenceElement[JC] def `type`: SVGAnimatedEnumeration
raw/SVGFilterElement[JC] def primitiveUnits: SVGAnimatedEnumeration
raw/SVGFilterPrimitiveStandardAttributes[JT] def result: SVGAnimatedString
raw/SVGFitToViewBox[JT] var viewBox: SVGAnimatedRect
raw/SVGGElement[JC] var requiredExtensions: SVGStringList
raw/SVGGradientElement[JO] val SVG_SPREADMETHOD_PAD: Int
raw/SVGImageElement[JC] def preserveAspectRatio: SVGAnimatedPreserveAspectRatio
raw/SVGLangSpace[JT] var xmllang: String
raw/SVGLength[JC] def convertToSpecifiedUnits(unitType: Int): Unit
raw/SVGLengthList[JC] def clear(): Unit
raw/SVGLineElement[JC] def y2: SVGAnimatedLength
raw/SVGLinearGradientElement[JC] def y2: SVGAnimatedLength
raw/SVGLocatable[JT] var nearestViewportElement: SVGElement
raw/SVGMarkerElement[JO] val SVG_MARKERUNITS_STROKEWIDTH: Int
raw/SVGMaskElement[JC] def x: SVGAnimatedLength
raw/SVGMatrix[JC] def skewX(angle: Double): SVGMatrix
raw/SVGMetadataElement[JC] def viewportElement: SVGElement
raw/SVGNumber[JC] var value: Double
raw/SVGNumberList[JC] def clear(): Unit
raw/SVGPathElement[JC] def createSVGPathSegCurvetoQuadraticSmoothAbs(x: Double, y: Double): SVGPathSegCurvetoQuadraticSmoothAbs
raw/SVGPathSeg[JO] val PATHSEG_CLOSEPATH: Int
raw/SVGPathSegArcAbs[JC] var y: Double
raw/SVGPathSegArcRel[JC] var y: Double
raw/SVGPathSegClosePath[JC] def pathSegTypeAsLetter: String
raw/SVGPathSegCurvetoCubicAbs[JC] var y: Double
raw/SVGPathSegCurvetoCubicRel[JC] var y: Double
raw/SVGPathSegCurvetoCubicSmoothAbs[JC] var y: Double
raw/SVGPathSegCurvetoCubicSmoothRel[JC] var y: Double
raw/SVGPathSegCurvetoQuadraticAbs[JC] var y: Double
raw/SVGPathSegCurvetoQuadraticRel[JC] var y: Double
raw/SVGPathSegCurvetoQuadraticSmoothAbs[JC] var y: Double
raw/SVGPathSegCurvetoQuadraticSmoothRel[JC] var y: Double
raw/SVGPathSegLinetoAbs[JC] var y: Double
raw/SVGPathSegLinetoHorizontalAbs[JC] var x: Double
raw/SVGPathSegLinetoHorizontalRel[JC] var x: Double
raw/SVGPathSegLinetoRel[JC] var y: Double
raw/SVGPathSegLinetoVerticalAbs[JC] var y: Double
raw/SVGPathSegLinetoVerticalRel[JC] var y: Double
raw/SVGPathSegList[JC] def clear(): Unit
raw/SVGPathSegMovetoAbs[JC] var y: Double
raw/SVGPathSegMovetoRel[JC] var y: Double
raw/SVGPatternElement[JC] def patternContentUnits: SVGAnimatedEnumeration
raw/SVGPoint[JC] var y: Double
raw/SVGPointList[JC] def clear(): Unit
raw/SVGPolygonElement[JC] var requiredExtensions: SVGStringList
raw/SVGPolylineElement[JC] var requiredExtensions: SVGStringList
raw/SVGPreserveAspectRatio[JC] var meetOrSlice: Int
raw/SVGRadialGradientElement[JC] def cx: SVGAnimatedLength
raw/SVGRect[JC] var width: Double
raw/SVGRectElement[JC] def rx: SVGAnimatedLength
raw/SVGSVGElement[JC] def checkEnclosure(element: SVGElement, rect: SVGRect): Boolean
raw/SVGScriptElement[JC] def `type`: String
raw/SVGStopElement[JC] var offset: SVGAnimatedNumber
raw/SVGStringList[JC] def clear(): Unit
raw/SVGStylable[JT] var className: SVGAnimatedString
raw/SVGStyleElement[JC] var title: String
raw/SVGSwitchElement[JC] var requiredExtensions: SVGStringList
raw/SVGSymbolElement[JC] var className: SVGAnimatedString
raw/SVGTSpanElement[JC] def dx: SVGAnimatedLengthList
raw/SVGTests[JT] var requiredExtensions: SVGStringList
raw/SVGTextContentElement[JO] val LENGTHADJUST_SPACING: Int
raw/SVGTextElement[JC] def dx: SVGAnimatedLengthList
raw/SVGTextPathElement[JC] def spacing: SVGAnimatedEnumeration
raw/SVGTextPositioningElement[JC] def dx: SVGAnimatedLengthList
raw/SVGTitleElement[JC] def viewportElement: SVGElement
raw/SVGTransform[JO] val SVG_TRANSFORM_MATRIX: Int
raw/SVGTransformList[JC] def createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform
raw/SVGTransformable[JT] var transform: SVGAnimatedTransformList
raw/SVGURIReference[JT] var href: SVGAnimatedString
raw/SVGUnitTypes[JT] val SVG_UNIT_TYPE_UNKNOWN: Int
raw/SVGUseElement[JC] def instanceRoot: SVGElementInstance
raw/SVGViewElement[JC] def viewTarget: SVGStringList
raw/SVGZoomAndPan[JO] val SVG_ZOOMANDPAN_UNKNOWN: Int
raw/SVGZoomEventInit[JT] var newScale: js.UndefOr[Double]
raw/Screen[JC] def availWidth: Double
raw/Selection[JC] def getRangeAt(index: Int): Range
raw/StereoPannerNode[JT] val pan: AudioParam
raw/Storage[JC] def clear(): Unit
raw/StorageEvent[JC] def newValue: String
raw/StorageEventInit[JT] var storageArea: js.UndefOr[Storage]
raw/StyleMedia[JT] def matchMedium(mediaquery: String): Boolean
raw/StyleSheet[JC] def media: MediaList
raw/StyleSheetList[JC] @scala.scalajs.js.annotation.JSBracketAccess def update(index: Int, v: StyleSheet): Unit
raw/Text[JC] def wholeText: String
raw/TextEvent[JO] val DOM_INPUT_METHOD_KEYBOARD: Int
raw/TextEventInit[JT] var data: js.UndefOr[String]
raw/TextMetrics[JC] var width: Double
raw/TextTrack[JO] var LOADING: Int
raw/TextTrackCue[JT] def getCueAsHTML(): DocumentFragment
raw/TextTrackCueList[JT] def getCueById(id: String): TextTrackCue
raw/TextTrackList[JT] def item(index: Int): T
raw/TimeRanges[JC] def start(index: Int): Double
raw/Touch[JC] def target: EventTarget
raw/TouchEvent[JC] def changedTouches: TouchList
raw/TouchEventInit[JT] var targetTouches: js.UndefOr[TouchList]
raw/TouchList[JC] def item(index: Int): T
raw/TrackEvent[JT] var track: js.Any
raw/TransitionEvent[JT] def propertyName: String
raw/TreeWalker[JC] def parentNode(): Node
raw/UIEvent[JC] def view: Window
raw/UIEventInit[JT] val view: js.UndefOr[Window]
raw/URL[JO] def createObjectURL(blob: Blob): String
raw/ValidityState[JT] def rangeOverflow: Boolean
raw/VisibilityState[SO] val visible = "visible".asInstanceOf[VisibilityState]
raw/WaveShaperNode[JT] var curve: js.typedarray.Float32Array
raw/WebGLActiveInfo[JC] val name: String
raw/WebGLBuffer[JC]
raw/WebGLContextAttributes[JC] var alpha: Boolean
raw/WebGLFramebuffer[JC]
raw/WebGLProgram[JC]
raw/WebGLRenderbuffer[JC]
raw/WebGLRenderingContext[JC] def copyTexImage2D(target: Int, level: Int, internalformat: Int, x: Int, y: Int, width: Int, height: Int, border: Int): Unit
raw/WebGLShader[JC]
raw/WebGLShaderPrecisionFormat[JC] val precision: Int
raw/WebGLTexture[JC]
raw/WebGLUniformLocation[JC]
raw/WebSocket[JC] def close(code: Int?, reason: String?): Unit
raw/WheelEvent[JO] val DOM_DELTA_LINE: Int
raw/WheelEventInit[JT] var deltaY: js.UndefOr[Double]
raw/Window[JC] var oninput: js.Function1[Event, _]
raw/WindowBase64[JT] def atob(encodedString: String): String
raw/WindowConsole[JT] var console: Console
raw/WindowLocalStorage[JT] def localStorage: Storage
raw/WindowSessionStorage[JT] def sessionStorage: Storage
raw/WindowTimers[JT] def clearInterval(handle: Int): Unit
raw/Worker[JC] var onmessage: js.Function1[MessageEvent, _]
raw/WorkerGlobalScope[JT] def location: WorkerLocation
raw/WorkerLocation[JT] def href: String
raw/WorkerNavigator[JT] def userAgent: String
raw/XMLHttpRequest[JO] var HEADERS_RECEIVED: Int
raw/XMLHttpRequestEventTarget[JT] var onload: js.Function1[js.Any, _]
raw/XMLSerializer[JC] def serializeToString(target: Node): String
raw/XPathNSResolver[JC] def lookupNamespaceURI(prefix: String): String
raw/XPathResult[JO] val NUMBER_TYPE: Int
raw/package[SO] type Transferable = ArrayBuffer | MessagePort
svg[SO] type NumberList = raw.SVGNumberList
webgl[SO] type ActiveInfo = raw.WebGLActiveInfo
webworkers[SO] type AbstractWorker = raw.AbstractWorker
webworkers.DedicatedWorkerGlobalScope[JO] def self: DedicatedWorkerGlobalScope
