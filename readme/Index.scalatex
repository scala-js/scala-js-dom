@import ammonite.ops._
@import Main._
@a(
  href:="https://github.com/scala-js/scala-js-dom",
  position.absolute,
  top:=0,right:=0,border:=0,
  img(
    src:="https://camo.githubusercontent.com/a6677b08c955af8400f44c6298f40e7d19cc5b2d/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677261795f3664366436642e706e67",
    alt:="Fork me on GitHub"
  )
)
@def pair(example: String,
          frags: Seq[scalatags.Text.TypedTag[String]],
          autorun: Boolean = false) = {
  val ids = (0 until frags.length).map(_ => util.Random.nextInt(999999))
  val queries = ids.map(id => s"document.getElementById('$id')").mkString(", ")
  div(
    div(width:="50%", float.left)(
      hl.ref(
        pwd/'example/'src/'main/'scala/'example/"Example.scala",
        Seq(s"object $example", "main")
      )
    ),
    div(width:="50%", float.left, padding:="8px", boxSizing.`border-box`)(
      if (!autorun)
        a(cls:="pure-button", onclick:=s"Example$example.main($queries)", "Run"),
      div(
        frags.zip(ids).map{case (f, i) => f(id:=i, backgroundColor:="#fafafa")}
      ),
      if (autorun)
        script(s"Example$example.main($queries)")
    ),
    div(clear.both)
  )
}

@scalatags.Text.tags2.style
  pre{
    margin: 0px;

  }

@sect{scala-js-dom}

  @p
    Scala-js-dom provides a nice statically typed interface to the DOM such that it can be called from Scala code without resorting to @hl.scala{js.Dynamic}. All javascript globals functions, singletons and classes are members of the @hl.scala{org.scalajs.dom}, @hl.scala{org.scalajs.dom.html}, @hl.scala{org.scalajs.dom.svg}, etc. packages. For example:

  @pair("Alert", Nil)

  @p
    Will cause a javascript alert box saying `Hi from Scala-js-dom` to appear. Other javascript classes and objects can be similarly accessed e.g. @hl.scala{new dom.XMLHttpRequest()} to perform a new Ajax request, @hl.scala{dom.document} to access the global @hl.scala{document} object, or @hl.scala{html.Div} to to refer to the type of a @hl.scala{<div>} element.

  @sect{Usage}
    @p
      Add the following to your sbt build definition:

    @hl.scala
      libraryDependencies += "org.scala-js" %%% "scalajs-dom" % "1.1.0"

    @p
      then enjoy the types available in @hl.scala{org.scalajs.dom}. scalajs-dom 1.1.0 is built and published for Scala.js 0.6.17+ and Scala.js 1.0.0+, with Scala 2.10, 2.11, 2.12 and 2.13.

    @p
      To begin with, @code{scala-js-dom} organizes the full-list of DOM APIs into a number of buckets:

    @ul
      @li
        @code{dom.html}: HTML element APIs
      @li
        @code{dom.svg}: SVG element APIs
      @li
        @code{dom.idb}: IndexedDB APIs
      @li
        @code{dom.css}: CSS APIs
      @li
        @code{dom}: Miscellanious, unclassified APIs

    @p
      Most names have been shortened from names of the @a("raw browser APIs", href:="https://developer.mozilla.org/en-US/docs/Web/API"), since the namespacing avoids collisions. By convention these types are imported qualified: e.g. as @hl.scala{html.Canvas} instead of directly as @hl.scala{Canvas}. There is also the @code{dom.raw} namespace which contains everything with their full, un-shortened name.

    @p
      Here are some examples to get you started:

    @sect{Node.appendChild}
      @pair(
        "NodeAppendChild",
        Seq(div("div"))
      )

    @sect{Node.onmousemove}
      @pair(
       "EventHandler",
        Seq(pre("Hover this box!")),
        autorun=true
      )

    @sect{dom.btoa}
      @pair(
        "Base64",
        Seq(input(width:="100%", placeholder:="Enter text to b64 encode"), div),
        autorun=true
      )

    @sect{dom.localStorage}
      @pair(
        "LocalStorage",
        Seq(input(width:="100%"), div),
        autorun=true
      )

    @sect{dom.HTMLCanvasElement}
      @pair(
        "Canvas",
        Seq(canvas),
        autorun=true
      )

    @sect{dom.Fetch}
      @pair(
        "Fetch",
        Seq(
          pre("output")
        )
      )

    @sect{dom.Websocket}
      @pair(
        "Websocket",
        Seq(
          input(placeholder:="Type something in"),
          pre("output")
        ),
        autorun=true
      )

    @sect{Element.style}
      @pair(
        "ElementStyle",
        Seq(div(b("div"), height:="50px"))
      )

  @p
    The goal of this project is to provide a thin-but-idiomatic-scala interface to modern browser APIs. In particular:
  @ul
    @li
      Deprecated properties/methods/types will not be present.
    @li
      IE-only, Chrome-only, FF-only, and in general browser-specific attributes will typically not be present.
    @li
      The name of a Scala type should map directly to the name of the corresponding Javascript type.
    @li
      Any type which is a Javascript type (e.g. you can @hl.scala{instanceof} in javascript) should be a Scala @hl.scala{class}; any other interface which isn't a Javascript type should be a @hl.scala{trait}.
    @li
      Read-only members should be @hl.scala{def}, and not-directly-instantiable classes should have @hl.scala{private} constructors.

  @sect{Contributing}
    @p
      The DOM API is always evolving, and scala-js-dom is a hodgepodge of auto-generated/scraped/hand-tweaked code full of rough edges. If you see something that you think can be improved, feel free to send a pull request. These could include:
    @ul
      @li
        Improved doc-comments; who doesn't love better docs?
      @li
        Missing methods/properties/classes; send the PR adding it in including it together with a link to an authoritative source (e.g. MDN) and it should get merged.
